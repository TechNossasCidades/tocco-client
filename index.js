(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("React"), require("ReactDOM"));
	else if(typeof define === 'function' && define.amd)
		define(["React", "ReactDOM"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("React"), require("ReactDOM")) : factory(root["React"], root["ReactDOM"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(3);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _ShowCaseApp = __webpack_require__(4);
	
	var _ShowCaseApp2 = _interopRequireDefault(_ShowCaseApp);
	
	__webpack_require__(465);
	
	var _uiComponentsTree = __webpack_require__(467);
	
	var _uiComponentsTree2 = _interopRequireDefault(_uiComponentsTree);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var init = function init() {
	  return function () {
	    return _react2.default.createElement(_ShowCaseApp2.default, { componentsTree: _uiComponentsTree2.default });
	  };
	};
	
	var mountElement = document.getElementById('root');
	
	var render = function render() {
	  var element = _react2.default.createElement(init());
	  _reactDom2.default.render(element, mountElement);
	};
	
	if (false) {
	  if (module.hot) {
	    (function () {
	      var renderApp = render;
	      var renderError = function renderError(error) {
	        var RedBox = require('redbox-react');
	
	        _reactDom2.default.render(_react2.default.createElement(RedBox, { error: error }), mountElement);
	      };
	      render = function render() {
	        try {
	          renderApp();
	        } catch (error) {
	          renderError(error);
	        }
	      };
	    })();
	  }
	  render();
	  module.hot.accept();
	}
	
	if (true) {
	  render();
	}

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(5);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(31);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(32);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(36);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(83);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Navigation = __webpack_require__(91);
	
	var _Navigation2 = _interopRequireDefault(_Navigation);
	
	var _ShowCaseList = __webpack_require__(93);
	
	var _ShowCaseList2 = _interopRequireDefault(_ShowCaseList);
	
	var _Affix = __webpack_require__(463);
	
	var _Affix2 = _interopRequireDefault(_Affix);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ShowCaseApp = function (_React$Component) {
	  (0, _inherits3.default)(ShowCaseApp, _React$Component);
	
	  function ShowCaseApp() {
	    (0, _classCallCheck3.default)(this, ShowCaseApp);
	    return (0, _possibleConstructorReturn3.default)(this, (ShowCaseApp.__proto__ || (0, _getPrototypeOf2.default)(ShowCaseApp)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(ShowCaseApp, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'show-case-app' },
	        _react2.default.createElement(
	          'div',
	          { className: 'col title' },
	          _react2.default.createElement(
	            'span',
	            null,
	            'Tocco UI'
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'col-md-9' },
	          _react2.default.createElement(_ShowCaseList2.default, { componentsTree: this.props.componentsTree })
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'col-md-2 hidden-xs hidden-sm' },
	          _react2.default.createElement(
	            _Affix2.default,
	            { className: 'navi-affix', offset: 80 },
	            _react2.default.createElement(_Navigation2.default, { componentsTree: this.props.componentsTree })
	          )
	        )
	      );
	    }
	  }]);
	  return ShowCaseApp;
	}(_react2.default.Component);
	
	ShowCaseApp.propTypes = {
	  componentsTree: _react2.default.PropTypes.array.isRequired
	};
	exports.default = ShowCaseApp;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(6), __esModule: true };

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(7);
	module.exports = __webpack_require__(18).Object.getPrototypeOf;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(8)
	  , $getPrototypeOf = __webpack_require__(10);
	
	__webpack_require__(16)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(9);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(11)
	  , toObject    = __webpack_require__(8)
	  , IE_PROTO    = __webpack_require__(12)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 11 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(13)('keys')
	  , uid    = __webpack_require__(15);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(14)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 15 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(17)
	  , core    = __webpack_require__(18)
	  , fails   = __webpack_require__(27);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(14)
	  , core      = __webpack_require__(18)
	  , ctx       = __webpack_require__(19)
	  , hide      = __webpack_require__(21)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 18 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(20);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(22)
	  , createDesc = __webpack_require__(30);
	module.exports = __webpack_require__(26) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(23)
	  , IE8_DOM_DEFINE = __webpack_require__(25)
	  , toPrimitive    = __webpack_require__(29)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(26) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(24);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(26) && !__webpack_require__(27)(function(){
	  return Object.defineProperty(__webpack_require__(28)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(27)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(24)
	  , document = __webpack_require__(14).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(24);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 30 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 31 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(33);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(34), __esModule: true };

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(35);
	var $Object = __webpack_require__(18).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(17);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(26), 'Object', {defineProperty: __webpack_require__(22).f});

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(37);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(38);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(67);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(39), __esModule: true };

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(40);
	__webpack_require__(62);
	module.exports = __webpack_require__(66).f('iterator');

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(41)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(43)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(42)
	  , defined   = __webpack_require__(9);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(44)
	  , $export        = __webpack_require__(17)
	  , redefine       = __webpack_require__(45)
	  , hide           = __webpack_require__(21)
	  , has            = __webpack_require__(11)
	  , Iterators      = __webpack_require__(46)
	  , $iterCreate    = __webpack_require__(47)
	  , setToStringTag = __webpack_require__(60)
	  , getPrototypeOf = __webpack_require__(10)
	  , ITERATOR       = __webpack_require__(61)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 44 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(21);

/***/ },
/* 46 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(48)
	  , descriptor     = __webpack_require__(30)
	  , setToStringTag = __webpack_require__(60)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(21)(IteratorPrototype, __webpack_require__(61)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(23)
	  , dPs         = __webpack_require__(49)
	  , enumBugKeys = __webpack_require__(58)
	  , IE_PROTO    = __webpack_require__(12)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(28)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(59).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(22)
	  , anObject = __webpack_require__(23)
	  , getKeys  = __webpack_require__(50);
	
	module.exports = __webpack_require__(26) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(51)
	  , enumBugKeys = __webpack_require__(58);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(11)
	  , toIObject    = __webpack_require__(52)
	  , arrayIndexOf = __webpack_require__(55)(false)
	  , IE_PROTO     = __webpack_require__(12)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(53)
	  , defined = __webpack_require__(9);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(54);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 54 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(52)
	  , toLength  = __webpack_require__(56)
	  , toIndex   = __webpack_require__(57);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(42)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(42)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 58 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(14).document && document.documentElement;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(22).f
	  , has = __webpack_require__(11)
	  , TAG = __webpack_require__(61)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(13)('wks')
	  , uid        = __webpack_require__(15)
	  , Symbol     = __webpack_require__(14).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(63);
	var global        = __webpack_require__(14)
	  , hide          = __webpack_require__(21)
	  , Iterators     = __webpack_require__(46)
	  , TO_STRING_TAG = __webpack_require__(61)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(64)
	  , step             = __webpack_require__(65)
	  , Iterators        = __webpack_require__(46)
	  , toIObject        = __webpack_require__(52);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(43)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(61);

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(68), __esModule: true };

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(69);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(82);
	module.exports = __webpack_require__(18).Symbol;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(14)
	  , has            = __webpack_require__(11)
	  , DESCRIPTORS    = __webpack_require__(26)
	  , $export        = __webpack_require__(17)
	  , redefine       = __webpack_require__(45)
	  , META           = __webpack_require__(70).KEY
	  , $fails         = __webpack_require__(27)
	  , shared         = __webpack_require__(13)
	  , setToStringTag = __webpack_require__(60)
	  , uid            = __webpack_require__(15)
	  , wks            = __webpack_require__(61)
	  , wksExt         = __webpack_require__(66)
	  , wksDefine      = __webpack_require__(71)
	  , keyOf          = __webpack_require__(72)
	  , enumKeys       = __webpack_require__(73)
	  , isArray        = __webpack_require__(76)
	  , anObject       = __webpack_require__(23)
	  , toIObject      = __webpack_require__(52)
	  , toPrimitive    = __webpack_require__(29)
	  , createDesc     = __webpack_require__(30)
	  , _create        = __webpack_require__(48)
	  , gOPNExt        = __webpack_require__(77)
	  , $GOPD          = __webpack_require__(79)
	  , $DP            = __webpack_require__(22)
	  , $keys          = __webpack_require__(50)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(78).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(75).f  = $propertyIsEnumerable;
	  __webpack_require__(74).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(44)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(21)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(15)('meta')
	  , isObject = __webpack_require__(24)
	  , has      = __webpack_require__(11)
	  , setDesc  = __webpack_require__(22).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(27)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(14)
	  , core           = __webpack_require__(18)
	  , LIBRARY        = __webpack_require__(44)
	  , wksExt         = __webpack_require__(66)
	  , defineProperty = __webpack_require__(22).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(50)
	  , toIObject = __webpack_require__(52);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(50)
	  , gOPS    = __webpack_require__(74)
	  , pIE     = __webpack_require__(75);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 74 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 75 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(54);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(52)
	  , gOPN      = __webpack_require__(78).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(51)
	  , hiddenKeys = __webpack_require__(58).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(75)
	  , createDesc     = __webpack_require__(30)
	  , toIObject      = __webpack_require__(52)
	  , toPrimitive    = __webpack_require__(29)
	  , has            = __webpack_require__(11)
	  , IE8_DOM_DEFINE = __webpack_require__(25)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(26) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 80 */
/***/ function(module, exports) {



/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(71)('asyncIterator');

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(71)('observable');

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(84);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(88);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(37);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(85), __esModule: true };

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(86);
	module.exports = __webpack_require__(18).Object.setPrototypeOf;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(17);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(87).set});

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(24)
	  , anObject = __webpack_require__(23);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(19)(Function.call, __webpack_require__(79).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(89), __esModule: true };

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(90);
	var $Object = __webpack_require__(18).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(17)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(48)});

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactScrollspy = __webpack_require__(92);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Navigation = function Navigation(props) {
	  var getComponentSections = function getComponentSections(categoryName) {
	    var sections = [];
	    props.componentsTree.map(function (componentGroup) {
	      if (componentGroup.category === categoryName) {
	        componentGroup.components.map(function (comp) {
	          sections.push(comp.name);
	        });
	      }
	    });
	    return sections;
	  };
	
	  var getGroupSections = function getGroupSections() {
	    var sections = [];
	    props.componentsTree.map(function (componentGroup) {
	      sections.push(componentGroup.category);
	    });
	    return sections;
	  };
	
	  return _react2.default.createElement(
	    'nav',
	    { className: 'navigation' },
	    _react2.default.createElement(
	      _reactScrollspy.Scrollspy,
	      { items: getGroupSections(), currentClassName: 'current-nav' },
	      props.componentsTree.map(function (componentGroup) {
	        return _react2.default.createElement(
	          'li',
	          { key: componentGroup.category },
	          _react2.default.createElement(
	            'a',
	            { href: '#' + componentGroup.category },
	            componentGroup.category
	          ),
	          _react2.default.createElement(
	            _reactScrollspy.Scrollspy,
	            { items: getComponentSections(componentGroup.category), currentClassName: 'current-nav' },
	            componentGroup.components.map(function (comp) {
	              return _react2.default.createElement(
	                'li',
	                { key: comp.name },
	                _react2.default.createElement(
	                  'a',
	                  { href: '#' + comp.name },
	                  comp.name
	                )
	              );
	            })
	          )
	        );
	      })
	    )
	  );
	};
	
	Navigation.propTypes = {
	  componentsTree: _react2.default.PropTypes.array.isRequired
	};
	
	exports.default = Navigation;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Scrollspy = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Scrollspy = exports.Scrollspy = function (_React$Component) {
	  _inherits(Scrollspy, _React$Component);
	
	  _createClass(Scrollspy, null, [{
	    key: 'PropTypes',
	    get: function get() {
	      return {
	        items: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string).isRequired,
	        currentClassName: _react2.default.PropTypes.string.isRequired,
	        style: _react2.default.PropTypes.object,
	        componentTag: _react2.default.PropTypes.string,
	        offset: _react2.default.PropTypes.number
	      };
	    }
	  }, {
	    key: 'defaultProps',
	    get: function get() {
	      return {
	        items: [],
	        currentClassName: '',
	        style: {},
	        componentTag: 'ul',
	        offset: 0
	      };
	    }
	  }]);
	
	  function Scrollspy(props) {
	    _classCallCheck(this, Scrollspy);
	
	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Scrollspy).call(this, props));
	
	    _this.state = {
	      targetItems: [],
	      inViewState: []
	    };
	    // manually bind as ES6 does not apply this
	    // auto binding as React.createClass does
	    _this._handleSpy = _this._handleSpy.bind(_this);
	    return _this;
	  }
	
	  _createClass(Scrollspy, [{
	    key: '_initSpyTarget',
	    value: function _initSpyTarget(items) {
	      var targetItems = items.map(function (item) {
	
	        return document.getElementById(item);
	      });
	
	      return targetItems;
	    }
	  }, {
	    key: '_getElemsViewState',
	    value: function _getElemsViewState(targets) {
	      var elemsInView = [];
	      var elemsOutView = [];
	      var viewStatusList = [];
	
	      var targetItems = targets ? targets : this.state.targetItems;
	
	      var hasInViewAlready = false;
	
	      for (var i = 0, max = targetItems.length; i < max; i++) {
	        var currentContent = targetItems[i];
	        var isInView = hasInViewAlready ? false : this._isInView(currentContent);
	
	        if (isInView) {
	          hasInViewAlready = true;
	          elemsInView.push(currentContent);
	        } else {
	          elemsOutView.push(currentContent);
	        }
	
	        var isLastItem = i === max - 1;
	        var isScrolled = (document.documentElement.scrollTop || document.body.scrollTop) > 0;
	
	        // https://github.com/makotot/react-scrollspy/pull/26#issue-167413769
	        if (this._isAtBottom() && this._isInView(currentContent) && !isInView && isLastItem && isScrolled) {
	          elemsOutView.pop();
	          elemsOutView.push.apply(elemsOutView, _toConsumableArray(elemsInView));
	          elemsInView = [currentContent];
	          viewStatusList.fill(false);
	          isInView = true;
	        }
	
	        viewStatusList.push(isInView);
	      }
	
	      return {
	        inView: elemsInView,
	        outView: elemsOutView,
	        viewStatusList: viewStatusList
	      };
	    }
	  }, {
	    key: '_isInView',
	    value: function _isInView(el) {
	      if (!el) {
	        return false;
	      }
	      var rect = el.getBoundingClientRect();
	      var winH = window.innerHeight;
	      var doc = document;
	      var scrollTop = doc.documentElement.scrollTop || doc.body.scrollTop;
	      var scrollBottom = scrollTop + winH;
	      var elTop = rect.top + scrollTop + this.props.offset;
	      var elBottom = elTop + el.offsetHeight;
	
	      return elTop < scrollBottom && elBottom > scrollTop;
	    }
	  }, {
	    key: '_isAtBottom',
	    value: function _isAtBottom() {
	      var doc = document;
	      var body = doc.body;
	      var scrollTop = doc.documentElement && doc.documentElement.scrollTop || body.scrollTop;
	      var scrollHeight = doc.documentElement && doc.documentElement.scrollHeight || body.scrollHeight;
	      var scrolledToBottom = scrollTop + window.innerHeight >= scrollHeight;
	
	      return scrolledToBottom;
	    }
	  }, {
	    key: '_spy',
	    value: function _spy(targets) {
	      this.setState({
	        inViewState: this._getElemsViewState(targets).viewStatusList
	      });
	    }
	  }, {
	    key: '_handleSpy',
	    value: function _handleSpy() {
	      var timer = void 0;
	
	      if (timer) {
	        clearTimeout(timer);
	        timer = null;
	      }
	      timer = setTimeout(this._spy.bind(this), 100);
	    }
	  }, {
	    key: '_initFromProps',
	    value: function _initFromProps() {
	      var targetItems = this._initSpyTarget(this.props.items);
	
	      this.setState({
	        targetItems: targetItems
	      });
	
	      this._spy(targetItems);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._initFromProps();
	      window.addEventListener('scroll', this._handleSpy);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      window.removeEventListener('scroll', this._handleSpy);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps() {
	      this._initFromProps();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var Tag = this.props.componentTag;
	      var counter = 0;
	      var items = _react2.default.Children.map(this.props.children, function (child, idx) {
	        if (!child) {
	          return null;
	        }
	
	        return _react2.default.cloneElement(child, {
	          className: (child.props.className ? child.props.className : '') + (_this2.state.inViewState[idx] ? ' ' + _this2.props.currentClassName : ''),
	          key: counter++
	        });
	      });
	
	      return _react2.default.createElement(
	        Tag,
	        { className: this.props.className ? this.props.className : '', style: this.props.style },
	        items
	      );
	    }
	  }]);
	
	  return Scrollspy;
	}(_react2.default.Component);


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ShowCase = __webpack_require__(94);
	
	var _ShowCase2 = _interopRequireDefault(_ShowCase);
	
	var _reactDocgen = __webpack_require__(287);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ShowCaseList = function ShowCaseList(props) {
	  return _react2.default.createElement(
	    'div',
	    null,
	    props.componentsTree.map(function (componentGroup) {
	      return _react2.default.createElement(
	        'section',
	        { key: componentGroup.category, id: componentGroup.category },
	        _react2.default.createElement(
	          'h1',
	          null,
	          componentGroup.category
	        ),
	        componentGroup.components.map(function (comp) {
	          var componentInfo = (0, _reactDocgen.parse)(comp.raw);
	          return _react2.default.createElement(
	            'section',
	            { key: comp.name, id: comp.name },
	            _react2.default.createElement(_ShowCase2.default, { componentName: comp.name, componentInfo: componentInfo, example: comp.example })
	          );
	        })
	      );
	    })
	  );
	};
	
	ShowCaseList.propTypes = {
	  componentsTree: _react2.default.PropTypes.array.isRequired
	};
	
	exports.default = ShowCaseList;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(5);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(31);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(32);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(36);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(83);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _PropsTable = __webpack_require__(95);
	
	var _PropsTable2 = _interopRequireDefault(_PropsTable);
	
	var _Example = __webpack_require__(96);
	
	var _Example2 = _interopRequireDefault(_Example);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ShowCase = function (_React$Component) {
	  (0, _inherits3.default)(ShowCase, _React$Component);
	
	  function ShowCase() {
	    (0, _classCallCheck3.default)(this, ShowCase);
	    return (0, _possibleConstructorReturn3.default)(this, (ShowCase.__proto__ || (0, _getPrototypeOf2.default)(ShowCase)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(ShowCase, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'panel panel-default show-case' },
	        _react2.default.createElement(
	          'div',
	          { className: 'panel-heading' },
	          _react2.default.createElement(
	            'h1',
	            { className: 'panel-title' },
	            this.props.componentName
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'panel-body' },
	          _react2.default.createElement(
	            'div',
	            null,
	            this.props.componentInfo.description
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'row' },
	            _react2.default.createElement(
	              'div',
	              { className: 'col-sm-6' },
	              _react2.default.createElement(_PropsTable2.default, { props: this.props.componentInfo.props })
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'col-sm-6' },
	              _react2.default.createElement(_Example2.default, { example: this.props.example })
	            )
	          )
	        )
	      );
	    }
	  }]);
	  return ShowCase;
	}(_react2.default.Component);
	
	ShowCase.propTypes = {
	  componentName: _react2.default.PropTypes.string.isRequired,
	  componentInfo: _react2.default.PropTypes.object.isRequired,
	  example: _react2.default.PropTypes.object
	};
	exports.default = ShowCase;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var PropsTable = function PropsTable(props) {
	  var rows = [];
	
	  for (var propName in props.props) {
	    if (props.props.hasOwnProperty(propName)) {
	      var prop = props.props[propName];
	      rows.push(_react2.default.createElement(
	        "tr",
	        { key: propName },
	        _react2.default.createElement(
	          "td",
	          null,
	          propName
	        ),
	        _react2.default.createElement(
	          "td",
	          null,
	          prop.description
	        ),
	        _react2.default.createElement(
	          "td",
	          null,
	          prop.required && _react2.default.createElement("span", { className: "glyphicon glyphicon-exclamation-sign required-prop" })
	        ),
	        _react2.default.createElement(
	          "td",
	          null,
	          prop.type.name
	        )
	      ));
	    }
	  }
	
	  return _react2.default.createElement(
	    "div",
	    null,
	    _react2.default.createElement(
	      "h1",
	      null,
	      "Properties"
	    ),
	    _react2.default.createElement(
	      "table",
	      { className: "table table-striped table-hover" },
	      _react2.default.createElement(
	        "thead",
	        null,
	        _react2.default.createElement(
	          "tr",
	          null,
	          _react2.default.createElement(
	            "th",
	            null,
	            "Name"
	          ),
	          _react2.default.createElement(
	            "th",
	            null,
	            "Description"
	          ),
	          _react2.default.createElement(
	            "th",
	            null,
	            "Required"
	          ),
	          _react2.default.createElement(
	            "th",
	            null,
	            "Type"
	          )
	        )
	      ),
	      _react2.default.createElement(
	        "tbody",
	        null,
	        rows
	      )
	    )
	  );
	};
	
	PropsTable.propTypes = {
	  props: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = PropsTable;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactHighlight = __webpack_require__(97);
	
	var _reactHighlight2 = _interopRequireDefault(_reactHighlight);
	
	__webpack_require__(269);
	
	var _ExampleParser = __webpack_require__(273);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Example = function Example(props) {
	  if (!props.example) {
	    return _react2.default.createElement('span', null);
	  }
	
	  var imports = (0, _ExampleParser.extractRealImports)(props.example.raw);
	  var exampleCode = (0, _ExampleParser.extractExampleCode)(props.example.raw);
	  exampleCode = (0, _ExampleParser.removeIndent)(exampleCode);
	
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(
	      'h1',
	      null,
	      'Example'
	    ),
	    _react2.default.createElement(
	      'div',
	      { className: 'list-group' },
	      _react2.default.createElement(
	        'div',
	        { className: 'list-group-item' },
	        props.example.component()
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'list-group-item' },
	        _react2.default.createElement(
	          _reactHighlight2.default,
	          { className: 'javascript' },
	          imports
	        ),
	        _react2.default.createElement(
	          _reactHighlight2.default,
	          { className: 'html' },
	          exampleCode
	        )
	      )
	    )
	  );
	};
	
	Example.propTypes = {
	  example: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = Example;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(98);

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var hljs = __webpack_require__(99);
	var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(3);
	
	var Highlight = React.createClass({
	  displayName: 'Highlight',
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      innerHTML: false,
	      className: null,
	      element: null
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.highlightCode();
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    this.highlightCode();
	  },
	  highlightCode: function highlightCode() {
	    var domNode = ReactDOM.findDOMNode(this);
	    var nodes = domNode.querySelectorAll('pre code');
	    if (nodes.length > 0) {
	      for (var i = 0; i < nodes.length; i = i + 1) {
	        hljs.highlightBlock(nodes[i]);
	      }
	    }
	  },
	  render: function render() {
	    var Element = this.props.element ? React.DOM[this.props.element] : null;
	
	    if (this.props.innerHTML) {
	      if (!Element) {
	        Element = React.DOM.div;
	      }
	      return Element({
	        dangerouslySetInnerHTML: { __html: this.props.children },
	        className: this.props.className || null
	      }, null);
	    } else {
	      if (Element) {
	        return Element({
	          className: this.props.className
	        }, this.props.children);
	      } else {
	        return React.createElement(
	          'pre',
	          null,
	          React.createElement(
	            'code',
	            { className: this.props.className },
	            this.props.children
	          )
	        );
	      }
	    }
	  }
	});
	
	module.exports = Highlight;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var hljs = __webpack_require__(100);
	
	hljs.registerLanguage('1c', __webpack_require__(101));
	hljs.registerLanguage('abnf', __webpack_require__(102));
	hljs.registerLanguage('accesslog', __webpack_require__(103));
	hljs.registerLanguage('actionscript', __webpack_require__(104));
	hljs.registerLanguage('ada', __webpack_require__(105));
	hljs.registerLanguage('apache', __webpack_require__(106));
	hljs.registerLanguage('applescript', __webpack_require__(107));
	hljs.registerLanguage('cpp', __webpack_require__(108));
	hljs.registerLanguage('arduino', __webpack_require__(109));
	hljs.registerLanguage('armasm', __webpack_require__(110));
	hljs.registerLanguage('xml', __webpack_require__(111));
	hljs.registerLanguage('asciidoc', __webpack_require__(112));
	hljs.registerLanguage('aspectj', __webpack_require__(113));
	hljs.registerLanguage('autohotkey', __webpack_require__(114));
	hljs.registerLanguage('autoit', __webpack_require__(115));
	hljs.registerLanguage('avrasm', __webpack_require__(116));
	hljs.registerLanguage('awk', __webpack_require__(117));
	hljs.registerLanguage('axapta', __webpack_require__(118));
	hljs.registerLanguage('bash', __webpack_require__(119));
	hljs.registerLanguage('basic', __webpack_require__(120));
	hljs.registerLanguage('bnf', __webpack_require__(121));
	hljs.registerLanguage('brainfuck', __webpack_require__(122));
	hljs.registerLanguage('cal', __webpack_require__(123));
	hljs.registerLanguage('capnproto', __webpack_require__(124));
	hljs.registerLanguage('ceylon', __webpack_require__(125));
	hljs.registerLanguage('clean', __webpack_require__(126));
	hljs.registerLanguage('clojure', __webpack_require__(127));
	hljs.registerLanguage('clojure-repl', __webpack_require__(128));
	hljs.registerLanguage('cmake', __webpack_require__(129));
	hljs.registerLanguage('coffeescript', __webpack_require__(130));
	hljs.registerLanguage('coq', __webpack_require__(131));
	hljs.registerLanguage('cos', __webpack_require__(132));
	hljs.registerLanguage('crmsh', __webpack_require__(133));
	hljs.registerLanguage('crystal', __webpack_require__(134));
	hljs.registerLanguage('cs', __webpack_require__(135));
	hljs.registerLanguage('csp', __webpack_require__(136));
	hljs.registerLanguage('css', __webpack_require__(137));
	hljs.registerLanguage('d', __webpack_require__(138));
	hljs.registerLanguage('markdown', __webpack_require__(139));
	hljs.registerLanguage('dart', __webpack_require__(140));
	hljs.registerLanguage('delphi', __webpack_require__(141));
	hljs.registerLanguage('diff', __webpack_require__(142));
	hljs.registerLanguage('django', __webpack_require__(143));
	hljs.registerLanguage('dns', __webpack_require__(144));
	hljs.registerLanguage('dockerfile', __webpack_require__(145));
	hljs.registerLanguage('dos', __webpack_require__(146));
	hljs.registerLanguage('dsconfig', __webpack_require__(147));
	hljs.registerLanguage('dts', __webpack_require__(148));
	hljs.registerLanguage('dust', __webpack_require__(149));
	hljs.registerLanguage('ebnf', __webpack_require__(150));
	hljs.registerLanguage('elixir', __webpack_require__(151));
	hljs.registerLanguage('elm', __webpack_require__(152));
	hljs.registerLanguage('ruby', __webpack_require__(153));
	hljs.registerLanguage('erb', __webpack_require__(154));
	hljs.registerLanguage('erlang-repl', __webpack_require__(155));
	hljs.registerLanguage('erlang', __webpack_require__(156));
	hljs.registerLanguage('excel', __webpack_require__(157));
	hljs.registerLanguage('fix', __webpack_require__(158));
	hljs.registerLanguage('flix', __webpack_require__(159));
	hljs.registerLanguage('fortran', __webpack_require__(160));
	hljs.registerLanguage('fsharp', __webpack_require__(161));
	hljs.registerLanguage('gams', __webpack_require__(162));
	hljs.registerLanguage('gauss', __webpack_require__(163));
	hljs.registerLanguage('gcode', __webpack_require__(164));
	hljs.registerLanguage('gherkin', __webpack_require__(165));
	hljs.registerLanguage('glsl', __webpack_require__(166));
	hljs.registerLanguage('go', __webpack_require__(167));
	hljs.registerLanguage('golo', __webpack_require__(168));
	hljs.registerLanguage('gradle', __webpack_require__(169));
	hljs.registerLanguage('groovy', __webpack_require__(170));
	hljs.registerLanguage('haml', __webpack_require__(171));
	hljs.registerLanguage('handlebars', __webpack_require__(172));
	hljs.registerLanguage('haskell', __webpack_require__(173));
	hljs.registerLanguage('haxe', __webpack_require__(174));
	hljs.registerLanguage('hsp', __webpack_require__(175));
	hljs.registerLanguage('htmlbars', __webpack_require__(176));
	hljs.registerLanguage('http', __webpack_require__(177));
	hljs.registerLanguage('inform7', __webpack_require__(178));
	hljs.registerLanguage('ini', __webpack_require__(179));
	hljs.registerLanguage('irpf90', __webpack_require__(180));
	hljs.registerLanguage('java', __webpack_require__(181));
	hljs.registerLanguage('javascript', __webpack_require__(182));
	hljs.registerLanguage('json', __webpack_require__(183));
	hljs.registerLanguage('julia', __webpack_require__(184));
	hljs.registerLanguage('kotlin', __webpack_require__(185));
	hljs.registerLanguage('lasso', __webpack_require__(186));
	hljs.registerLanguage('ldif', __webpack_require__(187));
	hljs.registerLanguage('less', __webpack_require__(188));
	hljs.registerLanguage('lisp', __webpack_require__(189));
	hljs.registerLanguage('livecodeserver', __webpack_require__(190));
	hljs.registerLanguage('livescript', __webpack_require__(191));
	hljs.registerLanguage('lsl', __webpack_require__(192));
	hljs.registerLanguage('lua', __webpack_require__(193));
	hljs.registerLanguage('makefile', __webpack_require__(194));
	hljs.registerLanguage('mathematica', __webpack_require__(195));
	hljs.registerLanguage('matlab', __webpack_require__(196));
	hljs.registerLanguage('maxima', __webpack_require__(197));
	hljs.registerLanguage('mel', __webpack_require__(198));
	hljs.registerLanguage('mercury', __webpack_require__(199));
	hljs.registerLanguage('mipsasm', __webpack_require__(200));
	hljs.registerLanguage('mizar', __webpack_require__(201));
	hljs.registerLanguage('perl', __webpack_require__(202));
	hljs.registerLanguage('mojolicious', __webpack_require__(203));
	hljs.registerLanguage('monkey', __webpack_require__(204));
	hljs.registerLanguage('moonscript', __webpack_require__(205));
	hljs.registerLanguage('nginx', __webpack_require__(206));
	hljs.registerLanguage('nimrod', __webpack_require__(207));
	hljs.registerLanguage('nix', __webpack_require__(208));
	hljs.registerLanguage('nsis', __webpack_require__(209));
	hljs.registerLanguage('objectivec', __webpack_require__(210));
	hljs.registerLanguage('ocaml', __webpack_require__(211));
	hljs.registerLanguage('openscad', __webpack_require__(212));
	hljs.registerLanguage('oxygene', __webpack_require__(213));
	hljs.registerLanguage('parser3', __webpack_require__(214));
	hljs.registerLanguage('pf', __webpack_require__(215));
	hljs.registerLanguage('php', __webpack_require__(216));
	hljs.registerLanguage('pony', __webpack_require__(217));
	hljs.registerLanguage('powershell', __webpack_require__(218));
	hljs.registerLanguage('processing', __webpack_require__(219));
	hljs.registerLanguage('profile', __webpack_require__(220));
	hljs.registerLanguage('prolog', __webpack_require__(221));
	hljs.registerLanguage('protobuf', __webpack_require__(222));
	hljs.registerLanguage('puppet', __webpack_require__(223));
	hljs.registerLanguage('purebasic', __webpack_require__(224));
	hljs.registerLanguage('python', __webpack_require__(225));
	hljs.registerLanguage('q', __webpack_require__(226));
	hljs.registerLanguage('qml', __webpack_require__(227));
	hljs.registerLanguage('r', __webpack_require__(228));
	hljs.registerLanguage('rib', __webpack_require__(229));
	hljs.registerLanguage('roboconf', __webpack_require__(230));
	hljs.registerLanguage('rsl', __webpack_require__(231));
	hljs.registerLanguage('ruleslanguage', __webpack_require__(232));
	hljs.registerLanguage('rust', __webpack_require__(233));
	hljs.registerLanguage('scala', __webpack_require__(234));
	hljs.registerLanguage('scheme', __webpack_require__(235));
	hljs.registerLanguage('scilab', __webpack_require__(236));
	hljs.registerLanguage('scss', __webpack_require__(237));
	hljs.registerLanguage('smali', __webpack_require__(238));
	hljs.registerLanguage('smalltalk', __webpack_require__(239));
	hljs.registerLanguage('sml', __webpack_require__(240));
	hljs.registerLanguage('sqf', __webpack_require__(241));
	hljs.registerLanguage('sql', __webpack_require__(242));
	hljs.registerLanguage('stan', __webpack_require__(243));
	hljs.registerLanguage('stata', __webpack_require__(244));
	hljs.registerLanguage('step21', __webpack_require__(245));
	hljs.registerLanguage('stylus', __webpack_require__(246));
	hljs.registerLanguage('subunit', __webpack_require__(247));
	hljs.registerLanguage('swift', __webpack_require__(248));
	hljs.registerLanguage('taggerscript', __webpack_require__(249));
	hljs.registerLanguage('yaml', __webpack_require__(250));
	hljs.registerLanguage('tap', __webpack_require__(251));
	hljs.registerLanguage('tcl', __webpack_require__(252));
	hljs.registerLanguage('tex', __webpack_require__(253));
	hljs.registerLanguage('thrift', __webpack_require__(254));
	hljs.registerLanguage('tp', __webpack_require__(255));
	hljs.registerLanguage('twig', __webpack_require__(256));
	hljs.registerLanguage('typescript', __webpack_require__(257));
	hljs.registerLanguage('vala', __webpack_require__(258));
	hljs.registerLanguage('vbnet', __webpack_require__(259));
	hljs.registerLanguage('vbscript', __webpack_require__(260));
	hljs.registerLanguage('vbscript-html', __webpack_require__(261));
	hljs.registerLanguage('verilog', __webpack_require__(262));
	hljs.registerLanguage('vhdl', __webpack_require__(263));
	hljs.registerLanguage('vim', __webpack_require__(264));
	hljs.registerLanguage('x86asm', __webpack_require__(265));
	hljs.registerLanguage('xl', __webpack_require__(266));
	hljs.registerLanguage('xquery', __webpack_require__(267));
	hljs.registerLanguage('zephir', __webpack_require__(268));
	
	module.exports = hljs;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Syntax highlighting with language autodetection.
	https://highlightjs.org/
	*/
	
	(function(factory) {
	
	  // Find the global object for export to both the browser and web workers.
	  var globalObject = typeof window === 'object' && window ||
	                     typeof self === 'object' && self;
	
	  // Setup highlight.js for different environments. First is Node.js or
	  // CommonJS.
	  if(true) {
	    factory(exports);
	  } else if(globalObject) {
	    // Export hljs globally even when using AMD for cases when this script
	    // is loaded with others that may still expect a global hljs.
	    globalObject.hljs = factory({});
	
	    // Finally register the global hljs with AMD.
	    if(typeof define === 'function' && define.amd) {
	      define([], function() {
	        return globalObject.hljs;
	      });
	    }
	  }
	
	}(function(hljs) {
	  // Convenience variables for build-in objects
	  var ArrayProto = [],
	      objectKeys = Object.keys;
	
	  // Global internal variables used within the highlight.js library.
	  var languages = {},
	      aliases   = {};
	
	  // Regular expressions used throughout the highlight.js library.
	  var noHighlightRe    = /^(no-?highlight|plain|text)$/i,
	      languagePrefixRe = /\blang(?:uage)?-([\w-]+)\b/i,
	      fixMarkupRe      = /((^(<[^>]+>|\t|)+|(?:\n)))/gm;
	
	  var spanEndTag = '</span>';
	
	  // Global options used when within external APIs. This is modified when
	  // calling the `hljs.configure` function.
	  var options = {
	    classPrefix: 'hljs-',
	    tabReplace: null,
	    useBR: false,
	    languages: undefined
	  };
	
	  // Object map that is used to escape some common HTML characters.
	  var escapeRegexMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;'
	  };
	
	  /* Utility functions */
	
	  function escape(value) {
	    return value.replace(/[&<>]/gm, function(character) {
	      return escapeRegexMap[character];
	    });
	  }
	
	  function tag(node) {
	    return node.nodeName.toLowerCase();
	  }
	
	  function testRe(re, lexeme) {
	    var match = re && re.exec(lexeme);
	    return match && match.index === 0;
	  }
	
	  function isNotHighlighted(language) {
	    return noHighlightRe.test(language);
	  }
	
	  function blockLanguage(block) {
	    var i, match, length, _class;
	    var classes = block.className + ' ';
	
	    classes += block.parentNode ? block.parentNode.className : '';
	
	    // language-* takes precedence over non-prefixed class names.
	    match = languagePrefixRe.exec(classes);
	    if (match) {
	      return getLanguage(match[1]) ? match[1] : 'no-highlight';
	    }
	
	    classes = classes.split(/\s+/);
	
	    for (i = 0, length = classes.length; i < length; i++) {
	      _class = classes[i]
	
	      if (isNotHighlighted(_class) || getLanguage(_class)) {
	        return _class;
	      }
	    }
	  }
	
	  function inherit(parent, obj) {
	    var key;
	    var result = {};
	
	    for (key in parent)
	      result[key] = parent[key];
	    if (obj)
	      for (key in obj)
	        result[key] = obj[key];
	    return result;
	  }
	
	  /* Stream merging */
	
	  function nodeStream(node) {
	    var result = [];
	    (function _nodeStream(node, offset) {
	      for (var child = node.firstChild; child; child = child.nextSibling) {
	        if (child.nodeType === 3)
	          offset += child.nodeValue.length;
	        else if (child.nodeType === 1) {
	          result.push({
	            event: 'start',
	            offset: offset,
	            node: child
	          });
	          offset = _nodeStream(child, offset);
	          // Prevent void elements from having an end tag that would actually
	          // double them in the output. There are more void elements in HTML
	          // but we list only those realistically expected in code display.
	          if (!tag(child).match(/br|hr|img|input/)) {
	            result.push({
	              event: 'stop',
	              offset: offset,
	              node: child
	            });
	          }
	        }
	      }
	      return offset;
	    })(node, 0);
	    return result;
	  }
	
	  function mergeStreams(original, highlighted, value) {
	    var processed = 0;
	    var result = '';
	    var nodeStack = [];
	
	    function selectStream() {
	      if (!original.length || !highlighted.length) {
	        return original.length ? original : highlighted;
	      }
	      if (original[0].offset !== highlighted[0].offset) {
	        return (original[0].offset < highlighted[0].offset) ? original : highlighted;
	      }
	
	      /*
	      To avoid starting the stream just before it should stop the order is
	      ensured that original always starts first and closes last:
	
	      if (event1 == 'start' && event2 == 'start')
	        return original;
	      if (event1 == 'start' && event2 == 'stop')
	        return highlighted;
	      if (event1 == 'stop' && event2 == 'start')
	        return original;
	      if (event1 == 'stop' && event2 == 'stop')
	        return highlighted;
	
	      ... which is collapsed to:
	      */
	      return highlighted[0].event === 'start' ? original : highlighted;
	    }
	
	    function open(node) {
	      function attr_str(a) {return ' ' + a.nodeName + '="' + escape(a.value) + '"';}
	      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';
	    }
	
	    function close(node) {
	      result += '</' + tag(node) + '>';
	    }
	
	    function render(event) {
	      (event.event === 'start' ? open : close)(event.node);
	    }
	
	    while (original.length || highlighted.length) {
	      var stream = selectStream();
	      result += escape(value.substr(processed, stream[0].offset - processed));
	      processed = stream[0].offset;
	      if (stream === original) {
	        /*
	        On any opening or closing tag of the original markup we first close
	        the entire highlighted node stack, then render the original tag along
	        with all the following original tags at the same offset and then
	        reopen all the tags on the highlighted stack.
	        */
	        nodeStack.reverse().forEach(close);
	        do {
	          render(stream.splice(0, 1)[0]);
	          stream = selectStream();
	        } while (stream === original && stream.length && stream[0].offset === processed);
	        nodeStack.reverse().forEach(open);
	      } else {
	        if (stream[0].event === 'start') {
	          nodeStack.push(stream[0].node);
	        } else {
	          nodeStack.pop();
	        }
	        render(stream.splice(0, 1)[0]);
	      }
	    }
	    return result + escape(value.substr(processed));
	  }
	
	  /* Initialization */
	
	  function compileLanguage(language) {
	
	    function reStr(re) {
	        return (re && re.source) || re;
	    }
	
	    function langRe(value, global) {
	      return new RegExp(
	        reStr(value),
	        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')
	      );
	    }
	
	    function compileMode(mode, parent) {
	      if (mode.compiled)
	        return;
	      mode.compiled = true;
	
	      mode.keywords = mode.keywords || mode.beginKeywords;
	      if (mode.keywords) {
	        var compiled_keywords = {};
	
	        var flatten = function(className, str) {
	          if (language.case_insensitive) {
	            str = str.toLowerCase();
	          }
	          str.split(' ').forEach(function(kw) {
	            var pair = kw.split('|');
	            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];
	          });
	        };
	
	        if (typeof mode.keywords === 'string') { // string
	          flatten('keyword', mode.keywords);
	        } else {
	          objectKeys(mode.keywords).forEach(function (className) {
	            flatten(className, mode.keywords[className]);
	          });
	        }
	        mode.keywords = compiled_keywords;
	      }
	      mode.lexemesRe = langRe(mode.lexemes || /\w+/, true);
	
	      if (parent) {
	        if (mode.beginKeywords) {
	          mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\b';
	        }
	        if (!mode.begin)
	          mode.begin = /\B|\b/;
	        mode.beginRe = langRe(mode.begin);
	        if (!mode.end && !mode.endsWithParent)
	          mode.end = /\B|\b/;
	        if (mode.end)
	          mode.endRe = langRe(mode.end);
	        mode.terminator_end = reStr(mode.end) || '';
	        if (mode.endsWithParent && parent.terminator_end)
	          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;
	      }
	      if (mode.illegal)
	        mode.illegalRe = langRe(mode.illegal);
	      if (mode.relevance == null)
	        mode.relevance = 1;
	      if (!mode.contains) {
	        mode.contains = [];
	      }
	      var expanded_contains = [];
	      mode.contains.forEach(function(c) {
	        if (c.variants) {
	          c.variants.forEach(function(v) {expanded_contains.push(inherit(c, v));});
	        } else {
	          expanded_contains.push(c === 'self' ? mode : c);
	        }
	      });
	      mode.contains = expanded_contains;
	      mode.contains.forEach(function(c) {compileMode(c, mode);});
	
	      if (mode.starts) {
	        compileMode(mode.starts, parent);
	      }
	
	      var terminators =
	        mode.contains.map(function(c) {
	          return c.beginKeywords ? '\\.?(' + c.begin + ')\\.?' : c.begin;
	        })
	        .concat([mode.terminator_end, mode.illegal])
	        .map(reStr)
	        .filter(Boolean);
	      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(/*s*/) {return null;}};
	    }
	
	    compileMode(language);
	  }
	
	  /*
	  Core highlighting function. Accepts a language name, or an alias, and a
	  string with the code to highlight. Returns an object with the following
	  properties:
	
	  - relevance (int)
	  - value (an HTML string with highlighting markup)
	
	  */
	  function highlight(name, value, ignore_illegals, continuation) {
	
	    function subMode(lexeme, mode) {
	      var i, length;
	
	      for (i = 0, length = mode.contains.length; i < length; i++) {
	        if (testRe(mode.contains[i].beginRe, lexeme)) {
	          return mode.contains[i];
	        }
	      }
	    }
	
	    function endOfMode(mode, lexeme) {
	      if (testRe(mode.endRe, lexeme)) {
	        while (mode.endsParent && mode.parent) {
	          mode = mode.parent;
	        }
	        return mode;
	      }
	      if (mode.endsWithParent) {
	        return endOfMode(mode.parent, lexeme);
	      }
	    }
	
	    function isIllegal(lexeme, mode) {
	      return !ignore_illegals && testRe(mode.illegalRe, lexeme);
	    }
	
	    function keywordMatch(mode, match) {
	      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];
	      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];
	    }
	
	    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {
	      var classPrefix = noPrefix ? '' : options.classPrefix,
	          openSpan    = '<span class="' + classPrefix,
	          closeSpan   = leaveOpen ? '' : spanEndTag
	
	      openSpan += classname + '">';
	
	      return openSpan + insideSpan + closeSpan;
	    }
	
	    function processKeywords() {
	      var keyword_match, last_index, match, result;
	
	      if (!top.keywords)
	        return escape(mode_buffer);
	
	      result = '';
	      last_index = 0;
	      top.lexemesRe.lastIndex = 0;
	      match = top.lexemesRe.exec(mode_buffer);
	
	      while (match) {
	        result += escape(mode_buffer.substr(last_index, match.index - last_index));
	        keyword_match = keywordMatch(top, match);
	        if (keyword_match) {
	          relevance += keyword_match[1];
	          result += buildSpan(keyword_match[0], escape(match[0]));
	        } else {
	          result += escape(match[0]);
	        }
	        last_index = top.lexemesRe.lastIndex;
	        match = top.lexemesRe.exec(mode_buffer);
	      }
	      return result + escape(mode_buffer.substr(last_index));
	    }
	
	    function processSubLanguage() {
	      var explicit = typeof top.subLanguage === 'string';
	      if (explicit && !languages[top.subLanguage]) {
	        return escape(mode_buffer);
	      }
	
	      var result = explicit ?
	                   highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) :
	                   highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);
	
	      // Counting embedded language score towards the host language may be disabled
	      // with zeroing the containing mode relevance. Usecase in point is Markdown that
	      // allows XML everywhere and makes every XML snippet to have a much larger Markdown
	      // score.
	      if (top.relevance > 0) {
	        relevance += result.relevance;
	      }
	      if (explicit) {
	        continuations[top.subLanguage] = result.top;
	      }
	      return buildSpan(result.language, result.value, false, true);
	    }
	
	    function processBuffer() {
	      result += (top.subLanguage != null ? processSubLanguage() : processKeywords());
	      mode_buffer = '';
	    }
	
	    function startNewMode(mode) {
	      result += mode.className? buildSpan(mode.className, '', true): '';
	      top = Object.create(mode, {parent: {value: top}});
	    }
	
	    function processLexeme(buffer, lexeme) {
	
	      mode_buffer += buffer;
	
	      if (lexeme == null) {
	        processBuffer();
	        return 0;
	      }
	
	      var new_mode = subMode(lexeme, top);
	      if (new_mode) {
	        if (new_mode.skip) {
	          mode_buffer += lexeme;
	        } else {
	          if (new_mode.excludeBegin) {
	            mode_buffer += lexeme;
	          }
	          processBuffer();
	          if (!new_mode.returnBegin && !new_mode.excludeBegin) {
	            mode_buffer = lexeme;
	          }
	        }
	        startNewMode(new_mode, lexeme);
	        return new_mode.returnBegin ? 0 : lexeme.length;
	      }
	
	      var end_mode = endOfMode(top, lexeme);
	      if (end_mode) {
	        var origin = top;
	        if (origin.skip) {
	          mode_buffer += lexeme;
	        } else {
	          if (!(origin.returnEnd || origin.excludeEnd)) {
	            mode_buffer += lexeme;
	          }
	          processBuffer();
	          if (origin.excludeEnd) {
	            mode_buffer = lexeme;
	          }
	        }
	        do {
	          if (top.className) {
	            result += spanEndTag;
	          }
	          if (!top.skip) {
	            relevance += top.relevance;
	          }
	          top = top.parent;
	        } while (top !== end_mode.parent);
	        if (end_mode.starts) {
	          startNewMode(end_mode.starts, '');
	        }
	        return origin.returnEnd ? 0 : lexeme.length;
	      }
	
	      if (isIllegal(lexeme, top))
	        throw new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');
	
	      /*
	      Parser should not reach this point as all types of lexemes should be caught
	      earlier, but if it does due to some bug make sure it advances at least one
	      character forward to prevent infinite looping.
	      */
	      mode_buffer += lexeme;
	      return lexeme.length || 1;
	    }
	
	    var language = getLanguage(name);
	    if (!language) {
	      throw new Error('Unknown language: "' + name + '"');
	    }
	
	    compileLanguage(language);
	    var top = continuation || language;
	    var continuations = {}; // keep continuations for sub-languages
	    var result = '', current;
	    for(current = top; current !== language; current = current.parent) {
	      if (current.className) {
	        result = buildSpan(current.className, '', true) + result;
	      }
	    }
	    var mode_buffer = '';
	    var relevance = 0;
	    try {
	      var match, count, index = 0;
	      while (true) {
	        top.terminators.lastIndex = index;
	        match = top.terminators.exec(value);
	        if (!match)
	          break;
	        count = processLexeme(value.substr(index, match.index - index), match[0]);
	        index = match.index + count;
	      }
	      processLexeme(value.substr(index));
	      for(current = top; current.parent; current = current.parent) { // close dangling modes
	        if (current.className) {
	          result += spanEndTag;
	        }
	      }
	      return {
	        relevance: relevance,
	        value: result,
	        language: name,
	        top: top
	      };
	    } catch (e) {
	      if (e.message && e.message.indexOf('Illegal') !== -1) {
	        return {
	          relevance: 0,
	          value: escape(value)
	        };
	      } else {
	        throw e;
	      }
	    }
	  }
	
	  /*
	  Highlighting with language detection. Accepts a string with the code to
	  highlight. Returns an object with the following properties:
	
	  - language (detected language)
	  - relevance (int)
	  - value (an HTML string with highlighting markup)
	  - second_best (object with the same structure for second-best heuristically
	    detected language, may be absent)
	
	  */
	  function highlightAuto(text, languageSubset) {
	    languageSubset = languageSubset || options.languages || objectKeys(languages);
	    var result = {
	      relevance: 0,
	      value: escape(text)
	    };
	    var second_best = result;
	    languageSubset.filter(getLanguage).forEach(function(name) {
	      var current = highlight(name, text, false);
	      current.language = name;
	      if (current.relevance > second_best.relevance) {
	        second_best = current;
	      }
	      if (current.relevance > result.relevance) {
	        second_best = result;
	        result = current;
	      }
	    });
	    if (second_best.language) {
	      result.second_best = second_best;
	    }
	    return result;
	  }
	
	  /*
	  Post-processing of the highlighted markup:
	
	  - replace TABs with something more useful
	  - replace real line-breaks with '<br>' for non-pre containers
	
	  */
	  function fixMarkup(value) {
	    return !(options.tabReplace || options.useBR)
	      ? value
	      : value.replace(fixMarkupRe, function(match, p1) {
	          if (options.useBR && match === '\n') {
	            return '<br>';
	          } else if (options.tabReplace) {
	            return p1.replace(/\t/g, options.tabReplace);
	          }
	      });
	  }
	
	  function buildClassName(prevClassName, currentLang, resultLang) {
	    var language = currentLang ? aliases[currentLang] : resultLang,
	        result   = [prevClassName.trim()];
	
	    if (!prevClassName.match(/\bhljs\b/)) {
	      result.push('hljs');
	    }
	
	    if (prevClassName.indexOf(language) === -1) {
	      result.push(language);
	    }
	
	    return result.join(' ').trim();
	  }
	
	  /*
	  Applies highlighting to a DOM node containing code. Accepts a DOM node and
	  two optional parameters for fixMarkup.
	  */
	  function highlightBlock(block) {
	    var node, originalStream, result, resultNode, text;
	    var language = blockLanguage(block);
	
	    if (isNotHighlighted(language))
	        return;
	
	    if (options.useBR) {
	      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
	      node.innerHTML = block.innerHTML.replace(/\n/g, '').replace(/<br[ \/]*>/g, '\n');
	    } else {
	      node = block;
	    }
	    text = node.textContent;
	    result = language ? highlight(language, text, true) : highlightAuto(text);
	
	    originalStream = nodeStream(node);
	    if (originalStream.length) {
	      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
	      resultNode.innerHTML = result.value;
	      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
	    }
	    result.value = fixMarkup(result.value);
	
	    block.innerHTML = result.value;
	    block.className = buildClassName(block.className, language, result.language);
	    block.result = {
	      language: result.language,
	      re: result.relevance
	    };
	    if (result.second_best) {
	      block.second_best = {
	        language: result.second_best.language,
	        re: result.second_best.relevance
	      };
	    }
	  }
	
	  /*
	  Updates highlight.js global options with values passed in the form of an object.
	  */
	  function configure(user_options) {
	    options = inherit(options, user_options);
	  }
	
	  /*
	  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
	  */
	  function initHighlighting() {
	    if (initHighlighting.called)
	      return;
	    initHighlighting.called = true;
	
	    var blocks = document.querySelectorAll('pre code');
	    ArrayProto.forEach.call(blocks, highlightBlock);
	  }
	
	  /*
	  Attaches highlighting to the page load event.
	  */
	  function initHighlightingOnLoad() {
	    addEventListener('DOMContentLoaded', initHighlighting, false);
	    addEventListener('load', initHighlighting, false);
	  }
	
	  function registerLanguage(name, language) {
	    var lang = languages[name] = language(hljs);
	    if (lang.aliases) {
	      lang.aliases.forEach(function(alias) {aliases[alias] = name;});
	    }
	  }
	
	  function listLanguages() {
	    return objectKeys(languages);
	  }
	
	  function getLanguage(name) {
	    name = (name || '').toLowerCase();
	    return languages[name] || languages[aliases[name]];
	  }
	
	  /* Interface definition */
	
	  hljs.highlight = highlight;
	  hljs.highlightAuto = highlightAuto;
	  hljs.fixMarkup = fixMarkup;
	  hljs.highlightBlock = highlightBlock;
	  hljs.configure = configure;
	  hljs.initHighlighting = initHighlighting;
	  hljs.initHighlightingOnLoad = initHighlightingOnLoad;
	  hljs.registerLanguage = registerLanguage;
	  hljs.listLanguages = listLanguages;
	  hljs.getLanguage = getLanguage;
	  hljs.inherit = inherit;
	
	  // Common regexps
	  hljs.IDENT_RE = '[a-zA-Z]\\w*';
	  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
	  hljs.NUMBER_RE = '\\b\\d+(\\.\\d+)?';
	  hljs.C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
	  hljs.BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
	  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';
	
	  // Common modes
	  hljs.BACKSLASH_ESCAPE = {
	    begin: '\\\\[\\s\\S]', relevance: 0
	  };
	  hljs.APOS_STRING_MODE = {
	    className: 'string',
	    begin: '\'', end: '\'',
	    illegal: '\\n',
	    contains: [hljs.BACKSLASH_ESCAPE]
	  };
	  hljs.QUOTE_STRING_MODE = {
	    className: 'string',
	    begin: '"', end: '"',
	    illegal: '\\n',
	    contains: [hljs.BACKSLASH_ESCAPE]
	  };
	  hljs.PHRASAL_WORDS_MODE = {
	    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\b/
	  };
	  hljs.COMMENT = function (begin, end, inherits) {
	    var mode = hljs.inherit(
	      {
	        className: 'comment',
	        begin: begin, end: end,
	        contains: []
	      },
	      inherits || {}
	    );
	    mode.contains.push(hljs.PHRASAL_WORDS_MODE);
	    mode.contains.push({
	      className: 'doctag',
	      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',
	      relevance: 0
	    });
	    return mode;
	  };
	  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');
	  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\*', '\\*/');
	  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');
	  hljs.NUMBER_MODE = {
	    className: 'number',
	    begin: hljs.NUMBER_RE,
	    relevance: 0
	  };
	  hljs.C_NUMBER_MODE = {
	    className: 'number',
	    begin: hljs.C_NUMBER_RE,
	    relevance: 0
	  };
	  hljs.BINARY_NUMBER_MODE = {
	    className: 'number',
	    begin: hljs.BINARY_NUMBER_RE,
	    relevance: 0
	  };
	  hljs.CSS_NUMBER_MODE = {
	    className: 'number',
	    begin: hljs.NUMBER_RE + '(' +
	      '%|em|ex|ch|rem'  +
	      '|vw|vh|vmin|vmax' +
	      '|cm|mm|in|pt|pc|px' +
	      '|deg|grad|rad|turn' +
	      '|s|ms' +
	      '|Hz|kHz' +
	      '|dpi|dpcm|dppx' +
	      ')?',
	    relevance: 0
	  };
	  hljs.REGEXP_MODE = {
	    className: 'regexp',
	    begin: /\//, end: /\/[gimuy]*/,
	    illegal: /\n/,
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      {
	        begin: /\[/, end: /\]/,
	        relevance: 0,
	        contains: [hljs.BACKSLASH_ESCAPE]
	      }
	    ]
	  };
	  hljs.TITLE_MODE = {
	    className: 'title',
	    begin: hljs.IDENT_RE,
	    relevance: 0
	  };
	  hljs.UNDERSCORE_TITLE_MODE = {
	    className: 'title',
	    begin: hljs.UNDERSCORE_IDENT_RE,
	    relevance: 0
	  };
	  hljs.METHOD_GUARD = {
	    // excludes method names from keyword processing
	    begin: '\\.\\s*' + hljs.UNDERSCORE_IDENT_RE,
	    relevance: 0
	  };
	
	  return hljs;
	}));


/***/ },
/* 101 */
/***/ function(module, exports) {

	module.exports = function(hljs){
	  var IDENT_RE_RU = '[a-zA-Zа-яА-Я][a-zA-Z0-9_а-яА-Я]*';
	  var OneS_KEYWORDS = 'возврат дата для если и или иначе иначеесли исключение конецесли ' +
	    'конецпопытки конецпроцедуры конецфункции конеццикла константа не перейти перем ' +
	    'перечисление по пока попытка прервать продолжить процедура строка тогда фс функция цикл ' +
	    'число экспорт';
	  var OneS_BUILT_IN = 'ansitooem oemtoansi ввестивидсубконто ввестидату ввестизначение ' +
	    'ввестиперечисление ввестипериод ввестиплансчетов ввестистроку ввестичисло вопрос ' +
	    'восстановитьзначение врег выбранныйплансчетов вызватьисключение датагод датамесяц ' +
	    'датачисло добавитьмесяц завершитьработусистемы заголовоксистемы записьжурналарегистрации ' +
	    'запуститьприложение зафиксироватьтранзакцию значениевстроку значениевстрокувнутр ' +
	    'значениевфайл значениеизстроки значениеизстрокивнутр значениеизфайла имякомпьютера ' +
	    'имяпользователя каталогвременныхфайлов каталогиб каталогпользователя каталогпрограммы ' +
	    'кодсимв командасистемы конгода конецпериодаби конецрассчитанногопериодаби ' +
	    'конецстандартногоинтервала конквартала конмесяца коннедели лев лог лог10 макс ' +
	    'максимальноеколичествосубконто мин монопольныйрежим названиеинтерфейса названиенабораправ ' +
	    'назначитьвид назначитьсчет найти найтипомеченныенаудаление найтиссылки началопериодаби ' +
	    'началостандартногоинтервала начатьтранзакцию начгода начквартала начмесяца начнедели ' +
	    'номерднягода номерднянедели номернеделигода нрег обработкаожидания окр описаниеошибки ' +
	    'основнойжурналрасчетов основнойплансчетов основнойязык открытьформу открытьформумодально ' +
	    'отменитьтранзакцию очиститьокносообщений периодстр полноеимяпользователя получитьвремята ' +
	    'получитьдатута получитьдокументта получитьзначенияотбора получитьпозициюта ' +
	    'получитьпустоезначение получитьта прав праводоступа предупреждение префиксавтонумерации ' +
	    'пустаястрока пустоезначение рабочаядаттьпустоезначение рабочаядата разделительстраниц ' +
	    'разделительстрок разм разобратьпозициюдокумента рассчитатьрегистрына ' +
	    'рассчитатьрегистрыпо сигнал симв символтабуляции создатьобъект сокрл сокрлп сокрп ' +
	    'сообщить состояние сохранитьзначение сред статусвозврата стрдлина стрзаменить ' +
	    'стрколичествострок стрполучитьстроку  стрчисловхождений сформироватьпозициюдокумента ' +
	    'счетпокоду текущаядата текущеевремя типзначения типзначениястр удалитьобъекты ' +
	    'установитьтана установитьтапо фиксшаблон формат цел шаблон';
	  var DQUOTE =  {begin: '""'};
	  var STR_START = {
	      className: 'string',
	      begin: '"', end: '"|$',
	      contains: [DQUOTE]
	    };
	  var STR_CONT = {
	    className: 'string',
	    begin: '\\|', end: '"|$',
	    contains: [DQUOTE]
	  };
	
	  return {
	    case_insensitive: true,
	    lexemes: IDENT_RE_RU,
	    keywords: {keyword: OneS_KEYWORDS, built_in: OneS_BUILT_IN},
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.NUMBER_MODE,
	      STR_START, STR_CONT,
	      {
	        className: 'function',
	        begin: '(процедура|функция)', end: '$',
	        lexemes: IDENT_RE_RU,
	        keywords: 'процедура функция',
	        contains: [
	          {
	            begin: 'экспорт', endsWithParent: true,
	            lexemes: IDENT_RE_RU,
	            keywords: 'экспорт',
	            contains: [hljs.C_LINE_COMMENT_MODE]
	          },
	          {
	            className: 'params',
	            begin: '\\(', end: '\\)',
	            lexemes: IDENT_RE_RU,
	            keywords: 'знач',
	            contains: [STR_START, STR_CONT]
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE_RU})
	        ]
	      },
	      {className: 'meta', begin: '#', end: '$'},
	      {className: 'number', begin: '\'\\d{2}\\.\\d{2}\\.(\\d{2}|\\d{4})\''} // date
	    ]
	  };
	};

/***/ },
/* 102 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	    var regexes = {
	        ruleDeclaration: "^[a-zA-Z][a-zA-Z0-9-]*",
	        unexpectedChars: "[!@#$^&',?+~`|:]"
	    };
	
	    var keywords = [
	        "ALPHA",
	        "BIT",
	        "CHAR",
	        "CR",
	        "CRLF",
	        "CTL",
	        "DIGIT",
	        "DQUOTE",
	        "HEXDIG",
	        "HTAB",
	        "LF",
	        "LWSP",
	        "OCTET",
	        "SP",
	        "VCHAR",
	        "WSP"
	    ];
	
	    var commentMode = hljs.COMMENT(";", "$");
	
	    var terminalBinaryMode = {
	        className: "symbol",
	        begin: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+){0,1}/
	    };
	
	    var terminalDecimalMode = {
	        className: "symbol",
	        begin: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+){0,1}/
	    };
	
	    var terminalHexadecimalMode = {
	        className: "symbol",
	        begin: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+){0,1}/,
	    };
	
	    var caseSensitivityIndicatorMode = {
	        className: "symbol",
	        begin: /%[si]/
	    };
	
	    var ruleDeclarationMode = {
	        begin: regexes.ruleDeclaration + '\\s*=',
	        returnBegin: true,
	        end: /=/,
	        relevance: 0,
	        contains: [{className: "attribute", begin: regexes.ruleDeclaration}]
	    };
	
	    return {
	      illegal: regexes.unexpectedChars,
	      keywords: keywords.join(" "),
	      contains: [
	          ruleDeclarationMode,
	          commentMode,
	          terminalBinaryMode,
	          terminalDecimalMode,
	          terminalHexadecimalMode,
	          caseSensitivityIndicatorMode,
	          hljs.QUOTE_STRING_MODE,
	          hljs.NUMBER_MODE
	      ]
	    };
	};

/***/ },
/* 103 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    contains: [
	      // IP
	      {
	        className: 'number',
	        begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
	      },
	      // Other numbers
	      {
	        className: 'number',
	        begin: '\\b\\d+\\b',
	        relevance: 0
	      },
	      // Requests
	      {
	        className: 'string',
	        begin: '"(GET|POST|HEAD|PUT|DELETE|CONNECT|OPTIONS|PATCH|TRACE)', end: '"',
	        keywords: 'GET POST HEAD PUT DELETE CONNECT OPTIONS PATCH TRACE',
	        illegal: '\\n',
	        relevance: 10
	      },
	      // Dates
	      {
	        className: 'string',
	        begin: /\[/, end: /\]/,
	        illegal: '\\n'
	      },
	      // Strings
	      {
	        className: 'string',
	        begin: '"', end: '"',
	        illegal: '\\n'
	      }
	    ]
	  };
	};

/***/ },
/* 104 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';
	  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';
	
	  var AS3_REST_ARG_MODE = {
	    className: 'rest_arg',
	    begin: '[.]{3}', end: IDENT_RE,
	    relevance: 10
	  };
	
	  return {
	    aliases: ['as'],
	    keywords: {
	      keyword: 'as break case catch class const continue default delete do dynamic each ' +
	        'else extends final finally for function get if implements import in include ' +
	        'instanceof interface internal is namespace native new override package private ' +
	        'protected public return set static super switch this throw try typeof use var void ' +
	        'while with',
	      literal: 'true false null undefined'
	    },
	    contains: [
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'class',
	        beginKeywords: 'package', end: '{',
	        contains: [hljs.TITLE_MODE]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class interface', end: '{', excludeEnd: true,
	        contains: [
	          {
	            beginKeywords: 'extends implements'
	          },
	          hljs.TITLE_MODE
	        ]
	      },
	      {
	        className: 'meta',
	        beginKeywords: 'import include', end: ';',
	        keywords: {'meta-keyword': 'import include'}
	      },
	      {
	        className: 'function',
	        beginKeywords: 'function', end: '[{;]', excludeEnd: true,
	        illegal: '\\S',
	        contains: [
	          hljs.TITLE_MODE,
	          {
	            className: 'params',
	            begin: '\\(', end: '\\)',
	            contains: [
	              hljs.APOS_STRING_MODE,
	              hljs.QUOTE_STRING_MODE,
	              hljs.C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              AS3_REST_ARG_MODE
	            ]
	          },
	          {
	            begin: ':\\s*' + IDENT_FUNC_RETURN_TYPE_RE
	          }
	        ]
	      },
	      hljs.METHOD_GUARD
	    ],
	    illegal: /#/
	  };
	};

/***/ },
/* 105 */
/***/ function(module, exports) {

	module.exports = // We try to support full Ada2012
	//
	// We highlight all appearances of types, keywords, literals (string, char, number, bool)
	// and titles (user defined function/procedure/package)
	// CSS classes are set accordingly
	//
	// Languages causing problems for language detection:
	// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)
	// sql (ada default.txt has a lot of sql keywords)
	
	function(hljs) {
	    // Regular expression for Ada numeric literals.
	    // stolen form the VHDL highlighter
	
	    // Decimal literal:
	    var INTEGER_RE = '\\d(_|\\d)*';
	    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
	    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
	
	    // Based literal:
	    var BASED_INTEGER_RE = '\\w+';
	    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';
	
	    var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';
	
	    // Identifier regex
	    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';
	
	    // bad chars, only allowed in literals
	    var BAD_CHARS = '[]{}%#\'\"'
	
	    // Ada doesn't have block comments, only line comments
	    var COMMENTS = hljs.COMMENT('--', '$');
	
	    // variable declarations of the form
	    // Foo : Bar := Baz;
	    // where only Bar will be highlighted
	    var VAR_DECLS = {
	        // TODO: These spaces are not required by the Ada syntax
	        // however, I have yet to see handwritten Ada code where
	        // someone does not put spaces around :
	        begin: '\\s+:\\s+', end: '\\s*(:=|;|\\)|=>|$)',
	        // endsWithParent: true,
	        // returnBegin: true,
	        illegal: BAD_CHARS,
	        contains: [
	            {
	                // workaround to avoid highlighting
	                // named loops and declare blocks
	                beginKeywords: 'loop for declare others',
	                endsParent: true,
	            },
	            {
	                // properly highlight all modifiers
	                className: 'keyword',
	                beginKeywords: 'not null constant access function procedure in out aliased exception'
	            },
	            {
	                className: 'type',
	                begin: ID_REGEX,
	                endsParent: true,
	                relevance: 0,
	            }
	        ]
	    };
	
	    return {
	        case_insensitive: true,
	        keywords: {
	            keyword:
	                'abort else new return abs elsif not reverse abstract end ' +
	                'accept entry select access exception of separate aliased exit or some ' +
	                'all others subtype and for out synchronized array function overriding ' +
	                'at tagged generic package task begin goto pragma terminate ' +
	                'body private then if procedure type case in protected constant interface ' +
	                'is raise use declare range delay limited record when delta loop rem while ' +
	                'digits renames with do mod requeue xor',
	            literal:
	                'True False',
	        },
	        contains: [
	            COMMENTS,
	            // strings "foobar"
	            {
	                className: 'string',
	                begin: /"/, end: /"/,
	                contains: [{begin: /""/, relevance: 0}]
	            },
	            // characters ''
	            {
	                // character literals always contain one char
	                className: 'string',
	                begin: /'.'/
	            },
	            {
	                // number literals
	                className: 'number',
	                begin: NUMBER_RE,
	                relevance: 0
	            },
	            {
	                // Attributes
	                className: 'symbol',
	                begin: "'" + ID_REGEX,
	            },
	            {
	                // package definition, maybe inside generic
	                className: 'title',
	                begin: '(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?', end: '(is|$)',
	                keywords: 'package body',
	                excludeBegin: true,
	                excludeEnd: true,
	                illegal: BAD_CHARS
	            },
	            {
	                // function/procedure declaration/definition
	                // maybe inside generic
	                begin: '(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+', end: '(\\bis|\\bwith|\\brenames|\\)\\s*;)',
	                keywords: 'overriding function procedure with is renames return',
	                // we need to re-match the 'function' keyword, so that
	                // the title mode below matches only exactly once
	                returnBegin: true,
	                contains:
	                [
	                    COMMENTS,
	                    {
	                        // name of the function/procedure
	                        className: 'title',
	                        begin: '(\\bwith\\s+)?\\b(function|procedure)\\s+',
	                        end: '(\\(|\\s+|$)',
	                        excludeBegin: true,
	                        excludeEnd: true,
	                        illegal: BAD_CHARS
	                    },
	                    // 'self'
	                    // // parameter types
	                    VAR_DECLS,
	                    {
	                        // return type
	                        className: 'type',
	                        begin: '\\breturn\\s+', end: '(\\s+|;|$)',
	                        keywords: 'return',
	                        excludeBegin: true,
	                        excludeEnd: true,
	                        // we are done with functions
	                        endsParent: true,
	                        illegal: BAD_CHARS
	
	                    },
	                ]
	            },
	            {
	                // new type declarations
	                // maybe inside generic
	                className: 'type',
	                begin: '\\b(sub)?type\\s+', end: '\\s+',
	                keywords: 'type',
	                excludeBegin: true,
	                illegal: BAD_CHARS
	            },
	
	            // see comment above the definition
	            VAR_DECLS,
	
	            // no markup
	            // relevance boosters for small snippets
	            // {begin: '\\s*=>\\s*'},
	            // {begin: '\\s*:=\\s*'},
	            // {begin: '\\s+:=\\s+'},
	        ]
	    };
	};

/***/ },
/* 106 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var NUMBER = {className: 'number', begin: '[\\$%]\\d+'};
	  return {
	    aliases: ['apacheconf'],
	    case_insensitive: true,
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {className: 'section', begin: '</?', end: '>'},
	      {
	        className: 'attribute',
	        begin: /\w+/,
	        relevance: 0,
	        // keywords aren’t needed for highlighting per se, they only boost relevance
	        // for a very generally defined mode (starts with a word, ends with line-end
	        keywords: {
	          nomarkup:
	            'order deny allow setenv rewriterule rewriteengine rewritecond documentroot ' +
	            'sethandler errordocument loadmodule options header listen serverroot ' +
	            'servername'
	        },
	        starts: {
	          end: /$/,
	          relevance: 0,
	          keywords: {
	            literal: 'on off all'
	          },
	          contains: [
	            {
	              className: 'meta',
	              begin: '\\s\\[', end: '\\]$'
	            },
	            {
	              className: 'variable',
	              begin: '[\\$%]\\{', end: '\\}',
	              contains: ['self', NUMBER]
	            },
	            NUMBER,
	            hljs.QUOTE_STRING_MODE
	          ]
	        }
	      }
	    ],
	    illegal: /\S/
	  };
	};

/***/ },
/* 107 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: ''});
	  var PARAMS = {
	    className: 'params',
	    begin: '\\(', end: '\\)',
	    contains: ['self', hljs.C_NUMBER_MODE, STRING]
	  };
	  var COMMENT_MODE_1 = hljs.COMMENT('--', '$');
	  var COMMENT_MODE_2 = hljs.COMMENT(
	    '\\(\\*',
	    '\\*\\)',
	    {
	      contains: ['self', COMMENT_MODE_1] //allow nesting
	    }
	  );
	  var COMMENTS = [
	    COMMENT_MODE_1,
	    COMMENT_MODE_2,
	    hljs.HASH_COMMENT_MODE
	  ];
	
	  return {
	    aliases: ['osascript'],
	    keywords: {
	      keyword:
	        'about above after against and around as at back before beginning ' +
	        'behind below beneath beside between but by considering ' +
	        'contain contains continue copy div does eighth else end equal ' +
	        'equals error every exit fifth first for fourth from front ' +
	        'get given global if ignoring in into is it its last local me ' +
	        'middle mod my ninth not of on onto or over prop property put ref ' +
	        'reference repeat returning script second set seventh since ' +
	        'sixth some tell tenth that the|0 then third through thru ' +
	        'timeout times to transaction try until where while whose with ' +
	        'without',
	      literal:
	        'AppleScript false linefeed return pi quote result space tab true',
	      built_in:
	        'alias application boolean class constant date file integer list ' +
	        'number real record string text ' +
	        'activate beep count delay launch log offset read round ' +
	        'run say summarize write ' +
	        'character characters contents day frontmost id item length ' +
	        'month name paragraph paragraphs rest reverse running time version ' +
	        'weekday word words year'
	    },
	    contains: [
	      STRING,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'built_in',
	        begin:
	          '\\b(clipboard info|the clipboard|info for|list (disks|folder)|' +
	          'mount volume|path to|(close|open for) access|(get|set) eof|' +
	          'current date|do shell script|get volume settings|random number|' +
	          'set volume|system attribute|system info|time to GMT|' +
	          '(load|run|store) script|scripting components|' +
	          'ASCII (character|number)|localized string|' +
	          'choose (application|color|file|file name|' +
	          'folder|from list|remote application|URL)|' +
	          'display (alert|dialog))\\b|^\\s*return\\b'
	      },
	      {
	        className: 'literal',
	        begin:
	          '\\b(text item delimiters|current application|missing value)\\b'
	      },
	      {
	        className: 'keyword',
	        begin:
	          '\\b(apart from|aside from|instead of|out of|greater than|' +
	          "isn't|(doesn't|does not) (equal|come before|come after|contain)|" +
	          '(greater|less) than( or equal)?|(starts?|ends|begins?) with|' +
	          'contained by|comes (before|after)|a (ref|reference)|POSIX file|' +
	          'POSIX path|(date|time) string|quoted form)\\b'
	      },
	      {
	        beginKeywords: 'on',
	        illegal: '[${=;\\n]',
	        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
	      }
	    ].concat(COMMENTS),
	    illegal: '//|->|=>|\\[\\['
	  };
	};

/***/ },
/* 108 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var CPP_PRIMITIVE_TYPES = {
	    className: 'keyword',
	    begin: '\\b[a-z\\d_]*_t\\b'
	  };
	
	  var STRINGS = {
	    className: 'string',
	    variants: [
	      {
	        begin: '(u8?|U)?L?"', end: '"',
	        illegal: '\\n',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      {
	        begin: '(u8?|U)?R"', end: '"',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      {
	        begin: '\'\\\\?.', end: '\'',
	        illegal: '.'
	      }
	    ]
	  };
	
	  var NUMBERS = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(0b[01\']+)' },
	      { begin: '\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
	      { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
	    ],
	    relevance: 0
	  };
	
	  var PREPROCESSOR =       {
	    className: 'meta',
	    begin: /#\s*[a-z]+\b/, end: /$/,
	    keywords: {
	      'meta-keyword':
	        'if else elif endif define undef warning error line ' +
	        'pragma ifdef ifndef include'
	    },
	    contains: [
	      {
	        begin: /\\\n/, relevance: 0
	      },
	      hljs.inherit(STRINGS, {className: 'meta-string'}),
	      {
	        className: 'meta-string',
	        begin: '<', end: '>',
	        illegal: '\\n',
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	
	  var FUNCTION_TITLE = hljs.IDENT_RE + '\\s*\\(';
	
	  var CPP_KEYWORDS = {
	    keyword: 'int float while private char catch import module export virtual operator sizeof ' +
	      'dynamic_cast|10 typedef const_cast|10 const struct for static_cast|10 union namespace ' +
	      'unsigned long volatile static protected bool template mutable if public friend ' +
	      'do goto auto void enum else break extern using class asm case typeid ' +
	      'short reinterpret_cast|10 default double register explicit signed typename try this ' +
	      'switch continue inline delete alignof constexpr decltype ' +
	      'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +
	      'atomic_bool atomic_char atomic_schar ' +
	      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +
	      'atomic_ullong new throw return',
	    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +
	      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +
	      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +
	      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +
	      'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +
	      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +
	      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +
	      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +
	      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
	    literal: 'true false nullptr NULL'
	  };
	
	  var EXPRESSION_CONTAINS = [
	    CPP_PRIMITIVE_TYPES,
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    NUMBERS,
	    STRINGS
	  ];
	
	  return {
	    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp'],
	    keywords: CPP_KEYWORDS,
	    illegal: '</',
	    contains: EXPRESSION_CONTAINS.concat([
	      PREPROCESSOR,
	      {
	        begin: '\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<', end: '>',
	        keywords: CPP_KEYWORDS,
	        contains: ['self', CPP_PRIMITIVE_TYPES]
	      },
	      {
	        begin: hljs.IDENT_RE + '::',
	        keywords: CPP_KEYWORDS
	      },
	      {
	        // This mode covers expression context where we can't expect a function
	        // definition and shouldn't highlight anything that looks like one:
	        // `return some()`, `else if()`, `(x*sum(1, 2))`
	        variants: [
	          {begin: /=/, end: /;/},
	          {begin: /\(/, end: /\)/},
	          {beginKeywords: 'new throw return else', end: /;/}
	        ],
	        keywords: CPP_KEYWORDS,
	        contains: EXPRESSION_CONTAINS.concat([
	          {
	            begin: /\(/, end: /\)/,
	            keywords: CPP_KEYWORDS,
	            contains: EXPRESSION_CONTAINS.concat(['self']),
	            relevance: 0
	          }
	        ]),
	        relevance: 0
	      },
	      {
	        className: 'function',
	        begin: '(' + hljs.IDENT_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
	        returnBegin: true, end: /[{;=]/,
	        excludeEnd: true,
	        keywords: CPP_KEYWORDS,
	        illegal: /[^\w\s\*&]/,
	        contains: [
	          {
	            begin: FUNCTION_TITLE, returnBegin: true,
	            contains: [hljs.TITLE_MODE],
	            relevance: 0
	          },
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/,
	            keywords: CPP_KEYWORDS,
	            relevance: 0,
	            contains: [
	              hljs.C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              STRINGS,
	              NUMBERS,
	              CPP_PRIMITIVE_TYPES
	            ]
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          PREPROCESSOR
	        ]
	      }
	    ]),
	    exports: {
	      preprocessor: PREPROCESSOR,
	      strings: STRINGS,
	      keywords: CPP_KEYWORDS
	    }
	  };
	};

/***/ },
/* 109 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var CPP = hljs.getLanguage('cpp').exports;
		return {
	    keywords: {
	      keyword:
	        'boolean byte word string String array ' + CPP.keywords.keyword,
	      built_in:
	        'setup loop while catch for if do goto try switch case else ' +
	        'default break continue return ' +
	        'KeyboardController MouseController SoftwareSerial ' +
	        'EthernetServer EthernetClient LiquidCrystal ' +
	        'RobotControl GSMVoiceCall EthernetUDP EsploraTFT ' +
	        'HttpClient RobotMotor WiFiClient GSMScanner ' +
	        'FileSystem Scheduler GSMServer YunClient YunServer ' +
	        'IPAddress GSMClient GSMModem Keyboard Ethernet ' +
	        'Console GSMBand Esplora Stepper Process ' +
	        'WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage ' +
	        'Client Server GSMPIN FileIO Bridge Serial ' +
	        'EEPROM Stream Mouse Audio Servo File Task ' +
	        'GPRS WiFi Wire TFT GSM SPI SD ' +
	        'runShellCommandAsynchronously analogWriteResolution ' +
	        'retrieveCallingNumber printFirmwareVersion ' +
	        'analogReadResolution sendDigitalPortPair ' +
	        'noListenOnLocalhost readJoystickButton setFirmwareVersion ' +
	        'readJoystickSwitch scrollDisplayRight getVoiceCallStatus ' +
	        'scrollDisplayLeft writeMicroseconds delayMicroseconds ' +
	        'beginTransmission getSignalStrength runAsynchronously ' +
	        'getAsynchronously listenOnLocalhost getCurrentCarrier ' +
	        'readAccelerometer messageAvailable sendDigitalPorts ' +
	        'lineFollowConfig countryNameWrite runShellCommand ' +
	        'readStringUntil rewindDirectory readTemperature ' +
	        'setClockDivider readLightSensor endTransmission ' +
	        'analogReference detachInterrupt countryNameRead ' +
	        'attachInterrupt encryptionType readBytesUntil ' +
	        'robotNameWrite readMicrophone robotNameRead cityNameWrite ' +
	        'userNameWrite readJoystickY readJoystickX mouseReleased ' +
	        'openNextFile scanNetworks noInterrupts digitalWrite ' +
	        'beginSpeaker mousePressed isActionDone mouseDragged ' +
	        'displayLogos noAutoscroll addParameter remoteNumber ' +
	        'getModifiers keyboardRead userNameRead waitContinue ' +
	        'processInput parseCommand printVersion readNetworks ' +
	        'writeMessage blinkVersion cityNameRead readMessage ' +
	        'setDataMode parsePacket isListening setBitOrder ' +
	        'beginPacket isDirectory motorsWrite drawCompass ' +
	        'digitalRead clearScreen serialEvent rightToLeft ' +
	        'setTextSize leftToRight requestFrom keyReleased ' +
	        'compassRead analogWrite interrupts WiFiServer ' +
	        'disconnect playMelody parseFloat autoscroll ' +
	        'getPINUsed setPINUsed setTimeout sendAnalog ' +
	        'readSlider analogRead beginWrite createChar ' +
	        'motorsStop keyPressed tempoWrite readButton ' +
	        'subnetMask debugPrint macAddress writeGreen ' +
	        'randomSeed attachGPRS readString sendString ' +
	        'remotePort releaseAll mouseMoved background ' +
	        'getXChange getYChange answerCall getResult ' +
	        'voiceCall endPacket constrain getSocket writeJSON ' +
	        'getButton available connected findUntil readBytes ' +
	        'exitValue readGreen writeBlue startLoop IPAddress ' +
	        'isPressed sendSysex pauseMode gatewayIP setCursor ' +
	        'getOemKey tuneWrite noDisplay loadImage switchPIN ' +
	        'onRequest onReceive changePIN playFile noBuffer ' +
	        'parseInt overflow checkPIN knobRead beginTFT ' +
	        'bitClear updateIR bitWrite position writeRGB ' +
	        'highByte writeRed setSpeed readBlue noStroke ' +
	        'remoteIP transfer shutdown hangCall beginSMS ' +
	        'endWrite attached maintain noCursor checkReg ' +
	        'checkPUK shiftOut isValid shiftIn pulseIn ' +
	        'connect println localIP pinMode getIMEI ' +
	        'display noBlink process getBand running beginSD ' +
	        'drawBMP lowByte setBand release bitRead prepare ' +
	        'pointTo readRed setMode noFill remove listen ' +
	        'stroke detach attach noTone exists buffer ' +
	        'height bitSet circle config cursor random ' +
	        'IRread setDNS endSMS getKey micros ' +
	        'millis begin print write ready flush width ' +
	        'isPIN blink clear press mkdir rmdir close ' +
	        'point yield image BSSID click delay ' +
	        'read text move peek beep rect line open ' +
	        'seek fill size turn stop home find ' +
	        'step tone sqrt RSSI SSID ' +
	        'end bit tan cos sin pow map abs max ' +
	        'min get run put',
	      literal:
	        'DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE ' +
	        'REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP ' +
	        'SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN ' +
	        'INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL ' +
	        'DEFAULT OUTPUT INPUT HIGH LOW'
	    },
	    contains: [
	      CPP.preprocessor,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 110 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	    //local labels: %?[FB]?[AT]?\d{1,2}\w+
	  return {
	    case_insensitive: true,
	    aliases: ['arm'],
	    lexemes: '\\.?' + hljs.IDENT_RE,
	    keywords: {
	      meta:
	        //GNU preprocs
	        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg '+
	        //ARM directives
	        'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',
	      built_in:
	        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 '+ //standard registers
	        'pc lr sp ip sl sb fp '+ //typical regs plus backward compatibility
	        'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 '+ //more regs and fp
	        'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 '+ //coprocessor regs
	        'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 '+ //more coproc
	        'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 '+ //advanced SIMD NEON regs
	
	        //program status registers
	        'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf '+
	        'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf '+
	
	        //NEON and VFP registers
	        's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 '+
	        's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 '+
	        'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 '+
	        'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 ' +
	
	        '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'
	    },
	    contains: [
	      {
	        className: 'keyword',
	        begin: '\\b('+     //mnemonics
	            'adc|'+
	            '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|'+
	            'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|'+
	            'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|'+
	            'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|'+
	            'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|'+
	            'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|'+
	            'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|'+
	            'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|'+
	            'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|'+
	            'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|'+
	            '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|'+
	            'wfe|wfi|yield'+
	        ')'+
	        '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?'+ //condition codes
	        '[sptrx]?' ,                                             //legal postfixes
	        end: '\\s'
	      },
	      hljs.COMMENT('[;@]', '$', {relevance: 0}),
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\'',
	        end: '[^\\\\]\'',
	        relevance: 0
	      },
	      {
	        className: 'title',
	        begin: '\\|', end: '\\|',
	        illegal: '\\n',
	        relevance: 0
	      },
	      {
	        className: 'number',
	        variants: [
	            {begin: '[#$=]?0x[0-9a-f]+'}, //hex
	            {begin: '[#$=]?0b[01]+'},     //bin
	            {begin: '[#$=]\\d+'},        //literal
	            {begin: '\\b\\d+'}           //bare number
	        ],
	        relevance: 0
	      },
	      {
	        className: 'symbol',
	        variants: [
	            {begin: '^[a-z_\\.\\$][a-z0-9_\\.\\$]+'}, //ARM syntax
	            {begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:'}, //GNU ARM syntax
	            {begin: '[=#]\\w+' }  //label reference
	        ],
	        relevance: 0
	      }
	    ]
	  };
	};

/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';
	  var TAG_INTERNALS = {
	    endsWithParent: true,
	    illegal: /</,
	    relevance: 0,
	    contains: [
	      {
	        className: 'attr',
	        begin: XML_IDENT_RE,
	        relevance: 0
	      },
	      {
	        begin: /=\s*/,
	        relevance: 0,
	        contains: [
	          {
	            className: 'string',
	            endsParent: true,
	            variants: [
	              {begin: /"/, end: /"/},
	              {begin: /'/, end: /'/},
	              {begin: /[^\s"'=<>`]+/}
	            ]
	          }
	        ]
	      }
	    ]
	  };
	  return {
	    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist'],
	    case_insensitive: true,
	    contains: [
	      {
	        className: 'meta',
	        begin: '<!DOCTYPE', end: '>',
	        relevance: 10,
	        contains: [{begin: '\\[', end: '\\]'}]
	      },
	      hljs.COMMENT(
	        '<!--',
	        '-->',
	        {
	          relevance: 10
	        }
	      ),
	      {
	        begin: '<\\!\\[CDATA\\[', end: '\\]\\]>',
	        relevance: 10
	      },
	      {
	        begin: /<\?(php)?/, end: /\?>/,
	        subLanguage: 'php',
	        contains: [{begin: '/\\*', end: '\\*/', skip: true}]
	      },
	      {
	        className: 'tag',
	        /*
	        The lookahead pattern (?=...) ensures that 'begin' only matches
	        '<style' as a single word, followed by a whitespace or an
	        ending braket. The '$' is needed for the lexeme to be recognized
	        by hljs.subMode() that tests lexemes outside the stream.
	        */
	        begin: '<style(?=\\s|>|$)', end: '>',
	        keywords: {name: 'style'},
	        contains: [TAG_INTERNALS],
	        starts: {
	          end: '</style>', returnEnd: true,
	          subLanguage: ['css', 'xml']
	        }
	      },
	      {
	        className: 'tag',
	        // See the comment in the <style tag about the lookahead pattern
	        begin: '<script(?=\\s|>|$)', end: '>',
	        keywords: {name: 'script'},
	        contains: [TAG_INTERNALS],
	        starts: {
	          end: '\<\/script\>', returnEnd: true,
	          subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml']
	        }
	      },
	      {
	        className: 'meta',
	        variants: [
	          {begin: /<\?xml/, end: /\?>/, relevance: 10},
	          {begin: /<\?\w+/, end: /\?>/}
	        ]
	      },
	      {
	        className: 'tag',
	        begin: '</?', end: '/?>',
	        contains: [
	          {
	            className: 'name', begin: /[^\/><\s]+/, relevance: 0
	          },
	          TAG_INTERNALS
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 112 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['adoc'],
	    contains: [
	      // block comment
	      hljs.COMMENT(
	        '^/{4,}\\n',
	        '\\n/{4,}$',
	        // can also be done as...
	        //'^/{4,}$',
	        //'^/{4,}$',
	        {
	          relevance: 10
	        }
	      ),
	      // line comment
	      hljs.COMMENT(
	        '^//',
	        '$',
	        {
	          relevance: 0
	        }
	      ),
	      // title
	      {
	        className: 'title',
	        begin: '^\\.\\w.*$'
	      },
	      // example, admonition & sidebar blocks
	      {
	        begin: '^[=\\*]{4,}\\n',
	        end: '\\n^[=\\*]{4,}$',
	        relevance: 10
	      },
	      // headings
	      {
	        className: 'section',
	        relevance: 10,
	        variants: [
	          {begin: '^(={1,5}) .+?( \\1)?$'},
	          {begin: '^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$'},
	        ]
	      },
	      // document attributes
	      {
	        className: 'meta',
	        begin: '^:.+?:',
	        end: '\\s',
	        excludeEnd: true,
	        relevance: 10
	      },
	      // block attributes
	      {
	        className: 'meta',
	        begin: '^\\[.+?\\]$',
	        relevance: 0
	      },
	      // quoteblocks
	      {
	        className: 'quote',
	        begin: '^_{4,}\\n',
	        end: '\\n_{4,}$',
	        relevance: 10
	      },
	      // listing and literal blocks
	      {
	        className: 'code',
	        begin: '^[\\-\\.]{4,}\\n',
	        end: '\\n[\\-\\.]{4,}$',
	        relevance: 10
	      },
	      // passthrough blocks
	      {
	        begin: '^\\+{4,}\\n',
	        end: '\\n\\+{4,}$',
	        contains: [
	          {
	            begin: '<', end: '>',
	            subLanguage: 'xml',
	            relevance: 0
	          }
	        ],
	        relevance: 10
	      },
	      // lists (can only capture indicators)
	      {
	        className: 'bullet',
	        begin: '^(\\*+|\\-+|\\.+|[^\\n]+?::)\\s+'
	      },
	      // admonition
	      {
	        className: 'symbol',
	        begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+',
	        relevance: 10
	      },
	      // inline strong
	      {
	        className: 'strong',
	        // must not follow a word character or be followed by an asterisk or space
	        begin: '\\B\\*(?![\\*\\s])',
	        end: '(\\n{2}|\\*)',
	        // allow escaped asterisk followed by word char
	        contains: [
	          {
	            begin: '\\\\*\\w',
	            relevance: 0
	          }
	        ]
	      },
	      // inline emphasis
	      {
	        className: 'emphasis',
	        // must not follow a word character or be followed by a single quote or space
	        begin: '\\B\'(?![\'\\s])',
	        end: '(\\n{2}|\')',
	        // allow escaped single quote followed by word char
	        contains: [
	          {
	            begin: '\\\\\'\\w',
	            relevance: 0
	          }
	        ],
	        relevance: 0
	      },
	      // inline emphasis (alt)
	      {
	        className: 'emphasis',
	        // must not follow a word character or be followed by an underline or space
	        begin: '_(?![_\\s])',
	        end: '(\\n{2}|_)',
	        relevance: 0
	      },
	      // inline smart quotes
	      {
	        className: 'string',
	        variants: [
	          {begin: "``.+?''"},
	          {begin: "`.+?'"}
	        ]
	      },
	      // inline code snippets (TODO should get same treatment as strong and emphasis)
	      {
	        className: 'code',
	        begin: '(`.+?`|\\+.+?\\+)',
	        relevance: 0
	      },
	      // indented literal block
	      {
	        className: 'code',
	        begin: '^[ \\t]',
	        end: '$',
	        relevance: 0
	      },
	      // horizontal rules
	      {
	        begin: '^\'{3,}[ \\t]*$',
	        relevance: 10
	      },
	      // images and links
	      {
	        begin: '(link:)?(http|https|ftp|file|irc|image:?):\\S+\\[.*?\\]',
	        returnBegin: true,
	        contains: [
	          {
	            begin: '(link|image:?):',
	            relevance: 0
	          },
	          {
	            className: 'link',
	            begin: '\\w',
	            end: '[^\\[]+',
	            relevance: 0
	          },
	          {
	            className: 'string',
	            begin: '\\[',
	            end: '\\]',
	            excludeBegin: true,
	            excludeEnd: true,
	            relevance: 0
	          }
	        ],
	        relevance: 10
	      }
	    ]
	  };
	};

/***/ },
/* 113 */
/***/ function(module, exports) {

	module.exports = function (hljs) {
	  var KEYWORDS =
	    'false synchronized int abstract float private char boolean static null if const ' +
	    'for true while long throw strictfp finally protected import native final return void ' +
	    'enum else extends implements break transient new catch instanceof byte super volatile case ' +
	    'assert short package default double public try this switch continue throws privileged ' +
	    'aspectOf adviceexecution proceed cflowbelow cflow initialization preinitialization ' +
	    'staticinitialization withincode target within execution getWithinTypeName handler ' +
	    'thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart declare parents '+
	    'warning error soft precedence thisAspectInstance';
	  var SHORTKEYS = 'get set args call';
	  return {
	    keywords : KEYWORDS,
	    illegal : /<\/|#/,
	    contains : [
	      hljs.COMMENT(
	        '/\\*\\*',
	        '\\*/',
	        {
	          relevance : 0,
	          contains : [
	            {
	              // eat up @'s in emails to prevent them to be recognized as doctags
	              begin: /\w+@/, relevance: 0
	            },
	            {
	              className : 'doctag',
	              begin : '@[A-Za-z]+'
	            }
	          ]
	        }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className : 'class',
	        beginKeywords : 'aspect',
	        end : /[{;=]/,
	        excludeEnd : true,
	        illegal : /[:;"\[\]]/,
	        contains : [
	          {
	            beginKeywords : 'extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton'
	          },
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            begin : /\([^\)]*/,
	            end : /[)]+/,
	            keywords : KEYWORDS + ' ' + SHORTKEYS,
	            excludeEnd : false
	          }
	        ]
	      },
	      {
	        className : 'class',
	        beginKeywords : 'class interface',
	        end : /[{;=]/,
	        excludeEnd : true,
	        relevance: 0,
	        keywords : 'class interface',
	        illegal : /[:"\[\]]/,
	        contains : [
	          {beginKeywords : 'extends implements'},
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        // AspectJ Constructs
	        beginKeywords : 'pointcut after before around throwing returning',
	        end : /[)]/,
	        excludeEnd : false,
	        illegal : /["\[\]]/,
	        contains : [
	          {
	            begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
	            returnBegin : true,
	            contains : [hljs.UNDERSCORE_TITLE_MODE]
	          }
	        ]
	      },
	      {
	        begin : /[:]/,
	        returnBegin : true,
	        end : /[{;]/,
	        relevance: 0,
	        excludeEnd : false,
	        keywords : KEYWORDS,
	        illegal : /["\[\]]/,
	        contains : [
	          {
	            begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
	            keywords : KEYWORDS + ' ' + SHORTKEYS
	          },
	          hljs.QUOTE_STRING_MODE
	        ]
	      },
	      {
	        // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
	        beginKeywords : 'new throw',
	        relevance : 0
	      },
	      {
	        // the function class is a bit different for AspectJ compared to the Java language
	        className : 'function',
	        begin : /\w+ +\w+(\.)?\w+\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
	        returnBegin : true,
	        end : /[{;=]/,
	        keywords : KEYWORDS,
	        excludeEnd : true,
	        contains : [
	          {
	            begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
	            returnBegin : true,
	            relevance: 0,
	            contains : [hljs.UNDERSCORE_TITLE_MODE]
	          },
	          {
	            className : 'params',
	            begin : /\(/, end : /\)/,
	            relevance: 0,
	            keywords : KEYWORDS,
	            contains : [
	              hljs.APOS_STRING_MODE,
	              hljs.QUOTE_STRING_MODE,
	              hljs.C_NUMBER_MODE,
	              hljs.C_BLOCK_COMMENT_MODE
	            ]
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      hljs.C_NUMBER_MODE,
	      {
	        // annotation is also used in this language
	        className : 'meta',
	        begin : '@[A-Za-z]+'
	      }
	    ]
	  };
	};

/***/ },
/* 114 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var BACKTICK_ESCAPE = {
	    begin: /`[\s\S]/
	  };
	
	  return {
	    case_insensitive: true,
	    keywords: {
	      keyword: 'Break Continue Else Gosub If Loop Return While',
	      literal: 'A|0 true false NOT AND OR',
	      built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel',
	    },
	    contains: [
	      {
	        className: 'built_in',
	        begin: 'A_[a-zA-Z0-9]+'
	      },
	      BACKTICK_ESCAPE,
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [BACKTICK_ESCAPE]}),
	      hljs.COMMENT(';', '$', {relevance: 0}),
	      {
	        className: 'number',
	        begin: hljs.NUMBER_RE,
	        relevance: 0
	      },
	      {
	        className: 'variable', // FIXME
	        begin: '%', end: '%',
	        illegal: '\\n',
	        contains: [BACKTICK_ESCAPE]
	      },
	      {
	        className: 'symbol',
	        contains: [BACKTICK_ESCAPE],
	        variants: [
	          {begin: '^[^\\n";]+::(?!=)'},
	          {begin: '^[^\\n";]+:(?!=)', relevance: 0} // zero relevance as it catches a lot of things
	                                                    // followed by a single ':' in many languages
	        ]
	      },
	      {
	        // consecutive commas, not for highlighting but just for relevance
	        begin: ',\\s*,'
	      }
	    ]
	  }
	};

/***/ },
/* 115 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	    var KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop ' +
	        'Default Dim Do Else ElseIf EndFunc EndIf EndSelect ' +
	        'EndSwitch EndWith Enum Exit ExitLoop For Func ' +
	        'Global If In Local Next ReDim Return Select Static ' +
	        'Step Switch Then To Until Volatile WEnd While With',
	
	        LITERAL = 'True False And Null Not Or',
	
	        BUILT_IN =
	          'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait',
	
	        COMMENT = {
	            variants: [
	              hljs.COMMENT(';', '$', {relevance: 0}),
	              hljs.COMMENT('#cs', '#ce'),
	              hljs.COMMENT('#comments-start', '#comments-end')
	            ]
	        },
	
	        VARIABLE = {
	            begin: '\\$[A-z0-9_]+'
	        },
	
	        STRING = {
	            className: 'string',
	            variants: [{
	                begin: /"/,
	                end: /"/,
	                contains: [{
	                    begin: /""/,
	                    relevance: 0
	                }]
	            }, {
	                begin: /'/,
	                end: /'/,
	                contains: [{
	                    begin: /''/,
	                    relevance: 0
	                }]
	            }]
	        },
	
	        NUMBER = {
	            variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
	        },
	
	        PREPROCESSOR = {
	            className: 'meta',
	            begin: '#',
	            end: '$',
	            keywords: {'meta-keyword': 'comments include include-once NoTrayIcon OnAutoItStartRegister pragma compile RequireAdmin'},
	            contains: [{
	                    begin: /\\\n/,
	                    relevance: 0
	                }, {
	                    beginKeywords: 'include',
	                    keywords: {'meta-keyword': 'include'},
	                    end: '$',
	                    contains: [
	                        STRING, {
	                            className: 'meta-string',
	                            variants: [{
	                                begin: '<',
	                                end: '>'
	                            }, {
	                                begin: /"/,
	                                end: /"/,
	                                contains: [{
	                                    begin: /""/,
	                                    relevance: 0
	                                }]
	                            }, {
	                                begin: /'/,
	                                end: /'/,
	                                contains: [{
	                                    begin: /''/,
	                                    relevance: 0
	                                }]
	                            }]
	                        }
	                    ]
	                },
	                STRING,
	                COMMENT
	            ]
	        },
	
	        CONSTANT = {
	            className: 'symbol',
	            // begin: '@',
	            // end: '$',
	            // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
	            // relevance: 5
	            begin: '@[A-z0-9_]+'
	        },
	
	        FUNCTION = {
	            className: 'function',
	            beginKeywords: 'Func',
	            end: '$',
	            illegal: '\\$|\\[|%',
	            contains: [
	                hljs.UNDERSCORE_TITLE_MODE, {
	                    className: 'params',
	                    begin: '\\(',
	                    end: '\\)',
	                    contains: [
	                        VARIABLE,
	                        STRING,
	                        NUMBER
	                    ]
	                }
	            ]
	        };
	
	    return {
	        case_insensitive: true,
	        illegal: /\/\*/,
	        keywords: {
	            keyword: KEYWORDS,
	            built_in: BUILT_IN,
	            literal: LITERAL
	        },
	        contains: [
	            COMMENT,
	            VARIABLE,
	            STRING,
	            NUMBER,
	            PREPROCESSOR,
	            CONSTANT,
	            FUNCTION
	        ]
	    }
	};

/***/ },
/* 116 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    case_insensitive: true,
	    lexemes: '\\.?' + hljs.IDENT_RE,
	    keywords: {
	      keyword:
	        /* mnemonic */
	        'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs ' +
	        'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr ' +
	        'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor ' +
	        'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul ' +
	        'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs ' +
	        'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub ' +
	        'subi swap tst wdr',
	      built_in:
	        /* general purpose registers */
	        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 ' +
	        'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ' +
	        /* IO Registers (ATMega128) */
	        'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h ' +
	        'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ' +
	        'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ' +
	        'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk ' +
	        'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ' +
	        'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr ' +
	        'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ' +
	        'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',
	      meta:
	        '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list ' +
	        '.listmac .macro .nolist .org .set'
	    },
	    contains: [
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.COMMENT(
	        ';',
	        '$',
	        {
	          relevance: 0
	        }
	      ),
	      hljs.C_NUMBER_MODE, // 0x..., decimal, float
	      hljs.BINARY_NUMBER_MODE, // 0b...
	      {
	        className: 'number',
	        begin: '\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...
	      },
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\'', end: '[^\\\\]\'',
	        illegal: '[^\\\\][^\']'
	      },
	      {className: 'symbol',  begin: '^[A-Za-z0-9_.$]+:'},
	      {className: 'meta', begin: '#', end: '$'},
	      {  // подстановка в «.macro»
	        className: 'subst',
	        begin: '@[0-9]+'
	      }
	    ]
	  };
	};

/***/ },
/* 117 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var VARIABLE = {
	    className: 'variable',
	    variants: [
	      {begin: /\$[\w\d#@][\w\d_]*/},
	      {begin: /\$\{(.*?)}/}
	    ]
	  };
	  var KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE],
	    variants: [
	      {
	        begin: /(u|b)?r?'''/, end: /'''/,
	        relevance: 10
	      },
	      {
	        begin: /(u|b)?r?"""/, end: /"""/,
	        relevance: 10
	      },
	      {
	        begin: /(u|r|ur)'/, end: /'/,
	        relevance: 10
	      },
	      {
	        begin: /(u|r|ur)"/, end: /"/,
	        relevance: 10
	      },
	      {
	        begin: /(b|br)'/, end: /'/
	      },
	      {
	        begin: /(b|br)"/, end: /"/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };
	  return {
		 keywords: {
		   keyword: KEYWORDS
	    },
	    contains: [
	      VARIABLE,
	      STRING,
	      hljs.REGEXP_MODE,
	      hljs.HASH_COMMENT_MODE,
	      hljs.NUMBER_MODE
	    ]
	  }
	};

/***/ },
/* 118 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: 'false int abstract private char boolean static null if for true ' +
	      'while long throw finally protected final return void enum else ' +
	      'break new catch byte super case short default double public try this switch ' +
	      'continue reverse firstfast firstonly forupdate nofetch sum avg minof maxof count ' +
	      'order group by asc desc index hint like dispaly edit client server ttsbegin ' +
	      'ttscommit str real date container anytype common div mod',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '#', end: '$'
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class interface', end: '{', excludeEnd: true,
	        illegal: ':',
	        contains: [
	          {beginKeywords: 'extends implements'},
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 119 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var VAR = {
	    className: 'variable',
	    variants: [
	      {begin: /\$[\w\d#@][\w\d_]*/},
	      {begin: /\$\{(.*?)}/}
	    ]
	  };
	  var QUOTE_STRING = {
	    className: 'string',
	    begin: /"/, end: /"/,
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      VAR,
	      {
	        className: 'variable',
	        begin: /\$\(/, end: /\)/,
	        contains: [hljs.BACKSLASH_ESCAPE]
	      }
	    ]
	  };
	  var APOS_STRING = {
	    className: 'string',
	    begin: /'/, end: /'/
	  };
	
	  return {
	    aliases: ['sh', 'zsh'],
	    lexemes: /-?[a-z\._]+/,
	    keywords: {
	      keyword:
	        'if then else elif fi for while in do done case esac function',
	      literal:
	        'true false',
	      built_in:
	        // Shell built-ins
	        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
	        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +
	        'trap umask unset ' +
	        // Bash built-ins
	        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +
	        'read readarray source type typeset ulimit unalias ' +
	        // Shell modifiers
	        'set shopt ' +
	        // Zsh built-ins
	        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +
	        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +
	        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +
	        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +
	        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +
	        'zpty zregexparse zsocket zstyle ztcp',
	      _:
	        '-ne -eq -lt -gt -f -d -e -s -l -a' // relevance booster
	    },
	    contains: [
	      {
	        className: 'meta',
	        begin: /^#![^\n]+sh\s*$/,
	        relevance: 10
	      },
	      {
	        className: 'function',
	        begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
	        returnBegin: true,
	        contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\w[\w\d_]*/})],
	        relevance: 0
	      },
	      hljs.HASH_COMMENT_MODE,
	      QUOTE_STRING,
	      APOS_STRING,
	      VAR
	    ]
	  };
	};

/***/ },
/* 120 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    case_insensitive: true,
	    illegal: '^\.',
	    // Support explicitely typed variables that end with $%! or #.
	    lexemes: '[a-zA-Z][a-zA-Z0-9_\$\%\!\#]*',
	    keywords: {
	        keyword:
	          'ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE ' +
	          'CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ ' +
	          'DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ ' +
	          'EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO ' +
	          'HEX$ IF|0 THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON ' +
	          'OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET ' +
	          'MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION ' +
	          'BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET ' +
	          'PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET ' +
	          'RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP ' +
	          'SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE ' +
	          'WEND WIDTH WINDOW WRITE XOR'
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.COMMENT('REM', '$', {relevance: 10}),
	      hljs.COMMENT('\'', '$', {relevance: 0}),
	      {
	        // Match line numbers
	        className: 'symbol',
	        begin: '^[0-9]+\ ',
	        relevance: 10
	      },
	      {
	        // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
	        className: 'number',
	        begin: '\\b([0-9]+[0-9edED\.]*[#\!]?)',
	        relevance: 0
	      },
	      {
	        // Match hexadecimal numbers (&Hxxxx)
	        className: 'number',
	        begin: '(\&[hH][0-9a-fA-F]{1,4})'
	      },
	      {
	        // Match octal numbers (&Oxxxxxx)
	        className: 'number',
	        begin: '(\&[oO][0-7]{1,6})'
	      }
	    ]
	  };
	};

/***/ },
/* 121 */
/***/ function(module, exports) {

	module.exports = function(hljs){
	  return {
	    contains: [
	      // Attribute
	      {
	        className: 'attribute',
	        begin: /</, end: />/
	      },
	      // Specific
	      {
	        begin: /::=/,
	        starts: {
	          end: /$/,
	          contains: [
	            {
	              begin: /</, end: />/
	            },
	            // Common
	            hljs.C_LINE_COMMENT_MODE,
	            hljs.C_BLOCK_COMMENT_MODE,
	            hljs.APOS_STRING_MODE,
	            hljs.QUOTE_STRING_MODE
	          ]
	        }
	      }
	    ]
	  };
	};

/***/ },
/* 122 */
/***/ function(module, exports) {

	module.exports = function(hljs){
	  var LITERAL = {
	    className: 'literal',
	    begin: '[\\+\\-]',
	    relevance: 0
	  };
	  return {
	    aliases: ['bf'],
	    contains: [
	      hljs.COMMENT(
	        '[^\\[\\]\\.,\\+\\-<> \r\n]',
	        '[\\[\\]\\.,\\+\\-<> \r\n]',
	        {
	          returnEnd: true,
	          relevance: 0
	        }
	      ),
	      {
	        className: 'title',
	        begin: '[\\[\\]]',
	        relevance: 0
	      },
	      {
	        className: 'string',
	        begin: '[\\.,]',
	        relevance: 0
	      },
	      {
	        // this mode works as the only relevance counter
	        begin: /\+\+|\-\-/, returnBegin: true,
	        contains: [LITERAL]
	      },
	      LITERAL
	    ]
	  };
	};

/***/ },
/* 123 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS =
	    'div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to ' +
	    'until while with var';
	  var LITERALS = 'false true';
	  var COMMENT_MODES = [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.COMMENT(
	      /\{/,
	      /\}/,
	      {
	        relevance: 0
	      }
	    ),
	    hljs.COMMENT(
	      /\(\*/,
	      /\*\)/,
	      {
	        relevance: 10
	      }
	    )
	  ];
	  var STRING = {
	    className: 'string',
	    begin: /'/, end: /'/,
	    contains: [{begin: /''/}]
	  };
	  var CHAR_STRING = {
	    className: 'string', begin: /(#\d+)+/
	  };
	  var DATE = {
	      className: 'number',
	      begin: '\\b\\d+(\\.\\d+)?(DT|D|T)',
	      relevance: 0
	  };
	  var DBL_QUOTED_VARIABLE = {
	      className: 'string', // not a string technically but makes sense to be highlighted in the same style
	      begin: '"',
	      end: '"'
	  };
	
	  var PROCEDURE = {
	    className: 'function',
	    beginKeywords: 'procedure', end: /[:;]/,
	    keywords: 'procedure|10',
	    contains: [
	      hljs.TITLE_MODE,
	      {
	        className: 'params',
	        begin: /\(/, end: /\)/,
	        keywords: KEYWORDS,
	        contains: [STRING, CHAR_STRING]
	      }
	    ].concat(COMMENT_MODES)
	  };
	
	  var OBJECT = {
	    className: 'class',
	    begin: 'OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\d+) ([^\\r\\n]+)',
	    returnBegin: true,
	    contains: [
	      hljs.TITLE_MODE,
	        PROCEDURE
	    ]
	  };
	
	  return {
	    case_insensitive: true,
	    keywords: { keyword: KEYWORDS, literal: LITERALS },
	    illegal: /\/\*/,
	    contains: [
	      STRING, CHAR_STRING,
	      DATE, DBL_QUOTED_VARIABLE,
	      hljs.NUMBER_MODE,
	      OBJECT,
	      PROCEDURE
	    ]
	  };
	};

/***/ },
/* 124 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['capnp'],
	    keywords: {
	      keyword:
	        'struct enum interface union group import using const annotation extends in of on as with from fixed',
	      built_in:
	        'Void Bool Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64 Float32 Float64 ' +
	        'Text Data AnyPointer AnyStruct Capability List',
	      literal:
	        'true false'
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'meta',
	        begin: /@0x[\w\d]{16};/,
	        illegal: /\n/
	      },
	      {
	        className: 'symbol',
	        begin: /@\d+\b/
	      },
	      {
	        className: 'class',
	        beginKeywords: 'struct enum', end: /\{/,
	        illegal: /\n/,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {
	            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
	          })
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'interface', end: /\{/,
	        illegal: /\n/,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {
	            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
	          })
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 125 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  // 2.3. Identifiers and keywords
	  var KEYWORDS =
	    'assembly module package import alias class interface object given value ' +
	    'assign void function new of extends satisfies abstracts in out return ' +
	    'break continue throw assert dynamic if else switch case for while try ' +
	    'catch finally then let this outer super is exists nonempty';
	  // 7.4.1 Declaration Modifiers
	  var DECLARATION_MODIFIERS =
	    'shared abstract formal default actual variable late native deprecated' +
	    'final sealed annotation suppressWarnings small';
	  // 7.4.2 Documentation
	  var DOCUMENTATION =
	    'doc by license see throws tagged';
	  var SUBST = {
	    className: 'subst', excludeBegin: true, excludeEnd: true,
	    begin: /``/, end: /``/,
	    keywords: KEYWORDS,
	    relevance: 10
	  };
	  var EXPRESSIONS = [
	    {
	      // verbatim string
	      className: 'string',
	      begin: '"""',
	      end: '"""',
	      relevance: 10
	    },
	    {
	      // string literal or template
	      className: 'string',
	      begin: '"', end: '"',
	      contains: [SUBST]
	    },
	    {
	      // character literal
	      className: 'string',
	      begin: "'",
	      end: "'"
	    },
	    {
	      // numeric literal
	      className: 'number',
	      begin: '#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?',
	      relevance: 0
	    }
	  ];
	  SUBST.contains = EXPRESSIONS;
	
	  return {
	    keywords: {
	      keyword: KEYWORDS + ' ' + DECLARATION_MODIFIERS,
	      meta: DOCUMENTATION
	    },
	    illegal: '\\$[^01]|#[^0-9a-fA-F]',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.COMMENT('/\\*', '\\*/', {contains: ['self']}),
	      {
	        // compiler annotation
	        className: 'meta',
	        begin: '@[a-z]\\w*(?:\\:\"[^\"]*\")?'
	      }
	    ].concat(EXPRESSIONS)
	  };
	};

/***/ },
/* 126 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['clean','icl','dcl'],
	    keywords: {
	      keyword:
	        'if let in with where case of class instance otherwise ' +
	        'implementation definition system module from import qualified as ' +
	        'special code inline foreign export ccall stdcall generic derive ' +
	        'infix infixl infixr',
	      literal:
	        'True False'
	    },
	    contains: [
	
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	
	      {begin: '->|<-[|:]?|::|#!?|>>=|\\{\\||\\|\\}|:==|=:|\\.\\.|<>|`'} // relevance booster
	    ]
	  };
	};

/***/ },
/* 127 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var keywords = {
	    'builtin-name':
	      // Clojure keywords
	      'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem '+
	      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '+
	      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '+
	      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '+
	      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '+
	      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '+
	      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '+
	      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '+
	      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '+
	      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '+
	      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '+
	      'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or '+
	      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '+
	      'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast '+
	      'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import '+
	      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '+
	      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '+
	      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '+
	      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '+
	      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '+
	      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '+
	      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '+
	      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '+
	      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '+
	      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '+
	      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '+
	      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'
	   };
	
	  var SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
	  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
	  var SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';
	
	  var SYMBOL = {
	    begin: SYMBOL_RE,
	    relevance: 0
	  };
	  var NUMBER = {
	    className: 'number', begin: SIMPLE_NUMBER_RE,
	    relevance: 0
	  };
	  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});
	  var COMMENT = hljs.COMMENT(
	    ';',
	    '$',
	    {
	      relevance: 0
	    }
	  );
	  var LITERAL = {
	    className: 'literal',
	    begin: /\b(true|false|nil)\b/
	  };
	  var COLLECTION = {
	    begin: '[\\[\\{]', end: '[\\]\\}]'
	  };
	  var HINT = {
	    className: 'comment',
	    begin: '\\^' + SYMBOL_RE
	  };
	  var HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
	  var KEY = {
	    className: 'symbol',
	    begin: '[:]{1,2}' + SYMBOL_RE
	  };
	  var LIST = {
	    begin: '\\(', end: '\\)'
	  };
	  var BODY = {
	    endsWithParent: true,
	    relevance: 0
	  };
	  var NAME = {
	    keywords: keywords,
	    lexemes: SYMBOL_RE,
	    className: 'name', begin: SYMBOL_RE,
	    starts: BODY
	  };
	  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];
	
	  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];
	  BODY.contains = DEFAULT_CONTAINS;
	  COLLECTION.contains = DEFAULT_CONTAINS;
	
	  return {
	    aliases: ['clj'],
	    illegal: /\S/,
	    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]
	  }
	};

/***/ },
/* 128 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    contains: [
	      {
	        className: 'meta',
	        begin: /^([\w.-]+|\s*#_)=>/,
	        starts: {
	          end: /$/,
	          subLanguage: 'clojure'
	        }
	      }
	    ]
	  }
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['cmake.in'],
	    case_insensitive: true,
	    keywords: {
	      keyword:
	        'add_custom_command add_custom_target add_definitions add_dependencies ' +
	        'add_executable add_library add_subdirectory add_test aux_source_directory ' +
	        'break build_command cmake_minimum_required cmake_policy configure_file ' +
	        'create_test_sourcelist define_property else elseif enable_language enable_testing ' +
	        'endforeach endfunction endif endmacro endwhile execute_process export find_file ' +
	        'find_library find_package find_path find_program fltk_wrap_ui foreach function ' +
	        'get_cmake_property get_directory_property get_filename_component get_property ' +
	        'get_source_file_property get_target_property get_test_property if include ' +
	        'include_directories include_external_msproject include_regular_expression install ' +
	        'link_directories load_cache load_command macro mark_as_advanced message option ' +
	        'output_required_files project qt_wrap_cpp qt_wrap_ui remove_definitions return ' +
	        'separate_arguments set set_directory_properties set_property ' +
	        'set_source_files_properties set_target_properties set_tests_properties site_name ' +
	        'source_group string target_link_libraries try_compile try_run unset variable_watch ' +
	        'while build_name exec_program export_library_dependencies install_files ' +
	        'install_programs install_targets link_libraries make_directory remove subdir_depends ' +
	        'subdirs use_mangled_mesa utility_source variable_requires write_file ' +
	        'qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or ' +
	        'equal less greater strless strgreater strequal matches'
	    },
	    contains: [
	      {
	        className: 'variable',
	        begin: '\\${', end: '}'
	      },
	      hljs.HASH_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 130 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	    keyword:
	      // JS keywords
	      'in if for while finally new do return else break catch instanceof throw try this ' +
	      'switch continue typeof delete debugger super ' +
	      // Coffee keywords
	      'then unless until loop of by when and or is isnt not',
	    literal:
	      // JS literals
	      'true false null undefined ' +
	      // Coffee literals
	      'yes no on off',
	    built_in:
	      'npm require console print module global window document'
	  };
	  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	  var SUBST = {
	    className: 'subst',
	    begin: /#\{/, end: /}/,
	    keywords: KEYWORDS
	  };
	  var EXPRESSIONS = [
	    hljs.BINARY_NUMBER_MODE,
	    hljs.inherit(hljs.C_NUMBER_MODE, {starts: {end: '(\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp
	    {
	      className: 'string',
	      variants: [
	        {
	          begin: /'''/, end: /'''/,
	          contains: [hljs.BACKSLASH_ESCAPE]
	        },
	        {
	          begin: /'/, end: /'/,
	          contains: [hljs.BACKSLASH_ESCAPE]
	        },
	        {
	          begin: /"""/, end: /"""/,
	          contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	        },
	        {
	          begin: /"/, end: /"/,
	          contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	        }
	      ]
	    },
	    {
	      className: 'regexp',
	      variants: [
	        {
	          begin: '///', end: '///',
	          contains: [SUBST, hljs.HASH_COMMENT_MODE]
	        },
	        {
	          begin: '//[gim]*',
	          relevance: 0
	        },
	        {
	          // regex can't start with space to parse x / 2 / 3 as two divisions
	          // regex can't start with *, and it supports an "illegal" in the main mode
	          begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
	        }
	      ]
	    },
	    {
	      begin: '@' + JS_IDENT_RE // relevance booster
	    },
	    {
	      begin: '`', end: '`',
	      excludeBegin: true, excludeEnd: true,
	      subLanguage: 'javascript'
	    }
	  ];
	  SUBST.contains = EXPRESSIONS;
	
	  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
	  var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
	  var PARAMS = {
	    className: 'params',
	    begin: '\\([^\\(]', returnBegin: true,
	    /* We need another contained nameless mode to not have every nested
	    pair of parens to be called "params" */
	    contains: [{
	      begin: /\(/, end: /\)/,
	      keywords: KEYWORDS,
	      contains: ['self'].concat(EXPRESSIONS)
	    }]
	  };
	
	  return {
	    aliases: ['coffee', 'cson', 'iced'],
	    keywords: KEYWORDS,
	    illegal: /\/\*/,
	    contains: EXPRESSIONS.concat([
	      hljs.COMMENT('###', '###'),
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'function',
	        begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
	        returnBegin: true,
	        contains: [TITLE, PARAMS]
	      },
	      {
	        // anonymous function start
	        begin: /[:\(,=]\s*/,
	        relevance: 0,
	        contains: [
	          {
	            className: 'function',
	            begin: PARAMS_RE, end: '[-=]>',
	            returnBegin: true,
	            contains: [PARAMS]
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class',
	        end: '$',
	        illegal: /[:="\[\]]/,
	        contains: [
	          {
	            beginKeywords: 'extends',
	            endsWithParent: true,
	            illegal: /[:="\[\]]/,
	            contains: [TITLE]
	          },
	          TITLE
	        ]
	      },
	      {
	        begin: JS_IDENT_RE + ':', end: ':',
	        returnBegin: true, returnEnd: true,
	        relevance: 0
	      }
	    ])
	  };
	};

/***/ },
/* 131 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: {
	      keyword:
	        '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' +
	        'match mod Prop return Set then Type using where with ' +
	        'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +
	        'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +
	        'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +
	        'Conjectures Constant constr Constraint Constructors Context Corollary ' +
	        'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' +
	        'Derive Drop eauto End Equality Eval Example Existential Existentials ' +
	        'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +
	        'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +
	        'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +
	        'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +
	        'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +
	        'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +
	        'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +
	        'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +
	        'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +
	        'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +
	        'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +
	        'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +
	        'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +
	        'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +
	        'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +
	        'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +
	        'Verbose Visibility where with',
	      built_in:
	        'abstract absurd admit after apply as assert assumption at auto autorewrite ' +
	        'autounfold before bottom btauto by case case_eq cbn cbv change ' +
	        'classical_left classical_right clear clearbody cofix compare compute ' +
	        'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +
	        'cycle decide decompose dependent destruct destruction dintuition ' +
	        'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +
	        'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +
	        'einjection eleft elim elimtype enough equality erewrite eright ' +
	        'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +
	        'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +
	        'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +
	        'induction injection instantiate intro intro_pattern intros intuition ' +
	        'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +
	        'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +
	        'record red refine reflexivity remember rename repeat replace revert ' +
	        'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +
	        'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +
	        'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +
	        'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +
	        'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +
	        'unfold unify until using vm_compute with'
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.COMMENT('\\(\\*', '\\*\\)'),
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'type',
	        excludeBegin: true,
	        begin: '\\|\\s*',
	        end: '\\w+'
	      },
	      {begin: /[-=]>/} // relevance booster
	    ]
	  };
	};

/***/ },
/* 132 */
/***/ function(module, exports) {

	module.exports = function cos (hljs) {
	
	  var STRINGS = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"',
	        end: '"',
	        contains: [{ // escaped
	          begin: "\"\"",
	          relevance: 0
	        }]
	      }
	    ]
	  };
	
	  var NUMBERS = {
	    className: "number",
	    begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
	    relevance: 0
	  };
	
	  var COS_KEYWORDS =
	    'property parameter class classmethod clientmethod extends as break ' +
	    'catch close continue do d|0 else elseif for goto halt hang h|0 if job ' +
	    'j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 ' +
	    'tcommit throw trollback try tstart use view while write w|0 xecute x|0 ' +
	    'zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert ' +
	    'zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit ' +
	    'zsync ascii';
	
	    // registered function - no need in them due to all functions are highlighted,
	    // but I'll just leave this here.
	
	    //"$bit", "$bitcount",
	    //"$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",
	    //"$compile", "$data", "$decimal", "$double", "$extract", "$factor",
	    //"$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",
	    //"$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",
	    //"$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",
	    //"$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",
	    //"$locate", "$match", "$method", "$name", "$nconvert", "$next",
	    //"$normalize", "$now", "$number", "$order", "$parameter", "$piece",
	    //"$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",
	    //"$query", "$random", "$replace", "$reverse", "$sconvert", "$select",
	    //"$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",
	    //"$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",
	    //"$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",
	    //"$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",
	    //"$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",
	    //"$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",
	    //"$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",
	    //"$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",
	    //"$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",
	    //"$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",
	    //"$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",
	    //"$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",
	    //"$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",
	    //"$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",
	    //"$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",
	    //"device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",
	    //"$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",
	    //"$storage", "$system", "$test", "$this", "$tlevel", "$username",
	    //"$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",
	    //"$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",
	    //"$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",
	    //"$ztrap", "$zversion"
	
	  return {
	    case_insensitive: true,
	    aliases: ["cos", "cls"],
	    keywords: COS_KEYWORDS,
	    contains: [
	      NUMBERS,
	      STRINGS,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: "comment",
	        begin: /;/, end: "$",
	        relevance: 0
	      },
	      { // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
	        className: "built_in",
	        begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
	      },
	      { // Macro command: quit $$$OK
	        className: "built_in",
	        begin: /\$\$\$[a-zA-Z]+/
	      },
	      { // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
	        className: "built_in",
	        begin: /%[a-z]+(?:\.[a-z]+)*/
	      },
	      { // Global variable: set ^globalName = 12 write ^globalName
	        className: "symbol",
	        begin: /\^%?[a-zA-Z][\w]*/
	      },
	      { // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
	        className: "keyword",
	        begin: /##class|##super|#define|#dim/
	      },
	
	      // sub-languages: are not fully supported by hljs by 11/15/2015
	      // left for the future implementation.
	      {
	        begin: /&sql\(/,    end: /\)/,
	        excludeBegin: true, excludeEnd: true,
	        subLanguage: "sql"
	      },
	      {
	        begin: /&(js|jscript|javascript)</, end: />/,
	        excludeBegin: true, excludeEnd: true,
	        subLanguage: "javascript"
	      },
	      {
	        // this brakes first and last tag, but this is the only way to embed a valid html
	        begin: /&html<\s*</, end: />\s*>/,
	        subLanguage: "xml"
	      }
	    ]
	  };
	};

/***/ },
/* 133 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var RESOURCES = 'primitive rsc_template';
	
	  var COMMANDS = 'group clone ms master location colocation order fencing_topology ' +
	      'rsc_ticket acl_target acl_group user role ' +
	      'tag xml';
	
	  var PROPERTY_SETS = 'property rsc_defaults op_defaults';
	
	  var KEYWORDS = 'params meta operations op rule attributes utilization';
	
	  var OPERATORS = 'read write deny defined not_defined in_range date spec in ' +
	      'ref reference attribute type xpath version and or lt gt tag ' +
	      'lte gte eq ne \\';
	
	  var TYPES = 'number string';
	
	  var LITERALS = 'Master Started Slave Stopped start promote demote stop monitor true false';
	
	  return {
	    aliases: ['crm', 'pcmk'],
	    case_insensitive: true,
	    keywords: {
	      keyword: KEYWORDS + ' ' + OPERATORS + ' ' + TYPES,
	      literal: LITERALS
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        beginKeywords: 'node',
	        starts: {
	          end: '\\s*([\\w_-]+:)?',
	          starts: {
	            className: 'title',
	            end: '\\s*[\\$\\w_][\\w_-]*'
	          }
	        }
	      },
	      {
	        beginKeywords: RESOURCES,
	        starts: {
	          className: 'title',
	          end: '\\s*[\\$\\w_][\\w_-]*',
	          starts: {
	            end: '\\s*@?[\\w_][\\w_\\.:-]*'
	          }
	        }
	      },
	      {
	        begin: '\\b(' + COMMANDS.split(' ').join('|') + ')\\s+',
	        keywords: COMMANDS,
	        starts: {
	          className: 'title',
	          end: '[\\$\\w_][\\w_-]*'
	        }
	      },
	      {
	        beginKeywords: PROPERTY_SETS,
	        starts: {
	          className: 'title',
	          end: '\\s*([\\w_-]+:)?'
	        }
	      },
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'meta',
	        begin: '(ocf|systemd|service|lsb):[\\w_:-]+',
	        relevance: 0
	      },
	      {
	        className: 'number',
	        begin: '\\b\\d+(\\.\\d+)?(ms|s|h|m)?',
	        relevance: 0
	      },
	      {
	        className: 'literal',
	        begin: '[-]?(infinity|inf)',
	        relevance: 0
	      },
	      {
	        className: 'attr',
	        begin: /([A-Za-z\$_\#][\w_-]+)=/,
	        relevance: 0
	      },
	      {
	        className: 'tag',
	        begin: '</?',
	        end: '/?>',
	        relevance: 0
	      }
	    ]
	  };
	};

/***/ },
/* 134 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var NUM_SUFFIX = '(_[uif](8|16|32|64))?';
	  var CRYSTAL_IDENT_RE = '[a-zA-Z_]\\w*[!?=]?';
	  var RE_STARTER = '!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|' +
	    '>>|>|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';
	  var CRYSTAL_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\][=?]?';
	  var CRYSTAL_KEYWORDS = {
	    keyword:
	      'abstract alias as asm begin break case class def do else elsif end ensure enum extend for fun if ifdef ' +
	      'include instance_sizeof is_a? lib macro module next of out pointerof private protected rescue responds_to? ' +
	      'return require self sizeof struct super then type typeof union unless until when while with yield ' +
	      '__DIR__ __FILE__ __LINE__',
	    literal: 'false nil true'
	  };
	  var SUBST = {
	    className: 'subst',
	    begin: '#{', end: '}',
	    keywords: CRYSTAL_KEYWORDS
	  };
	  var EXPANSION = {
	    className: 'template-variable',
	    variants: [
	      {begin: '\\{\\{', end: '\\}\\}'},
	      {begin: '\\{%', end: '%\\}'}
	    ],
	    keywords: CRYSTAL_KEYWORDS
	  };
	
	  function recursiveParen(begin, end) {
	    var
	    contains = [{begin: begin, end: end}];
	    contains[0].contains = contains;
	    return contains;
	  }
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
	    variants: [
	      {begin: /'/, end: /'/},
	      {begin: /"/, end: /"/},
	      {begin: /`/, end: /`/},
	      {begin: '%w?\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
	      {begin: '%w?\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
	      {begin: '%w?{', end: '}', contains: recursiveParen('{', '}')},
	      {begin: '%w?<', end: '>', contains: recursiveParen('<', '>')},
	      {begin: '%w?/', end: '/'},
	      {begin: '%w?%', end: '%'},
	      {begin: '%w?-', end: '-'},
	      {begin: '%w?\\|', end: '\\|'},
	    ],
	    relevance: 0,
	  };
	  var REGEXP = {
	    begin: '(' + RE_STARTER + ')\\s*',
	    contains: [
	      {
	        className: 'regexp',
	        contains: [hljs.BACKSLASH_ESCAPE, SUBST],
	        variants: [
	          {begin: '//[a-z]*', relevance: 0},
	          {begin: '/', end: '/[a-z]*'},
	          {begin: '%r\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
	          {begin: '%r\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
	          {begin: '%r{', end: '}', contains: recursiveParen('{', '}')},
	          {begin: '%r<', end: '>', contains: recursiveParen('<', '>')},
	          {begin: '%r/', end: '/'},
	          {begin: '%r%', end: '%'},
	          {begin: '%r-', end: '-'},
	          {begin: '%r\\|', end: '\\|'},
	        ]
	      }
	    ],
	    relevance: 0
	  };
	  var REGEXP2 = {
	    className: 'regexp',
	    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
	    variants: [
	      {begin: '%r\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
	      {begin: '%r\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
	      {begin: '%r{', end: '}', contains: recursiveParen('{', '}')},
	      {begin: '%r<', end: '>', contains: recursiveParen('<', '>')},
	      {begin: '%r/', end: '/'},
	      {begin: '%r%', end: '%'},
	      {begin: '%r-', end: '-'},
	      {begin: '%r\\|', end: '\\|'},
	    ],
	    relevance: 0
	  };
	  var ATTRIBUTE = {
	    className: 'meta',
	    begin: '@\\[', end: '\\]',
	    contains: [
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'meta-string'})
	    ]
	  };
	  var CRYSTAL_DEFAULT_CONTAINS = [
	    EXPANSION,
	    STRING,
	    REGEXP,
	    REGEXP2,
	    ATTRIBUTE,
	    hljs.HASH_COMMENT_MODE,
	    {
	      className: 'class',
	      beginKeywords: 'class module struct', end: '$|;',
	      illegal: /=/,
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
	        {begin: '<'} // relevance booster for inheritance
	      ]
	    },
	    {
	      className: 'class',
	      beginKeywords: 'lib enum union', end: '$|;',
	      illegal: /=/,
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
	      ],
	      relevance: 10
	    },
	    {
	      className: 'function',
	      beginKeywords: 'def', end: /\B\b/,
	      contains: [
	        hljs.inherit(hljs.TITLE_MODE, {
	          begin: CRYSTAL_METHOD_RE,
	          endsParent: true
	        })
	      ]
	    },
	    {
	      className: 'function',
	      beginKeywords: 'fun macro', end: /\B\b/,
	      contains: [
	        hljs.inherit(hljs.TITLE_MODE, {
	          begin: CRYSTAL_METHOD_RE,
	          endsParent: true
	        })
	      ],
	      relevance: 5
	    },
	    {
	      className: 'symbol',
	      begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
	      relevance: 0
	    },
	    {
	      className: 'symbol',
	      begin: ':',
	      contains: [STRING, {begin: CRYSTAL_METHOD_RE}],
	      relevance: 0
	    },
	    {
	      className: 'number',
	      variants: [
	        { begin: '\\b0b([01_]*[01])' + NUM_SUFFIX },
	        { begin: '\\b0o([0-7_]*[0-7])' + NUM_SUFFIX },
	        { begin: '\\b0x([A-Fa-f0-9_]*[A-Fa-f0-9])' + NUM_SUFFIX },
	        { begin: '\\b(([0-9][0-9_]*[0-9]|[0-9])(\\.[0-9_]*[0-9])?([eE][+-]?[0-9_]*[0-9])?)' + NUM_SUFFIX}
	      ],
	      relevance: 0
	    }
	  ];
	  SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
	  EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1); // without EXPANSION
	
	  return {
	    aliases: ['cr'],
	    lexemes: CRYSTAL_IDENT_RE,
	    keywords: CRYSTAL_KEYWORDS,
	    contains: CRYSTAL_DEFAULT_CONTAINS
	  };
	};

/***/ },
/* 135 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	    keyword:
	      // Normal keywords.
	      'abstract as base bool break byte case catch char checked const continue decimal ' +
	      'default delegate do double else enum event explicit extern finally fixed float ' +
	      'for foreach goto if implicit in int interface internal is lock long ' +
	      'object operator out override params private protected public readonly ref sbyte ' +
	      'sealed short sizeof stackalloc static string struct switch this try typeof ' +
	      'uint ulong unchecked unsafe ushort using virtual void volatile while ' +
	      'nameof ' +
	      // Contextual keywords.
	      'add alias ascending async await by descending dynamic equals from get global group into join ' +
	      'let on orderby partial remove select set value var where yield',
	    literal:
	      'null false true'
	  };
	
	  var VERBATIM_STRING = {
	    className: 'string',
	    begin: '@"', end: '"',
	    contains: [{begin: '""'}]
	  };
	  var VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {illegal: /\n/});
	  var SUBST = {
	    className: 'subst',
	    begin: '{', end: '}',
	    keywords: KEYWORDS
	  };
	  var SUBST_NO_LF = hljs.inherit(SUBST, {illegal: /\n/});
	  var INTERPOLATED_STRING = {
	    className: 'string',
	    begin: /\$"/, end: '"',
	    illegal: /\n/,
	    contains: [{begin: '{{'}, {begin: '}}'}, hljs.BACKSLASH_ESCAPE, SUBST_NO_LF]
	  };
	  var INTERPOLATED_VERBATIM_STRING = {
	    className: 'string',
	    begin: /\$@"/, end: '"',
	    contains: [{begin: '{{'}, {begin: '}}'}, {begin: '""'}, SUBST]
	  };
	  var INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
	    illegal: /\n/,
	    contains: [{begin: '{{'}, {begin: '}}'}, {begin: '""'}, SUBST_NO_LF]
	  });
	  SUBST.contains = [
	    INTERPOLATED_VERBATIM_STRING,
	    INTERPOLATED_STRING,
	    VERBATIM_STRING,
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    hljs.C_NUMBER_MODE,
	    hljs.C_BLOCK_COMMENT_MODE
	  ];
	  SUBST_NO_LF.contains = [
	    INTERPOLATED_VERBATIM_STRING_NO_LF,
	    INTERPOLATED_STRING,
	    VERBATIM_STRING_NO_LF,
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    hljs.C_NUMBER_MODE,
	    hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {illegal: /\n/})
	  ];
	  var STRING = {
	    variants: [
	      INTERPOLATED_VERBATIM_STRING,
	      INTERPOLATED_STRING,
	      VERBATIM_STRING,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };
	
	  var TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';
	  return {
	    aliases: ['csharp'],
	    keywords: KEYWORDS,
	    illegal: /::/,
	    contains: [
	      hljs.COMMENT(
	        '///',
	        '$',
	        {
	          returnBegin: true,
	          contains: [
	            {
	              className: 'doctag',
	              variants: [
	                {
	                  begin: '///', relevance: 0
	                },
	                {
	                  begin: '<!--|-->'
	                },
	                {
	                  begin: '</?', end: '>'
	                }
	              ]
	            }
	          ]
	        }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'meta',
	        begin: '#', end: '$',
	        keywords: {'meta-keyword': 'if else elif endif define undef warning error line region endregion pragma checksum'}
	      },
	      STRING,
	      hljs.C_NUMBER_MODE,
	      {
	        beginKeywords: 'class interface', end: /[{;=]/,
	        illegal: /[^\s:]/,
	        contains: [
	          hljs.TITLE_MODE,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        beginKeywords: 'namespace', end: /[{;=]/,
	        illegal: /[^\s:]/,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {begin: '[a-zA-Z](\\.?\\w)*'}),
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        // Expression keywords prevent 'keyword Name(...)' from being
	        // recognized as a function definition
	        beginKeywords: 'new return throw await',
	        relevance: 0
	      },
	      {
	        className: 'function',
	        begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*\\(', returnBegin: true, end: /[{;=]/,
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          {
	            begin: hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
	            contains: [hljs.TITLE_MODE],
	            relevance: 0
	          },
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/,
	            excludeBegin: true,
	            excludeEnd: true,
	            keywords: KEYWORDS,
	            relevance: 0,
	            contains: [
	              STRING,
	              hljs.C_NUMBER_MODE,
	              hljs.C_BLOCK_COMMENT_MODE
	            ]
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 136 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    case_insensitive: false,
	    lexemes: '[a-zA-Z][a-zA-Z0-9_-]*',
	    keywords: {
	      keyword: 'base-uri child-src connect-src default-src font-src form-action' +
	        ' frame-ancestors frame-src img-src media-src object-src plugin-types' +
	        ' report-uri sandbox script-src style-src', 
	    },
	    contains: [
	    {
	      className: 'string',
	      begin: "'", end: "'"
	    },
	    {
	      className: 'attribute',
	      begin: '^Content', end: ':', excludeEnd: true,
	    },
	    ]
	  };
	};

/***/ },
/* 137 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
	  var RULE = {
	    begin: /[A-Z\_\.\-]+\s*:/, returnBegin: true, end: ';', endsWithParent: true,
	    contains: [
	      {
	        className: 'attribute',
	        begin: /\S/, end: ':', excludeEnd: true,
	        starts: {
	          endsWithParent: true, excludeEnd: true,
	          contains: [
	            {
	              begin: /[\w-]+\(/, returnBegin: true,
	              contains: [
	                {
	                  className: 'built_in',
	                  begin: /[\w-]+/
	                },
	                {
	                  begin: /\(/, end: /\)/,
	                  contains: [
	                    hljs.APOS_STRING_MODE,
	                    hljs.QUOTE_STRING_MODE
	                  ]
	                }
	              ]
	            },
	            hljs.CSS_NUMBER_MODE,
	            hljs.QUOTE_STRING_MODE,
	            hljs.APOS_STRING_MODE,
	            hljs.C_BLOCK_COMMENT_MODE,
	            {
	              className: 'number', begin: '#[0-9A-Fa-f]+'
	            },
	            {
	              className: 'meta', begin: '!important'
	            }
	          ]
	        }
	      }
	    ]
	  };
	
	  return {
	    case_insensitive: true,
	    illegal: /[=\/|'\$]/,
	    contains: [
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'selector-id', begin: /#[A-Za-z0-9_-]+/
	      },
	      {
	        className: 'selector-class', begin: /\.[A-Za-z0-9_-]+/
	      },
	      {
	        className: 'selector-attr',
	        begin: /\[/, end: /\]/,
	        illegal: '$'
	      },
	      {
	        className: 'selector-pseudo',
	        begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/
	      },
	      {
	        begin: '@(font-face|page)',
	        lexemes: '[a-z-]+',
	        keywords: 'font-face page'
	      },
	      {
	        begin: '@', end: '[{;]', // at_rule eating first "{" is a good thing
	                                 // because it doesn’t let it to be parsed as
	                                 // a rule set but instead drops parser into
	                                 // the default mode which is how it should be.
	        illegal: /:/, // break on Less variables @var: ...
	        contains: [
	          {
	            className: 'keyword',
	            begin: /\w+/
	          },
	          {
	            begin: /\s/, endsWithParent: true, excludeEnd: true,
	            relevance: 0,
	            contains: [
	              hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE,
	              hljs.CSS_NUMBER_MODE
	            ]
	          }
	        ]
	      },
	      {
	        className: 'selector-tag', begin: IDENT_RE,
	        relevance: 0
	      },
	      {
	        begin: '{', end: '}',
	        illegal: /\S/,
	        contains: [
	          hljs.C_BLOCK_COMMENT_MODE,
	          RULE,
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 138 */
/***/ function(module, exports) {

	module.exports = /**
	 * Known issues:
	 *
	 * - invalid hex string literals will be recognized as a double quoted strings
	 *   but 'x' at the beginning of string will not be matched
	 *
	 * - delimited string literals are not checked for matching end delimiter
	 *   (not possible to do with js regexp)
	 *
	 * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
	 *   also, content of token string is not validated to contain only valid D tokens
	 *
	 * - special token sequence rule is not strictly following D grammar (anything following #line
	 *   up to the end of line is matched as special token sequence)
	 */
	
	function(hljs) {
	  /**
	   * Language keywords
	   *
	   * @type {Object}
	   */
	  var D_KEYWORDS = {
	    keyword:
	      'abstract alias align asm assert auto body break byte case cast catch class ' +
	      'const continue debug default delete deprecated do else enum export extern final ' +
	      'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' +
	      'interface invariant is lazy macro mixin module new nothrow out override package ' +
	      'pragma private protected public pure ref return scope shared static struct ' +
	      'super switch synchronized template this throw try typedef typeid typeof union ' +
	      'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' +
	      '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',
	    built_in:
	      'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' +
	      'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' +
	      'wstring',
	    literal:
	      'false null true'
	  };
	
	  /**
	   * Number literal regexps
	   *
	   * @type {String}
	   */
	  var decimal_integer_re = '(0|[1-9][\\d_]*)',
	    decimal_integer_nosus_re = '(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)',
	    binary_integer_re = '0[bB][01_]+',
	    hexadecimal_digits_re = '([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)',
	    hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re,
	
	    decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')',
	    decimal_float_re = '(' + decimal_integer_nosus_re + '(\\.\\d*|' + decimal_exponent_re + ')|' +
	                '\\d+\\.' + decimal_integer_nosus_re + decimal_integer_nosus_re + '|' +
	                '\\.' + decimal_integer_re + decimal_exponent_re + '?' +
	              ')',
	    hexadecimal_float_re = '(0[xX](' +
	                  hexadecimal_digits_re + '\\.' + hexadecimal_digits_re + '|'+
	                  '\\.?' + hexadecimal_digits_re +
	                 ')[pP][+-]?' + decimal_integer_nosus_re + ')',
	
	    integer_re = '(' +
	      decimal_integer_re + '|' +
	      binary_integer_re  + '|' +
	       hexadecimal_integer_re   +
	    ')',
	
	    float_re = '(' +
	      hexadecimal_float_re + '|' +
	      decimal_float_re  +
	    ')';
	
	  /**
	   * Escape sequence supported in D string and character literals
	   *
	   * @type {String}
	   */
	  var escape_sequence_re = '\\\\(' +
	              '[\'"\\?\\\\abfnrtv]|' +  // common escapes
	              'u[\\dA-Fa-f]{4}|' +     // four hex digit unicode codepoint
	              '[0-7]{1,3}|' +       // one to three octal digit ascii char code
	              'x[\\dA-Fa-f]{2}|' +    // two hex digit ascii char code
	              'U[\\dA-Fa-f]{8}' +      // eight hex digit unicode codepoint
	              ')|' +
	              '&[a-zA-Z\\d]{2,};';      // named character entity
	
	  /**
	   * D integer number literals
	   *
	   * @type {Object}
	   */
	  var D_INTEGER_MODE = {
	    className: 'number',
	      begin: '\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',
	      relevance: 0
	  };
	
	  /**
	   * [D_FLOAT_MODE description]
	   * @type {Object}
	   */
	  var D_FLOAT_MODE = {
	    className: 'number',
	    begin: '\\b(' +
	        float_re + '([fF]|L|i|[fF]i|Li)?|' +
	        integer_re + '(i|[fF]i|Li)' +
	      ')',
	    relevance: 0
	  };
	
	  /**
	   * D character literal
	   *
	   * @type {Object}
	   */
	  var D_CHARACTER_MODE = {
	    className: 'string',
	    begin: '\'(' + escape_sequence_re + '|.)', end: '\'',
	    illegal: '.'
	  };
	
	  /**
	   * D string escape sequence
	   *
	   * @type {Object}
	   */
	  var D_ESCAPE_SEQUENCE = {
	    begin: escape_sequence_re,
	    relevance: 0
	  };
	
	  /**
	   * D double quoted string literal
	   *
	   * @type {Object}
	   */
	  var D_STRING_MODE = {
	    className: 'string',
	    begin: '"',
	    contains: [D_ESCAPE_SEQUENCE],
	    end: '"[cwd]?'
	  };
	
	  /**
	   * D wysiwyg and delimited string literals
	   *
	   * @type {Object}
	   */
	  var D_WYSIWYG_DELIMITED_STRING_MODE = {
	    className: 'string',
	    begin: '[rq]"',
	    end: '"[cwd]?',
	    relevance: 5
	  };
	
	  /**
	   * D alternate wysiwyg string literal
	   *
	   * @type {Object}
	   */
	  var D_ALTERNATE_WYSIWYG_STRING_MODE = {
	    className: 'string',
	    begin: '`',
	    end: '`[cwd]?'
	  };
	
	  /**
	   * D hexadecimal string literal
	   *
	   * @type {Object}
	   */
	  var D_HEX_STRING_MODE = {
	    className: 'string',
	    begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
	    relevance: 10
	  };
	
	  /**
	   * D delimited string literal
	   *
	   * @type {Object}
	   */
	  var D_TOKEN_STRING_MODE = {
	    className: 'string',
	    begin: 'q"\\{',
	    end: '\\}"'
	  };
	
	  /**
	   * Hashbang support
	   *
	   * @type {Object}
	   */
	  var D_HASHBANG_MODE = {
	    className: 'meta',
	    begin: '^#!',
	    end: '$',
	    relevance: 5
	  };
	
	  /**
	   * D special token sequence
	   *
	   * @type {Object}
	   */
	  var D_SPECIAL_TOKEN_SEQUENCE_MODE = {
	    className: 'meta',
	    begin: '#(line)',
	    end: '$',
	    relevance: 5
	  };
	
	  /**
	   * D attributes
	   *
	   * @type {Object}
	   */
	  var D_ATTRIBUTE_MODE = {
	    className: 'keyword',
	    begin: '@[a-zA-Z_][a-zA-Z_\\d]*'
	  };
	
	  /**
	   * D nesting comment
	   *
	   * @type {Object}
	   */
	  var D_NESTING_COMMENT_MODE = hljs.COMMENT(
	    '\\/\\+',
	    '\\+\\/',
	    {
	      contains: ['self'],
	      relevance: 10
	    }
	  );
	
	  return {
	    lexemes: hljs.UNDERSCORE_IDENT_RE,
	    keywords: D_KEYWORDS,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	        hljs.C_BLOCK_COMMENT_MODE,
	        D_NESTING_COMMENT_MODE,
	        D_HEX_STRING_MODE,
	        D_STRING_MODE,
	        D_WYSIWYG_DELIMITED_STRING_MODE,
	        D_ALTERNATE_WYSIWYG_STRING_MODE,
	        D_TOKEN_STRING_MODE,
	        D_FLOAT_MODE,
	        D_INTEGER_MODE,
	        D_CHARACTER_MODE,
	        D_HASHBANG_MODE,
	        D_SPECIAL_TOKEN_SEQUENCE_MODE,
	        D_ATTRIBUTE_MODE
	    ]
	  };
	};

/***/ },
/* 139 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['md', 'mkdown', 'mkd'],
	    contains: [
	      // highlight headers
	      {
	        className: 'section',
	        variants: [
	          { begin: '^#{1,6}', end: '$' },
	          { begin: '^.+?\\n[=-]{2,}$' }
	        ]
	      },
	      // inline html
	      {
	        begin: '<', end: '>',
	        subLanguage: 'xml',
	        relevance: 0
	      },
	      // lists (indicators only)
	      {
	        className: 'bullet',
	        begin: '^([*+-]|(\\d+\\.))\\s+'
	      },
	      // strong segments
	      {
	        className: 'strong',
	        begin: '[*_]{2}.+?[*_]{2}'
	      },
	      // emphasis segments
	      {
	        className: 'emphasis',
	        variants: [
	          { begin: '\\*.+?\\*' },
	          { begin: '_.+?_'
	          , relevance: 0
	          }
	        ]
	      },
	      // blockquotes
	      {
	        className: 'quote',
	        begin: '^>\\s+', end: '$'
	      },
	      // code snippets
	      {
	        className: 'code',
	        variants: [
	          {
	            begin: '^```\w*\s*$', end: '^```\s*$'
	          },
	          {
	            begin: '`.+?`'
	          },
	          {
	            begin: '^( {4}|\t)', end: '$',
	            relevance: 0
	          }
	        ]
	      },
	      // horizontal rules
	      {
	        begin: '^[-\\*]{3,}', end: '$'
	      },
	      // using links - title and link
	      {
	        begin: '\\[.+?\\][\\(\\[].*?[\\)\\]]',
	        returnBegin: true,
	        contains: [
	          {
	            className: 'string',
	            begin: '\\[', end: '\\]',
	            excludeBegin: true,
	            returnEnd: true,
	            relevance: 0
	          },
	          {
	            className: 'link',
	            begin: '\\]\\(', end: '\\)',
	            excludeBegin: true, excludeEnd: true
	          },
	          {
	            className: 'symbol',
	            begin: '\\]\\[', end: '\\]',
	            excludeBegin: true, excludeEnd: true
	          }
	        ],
	        relevance: 10
	      },
	      {
	        begin: /^\[[^\n]+\]:/,
	        returnBegin: true,
	        contains: [
	          {
	            className: 'symbol',
	            begin: /\[/, end: /\]/,
	            excludeBegin: true, excludeEnd: true
	          },
	          {
	            className: 'link',
	            begin: /:\s*/, end: /$/,
	            excludeBegin: true
	          }
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 140 */
/***/ function(module, exports) {

	module.exports = function (hljs) {
	  var SUBST = {
	    className: 'subst',
	    begin: '\\$\\{', end: '}',
	    keywords: 'true false null this is new super'
	  };
	
	  var STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: 'r\'\'\'', end: '\'\'\''
	      },
	      {
	        begin: 'r"""', end: '"""'
	      },
	      {
	        begin: 'r\'', end: '\'',
	        illegal: '\\n'
	      },
	      {
	        begin: 'r"', end: '"',
	        illegal: '\\n'
	      },
	      {
	        begin: '\'\'\'', end: '\'\'\'',
	        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	      },
	      {
	        begin: '"""', end: '"""',
	        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	      },
	      {
	        begin: '\'', end: '\'',
	        illegal: '\\n',
	        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	      },
	      {
	        begin: '"', end: '"',
	        illegal: '\\n',
	        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	      }
	    ]
	  };
	  SUBST.contains = [
	    hljs.C_NUMBER_MODE, STRING
	  ];
	
	  var KEYWORDS = {
	    keyword: 'assert async await break case catch class const continue default do else enum extends false final ' +
	      'finally for if in is new null rethrow return super switch sync this throw true try var void while with yield ' +
	      'abstract as dynamic export external factory get implements import library operator part set static typedef',
	    built_in:
	      // dart:core
	      'print Comparable DateTime Duration Function Iterable Iterator List Map Match Null Object Pattern RegExp Set ' +
	      'Stopwatch String StringBuffer StringSink Symbol Type Uri bool double int num ' +
	      // dart:html
	      'document window querySelector querySelectorAll Element ElementList'
	  };
	
	  return {
	    keywords: KEYWORDS,
	    contains: [
	      STRING,
	      hljs.COMMENT(
	        '/\\*\\*',
	        '\\*/',
	        {
	          subLanguage: 'markdown'
	        }
	      ),
	      hljs.COMMENT(
	        '///',
	        '$',
	        {
	          subLanguage: 'markdown'
	        }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'class',
	        beginKeywords: 'class interface', end: '{', excludeEnd: true,
	        contains: [
	          {
	            beginKeywords: 'extends implements'
	          },
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta', begin: '@[A-Za-z]+'
	      },
	      {
	        begin: '=>' // No markup, just a relevance booster
	      }
	    ]
	  }
	};

/***/ },
/* 141 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS =
	    'exports register file shl array record property for mod while set ally label uses raise not ' +
	    'stored class safecall var interface or private static exit index inherited to else stdcall ' +
	    'override shr asm far resourcestring finalization packed virtual out and protected library do ' +
	    'xorwrite goto near function end div overload object unit begin string on inline repeat until ' +
	    'destructor write message program with read initialization except default nil if case cdecl in ' +
	    'downto threadvar of try pascal const external constructor type public then implementation ' +
	    'finally published procedure absolute reintroduce operator as is abstract alias assembler ' +
	    'bitpacked break continue cppdecl cvar enumerator experimental platform deprecated ' +
	    'unimplemented dynamic export far16 forward generic helper implements interrupt iochecks ' +
	    'local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat ' +
	    'specialize strict unaligned varargs ';
	  var COMMENT_MODES = [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.COMMENT(
	      /\{/,
	      /\}/,
	      {
	        relevance: 0
	      }
	    ),
	    hljs.COMMENT(
	      /\(\*/,
	      /\*\)/,
	      {
	        relevance: 10
	      }
	    )
	  ];
	  var STRING = {
	    className: 'string',
	    begin: /'/, end: /'/,
	    contains: [{begin: /''/}]
	  };
	  var CHAR_STRING = {
	    className: 'string', begin: /(#\d+)+/
	  };
	  var CLASS = {
	    begin: hljs.IDENT_RE + '\\s*=\\s*class\\s*\\(', returnBegin: true,
	    contains: [
	      hljs.TITLE_MODE
	    ]
	  };
	  var FUNCTION = {
	    className: 'function',
	    beginKeywords: 'function constructor destructor procedure', end: /[:;]/,
	    keywords: 'function constructor|10 destructor|10 procedure|10',
	    contains: [
	      hljs.TITLE_MODE,
	      {
	        className: 'params',
	        begin: /\(/, end: /\)/,
	        keywords: KEYWORDS,
	        contains: [STRING, CHAR_STRING]
	      }
	    ].concat(COMMENT_MODES)
	  };
	  return {
	    aliases: ['dpr', 'dfm', 'pas', 'pascal', 'freepascal', 'lazarus', 'lpr', 'lfm'],
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
	    contains: [
	      STRING, CHAR_STRING,
	      hljs.NUMBER_MODE,
	      CLASS,
	      FUNCTION
	    ].concat(COMMENT_MODES)
	  };
	};

/***/ },
/* 142 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['patch'],
	    contains: [
	      {
	        className: 'meta',
	        relevance: 10,
	        variants: [
	          {begin: /^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/},
	          {begin: /^\*\*\* +\d+,\d+ +\*\*\*\*$/},
	          {begin: /^\-\-\- +\d+,\d+ +\-\-\-\-$/}
	        ]
	      },
	      {
	        className: 'comment',
	        variants: [
	          {begin: /Index: /, end: /$/},
	          {begin: /={3,}/, end: /$/},
	          {begin: /^\-{3}/, end: /$/},
	          {begin: /^\*{3} /, end: /$/},
	          {begin: /^\+{3}/, end: /$/},
	          {begin: /\*{5}/, end: /\*{5}$/}
	        ]
	      },
	      {
	        className: 'addition',
	        begin: '^\\+', end: '$'
	      },
	      {
	        className: 'deletion',
	        begin: '^\\-', end: '$'
	      },
	      {
	        className: 'addition',
	        begin: '^\\!', end: '$'
	      }
	    ]
	  };
	};

/***/ },
/* 143 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var FILTER = {
	    begin: /\|[A-Za-z]+:?/,
	    keywords: {
	      name:
	        'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags ' +
	        'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands ' +
	        'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode ' +
	        'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort ' +
	        'dictsortreversed default_if_none pluralize lower join center default ' +
	        'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first ' +
	        'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize ' +
	        'localtime utc timezone'
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE
	    ]
	  };
	
	  return {
	    aliases: ['jinja'],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      hljs.COMMENT(/\{%\s*comment\s*%}/, /\{%\s*endcomment\s*%}/),
	      hljs.COMMENT(/\{#/, /#}/),
	      {
	        className: 'template-tag',
	        begin: /\{%/, end: /%}/,
	        contains: [
	          {
	            className: 'name',
	            begin: /\w+/,
	            keywords: {
	              name:
	                'comment endcomment load templatetag ifchanged endifchanged if endif firstof for ' +
	                'endfor ifnotequal endifnotequal widthratio extends include spaceless ' +
	                'endspaceless regroup ifequal endifequal ssi now with cycle url filter ' +
	                'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif ' +
	                'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix ' +
	                'plural get_current_language language get_available_languages ' +
	                'get_current_language_bidi get_language_info get_language_info_list localize ' +
	                'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone ' +
	                'verbatim'
	            },
	            starts: {
	              endsWithParent: true,
	              keywords: 'in by as',
	              contains: [FILTER],
	              relevance: 0
	            }
	          }
	        ]
	      },
	      {
	        className: 'template-variable',
	        begin: /\{\{/, end: /}}/,
	        contains: [FILTER]
	      }
	    ]
	  };
	};

/***/ },
/* 144 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['bind', 'zone'],
	    keywords: {
	      keyword:
	        'IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX ' +
	        'LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT'
	    },
	    contains: [
	      hljs.COMMENT(';', '$', {relevance: 0}),
	      {
	        className: 'meta',
	        begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
	      },
	      // IPv6
	      {
	        className: 'number',
	        begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b'
	      },
	      // IPv4
	      {
	        className: 'number',
	        begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b'
	      },
	      hljs.inherit(hljs.NUMBER_MODE, {begin: /\b\d+[dhwm]?/})
	    ]
	  };
	};

/***/ },
/* 145 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['docker'],
	    case_insensitive: true,
	    keywords: 'from maintainer expose env user onbuild',
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      {
	        beginKeywords: 'run cmd entrypoint volume add copy workdir label healthcheck',
	        starts: {
	          end: /[^\\]\n/,
	          subLanguage: 'bash'
	        }
	      }
	    ],
	    illegal: '</'
	  }
	};

/***/ },
/* 146 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var COMMENT = hljs.COMMENT(
	    /^\s*@?rem\b/, /$/,
	    {
	      relevance: 10
	    }
	  );
	  var LABEL = {
	    className: 'symbol',
	    begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)',
	    relevance: 0
	  };
	  return {
	    aliases: ['bat', 'cmd'],
	    case_insensitive: true,
	    illegal: /\/\*/,
	    keywords: {
	      keyword:
	        'if else goto for in do call exit not exist errorlevel defined ' +
	        'equ neq lss leq gtr geq',
	      built_in:
	        'prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux ' +
	        'shift cd dir echo setlocal endlocal set pause copy ' +
	        'append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color ' +
	        'comp compact convert date dir diskcomp diskcopy doskey erase fs ' +
	        'find findstr format ftype graftabl help keyb label md mkdir mode more move path ' +
	        'pause print popd pushd promt rd recover rem rename replace restore rmdir shift' +
	        'sort start subst time title tree type ver verify vol ' +
	        // winutils
	        'ping net ipconfig taskkill xcopy ren del'
	    },
	    contains: [
	      {
	        className: 'variable', begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
	      },
	      {
	        className: 'function',
	        begin: LABEL.begin, end: 'goto:eof',
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*'}),
	          COMMENT
	        ]
	      },
	      {
	        className: 'number', begin: '\\b\\d+',
	        relevance: 0
	      },
	      COMMENT
	    ]
	  };
	};

/***/ },
/* 147 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var QUOTED_PROPERTY = {
	    className: 'string',
	    begin: /"/, end: /"/
	  };
	  var APOS_PROPERTY = {
	    className: 'string',
	    begin: /'/, end: /'/
	  };
	  var UNQUOTED_PROPERTY = {
	    className: 'string',
	    begin: '[\\w-?]+:\\w+', end: '\\W',
	    relevance: 0
	  };
	  var VALUELESS_PROPERTY = {
	    className: 'string',
	    begin: '\\w+-?\\w+', end: '\\W',
	    relevance: 0
	  };
	
	  return {
	    keywords: 'dsconfig',
	    contains: [
	      {
	        className: 'keyword',
	        begin: '^dsconfig', end: '\\s', excludeEnd: true,
	        relevance: 10
	      },
	      {
	        className: 'built_in',
	        begin: '(list|create|get|set|delete)-(\\w+)', end: '\\s', excludeEnd: true,
	        illegal: '!@#$%^&*()',
	        relevance: 10
	      },
	      {
	        className: 'built_in',
	        begin: '--(\\w+)', end: '\\s', excludeEnd: true
	      },
	      QUOTED_PROPERTY,
	      APOS_PROPERTY,
	      UNQUOTED_PROPERTY,
	      VALUELESS_PROPERTY,
	      hljs.HASH_COMMENT_MODE
	    ]
	  };
	};

/***/ },
/* 148 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var STRINGS = {
	    className: 'string',
	    variants: [
	      hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
	      {
	        begin: '(u8?|U)?R"', end: '"',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      {
	        begin: '\'\\\\?.', end: '\'',
	        illegal: '.'
	      }
	    ]
	  };
	
	  var NUMBERS = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)' },
	      { begin: hljs.C_NUMBER_RE }
	    ],
	    relevance: 0
	  };
	
	  var PREPROCESSOR = {
	    className: 'meta',
	    begin: '#', end: '$',
	    keywords: {'meta-keyword': 'if else elif endif define undef ifdef ifndef'},
	    contains: [
	      {
	        begin: /\\\n/, relevance: 0
	      },
	      {
	        beginKeywords: 'include', end: '$',
	        keywords: {'meta-keyword': 'include'},
	        contains: [
	          hljs.inherit(STRINGS, {className: 'meta-string'}),
	          {
	            className: 'meta-string',
	            begin: '<', end: '>',
	            illegal: '\\n'
	          }
	        ]
	      },
	      STRINGS,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	
	  var DTS_REFERENCE = {
	    className: 'variable',
	    begin: '\\&[a-z\\d_]*\\b'
	  };
	
	  var DTS_KEYWORD = {
	    className: 'meta-keyword',
	    begin: '/[a-z][a-z\\d-]*/'
	  };
	
	  var DTS_LABEL = {
	    className: 'symbol',
	    begin: '^\\s*[a-zA-Z_][a-zA-Z\\d_]*:'
	  };
	
	  var DTS_CELL_PROPERTY = {
	    className: 'params',
	    begin: '<',
	    end: '>',
	    contains: [
	      NUMBERS,
	      DTS_REFERENCE
	    ]
	  };
	
	  var DTS_NODE = {
	    className: 'class',
	    begin: /[a-zA-Z_][a-zA-Z\d_@]*\s{/,
	    end: /[{;=]/,
	    returnBegin: true,
	    excludeEnd: true
	  };
	
	  var DTS_ROOT_NODE = {
	    className: 'class',
	    begin: '/\\s*{',
	    end: '};',
	    relevance: 10,
	    contains: [
	      DTS_REFERENCE,
	      DTS_KEYWORD,
	      DTS_LABEL,
	      DTS_NODE,
	      DTS_CELL_PROPERTY,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      NUMBERS,
	      STRINGS
	    ]
	  };
	
	  return {
	    keywords: "",
	    contains: [
	      DTS_ROOT_NODE,
	      DTS_REFERENCE,
	      DTS_KEYWORD,
	      DTS_LABEL,
	      DTS_NODE,
	      DTS_CELL_PROPERTY,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      NUMBERS,
	      STRINGS,
	      PREPROCESSOR,
	      {
	        begin: hljs.IDENT_RE + '::',
	        keywords: ""
	      }
	    ]
	  };
	};

/***/ },
/* 149 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var EXPRESSION_KEYWORDS = 'if eq ne lt lte gt gte select default math sep';
	  return {
	    aliases: ['dst'],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      {
	        className: 'template-tag',
	        begin: /\{[#\/]/, end: /\}/, illegal: /;/,
	        contains: [
	          {
	            className: 'name',
	            begin: /[a-zA-Z\.-]+/,
	            starts: {
	              endsWithParent: true, relevance: 0,
	              contains: [
	                hljs.QUOTE_STRING_MODE
	              ]
	            }
	          }
	        ]
	      },
	      {
	        className: 'template-variable',
	        begin: /\{/, end: /\}/, illegal: /;/,
	        keywords: EXPRESSION_KEYWORDS
	      }
	    ]
	  };
	};

/***/ },
/* 150 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	    var commentMode = hljs.COMMENT(/\(\*/, /\*\)/);
	
	    var nonTerminalMode = {
	        className: "attribute",
	        begin: /^[ ]*[a-zA-Z][a-zA-Z-]*([\s-]+[a-zA-Z][a-zA-Z]*)*/
	    };
	
	    var specialSequenceMode = {
	        className: "meta",
	        begin: /\?.*\?/
	    };
	
	    var ruleBodyMode = {
	        begin: /=/, end: /;/,
	        contains: [
	            commentMode,
	            specialSequenceMode,
	            // terminals
	            hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE
	        ]
	    };
	
	    return {
	        illegal: /\S/,
	        contains: [
	            commentMode,
	            nonTerminalMode,
	            ruleBodyMode
	        ]
	    };
	};

/***/ },
/* 151 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?';
	  var ELIXIR_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
	  var ELIXIR_KEYWORDS =
	    'and false then defined module in return redo retry end for true self when ' +
	    'next until do begin unless nil break not case cond alias while ensure or ' +
	    'include use alias fn quote';
	  var SUBST = {
	    className: 'subst',
	    begin: '#\\{', end: '}',
	    lexemes: ELIXIR_IDENT_RE,
	    keywords: ELIXIR_KEYWORDS
	  };
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
	    variants: [
	      {
	        begin: /'/, end: /'/
	      },
	      {
	        begin: /"/, end: /"/
	      }
	    ]
	  };
	  var FUNCTION = {
	    className: 'function',
	    beginKeywords: 'def defp defmacro', end: /\B\b/, // the mode is ended by the title
	    contains: [
	      hljs.inherit(hljs.TITLE_MODE, {
	        begin: ELIXIR_IDENT_RE,
	        endsParent: true
	      })
	    ]
	  };
	  var CLASS = hljs.inherit(FUNCTION, {
	    className: 'class',
	    beginKeywords: 'defimpl defmodule defprotocol defrecord', end: /\bdo\b|$|;/
	  });
	  var ELIXIR_DEFAULT_CONTAINS = [
	    STRING,
	    hljs.HASH_COMMENT_MODE,
	    CLASS,
	    FUNCTION,
	    {
	      className: 'symbol',
	      begin: ':(?!\\s)',
	      contains: [STRING, {begin: ELIXIR_METHOD_RE}],
	      relevance: 0
	    },
	    {
	      className: 'symbol',
	      begin: ELIXIR_IDENT_RE + ':',
	      relevance: 0
	    },
	    {
	      className: 'number',
	      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
	      relevance: 0
	    },
	    {
	      className: 'variable',
	      begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))'
	    },
	    {
	      begin: '->'
	    },
	    { // regexp container
	      begin: '(' + hljs.RE_STARTERS_RE + ')\\s*',
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        {
	          className: 'regexp',
	          illegal: '\\n',
	          contains: [hljs.BACKSLASH_ESCAPE, SUBST],
	          variants: [
	            {
	              begin: '/', end: '/[a-z]*'
	            },
	            {
	              begin: '%r\\[', end: '\\][a-z]*'
	            }
	          ]
	        }
	      ],
	      relevance: 0
	    }
	  ];
	  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;
	
	  return {
	    lexemes: ELIXIR_IDENT_RE,
	    keywords: ELIXIR_KEYWORDS,
	    contains: ELIXIR_DEFAULT_CONTAINS
	  };
	};

/***/ },
/* 152 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var COMMENT = {
	    variants: [
	      hljs.COMMENT('--', '$'),
	      hljs.COMMENT(
	        '{-',
	        '-}',
	        {
	          contains: ['self']
	        }
	      )
	    ]
	  };
	
	  var CONSTRUCTOR = {
	    className: 'type',
	    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (built-in, infix).
	    relevance: 0
	  };
	
	  var LIST = {
	    begin: '\\(', end: '\\)',
	    illegal: '"',
	    contains: [
	      {className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'},
	      COMMENT
	    ]
	  };
	
	  var RECORD = {
	    begin: '{', end: '}',
	    contains: LIST.contains
	  };
	
	  return {
	    keywords:
	      'let in if then else case of where module import exposing ' +
	      'type alias as infix infixl infixr port effect command subscription',
	    contains: [
	
	      // Top-level constructions.
	
	      {
	        beginKeywords: 'port effect module', end: 'exposing',
	        keywords: 'port effect module where command subscription exposing',
	        contains: [LIST, COMMENT],
	        illegal: '\\W\\.|;'
	      },
	      {
	        begin: 'import', end: '$',
	        keywords: 'import as exposing',
	        contains: [LIST, COMMENT],
	        illegal: '\\W\\.|;'
	      },
	      {
	        begin: 'type', end: '$',
	        keywords: 'type alias',
	        contains: [CONSTRUCTOR, LIST, RECORD, COMMENT]
	      },
	      {
	        beginKeywords: 'infix infixl infixr', end: '$',
	        contains: [hljs.C_NUMBER_MODE, COMMENT]
	      },
	      {
	        begin: 'port', end: '$',
	        keywords: 'port',
	        contains: [COMMENT]
	      },
	
	      // Literals and names.
	
	      // TODO: characters.
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      CONSTRUCTOR,
	      hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\w\']*'}),
	      COMMENT,
	
	      {begin: '->|<-'} // No markup, relevance booster
	    ]
	  };
	};

/***/ },
/* 153 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var RUBY_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
	  var RUBY_KEYWORDS = {
	    keyword:
	      'and then defined module in return redo if BEGIN retry end for self when ' +
	      'next until do begin unless END rescue else break undef not super class case ' +
	      'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor',
	    literal:
	      'true false nil'
	  };
	  var YARDOCTAG = {
	    className: 'doctag',
	    begin: '@[A-Za-z]+'
	  };
	  var IRB_OBJECT = {
	    begin: '#<', end: '>'
	  };
	  var COMMENT_MODES = [
	    hljs.COMMENT(
	      '#',
	      '$',
	      {
	        contains: [YARDOCTAG]
	      }
	    ),
	    hljs.COMMENT(
	      '^\\=begin',
	      '^\\=end',
	      {
	        contains: [YARDOCTAG],
	        relevance: 10
	      }
	    ),
	    hljs.COMMENT('^__END__', '\\n$')
	  ];
	  var SUBST = {
	    className: 'subst',
	    begin: '#\\{', end: '}',
	    keywords: RUBY_KEYWORDS
	  };
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE, SUBST],
	    variants: [
	      {begin: /'/, end: /'/},
	      {begin: /"/, end: /"/},
	      {begin: /`/, end: /`/},
	      {begin: '%[qQwWx]?\\(', end: '\\)'},
	      {begin: '%[qQwWx]?\\[', end: '\\]'},
	      {begin: '%[qQwWx]?{', end: '}'},
	      {begin: '%[qQwWx]?<', end: '>'},
	      {begin: '%[qQwWx]?/', end: '/'},
	      {begin: '%[qQwWx]?%', end: '%'},
	      {begin: '%[qQwWx]?-', end: '-'},
	      {begin: '%[qQwWx]?\\|', end: '\\|'},
	      {
	        // \B in the beginning suppresses recognition of ?-sequences where ?
	        // is the last character of a preceding identifier, as in: `func?4`
	        begin: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/
	      },
	      {
	        begin: /<<(-?)\w+$/, end: /^\s*\w+$/,
	      }
	    ]
	  };
	  var PARAMS = {
	    className: 'params',
	    begin: '\\(', end: '\\)', endsParent: true,
	    keywords: RUBY_KEYWORDS
	  };
	
	  var RUBY_DEFAULT_CONTAINS = [
	    STRING,
	    IRB_OBJECT,
	    {
	      className: 'class',
	      beginKeywords: 'class module', end: '$|;',
	      illegal: /=/,
	      contains: [
	        hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
	        {
	          begin: '<\\s*',
	          contains: [{
	            begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE
	          }]
	        }
	      ].concat(COMMENT_MODES)
	    },
	    {
	      className: 'function',
	      beginKeywords: 'def', end: '$|;',
	      contains: [
	        hljs.inherit(hljs.TITLE_MODE, {begin: RUBY_METHOD_RE}),
	        PARAMS
	      ].concat(COMMENT_MODES)
	    },
	    {
	      // swallow namespace qualifiers before symbols
	      begin: hljs.IDENT_RE + '::'
	    },
	    {
	      className: 'symbol',
	      begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
	      relevance: 0
	    },
	    {
	      className: 'symbol',
	      begin: ':(?!\\s)',
	      contains: [STRING, {begin: RUBY_METHOD_RE}],
	      relevance: 0
	    },
	    {
	      className: 'number',
	      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
	      relevance: 0
	    },
	    {
	      begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))' // variables
	    },
	    {
	      className: 'params',
	      begin: /\|/, end: /\|/,
	      keywords: RUBY_KEYWORDS
	    },
	    { // regexp container
	      begin: '(' + hljs.RE_STARTERS_RE + ')\\s*',
	      contains: [
	        IRB_OBJECT,
	        {
	          className: 'regexp',
	          contains: [hljs.BACKSLASH_ESCAPE, SUBST],
	          illegal: /\n/,
	          variants: [
	            {begin: '/', end: '/[a-z]*'},
	            {begin: '%r{', end: '}[a-z]*'},
	            {begin: '%r\\(', end: '\\)[a-z]*'},
	            {begin: '%r!', end: '![a-z]*'},
	            {begin: '%r\\[', end: '\\][a-z]*'}
	          ]
	        }
	      ].concat(COMMENT_MODES),
	      relevance: 0
	    }
	  ].concat(COMMENT_MODES);
	
	  SUBST.contains = RUBY_DEFAULT_CONTAINS;
	  PARAMS.contains = RUBY_DEFAULT_CONTAINS;
	
	  var SIMPLE_PROMPT = "[>?]>";
	  var DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+>";
	  var RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>";
	
	  var IRB_DEFAULT = [
	    {
	      begin: /^\s*=>/,
	      starts: {
	        end: '$', contains: RUBY_DEFAULT_CONTAINS
	      }
	    },
	    {
	      className: 'meta',
	      begin: '^('+SIMPLE_PROMPT+"|"+DEFAULT_PROMPT+'|'+RVM_PROMPT+')',
	      starts: {
	        end: '$', contains: RUBY_DEFAULT_CONTAINS
	      }
	    }
	  ];
	
	  return {
	    aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],
	    keywords: RUBY_KEYWORDS,
	    illegal: /\/\*/,
	    contains: COMMENT_MODES.concat(IRB_DEFAULT).concat(RUBY_DEFAULT_CONTAINS)
	  };
	};

/***/ },
/* 154 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    subLanguage: 'xml',
	    contains: [
	      hljs.COMMENT('<%#', '%>'),
	      {
	        begin: '<%[%=-]?', end: '[%-]?%>',
	        subLanguage: 'ruby',
	        excludeBegin: true,
	        excludeEnd: true
	      }
	    ]
	  };
	};

/***/ },
/* 155 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: {
	      built_in:
	        'spawn spawn_link self',
	      keyword:
	        'after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if ' +
	        'let not of or orelse|10 query receive rem try when xor'
	    },
	    contains: [
	      {
	        className: 'meta', begin: '^[0-9]+> ',
	        relevance: 10
	      },
	      hljs.COMMENT('%', '$'),
	      {
	        className: 'number',
	        begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
	        relevance: 0
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        begin: '\\?(::)?([A-Z]\\w*(::)?)+'
	      },
	      {
	        begin: '->'
	      },
	      {
	        begin: 'ok'
	      },
	      {
	        begin: '!'
	      },
	      {
	        begin: '(\\b[a-z\'][a-zA-Z0-9_\']*:[a-z\'][a-zA-Z0-9_\']*)|(\\b[a-z\'][a-zA-Z0-9_\']*)',
	        relevance: 0
	      },
	      {
	        begin: '[A-Z][a-zA-Z0-9_\']*',
	        relevance: 0
	      }
	    ]
	  };
	};

/***/ },
/* 156 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var BASIC_ATOM_RE = '[a-z\'][a-zA-Z0-9_\']*';
	  var FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';
	  var ERLANG_RESERVED = {
	    keyword:
	      'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if ' +
	      'let not of orelse|10 query receive rem try when xor',
	    literal:
	      'false true'
	  };
	
	  var COMMENT = hljs.COMMENT('%', '$');
	  var NUMBER = {
	    className: 'number',
	    begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
	    relevance: 0
	  };
	  var NAMED_FUN = {
	    begin: 'fun\\s+' + BASIC_ATOM_RE + '/\\d+'
	  };
	  var FUNCTION_CALL = {
	    begin: FUNCTION_NAME_RE + '\\(', end: '\\)',
	    returnBegin: true,
	    relevance: 0,
	    contains: [
	      {
	        begin: FUNCTION_NAME_RE, relevance: 0
	      },
	      {
	        begin: '\\(', end: '\\)', endsWithParent: true,
	        returnEnd: true,
	        relevance: 0
	        // "contains" defined later
	      }
	    ]
	  };
	  var TUPLE = {
	    begin: '{', end: '}',
	    relevance: 0
	    // "contains" defined later
	  };
	  var VAR1 = {
	    begin: '\\b_([A-Z][A-Za-z0-9_]*)?',
	    relevance: 0
	  };
	  var VAR2 = {
	    begin: '[A-Z][a-zA-Z0-9_]*',
	    relevance: 0
	  };
	  var RECORD_ACCESS = {
	    begin: '#' + hljs.UNDERSCORE_IDENT_RE,
	    relevance: 0,
	    returnBegin: true,
	    contains: [
	      {
	        begin: '#' + hljs.UNDERSCORE_IDENT_RE,
	        relevance: 0
	      },
	      {
	        begin: '{', end: '}',
	        relevance: 0
	        // "contains" defined later
	      }
	    ]
	  };
	
	  var BLOCK_STATEMENTS = {
	    beginKeywords: 'fun receive if try case', end: 'end',
	    keywords: ERLANG_RESERVED
	  };
	  BLOCK_STATEMENTS.contains = [
	    COMMENT,
	    NAMED_FUN,
	    hljs.inherit(hljs.APOS_STRING_MODE, {className: ''}),
	    BLOCK_STATEMENTS,
	    FUNCTION_CALL,
	    hljs.QUOTE_STRING_MODE,
	    NUMBER,
	    TUPLE,
	    VAR1, VAR2,
	    RECORD_ACCESS
	  ];
	
	  var BASIC_MODES = [
	    COMMENT,
	    NAMED_FUN,
	    BLOCK_STATEMENTS,
	    FUNCTION_CALL,
	    hljs.QUOTE_STRING_MODE,
	    NUMBER,
	    TUPLE,
	    VAR1, VAR2,
	    RECORD_ACCESS
	  ];
	  FUNCTION_CALL.contains[1].contains = BASIC_MODES;
	  TUPLE.contains = BASIC_MODES;
	  RECORD_ACCESS.contains[1].contains = BASIC_MODES;
	
	  var PARAMS = {
	    className: 'params',
	    begin: '\\(', end: '\\)',
	    contains: BASIC_MODES
	  };
	  return {
	    aliases: ['erl'],
	    keywords: ERLANG_RESERVED,
	    illegal: '(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))',
	    contains: [
	      {
	        className: 'function',
	        begin: '^' + BASIC_ATOM_RE + '\\s*\\(', end: '->',
	        returnBegin: true,
	        illegal: '\\(|#|//|/\\*|\\\\|:|;',
	        contains: [
	          PARAMS,
	          hljs.inherit(hljs.TITLE_MODE, {begin: BASIC_ATOM_RE})
	        ],
	        starts: {
	          end: ';|\\.',
	          keywords: ERLANG_RESERVED,
	          contains: BASIC_MODES
	        }
	      },
	      COMMENT,
	      {
	        begin: '^-', end: '\\.',
	        relevance: 0,
	        excludeEnd: true,
	        returnBegin: true,
	        lexemes: '-' + hljs.IDENT_RE,
	        keywords:
	          '-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn ' +
	          '-import -include -include_lib -compile -define -else -endif -file -behaviour ' +
	          '-behavior -spec',
	        contains: [PARAMS]
	      },
	      NUMBER,
	      hljs.QUOTE_STRING_MODE,
	      RECORD_ACCESS,
	      VAR1, VAR2,
	      TUPLE,
	      {begin: /\.$/} // relevance booster
	    ]
	  };
	};

/***/ },
/* 157 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['xlsx', 'xls'],
	    case_insensitive: true,
	    lexemes: /[a-zA-Z][\w\.]*/,
	    // built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
	    keywords: {
	        built_in: 'ABS ACCRINT ACCRINTM ACOS ACOSH ACOT ACOTH AGGREGATE ADDRESS AMORDEGRC AMORLINC AND ARABIC AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS BAHTTEXT BASE BESSELI BESSELJ BESSELK BESSELY BETADIST BETA.DIST BETAINV BETA.INV BIN2DEC BIN2HEX BIN2OCT BINOMDIST BINOM.DIST BINOM.DIST.RANGE BINOM.INV BITAND BITLSHIFT BITOR BITRSHIFT BITXOR CALL CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHITEST CHISQ.DIST CHISQ.DIST.RT CHISQ.INV CHISQ.INV.RT CHISQ.TEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMBINA COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONFIDENCE.T CONVERT CORREL COS COSH COT COTH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CSC CSCH CUBEKPIMEMBER CUBEMEMBER CUBEMEMBERPROPERTY CUBERANKEDMEMBER CUBESET CUBESETCOUNT CUBEVALUE CUMIPMT CUMPRINC DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DBCS DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DECIMAL DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP EDATE EFFECT ENCODEURL EOMONTH ERF ERF.PRECISE ERFC ERFC.PRECISE ERROR.TYPE EUROCONVERT EVEN EXACT EXP EXPON.DIST EXPONDIST FACT FACTDOUBLE FALSE|0 F.DIST FDIST F.DIST.RT FILTERXML FIND FINDB F.INV F.INV.RT FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FLOOR.PRECISE FORECAST FORECAST.ETS FORECAST.ETS.CONFINT FORECAST.ETS.SEASONALITY FORECAST.ETS.STAT FORECAST.LINEAR FORMULATEXT FREQUENCY F.TEST FTEST FV FVSCHEDULE GAMMA GAMMA.DIST GAMMADIST GAMMA.INV GAMMAINV GAMMALN GAMMALN.PRECISE GAUSS GCD GEOMEAN GESTEP GETPIVOTDATA GROWTH HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST IF|0 IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMCOSH IMCOT IMCSC IMCSCH IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSEC IMSECH IMSIN IMSINH IMSQRT IMSUB IMSUM IMTAN INDEX INDIRECT INFO INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISFORMULA ISLOGICAL ISNA ISNONTEXT ISNUMBER ISODD ISREF ISTEXT ISO.CEILING ISOWEEKNUM ISPMT JIS KURT LARGE LCM LEFT LEFTB LEN LENB LINEST LN LOG LOG10 LOGEST LOGINV LOGNORM.DIST LOGNORMDIST LOGNORM.INV LOOKUP LOWER MATCH MAX MAXA MAXIFS MDETERM MDURATION MEDIAN MID MIDBs MIN MINIFS MINA MINUTE MINVERSE MIRR MMULT MOD MODE MODE.MULT MODE.SNGL MONTH MROUND MULTINOMIAL MUNIT N NA NEGBINOM.DIST NEGBINOMDIST NETWORKDAYS NETWORKDAYS.INTL NOMINAL NORM.DIST NORMDIST NORMINV NORM.INV NORM.S.DIST NORMSDIST NORM.S.INV NORMSINV NOT NOW NPER NPV NUMBERVALUE OCT2BIN OCT2DEC OCT2HEX ODD ODDFPRICE ODDFYIELD ODDLPRICE ODDLYIELD OFFSET OR PDURATION PEARSON PERCENTILE.EXC PERCENTILE.INC PERCENTILE PERCENTRANK.EXC PERCENTRANK.INC PERCENTRANK PERMUT PERMUTATIONA PHI PHONETIC PI PMT POISSON.DIST POISSON POWER PPMT PRICE PRICEDISC PRICEMAT PROB PRODUCT PROPER PV QUARTILE QUARTILE.EXC QUARTILE.INC QUOTIENT RADIANS RAND RANDBETWEEN RANK.AVG RANK.EQ RANK RATE RECEIVED REGISTER.ID REPLACE REPLACEB REPT RIGHT RIGHTB ROMAN ROUND ROUNDDOWN ROUNDUP ROW ROWS RRI RSQ RTD SEARCH SEARCHB SEC SECH SECOND SERIESSUM SHEET SHEETS SIGN SIN SINH SKEW SKEW.P SLN SLOPE SMALL SQL.REQUEST SQRT SQRTPI STANDARDIZE STDEV STDEV.P STDEV.S STDEVA STDEVP STDEVPA STEYX SUBSTITUTE SUBTOTAL SUM SUMIF SUMIFS SUMPRODUCT SUMSQ SUMX2MY2 SUMX2PY2 SUMXMY2 SWITCH SYD T TAN TANH TBILLEQ TBILLPRICE TBILLYIELD T.DIST T.DIST.2T T.DIST.RT TDIST TEXT TEXTJOIN TIME TIMEVALUE T.INV T.INV.2T TINV TODAY TRANSPOSE TREND TRIM TRIMMEAN TRUE|0 TRUNC T.TEST TTEST TYPE UNICHAR UNICODE UPPER VALUE VAR VAR.P VAR.S VARA VARP VARPA VDB VLOOKUP WEBSERVICE WEEKDAY WEEKNUM WEIBULL WEIBULL.DIST WORKDAY WORKDAY.INTL XIRR XNPV XOR YEAR YEARFRAC YIELD YIELDDISC YIELDMAT Z.TEST ZTEST'
	    },
	    contains: [
	      {
	        /* matches a beginning equal sign found in Excel formula examples */ 
	        begin: /^=/,
	        end: /[^=]/, returnEnd: true, illegal: /=/, /* only allow single equal sign at front of line */
	        relevance: 10
	      },
	      /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
	      {
	        /* matches a reference to a single cell */
	        className: 'symbol',
	        begin: /\b[A-Z]{1,2}\d+\b/,
	        end: /[^\d]/, excludeEnd: true,
	        relevance: 0
	      },
	      {
	        /* matches a reference to a range of cells */
	        className: 'symbol',
	        begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
	        relevance: 0
	      },
	      hljs.BACKSLASH_ESCAPE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'number',
	        begin: hljs.NUMBER_RE + '(%)?',
	        relevance: 0
	      },
	      /* Excel formula comments are done by putting the comment in a function call to N() */
	      hljs.COMMENT(/\bN\(/,/\)/,
	      {
	        excludeBegin: true,
	        excludeEnd: true,
	        illegal: /\n/
	      })
	    ]
	  };
	};

/***/ },
/* 158 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    contains: [
	    {
	      begin: /[^\u2401\u0001]+/,
	      end: /[\u2401\u0001]/,
	      excludeEnd: true,
	      returnBegin: true,
	      returnEnd: false,
	      contains: [
	      {
	        begin: /([^\u2401\u0001=]+)/,
	        end: /=([^\u2401\u0001=]+)/,
	        returnEnd: true,
	        returnBegin: false,
	        className: 'attr'
	      },
	      {
	        begin: /=/,
	        end: /([\u2401\u0001])/,
	        excludeEnd: true,
	        excludeBegin: true,
	        className: 'string'
	      }]
	    }],
	    case_insensitive: true
	  };
	};

/***/ },
/* 159 */
/***/ function(module, exports) {

	module.exports = function (hljs) {
	
	    var CHAR = {
	        className: 'string',
	        begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
	    };
	
	    var STRING = {
	        className: 'string',
	        variants: [
	            {
	                begin: '"', end: '"'
	            }
	        ]
	    };
	
	    var NAME = {
	        className: 'title',
	        begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
	    };
	
	    var METHOD = {
	        className: 'function',
	        beginKeywords: 'def',
	        end: /[:={\[(\n;]/,
	        excludeEnd: true,
	        contains: [NAME]
	    };
	
	    return {
	        keywords: {
	            literal: 'true false',
	            keyword: 'case class def else enum if impl import in lat rel index let match namespace switch type yield with'
	        },
	        contains: [
	            hljs.C_LINE_COMMENT_MODE,
	            hljs.C_BLOCK_COMMENT_MODE,
	            CHAR,
	            STRING,
	            METHOD,
	            hljs.C_NUMBER_MODE
	        ]
	    };
	};

/***/ },
/* 160 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var PARAMS = {
	    className: 'params',
	    begin: '\\(', end: '\\)'
	  };
	
	  var F_KEYWORDS = {
	    literal: '.False. .True.',
	    keyword: 'kind do while private call intrinsic where elsewhere ' +
	      'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +
	      'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +
	      'goto save else use module select case ' +
	      'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +
	      'continue format pause cycle exit ' +
	      'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +
	      'synchronous nopass non_overridable pass protected volatile abstract extends import ' +
	      'non_intrinsic value deferred generic final enumerator class associate bind enum ' +
	      'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +
	      'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +
	      'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +
	      'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +
	      'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +
	      'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +
	      'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +
	      'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +
	      'integer real character complex logical dimension allocatable|10 parameter ' +
	      'external implicit|10 none double precision assign intent optional pointer ' +
	      'target in out common equivalence data',
	    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +
	      'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +
	      'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +
	      'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +
	      'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +
	      'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +
	      'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +
	      'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +
	      'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +
	      'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +
	      'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +
	      'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +
	      'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +
	      'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +
	      'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +
	      'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +
	      'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +
	      'num_images parity popcnt poppar shifta shiftl shiftr this_image'
	  };
	  return {
	    case_insensitive: true,
	    aliases: ['f90', 'f95'],
	    keywords: F_KEYWORDS,
	    illegal: /\/\*/,
	    contains: [
	      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),
	      {
	        className: 'function',
	        beginKeywords: 'subroutine function program',
	        illegal: '[${=\\n]',
	        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
	      },
	      hljs.COMMENT('!', '$', {relevance: 0}),
	      {
	        className: 'number',
	        begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
	        relevance: 0
	      }
	    ]
	  };
	};

/***/ },
/* 161 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var TYPEPARAM = {
	    begin: '<', end: '>',
	    contains: [
	      hljs.inherit(hljs.TITLE_MODE, {begin: /'[a-zA-Z0-9_]+/})
	    ]
	  };
	
	  return {
	    aliases: ['fs'],
	    keywords:
	      'abstract and as assert base begin class default delegate do done ' +
	      'downcast downto elif else end exception extern false finally for ' +
	      'fun function global if in inherit inline interface internal lazy let ' +
	      'match member module mutable namespace new null of open or ' +
	      'override private public rec return sig static struct then to ' +
	      'true try type upcast use val void when while with yield',
	    illegal: /\/\*/,
	    contains: [
	      {
	        // monad builder keywords (matches before non-bang kws)
	        className: 'keyword',
	        begin: /\b(yield|return|let|do)!/
	      },
	      {
	        className: 'string',
	        begin: '@"', end: '"',
	        contains: [{begin: '""'}]
	      },
	      {
	        className: 'string',
	        begin: '"""', end: '"""'
	      },
	      hljs.COMMENT('\\(\\*', '\\*\\)'),
	      {
	        className: 'class',
	        beginKeywords: 'type', end: '\\(|=|$', excludeEnd: true,
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          TYPEPARAM
	        ]
	      },
	      {
	        className: 'meta',
	        begin: '\\[<', end: '>\\]',
	        relevance: 10
	      },
	      {
	        className: 'symbol',
	        begin: '\\B(\'[A-Za-z])\\b',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
	      hljs.C_NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 162 */
/***/ function(module, exports) {

	module.exports = function (hljs) {
	  var KEYWORDS = {
	    'keyword':
	      'abort acronym acronyms alias all and assign binary card diag display ' +
	      'else eq file files for free ge gt if integer le loop lt maximizing ' +
	      'minimizing model models ne negative no not option options or ord ' +
	      'positive prod put putpage puttl repeat sameas semicont semiint smax ' +
	      'smin solve sos1 sos2 sum system table then until using while xor yes',
	    'literal': 'eps inf na',
	    'built-in':
	      'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy ' +
	      'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact ' +
	      'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max ' +
	      'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power ' +
	      'randBinomial randLinear randTriangle round rPower sigmoid sign ' +
	      'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt ' +
	      'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp ' +
	      'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt ' +
	      'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear ' +
	      'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion ' +
	      'handleCollect handleDelete handleStatus handleSubmit heapFree ' +
	      'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate ' +
	      'licenseLevel licenseStatus maxExecError sleep timeClose timeComp ' +
	      'timeElapsed timeExec timeStart'
	  };
	  var PARAMS = {
	    className: 'params',
	    begin: /\(/, end: /\)/,
	    excludeBegin: true,
	    excludeEnd: true,
	  };
	  var SYMBOLS = {
	    className: 'symbol',
	    variants: [
	      {begin: /\=[lgenxc]=/},
	      {begin: /\$/},
	    ]
	  };
	  var QSTR = { // One-line quoted comment string
	    className: 'comment',
	    variants: [
	      {begin: '\'', end: '\''},
	      {begin: '"', end: '"'},
	    ],
	    illegal: '\\n',
	    contains: [hljs.BACKSLASH_ESCAPE]
	  };
	  var ASSIGNMENT = {
	    begin: '/',
	    end: '/',
	    keywords: KEYWORDS,
	    contains: [
	      QSTR,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	    ],
	  };
	  var DESCTEXT = { // Parameter/set/variable description text
	    begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
	    excludeBegin: true,
	    end: '$',
	    endsWithParent: true,
	    contains: [
	      QSTR,
	      ASSIGNMENT,
	      {
	        className: 'comment',
	        begin: /([ ]*[a-z0-9&#*=?@>\\<:\-,()$\[\]_.{}!+%^]+)+/,
	        relevance: 0
	      },
	    ],
	  };
	
	  return {
	    aliases: ['gms'],
	    case_insensitive: true,
	    keywords: KEYWORDS,
	    contains: [
	      hljs.COMMENT(/^\$ontext/, /^\$offtext/),
	      {
	        className: 'meta',
	        begin: '^\\$[a-z0-9]+',
	        end: '$',
	        returnBegin: true,
	        contains: [
	          {
	            className: 'meta-keyword',
	            begin: '^\\$[a-z0-9]+',
	          }
	        ]
	      },
	      hljs.COMMENT('^\\*', '$'),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	      // Declarations
	      {
	        beginKeywords:
	          'set sets parameter parameters variable variables ' +
	          'scalar scalars equation equations',
	        end: ';',
	        contains: [
	          hljs.COMMENT('^\\*', '$'),
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          ASSIGNMENT,
	          DESCTEXT,
	        ]
	      },
	      { // table environment
	        beginKeywords: 'table',
	        end: ';',
	        returnBegin: true,
	        contains: [
	          { // table header row
	            beginKeywords: 'table',
	            end: '$',
	            contains: [DESCTEXT],
	          },
	          hljs.COMMENT('^\\*', '$'),
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          hljs.C_NUMBER_MODE,
	          // Table does not contain DESCTEXT or ASSIGNMENT
	        ]
	      },
	      // Function definitions
	      {
	        className: 'function',
	        begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
	        returnBegin: true,
	        contains: [
	              { // Function title
	                className: 'title',
	                begin: /^[a-z][a-z0-9_]+/,
	              },
	              PARAMS,
	              SYMBOLS,
	            ],
	      },
	      hljs.C_NUMBER_MODE,
	      SYMBOLS,
	    ]
	  };
	};

/***/ },
/* 163 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	    keyword: 'and bool break call callexe checkinterrupt clear clearg closeall cls comlog compile ' +
	              'continue create debug declare delete disable dlibrary dllcall do dos ed edit else ' +
	              'elseif enable end endfor endif endp endo errorlog errorlogat expr external fn ' +
	              'for format goto gosub graph if keyword let lib library line load loadarray loadexe ' +
	              'loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow ' +
	              'matrix msym ndpclex new not open or output outwidth plot plotsym pop prcsn print ' +
	              'printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen ' +
	              'scroll setarray show sparse stop string struct system trace trap threadfor ' +
	              'threadendfor threadbegin threadjoin threadstat threadend until use while winprint',
	    built_in: 'abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol ' +
	              'AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks ' +
	              'AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults ' +
	              'annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness ' +
	              'annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd ' +
	              'astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar ' +
	              'base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 ' +
	              'cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv ' +
	              'cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn ' +
	              'cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi ' +
	              'cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ' +
	              'ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated ' +
	              'complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs ' +
	              'cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos ' +
	              'datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd ' +
	              'dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName ' +
	              'dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy ' +
	              'dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen ' +
	              'dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA ' +
	              'dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField ' +
	              'dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition ' +
	              'dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows ' +
	              'dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly ' +
	              'dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy ' +
	              'dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl ' +
	              'dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt ' +
	              'dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday ' +
	              'dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays ' +
	              'endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error ' +
	              'etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut ' +
	              'EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol ' +
	              'EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq ' +
	              'feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt ' +
	              'floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC ' +
	              'gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders ' +
	              'gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse ' +
	              'gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray ' +
	              'getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders ' +
	              'getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT ' +
	              'gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm ' +
	              'hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 ' +
	              'indicesf indicesfn indnv indsav indx integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 ' +
	              'inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf ' +
	              'isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv ' +
	              'lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn ' +
	              'lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind ' +
	              'loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars ' +
	              'makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli ' +
	              'mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave ' +
	              'movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate ' +
	              'olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto ' +
	              'pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox ' +
	              'plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea ' +
	              'plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout ' +
	              'plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill ' +
	              'plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol ' +
	              'plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange ' +
	              'plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel ' +
	              'plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot ' +
	              'pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames ' +
	              'pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector ' +
	              'pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate ' +
	              'qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr ' +
	              'real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn ' +
	              'rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel ' +
	              'rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn ' +
	              'rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh ' +
	              'rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind ' +
	              'scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa ' +
	              'setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind ' +
	              'sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL ' +
	              'spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense ' +
	              'spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet ' +
	              'sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt ' +
	              'strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr ' +
	              'surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname threadBegin threadEnd threadEndFor threadFor ' +
	              'threadJoin threadStat time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk ' +
	              'trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt ' +
	              'utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs ' +
	              'vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window ' +
	              'writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM ' +
	              'xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics',
	    literal: 'DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS ' +
	             'DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 ' +
	             'DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS ' +
	             'DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES ' +
	             'DB_TRANSACTIONS DB_UNICODE DB_VIEWS'
	  };
	
	  var PREPROCESSOR =
	  {
	    className: 'meta',
	    begin: '#', end: '$',
	    keywords: {'meta-keyword': 'define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline'},
	    contains: [
	      {
	        begin: /\\\n/, relevance: 0
	      },
	      {
	        beginKeywords: 'include', end: '$',
	        keywords: {'meta-keyword': 'include'},
	        contains: [
	          {
	            className: 'meta-string',
	            begin: '"', end: '"',
	            illegal: '\\n'
	          }
	        ]
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	
	  var FUNCTION_TITLE = hljs.UNDERSCORE_IDENT_RE + '\\s*\\(?';
	  var PARSE_PARAMS = [
	    {
	      className: 'params',
	      begin: /\(/, end: /\)/,
	      keywords: KEYWORDS,
	      relevance: 0,
	      contains: [
	        hljs.C_NUMBER_MODE,
	        hljs.C_LINE_COMMENT_MODE,
	        hljs.C_BLOCK_COMMENT_MODE
	      ]
	    }
	  ];
	
	  return {
	    aliases: ['gss'],
	    case_insensitive: true, // language is case-insensitive
	    keywords: KEYWORDS,
	    illegal: '(\\{[%#]|[%#]\\})',
	    contains: [
	      hljs.C_NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.COMMENT('@', '@'),
	      PREPROCESSOR,
	      {
	        className: 'string',
	        begin: '"', end: '"',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      {
	        className: 'function',
	        beginKeywords: 'proc keyword',
	        end: ';',
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          {
	            begin: FUNCTION_TITLE, returnBegin: true,
	            contains: [hljs.UNDERSCORE_TITLE_MODE],
	            relevance: 0
	          },
	          hljs.C_NUMBER_MODE,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          PREPROCESSOR
	        ].concat(PARSE_PARAMS)
	      },
	      {
	        className: 'function',
	        beginKeywords: 'fn',
	        end: ';',
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          {
	            begin: FUNCTION_TITLE + hljs.IDENT_RE + '\\)?\\s*\\=\\s*', returnBegin: true,
	            contains: [hljs.UNDERSCORE_TITLE_MODE],
	            relevance: 0
	          },
	          hljs.C_NUMBER_MODE,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ].concat(PARSE_PARAMS)
	      },
	      {
	        className: 'function',
	        begin: '\\bexternal (proc|keyword|fn)\\s+',
	        end: ';',
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          {
	            begin: FUNCTION_TITLE, returnBegin: true,
	            contains: [hljs.UNDERSCORE_TITLE_MODE],
	            relevance: 0
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        className: 'function',
	        begin: '\\bexternal (matrix|string|array|sparse matrix|struct ' + hljs.IDENT_RE + ')\\s+',
	        end: ';',
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 164 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	    var GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
	    var GCODE_CLOSE_RE = '\\%';
	    var GCODE_KEYWORDS =
	      'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT ' +
	      'EQ LT GT NE GE LE OR XOR';
	    var GCODE_START = {
	        className: 'meta',
	        begin: '([O])([0-9]+)'
	    };
	    var GCODE_CODE = [
	        hljs.C_LINE_COMMENT_MODE,
	        hljs.C_BLOCK_COMMENT_MODE,
	        hljs.COMMENT(/\(/, /\)/),
	        hljs.inherit(hljs.C_NUMBER_MODE, {begin: '([-+]?([0-9]*\\.?[0-9]+\\.?))|' + hljs.C_NUMBER_RE}),
	        hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
	        hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
	        {
	            className: 'name',
	            begin: '([G])([0-9]+\\.?[0-9]?)'
	        },
	        {
	            className: 'name',
	            begin: '([M])([0-9]+\\.?[0-9]?)'
	        },
	        {
	            className: 'attr',
	            begin: '(VC|VS|#)',
	            end: '(\\d+)'
	        },
	        {
	            className: 'attr',
	            begin: '(VZOFX|VZOFY|VZOFZ)'
	        },
	        {
	            className: 'built_in',
	            begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)',
	            end: '([-+]?([0-9]*\\.?[0-9]+\\.?))(\\])'
	        },
	        {
	            className: 'symbol',
	            variants: [
	                {
	                    begin: 'N', end: '\\d+',
	                    illegal: '\\W'
	                }
	            ]
	        }
	    ];
	
	    return {
	        aliases: ['nc'],
	        // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
	        // However, most prefer all uppercase and uppercase is customary.
	        case_insensitive: true,
	        lexemes: GCODE_IDENT_RE,
	        keywords: GCODE_KEYWORDS,
	        contains: [
	            {
	                className: 'meta',
	                begin: GCODE_CLOSE_RE
	            },
	            GCODE_START
	        ].concat(GCODE_CODE)
	    };
	};

/***/ },
/* 165 */
/***/ function(module, exports) {

	module.exports = function (hljs) {
	  return {
	    aliases: ['feature'],
	    keywords: 'Feature Background Ability Business\ Need Scenario Scenarios Scenario\ Outline Scenario\ Template Examples Given And Then But When',
	    contains: [
	      {
	        className: 'symbol',
	        begin: '\\*',
	        relevance: 0
	      },
	      {
	        className: 'meta',
	        begin: '@[^@\\s]+'
	      },
	      {
	        begin: '\\|', end: '\\|\\w*$',
	        contains: [
	          {
	            className: 'string',
	            begin: '[^|]+'
	          }
	        ]
	      },
	      {
	        className: 'variable',
	        begin: '<', end: '>'
	      },
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'string',
	        begin: '"""', end: '"""'
	      },
	      hljs.QUOTE_STRING_MODE
	    ]
	  };
	};

/***/ },
/* 166 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: {
	      keyword:
	        // Statements
	        'break continue discard do else for if return while switch case default ' +
	        // Qualifiers
	        'attribute binding buffer ccw centroid centroid varying coherent column_major const cw ' +
	        'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing ' +
	        'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant ' +
	        'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y ' +
	        'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left ' +
	        'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f '+
	        'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict ' +
	        'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 ' +
	        'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 ' +
	        'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip ' +
	        'triangles triangles_adjacency uniform varying vertices volatile writeonly',
	      type:
	        'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 ' +
	        'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray ' +
	        'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer' +
	        'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray ' +
	        'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray ' +
	        'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D ' +
	        'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 ' +
	        'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray ' +
	        'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow ' +
	        'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D ' +
	        'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow ' +
	        'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect ' +
	        'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray ' +
	        'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D ' +
	        'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',
	      built_in:
	        // Constants
	        'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes ' +
	        'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms ' +
	        'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers ' +
	        'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits ' +
	        'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize ' +
	        'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters ' +
	        'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors ' +
	        'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers ' +
	        'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents ' +
	        'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits ' +
	        'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents ' +
	        'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset ' +
	        'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms ' +
	        'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits ' +
	        'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents ' +
	        'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters ' +
	        'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents ' +
	        'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents ' +
	        'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits ' +
	        'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors ' +
	        'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms ' +
	        'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits ' +
	        'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset ' +
	        // Variables
	        'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial ' +
	        'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color ' +
	        'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord ' +
	        'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor ' +
	        'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial ' +
	        'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel ' +
	        'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix ' +
	        'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose ' +
	        'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose ' +
	        'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 ' +
	        'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 ' +
	        'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ ' +
	        'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord ' +
	        'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse ' +
	        'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask ' +
	        'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter ' +
	        'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose ' +
	        'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out ' +
	        // Functions
	        'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin ' +
	        'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement ' +
	        'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier ' +
	        'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross ' +
	        'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB ' +
	        'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan ' +
	        'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap ' +
	        'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad ' +
	        'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset ' +
	        'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log ' +
	        'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer ' +
	        'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 ' +
	        'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 ' +
	        'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod ' +
	        'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh ' +
	        'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod ' +
	        'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod ' +
	        'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod ' +
	        'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset ' +
	        'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset ' +
	        'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod ' +
	        'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 ' +
	        'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',
	      literal: 'true false'
	    },
	    illegal: '"',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '#', end: '$'
	      }
	    ]
	  };
	};

/***/ },
/* 167 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var GO_KEYWORDS = {
	    keyword:
	      'break default func interface select case map struct chan else goto package switch ' +
	      'const fallthrough if range type continue for import return var go defer ' +
	      'bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 ' +
	      'uint16 uint32 uint64 int uint uintptr rune',
	    literal:
	       'true false iota nil',
	    built_in:
	      'append cap close complex copy imag len make new panic print println real recover delete'
	  };
	  return {
	    aliases: ['golang'],
	    keywords: GO_KEYWORDS,
	    illegal: '</',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'string',
	        variants: [
	          hljs.QUOTE_STRING_MODE,
	          {begin: '\'', end: '[^\\\\]\''},
	          {begin: '`', end: '`'},
	        ]
	      },
	      {
	        className: 'number',
	        variants: [
	          {begin: hljs.C_NUMBER_RE + '[dflsi]', relevance: 1},
	          hljs.C_NUMBER_MODE
	        ]
	      },
	      {
	        begin: /:=/ // relevance booster
	      },
	      {
	        className: 'function',
	        beginKeywords: 'func', end: /\s*\{/, excludeEnd: true,
	        contains: [
	          hljs.TITLE_MODE,
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/,
	            keywords: GO_KEYWORDS,
	            illegal: /["']/
	          }
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 168 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	    return {
	      keywords: {
	        keyword:
	          'println readln print import module function local return let var ' +
	          'while for foreach times in case when match with break continue ' +
	          'augment augmentation each find filter reduce ' +
	          'if then else otherwise try catch finally raise throw orIfNull ' +
	          'DynamicObject|10 DynamicVariable struct Observable map set vector list array',
	        literal:
	          'true false null'
	      },
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        hljs.QUOTE_STRING_MODE,
	        hljs.C_NUMBER_MODE,
	        {
	          className: 'meta', begin: '@[A-Za-z]+'
	        }
	      ]
	    }
	};

/***/ },
/* 169 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    case_insensitive: true,
	    keywords: {
	      keyword:
	        'task project allprojects subprojects artifacts buildscript configurations ' +
	        'dependencies repositories sourceSets description delete from into include ' +
	        'exclude source classpath destinationDir includes options sourceCompatibility ' +
	        'targetCompatibility group flatDir doLast doFirst flatten todir fromdir ant ' +
	        'def abstract break case catch continue default do else extends final finally ' +
	        'for if implements instanceof native new private protected public return static ' +
	        'switch synchronized throw throws transient try volatile while strictfp package ' +
	        'import false null super this true antlrtask checkstyle codenarc copy boolean ' +
	        'byte char class double float int interface long short void compile runTime ' +
	        'file fileTree abs any append asList asWritable call collect compareTo count ' +
	        'div dump each eachByte eachFile eachLine every find findAll flatten getAt ' +
	        'getErr getIn getOut getText grep immutable inject inspect intersect invokeMethods ' +
	        'isCase join leftShift minus multiply newInputStream newOutputStream newPrintWriter ' +
	        'newReader newWriter next plus pop power previous print println push putAt read ' +
	        'readBytes readLines reverse reverseEach round size sort splitEachLine step subMap ' +
	        'times toInteger toList tokenize upto waitForOrKill withPrintWriter withReader ' +
	        'withStream withWriter withWriterAppend write writeLine'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      hljs.REGEXP_MODE
	
	    ]
	  }
	};

/***/ },
/* 170 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	    return {
	        keywords: {
	            literal : 'true false null',
	            keyword:
	            'byte short char int long boolean float double void ' +
	            // groovy specific keywords
	            'def as in assert trait ' +
	            // common keywords with Java
	            'super this abstract static volatile transient public private protected synchronized final ' +
	            'class interface enum if else for while switch case break default continue ' +
	            'throw throws try catch finally implements extends new import package return instanceof'
	        },
	
	        contains: [
	            hljs.COMMENT(
	                '/\\*\\*',
	                '\\*/',
	                {
	                    relevance : 0,
	                    contains : [
	                      {
	                          // eat up @'s in emails to prevent them to be recognized as doctags
	                          begin: /\w+@/, relevance: 0
	                      },
	                      {
	                          className : 'doctag',
	                          begin : '@[A-Za-z]+'
	                      }
	                    ]
	                }
	            ),
	            hljs.C_LINE_COMMENT_MODE,
	            hljs.C_BLOCK_COMMENT_MODE,
	            {
	                className: 'string',
	                begin: '"""', end: '"""'
	            },
	            {
	                className: 'string',
	                begin: "'''", end: "'''"
	            },
	            {
	                className: 'string',
	                begin: "\\$/", end: "/\\$",
	                relevance: 10
	            },
	            hljs.APOS_STRING_MODE,
	            {
	                className: 'regexp',
	                begin: /~?\/[^\/\n]+\//,
	                contains: [
	                    hljs.BACKSLASH_ESCAPE
	                ]
	            },
	            hljs.QUOTE_STRING_MODE,
	            {
	                className: 'meta',
	                begin: "^#!/usr/bin/env", end: '$',
	                illegal: '\n'
	            },
	            hljs.BINARY_NUMBER_MODE,
	            {
	                className: 'class',
	                beginKeywords: 'class interface trait enum', end: '{',
	                illegal: ':',
	                contains: [
	                    {beginKeywords: 'extends implements'},
	                    hljs.UNDERSCORE_TITLE_MODE
	                ]
	            },
	            hljs.C_NUMBER_MODE,
	            {
	                className: 'meta', begin: '@[A-Za-z]+'
	            },
	            {
	                // highlight map keys and named parameters as strings
	                className: 'string', begin: /[^\?]{0}[A-Za-z0-9_$]+ *:/
	            },
	            {
	                // catch middle element of the ternary operator
	                // to avoid highlight it as a label, named parameter, or map key
	                begin: /\?/, end: /\:/
	            },
	            {
	                // highlight labeled statements
	                className: 'symbol', begin: '^\\s*[A-Za-z0-9_$]+:',
	                relevance: 0
	            }
	        ],
	        illegal: /#|<\//
	    }
	};

/***/ },
/* 171 */
/***/ function(module, exports) {

	module.exports = // TODO support filter tags like :javascript, support inline HTML
	function(hljs) {
	  return {
	    case_insensitive: true,
	    contains: [
	      {
	        className: 'meta',
	        begin: '^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$',
	        relevance: 10
	      },
	      // FIXME these comments should be allowed to span indented lines
	      hljs.COMMENT(
	        '^\\s*(!=#|=#|-#|/).*$',
	        false,
	        {
	          relevance: 0
	        }
	      ),
	      {
	        begin: '^\\s*(-|=|!=)(?!#)',
	        starts: {
	          end: '\\n',
	          subLanguage: 'ruby'
	        }
	      },
	      {
	        className: 'tag',
	        begin: '^\\s*%',
	        contains: [
	          {
	            className: 'selector-tag',
	            begin: '\\w+'
	          },
	          {
	            className: 'selector-id',
	            begin: '#[\\w-]+'
	          },
	          {
	            className: 'selector-class',
	            begin: '\\.[\\w-]+'
	          },
	          {
	            begin: '{\\s*',
	            end: '\\s*}',
	            contains: [
	              {
	                begin: ':\\w+\\s*=>',
	                end: ',\\s+',
	                returnBegin: true,
	                endsWithParent: true,
	                contains: [
	                  {
	                    className: 'attr',
	                    begin: ':\\w+'
	                  },
	                  hljs.APOS_STRING_MODE,
	                  hljs.QUOTE_STRING_MODE,
	                  {
	                    begin: '\\w+',
	                    relevance: 0
	                  }
	                ]
	              }
	            ]
	          },
	          {
	            begin: '\\(\\s*',
	            end: '\\s*\\)',
	            excludeEnd: true,
	            contains: [
	              {
	                begin: '\\w+\\s*=',
	                end: '\\s+',
	                returnBegin: true,
	                endsWithParent: true,
	                contains: [
	                  {
	                    className: 'attr',
	                    begin: '\\w+',
	                    relevance: 0
	                  },
	                  hljs.APOS_STRING_MODE,
	                  hljs.QUOTE_STRING_MODE,
	                  {
	                    begin: '\\w+',
	                    relevance: 0
	                  }
	                ]
	              }
	            ]
	          }
	        ]
	      },
	      {
	        begin: '^\\s*[=~]\\s*'
	      },
	      {
	        begin: '#{',
	        starts: {
	          end: '}',
	          subLanguage: 'ruby'
	        }
	      }
	    ]
	  };
	};

/***/ },
/* 172 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var BUILT_INS = {'builtin-name': 'each in with if else unless bindattr action collection debugger log outlet template unbound view yield'};
	  return {
	    aliases: ['hbs', 'html.hbs', 'html.handlebars'],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	    hljs.COMMENT('{{!(--)?', '(--)?}}'),
	      {
	        className: 'template-tag',
	        begin: /\{\{[#\/]/, end: /\}\}/,
	        contains: [
	          {
	            className: 'name',
	            begin: /[a-zA-Z\.-]+/,
	            keywords: BUILT_INS,
	            starts: {
	              endsWithParent: true, relevance: 0,
	              contains: [
	                hljs.QUOTE_STRING_MODE
	              ]
	            }
	          }
	        ]
	      },
	      {
	        className: 'template-variable',
	        begin: /\{\{/, end: /\}\}/,
	        keywords: BUILT_INS
	      }
	    ]
	  };
	};

/***/ },
/* 173 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var COMMENT = {
	    variants: [
	      hljs.COMMENT('--', '$'),
	      hljs.COMMENT(
	        '{-',
	        '-}',
	        {
	          contains: ['self']
	        }
	      )
	    ]
	  };
	
	  var PRAGMA = {
	    className: 'meta',
	    begin: '{-#', end: '#-}'
	  };
	
	  var PREPROCESSOR = {
	    className: 'meta',
	    begin: '^#', end: '$'
	  };
	
	  var CONSTRUCTOR = {
	    className: 'type',
	    begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (build-in, infix).
	    relevance: 0
	  };
	
	  var LIST = {
	    begin: '\\(', end: '\\)',
	    illegal: '"',
	    contains: [
	      PRAGMA,
	      PREPROCESSOR,
	      {className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'},
	      hljs.inherit(hljs.TITLE_MODE, {begin: '[_a-z][\\w\']*'}),
	      COMMENT
	    ]
	  };
	
	  var RECORD = {
	    begin: '{', end: '}',
	    contains: LIST.contains
	  };
	
	  return {
	    aliases: ['hs'],
	    keywords:
	      'let in if then else case of where do module import hiding ' +
	      'qualified type data newtype deriving class instance as default ' +
	      'infix infixl infixr foreign export ccall stdcall cplusplus ' +
	      'jvm dotnet safe unsafe family forall mdo proc rec',
	    contains: [
	
	      // Top-level constructions.
	
	      {
	        beginKeywords: 'module', end: 'where',
	        keywords: 'module where',
	        contains: [LIST, COMMENT],
	        illegal: '\\W\\.|;'
	      },
	      {
	        begin: '\\bimport\\b', end: '$',
	        keywords: 'import qualified as hiding',
	        contains: [LIST, COMMENT],
	        illegal: '\\W\\.|;'
	      },
	
	      {
	        className: 'class',
	        begin: '^(\\s*)?(class|instance)\\b', end: 'where',
	        keywords: 'class family instance where',
	        contains: [CONSTRUCTOR, LIST, COMMENT]
	      },
	      {
	        className: 'class',
	        begin: '\\b(data|(new)?type)\\b', end: '$',
	        keywords: 'data family type newtype deriving',
	        contains: [PRAGMA, CONSTRUCTOR, LIST, RECORD, COMMENT]
	      },
	      {
	        beginKeywords: 'default', end: '$',
	        contains: [CONSTRUCTOR, LIST, COMMENT]
	      },
	      {
	        beginKeywords: 'infix infixl infixr', end: '$',
	        contains: [hljs.C_NUMBER_MODE, COMMENT]
	      },
	      {
	        begin: '\\bforeign\\b', end: '$',
	        keywords: 'foreign import export ccall stdcall cplusplus jvm ' +
	                  'dotnet safe unsafe',
	        contains: [CONSTRUCTOR, hljs.QUOTE_STRING_MODE, COMMENT]
	      },
	      {
	        className: 'meta',
	        begin: '#!\\/usr\\/bin\\/env\ runhaskell', end: '$'
	      },
	
	      // "Whitespaces".
	
	      PRAGMA,
	      PREPROCESSOR,
	
	      // Literals and names.
	
	      // TODO: characters.
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      CONSTRUCTOR,
	      hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\w\']*'}),
	
	      COMMENT,
	
	      {begin: '->|<-'} // No markup, relevance booster
	    ]
	  };
	};

/***/ },
/* 174 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';
	  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';
	
	  var HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';
	
	  return {
	    aliases: ['hx'],
	    keywords: {
	      keyword: 'break callback case cast catch continue default do dynamic else enum extern ' +
	               'for function here if import in inline never new override package private get set ' +
	               'public return static super switch this throw trace try typedef untyped using var while ' +
	               HAXE_BASIC_TYPES,
	      built_in:
	        'trace this',
	      literal:
	        'true false null _'
	    },
	    contains: [
	      { className: 'string', // interpolate-able strings
	        begin: '\'', end: '\'',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          { className: 'subst', // interpolation
	            begin: '\\$\\{', end: '\\}'
	          },
	          { className: 'subst', // interpolation
	            begin: '\\$', end: '\\W}'
	          }
	        ]
	      },
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      { className: 'meta', // compiler meta
	        begin: '@:', end: '$'
	      },
	      { className: 'meta', // compiler conditionals
	        begin: '#', end: '$',
	        keywords: {'meta-keyword': 'if else elseif end error'}
	      },
	      { className: 'type', // function types
	        begin: ':[ \t]*', end: '[^A-Za-z0-9_ \t\\->]',
	        excludeBegin: true, excludeEnd: true,
	        relevance: 0
	      },
	      { className: 'type', // types
	        begin: ':[ \t]*', end: '\\W',
	        excludeBegin: true, excludeEnd: true
	      },
	      { className: 'type', // instantiation
	        begin: 'new *', end: '\\W',
	        excludeBegin: true, excludeEnd: true
	      },
	      { className: 'class', // enums
	        beginKeywords: 'enum', end: '\\{',
	        contains: [
	          hljs.TITLE_MODE
	        ]
	      },
	      { className: 'class', // abstracts
	        beginKeywords: 'abstract', end: '[\\{$]',
	        contains: [
	          { className: 'type',
	            begin: '\\(', end: '\\)',
	            excludeBegin: true, excludeEnd: true
	          },
	          { className: 'type',
	            begin: 'from +', end: '\\W',
	            excludeBegin: true, excludeEnd: true
	          },
	          { className: 'type',
	            begin: 'to +', end: '\\W',
	            excludeBegin: true, excludeEnd: true
	          },
	          hljs.TITLE_MODE
	        ],
	        keywords: {
	          keyword: 'abstract from to'
	        }
	      },
	      { className: 'class', // classes
	        begin: '\\b(class|interface) +', end: '[\\{$]',  excludeEnd: true,
	        keywords: 'class interface',
	        contains: [
	          { className: 'keyword',
	            begin: '\\b(extends|implements) +',
	            keywords: 'extends implements',
	            contains: [
	              {
	                className: 'type',
	                begin: hljs.IDENT_RE,
	                relevance: 0
	              }
	            ]
	          },
	          hljs.TITLE_MODE
	        ]
	      },
	      { className: 'function',
	        beginKeywords: 'function', end: '\\(', excludeEnd: true,
	        illegal: '\\S',
	        contains: [
	          hljs.TITLE_MODE
	        ]
	      }
	    ],
	    illegal: /<\//
	  };
	};

/***/ },
/* 175 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    case_insensitive: true,
	    lexemes: /[\w\._]+/,
	    keywords: 'goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	
	      {
	        // multi-line string
	        className: 'string',
	        begin: '{"', end: '"}',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	
	      hljs.COMMENT(';', '$', {relevance: 0}),
	
	      {
	        // pre-processor
	        className: 'meta',
	        begin: '#', end: '$',
	        keywords: {'meta-keyword': 'addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib'},
	        contains: [
	          hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'meta-string'}),
	          hljs.NUMBER_MODE,
	          hljs.C_NUMBER_MODE,
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	
	      {
	        // label
	        className: 'symbol',
	        begin: '^\\*(\\w+|@)'
	      },
	
	      hljs.NUMBER_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 176 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var BUILT_INS = 'action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view';
	
	  var ATTR_ASSIGNMENT = {
	    illegal: /\}\}/,
	    begin: /[a-zA-Z0-9_]+=/,
	    returnBegin: true,
	    relevance: 0,
	    contains: [
	      {
	        className: 'attr', begin: /[a-zA-Z0-9_]+/
	      }
	    ]
	  };
	
	  var SUB_EXPR = {
	    illegal: /\}\}/,
	    begin: /\)/, end: /\)/,
	    contains: [
	      {
	        begin: /[a-zA-Z\.\-]+/,
	        keywords: {built_in: BUILT_INS},
	        starts: {
	          endsWithParent: true, relevance: 0,
	          contains: [
	            hljs.QUOTE_STRING_MODE,
	          ]
	        }
	      }
	    ]
	  };
	
	  var TAG_INNARDS = {
	    endsWithParent: true, relevance: 0,
	    keywords: {keyword: 'as', built_in: BUILT_INS},
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      ATTR_ASSIGNMENT,
	      hljs.NUMBER_MODE
	    ]
	  };
	
	  return {
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      hljs.COMMENT('{{!(--)?', '(--)?}}'),
	      {
	        className: 'template-tag',
	        begin: /\{\{[#\/]/, end: /\}\}/,
	        contains: [
	          {
	            className: 'name',
	            begin: /[a-zA-Z\.\-]+/,
	            keywords: {'builtin-name': BUILT_INS},
	            starts: TAG_INNARDS
	          }
	        ]
	      },
	      {
	        className: 'template-variable',
	        begin: /\{\{[a-zA-Z][a-zA-Z\-]+/, end: /\}\}/,
	        keywords: {keyword: 'as', built_in: BUILT_INS},
	        contains: [
	          hljs.QUOTE_STRING_MODE
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 177 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var VERSION = 'HTTP/[0-9\\.]+';
	  return {
	    aliases: ['https'],
	    illegal: '\\S',
	    contains: [
	      {
	        begin: '^' + VERSION, end: '$',
	        contains: [{className: 'number', begin: '\\b\\d{3}\\b'}]
	      },
	      {
	        begin: '^[A-Z]+ (.*?) ' + VERSION + '$', returnBegin: true, end: '$',
	        contains: [
	          {
	            className: 'string',
	            begin: ' ', end: ' ',
	            excludeBegin: true, excludeEnd: true
	          },
	          {
	            begin: VERSION
	          },
	          {
	            className: 'keyword',
	            begin: '[A-Z]+'
	          }
	        ]
	      },
	      {
	        className: 'attribute',
	        begin: '^\\w', end: ': ', excludeEnd: true,
	        illegal: '\\n|\\s|=',
	        starts: {end: '$', relevance: 0}
	      },
	      {
	        begin: '\\n\\n',
	        starts: {subLanguage: [], endsWithParent: true}
	      }
	    ]
	  };
	};

/***/ },
/* 178 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var START_BRACKET = '\\[';
	  var END_BRACKET = '\\]';
	  return {
	    aliases: ['i7'],
	    case_insensitive: true,
	    keywords: {
	      // Some keywords more or less unique to I7, for relevance.
	      keyword:
	        // kind:
	        'thing room person man woman animal container ' +
	        'supporter backdrop door ' +
	        // characteristic:
	        'scenery open closed locked inside gender ' +
	        // verb:
	        'is are say understand ' +
	        // misc keyword:
	        'kind of rule'
	    },
	    contains: [
	      {
	        className: 'string',
	        begin: '"', end: '"',
	        relevance: 0,
	        contains: [
	          {
	            className: 'subst',
	            begin: START_BRACKET, end: END_BRACKET
	          }
	        ]
	      },
	      {
	        className: 'section',
	        begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
	        end: '$'
	      },
	      {
	        // Rule definition
	        // This is here for relevance.
	        begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
	        end: ':',
	        contains: [
	          {
	            //Rule name
	            begin: '\\(This', end: '\\)'
	          }
	        ]
	      },
	      {
	        className: 'comment',
	        begin: START_BRACKET, end: END_BRACKET,
	        contains: ['self']
	      }
	    ]
	  };
	};

/***/ },
/* 179 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var STRING = {
	    className: "string",
	    contains: [hljs.BACKSLASH_ESCAPE],
	    variants: [
	      {
	        begin: "'''", end: "'''",
	        relevance: 10
	      }, {
	        begin: '"""', end: '"""',
	        relevance: 10
	      }, {
	        begin: '"', end: '"'
	      }, {
	        begin: "'", end: "'"
	      }
	    ]
	  };
	  return {
	    aliases: ['toml'],
	    case_insensitive: true,
	    illegal: /\S/,
	    contains: [
	      hljs.COMMENT(';', '$'),
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'section',
	        begin: /^\s*\[+/, end: /\]+/
	      },
	      {
	        begin: /^[a-z0-9\[\]_-]+\s*=\s*/, end: '$',
	        returnBegin: true,
	        contains: [
	          {
	            className: 'attr',
	            begin: /[a-z0-9\[\]_-]+/
	          },
	          {
	            begin: /=/, endsWithParent: true,
	            relevance: 0,
	            contains: [
	              {
	                className: 'literal',
	                begin: /\bon|off|true|false|yes|no\b/
	              },
	              {
	                className: 'variable',
	                variants: [
	                  {begin: /\$[\w\d"][\w\d_]*/},
	                  {begin: /\$\{(.*?)}/}
	                ]
	              },
	              STRING,
	              {
	                className: 'number',
	                begin: /([\+\-]+)?[\d]+_[\d_]+/
	              },
	              hljs.NUMBER_MODE
	            ]
	          }
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 180 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var PARAMS = {
	    className: 'params',
	    begin: '\\(', end: '\\)'
	  };
	
	  var F_KEYWORDS = {
	    literal: '.False. .True.',
	    keyword: 'kind do while private call intrinsic where elsewhere ' +
	      'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +
	      'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +
	      'goto save else use module select case ' +
	      'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +
	      'continue format pause cycle exit ' +
	      'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +
	      'synchronous nopass non_overridable pass protected volatile abstract extends import ' +
	      'non_intrinsic value deferred generic final enumerator class associate bind enum ' +
	      'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +
	      'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +
	      'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +
	      'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +
	      'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +
	      'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +
	      'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +
	      'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +
	      'integer real character complex logical dimension allocatable|10 parameter ' +
	      'external implicit|10 none double precision assign intent optional pointer ' +
	      'target in out common equivalence data ' +
	      // IRPF90 special keywords
	      'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch ' +
	      'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',
	    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +
	      'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +
	      'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +
	      'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +
	      'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +
	      'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +
	      'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +
	      'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +
	      'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +
	      'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +
	      'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +
	      'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +
	      'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +
	      'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +
	      'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +
	      'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +
	      'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +
	      'num_images parity popcnt poppar shifta shiftl shiftr this_image ' +
	      // IRPF90 special built_ins
	      'IRP_ALIGN irp_here'
	  };
	  return {
	    case_insensitive: true,
	    keywords: F_KEYWORDS,
	    illegal: /\/\*/,
	    contains: [
	      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),
	      {
	        className: 'function',
	        beginKeywords: 'subroutine function program',
	        illegal: '[${=\\n]',
	        contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
	      },
	      hljs.COMMENT('!', '$', {relevance: 0}),
	      hljs.COMMENT('begin_doc', 'end_doc', {relevance: 10}),
	      {
	        className: 'number',
	        begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
	        relevance: 0
	      }
	    ]
	  };
	};

/***/ },
/* 181 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
	  var GENERIC_IDENT_RE = JAVA_IDENT_RE + '(<' + JAVA_IDENT_RE + '(\\s*,\\s*' + JAVA_IDENT_RE + ')*>)?';
	  var KEYWORDS =
	    'false synchronized int abstract float private char boolean static null if const ' +
	    'for true while long strictfp finally protected import native final void ' +
	    'enum else break transient catch instanceof byte super volatile case assert short ' +
	    'package default double public try this switch continue throws protected public private ' +
	    'module requires exports do';
	
	  // https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html
	  var JAVA_NUMBER_RE = '\\b' +
	    '(' +
	      '0[bB]([01]+[01_]+[01]+|[01]+)' + // 0b...
	      '|' +
	      '0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)' + // 0x...
	      '|' +
	      '(' +
	        '([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?' +
	        '|' +
	        '\\.([\\d]+[\\d_]+[\\d]+|[\\d]+)' +
	      ')' +
	      '([eE][-+]?\\d+)?' + // octal, decimal, float
	    ')' +
	    '[lLfF]?';
	  var JAVA_NUMBER_MODE = {
	    className: 'number',
	    begin: JAVA_NUMBER_RE,
	    relevance: 0
	  };
	
	  return {
	    aliases: ['jsp'],
	    keywords: KEYWORDS,
	    illegal: /<\/|#/,
	    contains: [
	      hljs.COMMENT(
	        '/\\*\\*',
	        '\\*/',
	        {
	          relevance : 0,
	          contains : [
	            {
	              // eat up @'s in emails to prevent them to be recognized as doctags
	              begin: /\w+@/, relevance: 0
	            },
	            {
	              className : 'doctag',
	              begin : '@[A-Za-z]+'
	            }
	          ]
	        }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'class',
	        beginKeywords: 'class interface', end: /[{;=]/, excludeEnd: true,
	        keywords: 'class interface',
	        illegal: /[:"\[\]]/,
	        contains: [
	          {beginKeywords: 'extends implements'},
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        // Expression keywords prevent 'keyword Name(...)' from being
	        // recognized as a function definition
	        beginKeywords: 'new throw return else',
	        relevance: 0
	      },
	      {
	        className: 'function',
	        begin: '(' + GENERIC_IDENT_RE + '\\s+)+' + hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true, end: /[{;=]/,
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          {
	            begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
	            relevance: 0,
	            contains: [hljs.UNDERSCORE_TITLE_MODE]
	          },
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/,
	            keywords: KEYWORDS,
	            relevance: 0,
	            contains: [
	              hljs.APOS_STRING_MODE,
	              hljs.QUOTE_STRING_MODE,
	              hljs.C_NUMBER_MODE,
	              hljs.C_BLOCK_COMMENT_MODE
	            ]
	          },
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      JAVA_NUMBER_MODE,
	      {
	        className: 'meta', begin: '@[A-Za-z]+'
	      }
	    ]
	  };
	};

/***/ },
/* 182 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	  var KEYWORDS = {
	    keyword:
	      'in of if for while finally var new function do return void else break catch ' +
	      'instanceof with throw case default try this switch continue typeof delete ' +
	      'let yield const export super debugger as async await static ' +
	      // ECMAScript 6 modules import
	      'import from as'
	    ,
	    literal:
	      'true false null undefined NaN Infinity',
	    built_in:
	      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
	      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
	      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
	      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
	      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
	      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
	      'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +
	      'Promise'
	  };
	  var EXPRESSIONS;
	  var NUMBER = {
	    className: 'number',
	    variants: [
	      { begin: '\\b(0[bB][01]+)' },
	      { begin: '\\b(0[oO][0-7]+)' },
	      { begin: hljs.C_NUMBER_RE }
	    ],
	    relevance: 0
	  };
	  var SUBST = {
	    className: 'subst',
	    begin: '\\$\\{', end: '\\}',
	    keywords: KEYWORDS,
	    contains: []  // defined later
	  };
	  var TEMPLATE_STRING = {
	    className: 'string',
	    begin: '`', end: '`',
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      SUBST
	    ]
	  };
	  SUBST.contains = [
	    hljs.APOS_STRING_MODE,
	    hljs.QUOTE_STRING_MODE,
	    TEMPLATE_STRING,
	    NUMBER,
	    hljs.REGEXP_MODE
	  ]
	  var PARAMS_CONTAINS = SUBST.contains.concat([
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.C_LINE_COMMENT_MODE
	  ]);
	
	  return {
	    aliases: ['js', 'jsx'],
	    keywords: KEYWORDS,
	    contains: [
	      {
	        className: 'meta',
	        relevance: 10,
	        begin: /^\s*['"]use (strict|asm)['"]/
	      },
	      {
	        className: 'meta',
	        begin: /^#!/, end: /$/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      TEMPLATE_STRING,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      NUMBER,
	      { // object attr container
	        begin: /[{,]\s*/, relevance: 0,
	        contains: [
	          {
	            begin: IDENT_RE + '\\s*:', returnBegin: true,
	            relevance: 0,
	            contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]
	          }
	        ]
	      },
	      { // "value" container
	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
	        keywords: 'return throw case',
	        contains: [
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.REGEXP_MODE,
	          {
	            className: 'function',
	            begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>', returnBegin: true,
	            end: '\\s*=>',
	            contains: [
	              {
	                className: 'params',
	                variants: [
	                  {
	                    begin: IDENT_RE
	                  },
	                  {
	                    begin: /\(\s*\)/,
	                  },
	                  {
	                    begin: /\(/, end: /\)/,
	                    excludeBegin: true, excludeEnd: true,
	                    keywords: KEYWORDS,
	                    contains: PARAMS_CONTAINS
	                  }
	                ]
	              }
	            ]
	          },
	          { // E4X / JSX
	            begin: /</, end: /(\/\w+|\w+\/)>/,
	            subLanguage: 'xml',
	            contains: [
	              {begin: /<\w+\s*\/>/, skip: true},
	              {
	                begin: /<\w+/, end: /(\/\w+|\w+\/)>/, skip: true,
	                contains: [
	                  {begin: /<\w+\s*\/>/, skip: true},
	                  'self'
	                ]
	              }
	            ]
	          }
	        ],
	        relevance: 0
	      },
	      {
	        className: 'function',
	        beginKeywords: 'function', end: /\{/, excludeEnd: true,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/,
	            excludeBegin: true,
	            excludeEnd: true,
	            contains: PARAMS_CONTAINS
	          }
	        ],
	        illegal: /\[|%/
	      },
	      {
	        begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
	      },
	      hljs.METHOD_GUARD,
	      { // ES6 class
	        className: 'class',
	        beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,
	        illegal: /[:"\[\]]/,
	        contains: [
	          {beginKeywords: 'extends'},
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        beginKeywords: 'constructor', end: /\{/, excludeEnd: true
	      }
	    ],
	    illegal: /#(?!!)/
	  };
	};

/***/ },
/* 183 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var LITERALS = {literal: 'true false null'};
	  var TYPES = [
	    hljs.QUOTE_STRING_MODE,
	    hljs.C_NUMBER_MODE
	  ];
	  var VALUE_CONTAINER = {
	    end: ',', endsWithParent: true, excludeEnd: true,
	    contains: TYPES,
	    keywords: LITERALS
	  };
	  var OBJECT = {
	    begin: '{', end: '}',
	    contains: [
	      {
	        className: 'attr',
	        begin: /"/, end: /"/,
	        contains: [hljs.BACKSLASH_ESCAPE],
	        illegal: '\\n',
	      },
	      hljs.inherit(VALUE_CONTAINER, {begin: /:/})
	    ],
	    illegal: '\\S'
	  };
	  var ARRAY = {
	    begin: '\\[', end: '\\]',
	    contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
	    illegal: '\\S'
	  };
	  TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);
	  return {
	    contains: TYPES,
	    keywords: LITERALS,
	    illegal: '\\S'
	  };
	};

/***/ },
/* 184 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  // Since there are numerous special names in Julia, it is too much trouble
	  // to maintain them by hand. Hence these names (i.e. keywords, literals and
	  // built-ins) are automatically generated from Julia (v0.3.0 and v0.4.1)
	  // itself through following scripts for each.
	
	  var KEYWORDS = {
	    // # keyword generator
	    // println("in")
	    // for kw in Base.REPLCompletions.complete_keyword("")
	    //     println(kw)
	    // end
	    keyword:
	      'in abstract baremodule begin bitstype break catch ccall const continue do else elseif end export ' +
	      'finally for function global if immutable import importall let local macro module quote return try type ' +
	      'typealias using while',
	
	    // # literal generator
	    // println("true")
	    // println("false")
	    // for name in Base.REPLCompletions.completions("", 0)[1]
	    //     try
	    //         s = symbol(name)
	    //         v = eval(s)
	    //         if !isa(v, Function) &&
	    //            !isa(v, DataType) &&
	    //            !isa(v, IntrinsicFunction) &&
	    //            !issubtype(typeof(v), Tuple) &&
	    //            !isa(v, Union) &&
	    //            !isa(v, Module) &&
	    //            !isa(v, TypeConstructor) &&
	    //            !isa(v, TypeVar) &&
	    //            !isa(v, Colon)
	    //             println(name)
	    //         end
	    //     end
	    // end
	    literal:
	      // v0.3
	      'true false ARGS CPU_CORES C_NULL DL_LOAD_PATH DevNull ENDIAN_BOM ENV I|0 Inf Inf16 Inf32 ' +
	      'InsertionSort JULIA_HOME LOAD_PATH MS_ASYNC MS_INVALIDATE MS_SYNC MergeSort NaN NaN16 NaN32 OS_NAME QuickSort ' +
	      'RTLD_DEEPBIND RTLD_FIRST RTLD_GLOBAL RTLD_LAZY RTLD_LOCAL RTLD_NODELETE RTLD_NOLOAD RTLD_NOW RoundDown ' +
	      'RoundFromZero RoundNearest RoundToZero RoundUp STDERR STDIN STDOUT VERSION WORD_SIZE catalan cglobal e|0 eu|0 ' +
	      'eulergamma golden im nothing pi γ π φ ' +
	      // v0.4 (diff)
	      'Inf64 NaN64 RoundNearestTiesAway RoundNearestTiesUp ',
	
	    // # built_in generator:
	    // for name in Base.REPLCompletions.completions("", 0)[1]
	    //     try
	    //         v = eval(symbol(name))
	    //         if isa(v, DataType) || isa(v, TypeConstructor) || isa(v, TypeVar)
	    //             println(name)
	    //         end
	    //     end
	    // end
	    built_in:
	      // v0.3
	      'ANY ASCIIString AbstractArray AbstractRNG AbstractSparseArray Any ArgumentError Array Associative Base64Pipe ' +
	      'Bidiagonal BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError Box CFILE Cchar Cdouble Cfloat Char ' +
	      'CharString Cint Clong Clonglong ClusterManager Cmd Coff_t Colon Complex Complex128 Complex32 Complex64 ' +
	      'Condition Cptrdiff_t Cshort Csize_t Cssize_t Cuchar Cuint Culong Culonglong Cushort Cwchar_t DArray DataType ' +
	      'DenseArray Diagonal Dict DimensionMismatch DirectIndexString Display DivideError DomainError EOFError ' +
	      'EachLine Enumerate ErrorException Exception Expr Factorization FileMonitor FileOffset Filter Float16 Float32 ' +
	      'Float64 FloatRange FloatingPoint Function GetfieldNode GotoNode Hermitian IO IOBuffer IOStream IPv4 IPv6 ' +
	      'InexactError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException IntrinsicFunction KeyError ' +
	      'LabelNode LambdaStaticData LineNumberNode LoadError LocalProcess MIME MathConst MemoryError MersenneTwister ' +
	      'Method MethodError MethodTable Module NTuple NewvarNode Nothing Number ObjectIdDict OrdinalRange ' +
	      'OverflowError ParseError PollingFileWatcher ProcessExitedException ProcessGroup Ptr QuoteNode Range Range1 ' +
	      'Ranges Rational RawFD Real Regex RegexMatch RemoteRef RepString RevString RopeString RoundingMode Set ' +
	      'SharedArray Signed SparseMatrixCSC StackOverflowError Stat StatStruct StepRange String SubArray SubString ' +
	      'SymTridiagonal Symbol SymbolNode Symmetric SystemError Task TextDisplay Timer TmStruct TopNode Triangular ' +
	      'Tridiagonal Type TypeConstructor TypeError TypeName TypeVar UTF16String UTF32String UTF8String UdpSocket ' +
	      'Uint Uint128 Uint16 Uint32 Uint64 Uint8 UndefRefError UndefVarError UniformScaling UnionType UnitRange ' +
	      'Unsigned Vararg VersionNumber WString WeakKeyDict WeakRef Woodbury Zip ' +
	      // v0.4 (diff)
	      'AbstractChannel AbstractFloat AbstractString AssertionError Base64DecodePipe Base64EncodePipe BufferStream ' +
	      'CapturedException CartesianIndex CartesianRange Channel Cintmax_t CompositeException Cstring Cuintmax_t ' +
	      'Cwstring Date DateTime Dims Enum GenSym GlobalRef HTML InitError InvalidStateException Irrational LinSpace ' +
	      'LowerTriangular NullException Nullable OutOfMemoryError Pair PartialQuickSort Pipe RandomDevice ' +
	      'ReadOnlyMemoryError ReentrantLock Ref RemoteException SegmentationFault SerializationState SimpleVector ' +
	      'TCPSocket Text Tuple UDPSocket UInt UInt128 UInt16 UInt32 UInt64 UInt8 UnicodeError Union UpperTriangular ' +
	      'Val Void WorkerConfig AbstractMatrix AbstractSparseMatrix AbstractSparseVector AbstractVecOrMat AbstractVector ' +
	      'DenseMatrix DenseVecOrMat DenseVector Matrix SharedMatrix SharedVector StridedArray StridedMatrix ' +
	      'StridedVecOrMat StridedVector VecOrMat Vector '
	  };
	
	  // ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names
	  var VARIABLE_NAME_RE = '[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*';
	
	  // placeholder for recursive self-reference
	  var DEFAULT = { lexemes: VARIABLE_NAME_RE, keywords: KEYWORDS, illegal: /<\// };
	
	  var TYPE_ANNOTATION = {
	    className: 'type',
	    begin: /::/
	  };
	
	  var SUBTYPE = {
	    className: 'type',
	    begin: /<:/
	  };
	
	  // ref: http://julia.readthedocs.org/en/latest/manual/integers-and-floating-point-numbers/
	  var NUMBER = {
	    className: 'number',
	    // supported numeric literals:
	    //  * binary literal (e.g. 0x10)
	    //  * octal literal (e.g. 0o76543210)
	    //  * hexadecimal literal (e.g. 0xfedcba876543210)
	    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
	    //  * decimal literal (e.g. 9876543210, 100_000_000)
	    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
	    begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
	    relevance: 0
	  };
	
	  var CHAR = {
	    className: 'string',
	    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
	  };
	
	  var INTERPOLATION = {
	    className: 'subst',
	    begin: /\$\(/, end: /\)/,
	    keywords: KEYWORDS
	  };
	
	  var INTERPOLATED_VARIABLE = {
	    className: 'variable',
	    begin: '\\$' + VARIABLE_NAME_RE
	  };
	
	  // TODO: neatly escape normal code in string literal
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
	    variants: [
	      { begin: /\w*"""/, end: /"""\w*/, relevance: 10 },
	      { begin: /\w*"/, end: /"\w*/ }
	    ]
	  };
	
	  var COMMAND = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
	    begin: '`', end: '`'
	  };
	
	  var MACROCALL = {
	    className: 'meta',
	    begin: '@' + VARIABLE_NAME_RE
	  };
	
	  var COMMENT = {
	    className: 'comment',
	    variants: [
	      { begin: '#=', end: '=#', relevance: 10 },
	      { begin: '#', end: '$' }
	    ]
	  };
	
	  DEFAULT.contains = [
	    NUMBER,
	    CHAR,
	    TYPE_ANNOTATION,
	    SUBTYPE,
	    STRING,
	    COMMAND,
	    MACROCALL,
	    COMMENT,
	    hljs.HASH_COMMENT_MODE
	  ];
	  INTERPOLATION.contains = DEFAULT.contains;
	
	  return DEFAULT;
	};

/***/ },
/* 185 */
/***/ function(module, exports) {

	module.exports = function (hljs) {
	  var KEYWORDS = {
	    keyword:
	      'abstract as val var vararg get set class object open private protected public noinline ' +
	      'crossinline dynamic final enum if else do while for when throw try catch finally ' +
	      'import package is in fun override companion reified inline ' +
	      'interface annotation data sealed internal infix operator out by constructor super ' +
	      // to be deleted soon
	      'trait volatile transient native default',
	    built_in:
	      'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
	    literal:
	      'true false null'
	  };
	  var KEYWORDS_WITH_LABEL = {
	    className: 'keyword',
	    begin: /\b(break|continue|return|this)\b/,
	    starts: {
	      contains: [
	        {
	          className: 'symbol',
	          begin: /@\w+/
	        }
	      ]
	    }
	  };
	  var LABEL = {
	    className: 'symbol', begin: hljs.UNDERSCORE_IDENT_RE + '@'
	  };
	
	  // for string templates
	  var SUBST = {
	    className: 'subst',
	    variants: [
	      {begin: '\\$' + hljs.UNDERSCORE_IDENT_RE},
	      {begin: '\\${', end: '}', contains: [hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE]}
	    ]
	  };
	  var STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"""', end: '"""',
	        contains: [SUBST]
	      },
	      // Can't use built-in modes easily, as we want to use STRING in the meta
	      // context as 'meta-string' and there's no syntax to remove explicitly set
	      // classNames in built-in modes.
	      {
	        begin: '\'', end: '\'',
	        illegal: /\n/,
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      {
	        begin: '"', end: '"',
	        illegal: /\n/,
	        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	      }
	    ]
	  };
	
	  var ANNOTATION_USE_SITE = {
	    className: 'meta', begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
	  };
	  var ANNOTATION = {
	    className: 'meta', begin: '@' + hljs.UNDERSCORE_IDENT_RE,
	    contains: [
	      {
	        begin: /\(/, end: /\)/,
	        contains: [
	          hljs.inherit(STRING, {className: 'meta-string'})
	        ]
	      }
	    ]
	  };
	
	  return {
	    keywords: KEYWORDS,
	    contains : [
	      hljs.COMMENT(
	        '/\\*\\*',
	        '\\*/',
	        {
	          relevance : 0,
	          contains : [{
	            className : 'doctag',
	            begin : '@[A-Za-z]+'
	          }]
	        }
	      ),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      KEYWORDS_WITH_LABEL,
	      LABEL,
	      ANNOTATION_USE_SITE,
	      ANNOTATION,
	      {
	        className: 'function',
	        beginKeywords: 'fun', end: '[(]|$',
	        returnBegin: true,
	        excludeEnd: true,
	        keywords: KEYWORDS,
	        illegal: /fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,
	        relevance: 5,
	        contains: [
	          {
	            begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
	            relevance: 0,
	            contains: [hljs.UNDERSCORE_TITLE_MODE]
	          },
	          {
	            className: 'type',
	            begin: /</, end: />/, keywords: 'reified',
	            relevance: 0
	          },
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/,
	            endsParent: true,
	            keywords: KEYWORDS,
	            relevance: 0,
	            contains: [
	              {
	                begin: /:/, end: /[=,\/]/, endsWithParent: true,
	                contains: [
	                  {className: 'type', begin: hljs.UNDERSCORE_IDENT_RE},
	                  hljs.C_LINE_COMMENT_MODE,
	                  hljs.C_BLOCK_COMMENT_MODE
	                ],
	                relevance: 0
	              },
	              hljs.C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              ANNOTATION_USE_SITE,
	              ANNOTATION,
	              STRING,
	              hljs.C_NUMBER_MODE
	            ]
	          },
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class interface trait', end: /[:\{(]|$/, // remove 'trait' when removed from KEYWORDS
	        excludeEnd: true,
	        illegal: 'extends implements',
	        contains: [
	          {beginKeywords: 'public protected internal private constructor'},
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            className: 'type',
	            begin: /</, end: />/, excludeBegin: true, excludeEnd: true,
	            relevance: 0
	          },
	          {
	            className: 'type',
	            begin: /[,:]\s*/, end: /[<\(,]|$/, excludeBegin: true, returnEnd: true
	          },
	          ANNOTATION_USE_SITE,
	          ANNOTATION
	        ]
	      },
	      STRING,
	      {
	        className: 'meta',
	        begin: "^#!/usr/bin/env", end: '$',
	        illegal: '\n'
	      },
	      hljs.C_NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 186 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var LASSO_IDENT_RE = '[a-zA-Z_][\\w.]*';
	  var LASSO_ANGLE_RE = '<\\?(lasso(script)?|=)';
	  var LASSO_CLOSE_RE = '\\]|\\?>';
	  var LASSO_KEYWORDS = {
	    literal:
	      'true false none minimal full all void and or not ' +
	      'bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft',
	    built_in:
	      'array date decimal duration integer map pair string tag xml null ' +
	      'boolean bytes keyword list locale queue set stack staticarray ' +
	      'local var variable global data self inherited currentcapture givenblock',
	    keyword:
	      'cache database_names database_schemanames database_tablenames ' +
	      'define_tag define_type email_batch encode_set html_comment handle ' +
	      'handle_error header if inline iterate ljax_target link ' +
	      'link_currentaction link_currentgroup link_currentrecord link_detail ' +
	      'link_firstgroup link_firstrecord link_lastgroup link_lastrecord ' +
	      'link_nextgroup link_nextrecord link_prevgroup link_prevrecord log ' +
	      'loop namespace_using output_none portal private protect records ' +
	      'referer referrer repeating resultset rows search_args ' +
	      'search_arguments select sort_args sort_arguments thread_atomic ' +
	      'value_list while abort case else fail_if fail_ifnot fail if_empty ' +
	      'if_false if_null if_true loop_abort loop_continue loop_count params ' +
	      'params_up return return_value run_children soap_definetag ' +
	      'soap_lastrequest soap_lastresponse tag_name ascending average by ' +
	      'define descending do equals frozen group handle_failure import in ' +
	      'into join let match max min on order parent protected provide public ' +
	      'require returnhome skip split_thread sum take thread to trait type ' +
	      'where with yield yieldhome'
	  };
	  var HTML_COMMENT = hljs.COMMENT(
	    '<!--',
	    '-->',
	    {
	      relevance: 0
	    }
	  );
	  var LASSO_NOPROCESS = {
	    className: 'meta',
	    begin: '\\[noprocess\\]',
	    starts: {
	      end: '\\[/noprocess\\]',
	      returnEnd: true,
	      contains: [HTML_COMMENT]
	    }
	  };
	  var LASSO_START = {
	    className: 'meta',
	    begin: '\\[/noprocess|' + LASSO_ANGLE_RE
	  };
	  var LASSO_DATAMEMBER = {
	    className: 'symbol',
	    begin: '\'' + LASSO_IDENT_RE + '\''
	  };
	  var LASSO_CODE = [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.inherit(hljs.C_NUMBER_MODE, {begin: hljs.C_NUMBER_RE + '|(-?infinity|NaN)\\b'}),
	    hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
	    hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
	    {
	      className: 'string',
	      begin: '`', end: '`'
	    },
	    { // variables
	      variants: [
	        {
	          begin: '[#$]' + LASSO_IDENT_RE
	        },
	        {
	          begin: '#', end: '\\d+',
	          illegal: '\\W'
	        }
	      ]
	    },
	    {
	      className: 'type',
	      begin: '::\\s*', end: LASSO_IDENT_RE,
	      illegal: '\\W'
	    },
	    {
	      className: 'params',
	      variants: [
	        {
	          begin: '-(?!infinity)' + LASSO_IDENT_RE,
	          relevance: 0
	        },
	        {
	          begin: '(\\.\\.\\.)'
	        }
	      ]
	    },
	    {
	      begin: /(->|\.)\s*/,
	      relevance: 0,
	      contains: [LASSO_DATAMEMBER]
	    },
	    {
	      className: 'class',
	      beginKeywords: 'define',
	      returnEnd: true, end: '\\(|=>',
	      contains: [
	        hljs.inherit(hljs.TITLE_MODE, {begin: LASSO_IDENT_RE + '(=(?!>))?|[-+*/%](?!>)'})
	      ]
	    }
	  ];
	  return {
	    aliases: ['ls', 'lassoscript'],
	    case_insensitive: true,
	    lexemes: LASSO_IDENT_RE + '|&[lg]t;',
	    keywords: LASSO_KEYWORDS,
	    contains: [
	      {
	        className: 'meta',
	        begin: LASSO_CLOSE_RE,
	        relevance: 0,
	        starts: { // markup
	          end: '\\[|' + LASSO_ANGLE_RE,
	          returnEnd: true,
	          relevance: 0,
	          contains: [HTML_COMMENT]
	        }
	      },
	      LASSO_NOPROCESS,
	      LASSO_START,
	      {
	        className: 'meta',
	        begin: '\\[no_square_brackets',
	        starts: {
	          end: '\\[/no_square_brackets\\]', // not implemented in the language
	          lexemes: LASSO_IDENT_RE + '|&[lg]t;',
	          keywords: LASSO_KEYWORDS,
	          contains: [
	            {
	              className: 'meta',
	              begin: LASSO_CLOSE_RE,
	              relevance: 0,
	              starts: {
	                end: '\\[noprocess\\]|' + LASSO_ANGLE_RE,
	                returnEnd: true,
	                contains: [HTML_COMMENT]
	              }
	            },
	            LASSO_NOPROCESS,
	            LASSO_START
	          ].concat(LASSO_CODE)
	        }
	      },
	      {
	        className: 'meta',
	        begin: '\\[',
	        relevance: 0
	      },
	      {
	        className: 'meta',
	        begin: '^#!', end:'lasso9$',
	        relevance: 10
	      }
	    ].concat(LASSO_CODE)
	  };
	};

/***/ },
/* 187 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    contains: [
	      {
	        className: 'attribute',
	        begin: '^dn', end: ': ', excludeEnd: true,
	        starts: {end: '$', relevance: 0},
	        relevance: 10
	      },
	      {
	        className: 'attribute',
	        begin: '^\\w', end: ': ', excludeEnd: true,
	        starts: {end: '$', relevance: 0}
	      },
	      {
	        className: 'literal',
	        begin: '^-', end: '$'
	      },
	      hljs.HASH_COMMENT_MODE
	    ]
	  };
	};

/***/ },
/* 188 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var IDENT_RE        = '[\\w-]+'; // yes, Less identifiers may begin with a digit
	  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';
	
	  /* Generic Modes */
	
	  var RULES = [], VALUE = []; // forward def. for recursive modes
	
	  var STRING_MODE = function(c) { return {
	    // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
	    className: 'string', begin: '~?' + c + '.*?' + c
	  };};
	
	  var IDENT_MODE = function(name, begin, relevance) { return {
	    className: name, begin: begin, relevance: relevance
	  };};
	
	  var PARENS_MODE = {
	    // used only to properly balance nested parens inside mixin call, def. arg list
	    begin: '\\(', end: '\\)', contains: VALUE, relevance: 0
	  };
	
	  // generic Less highlighter (used almost everywhere except selectors):
	  VALUE.push(
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    STRING_MODE("'"),
	    STRING_MODE('"'),
	    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
	    {
	      begin: '(url|data-uri)\\(',
	      starts: {className: 'string', end: '[\\)\\n]', excludeEnd: true}
	    },
	    IDENT_MODE('number', '#[0-9A-Fa-f]+\\b'),
	    PARENS_MODE,
	    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
	    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),
	    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
	    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
	      className: 'attribute', begin: IDENT_RE + '\\s*:', end: ':', returnBegin: true, excludeEnd: true
	    },
	    {
	      className: 'meta',
	      begin: '!important'
	    }
	  );
	
	  var VALUE_WITH_RULESETS = VALUE.concat({
	    begin: '{', end: '}', contains: RULES
	  });
	
	  var MIXIN_GUARD_MODE = {
	    beginKeywords: 'when', endsWithParent: true,
	    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match
	  };
	
	  /* Rule-Level Modes */
	
	  var RULE_MODE = {
	    begin: INTERP_IDENT_RE + '\\s*:', returnBegin: true, end: '[;}]',
	    relevance: 0,
	    contains: [
	      {
	        className: 'attribute',
	        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,
	        starts: {
	          endsWithParent: true, illegal: '[<=$]',
	          relevance: 0,
	          contains: VALUE
	        }
	      }
	    ]
	  };
	
	  var AT_RULE_MODE = {
	    className: 'keyword',
	    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
	    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}
	  };
	
	  // variable definitions and calls
	  var VAR_RULE_MODE = {
	    className: 'variable',
	    variants: [
	      // using more strict pattern for higher relevance to increase chances of Less detection.
	      // this is *the only* Less specific statement used in most of the sources, so...
	      // (we’ll still often loose to the css-parser unless there's '//' comment,
	      // simply because 1 variable just can't beat 99 properties :)
	      {begin: '@' + IDENT_RE + '\\s*:', relevance: 15},
	      {begin: '@' + IDENT_RE}
	    ],
	    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}
	  };
	
	  var SELECTOR_MODE = {
	    // first parse unambiguous selectors (i.e. those not starting with tag)
	    // then fall into the scary lookahead-discriminator variant.
	    // this mode also handles mixin definitions and calls
	    variants: [{
	      begin: '[\\.#:&\\[>]', end: '[;{}]'  // mixin calls end with ';'
	      }, {
	      begin: INTERP_IDENT_RE, end: '{'
	    }],
	    returnBegin: true,
	    returnEnd:   true,
	    illegal: '[<=\'$"]',
	    relevance: 0,
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      MIXIN_GUARD_MODE,
	      IDENT_MODE('keyword',  'all\\b'),
	      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag
	      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes "tags"
	      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
	      IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
	      IDENT_MODE('selector-tag',  '&', 0),
	      {className: 'selector-attr', begin: '\\[', end: '\\]'},
	      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},
	      {begin: '\\(', end: '\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins
	      {begin: '!important'} // eat !important after mixin call or it will be colored as tag
	    ]
	  };
	
	  RULES.push(
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    AT_RULE_MODE,
	    VAR_RULE_MODE,
	    RULE_MODE,
	    SELECTOR_MODE
	  );
	
	  return {
	    case_insensitive: true,
	    illegal: '[=>\'/<($"]',
	    contains: RULES
	  };
	};

/***/ },
/* 189 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var LISP_IDENT_RE = '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*';
	  var MEC_RE = '\\|[^]*?\\|';
	  var LISP_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?';
	  var SHEBANG = {
	    className: 'meta',
	    begin: '^#!', end: '$'
	  };
	  var LITERAL = {
	    className: 'literal',
	    begin: '\\b(t{1}|nil)\\b'
	  };
	  var NUMBER = {
	    className: 'number',
	    variants: [
	      {begin: LISP_SIMPLE_NUMBER_RE, relevance: 0},
	      {begin: '#(b|B)[0-1]+(/[0-1]+)?'},
	      {begin: '#(o|O)[0-7]+(/[0-7]+)?'},
	      {begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?'},
	      {begin: '#(c|C)\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE, end: '\\)'}
	    ]
	  };
	  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});
	  var COMMENT = hljs.COMMENT(
	    ';', '$',
	    {
	      relevance: 0
	    }
	  );
	  var VARIABLE = {
	    begin: '\\*', end: '\\*'
	  };
	  var KEYWORD = {
	    className: 'symbol',
	    begin: '[:&]' + LISP_IDENT_RE
	  };
	  var IDENT = {
	    begin: LISP_IDENT_RE,
	    relevance: 0
	  };
	  var MEC = {
	    begin: MEC_RE
	  };
	  var QUOTED_LIST = {
	    begin: '\\(', end: '\\)',
	    contains: ['self', LITERAL, STRING, NUMBER, IDENT]
	  };
	  var QUOTED = {
	    contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],
	    variants: [
	      {
	        begin: '[\'`]\\(', end: '\\)'
	      },
	      {
	        begin: '\\(quote ', end: '\\)',
	        keywords: {name: 'quote'}
	      },
	      {
	        begin: '\'' + MEC_RE
	      }
	    ]
	  };
	  var QUOTED_ATOM = {
	    variants: [
	      {begin: '\'' + LISP_IDENT_RE},
	      {begin: '#\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*'}
	    ]
	  };
	  var LIST = {
	    begin: '\\(\\s*', end: '\\)'
	  };
	  var BODY = {
	    endsWithParent: true,
	    relevance: 0
	  };
	  LIST.contains = [
	    {
	      className: 'name',
	      variants: [
	        {begin: LISP_IDENT_RE},
	        {begin: MEC_RE}
	      ]
	    },
	    BODY
	  ];
	  BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];
	
	  return {
	    illegal: /\S/,
	    contains: [
	      NUMBER,
	      SHEBANG,
	      LITERAL,
	      STRING,
	      COMMENT,
	      QUOTED,
	      QUOTED_ATOM,
	      LIST,
	      IDENT
	    ]
	  };
	};

/***/ },
/* 190 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var VARIABLE = {
	    begin: '\\b[gtps][A-Z]+[A-Za-z0-9_\\-]*\\b|\\$_[A-Z]+',
	    relevance: 0
	  };
	  var COMMENT_MODES = [
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.HASH_COMMENT_MODE,
	    hljs.COMMENT('--', '$'),
	    hljs.COMMENT('[^:]//', '$')
	  ];
	  var TITLE1 = hljs.inherit(hljs.TITLE_MODE, {
	    variants: [
	      {begin: '\\b_*rig[A-Z]+[A-Za-z0-9_\\-]*'},
	      {begin: '\\b_[a-z0-9\\-]+'}
	    ]
	  });
	  var TITLE2 = hljs.inherit(hljs.TITLE_MODE, {begin: '\\b([A-Za-z0-9_\\-]+)\\b'});
	  return {
	    case_insensitive: false,
	    keywords: {
	      keyword:
	        '$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER ' +
	        'codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph ' +
	        'after byte bytes english the until http forever descending using line real8 with seventh ' +
	        'for stdout finally element word words fourth before black ninth sixth characters chars stderr ' +
	        'uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid ' +
	        'at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 ' +
	        'int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat ' +
	        'end repeat URL in try into switch to words https token binfile each tenth as ticks tick ' +
	        'system real4 by dateItems without char character ascending eighth whole dateTime numeric short ' +
	        'first ftp integer abbreviated abbr abbrev private case while if ' +
	        'div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within ' +
	        'contains ends with begins the keys of keys',
	      literal:
	        'SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE ' +
	        'QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO ' +
	        'six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five ' +
	        'quote empty one true return cr linefeed right backslash null seven tab three two ' +
	        'RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK ' +
	        'FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK',
	      built_in:
	        'put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode ' +
	        'base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum ' +
	        'cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress ' +
	        'constantNames cos date dateFormat decompress directories ' +
	        'diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global ' +
	        'globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset ' +
	        'keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders ' +
	        'libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 ' +
	        'longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge millisec ' +
	        'millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar ' +
	        'numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets ' +
	        'paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation ' +
	        'populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile ' +
	        'revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull ' +
	        'revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered ' +
	        'revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames ' +
	        'revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull ' +
	        'revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections ' +
	        'revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype ' +
	        'revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext ' +
	        'revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames ' +
	        'revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase ' +
	        'revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute ' +
	        'revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces ' +
	        'revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode ' +
	        'revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling ' +
	        'revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error ' +
	        'revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute ' +
	        'revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort ' +
	        'revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree ' +
	        'revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance ' +
	        'sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound ' +
	        'stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper ' +
	        'transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames ' +
	        'variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet ' +
	        'xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process ' +
	        'combine constant convert create new alias folder directory decrypt delete variable word line folder ' +
	        'directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile ' +
	        'libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback ' +
	        'libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime ' +
	        'libURLSetStatusCallback load multiply socket prepare process post seek rel relative read from process rename ' +
	        'replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase ' +
	        'revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees ' +
	        'revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord ' +
	        'revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase ' +
	        'revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD ' +
	        'revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost ' +
	        'revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData ' +
	        'revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel ' +
	        'revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback ' +
	        'revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop ' +
	        'subtract union unload wait write'
	    },
	    contains: [
	      VARIABLE,
	      {
	        className: 'keyword',
	        begin: '\\bend\\sif\\b'
	      },
	      {
	        className: 'function',
	        beginKeywords: 'function', end: '$',
	        contains: [
	          VARIABLE,
	          TITLE2,
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.BINARY_NUMBER_MODE,
	          hljs.C_NUMBER_MODE,
	          TITLE1
	        ]
	      },
	      {
	        className: 'function',
	        begin: '\\bend\\s+', end: '$',
	        keywords: 'end',
	        contains: [
	          TITLE2,
	          TITLE1
	        ],
	        relevance: 0
	      },
	      {
	        beginKeywords: 'command on', end: '$',
	        contains: [
	          VARIABLE,
	          TITLE2,
	          hljs.APOS_STRING_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.BINARY_NUMBER_MODE,
	          hljs.C_NUMBER_MODE,
	          TITLE1
	        ]
	      },
	      {
	        className: 'meta',
	        variants: [
	          {
	            begin: '<\\?(rev|lc|livecode)',
	            relevance: 10
	          },
	          { begin: '<\\?' },
	          { begin: '\\?>' }
	        ]
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.BINARY_NUMBER_MODE,
	      hljs.C_NUMBER_MODE,
	      TITLE1
	    ].concat(COMMENT_MODES),
	    illegal: ';$|^\\[|^=|&|{'
	  };
	};

/***/ },
/* 191 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	    keyword:
	      // JS keywords
	      'in if for while finally new do return else break catch instanceof throw try this ' +
	      'switch continue typeof delete debugger case default function var with ' +
	      // LiveScript keywords
	      'then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super ' +
	      'case default function var void const let enum export import native ' +
	      '__hasProp __extends __slice __bind __indexOf',
	    literal:
	      // JS literals
	      'true false null undefined ' +
	      // LiveScript literals
	      'yes no on off it that void',
	    built_in:
	      'npm require console print module global window document'
	  };
	  var JS_IDENT_RE = '[A-Za-z$_](?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';
	  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
	  var SUBST = {
	    className: 'subst',
	    begin: /#\{/, end: /}/,
	    keywords: KEYWORDS
	  };
	  var SUBST_SIMPLE = {
	    className: 'subst',
	    begin: /#[A-Za-z$_]/, end: /(?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
	    keywords: KEYWORDS
	  };
	  var EXPRESSIONS = [
	    hljs.BINARY_NUMBER_MODE,
	    {
	      className: 'number',
	      begin: '(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)',
	      relevance: 0,
	      starts: {end: '(\\s*/)?', relevance: 0} // a number tries to eat the following slash to prevent treating it as a regexp
	    },
	    {
	      className: 'string',
	      variants: [
	        {
	          begin: /'''/, end: /'''/,
	          contains: [hljs.BACKSLASH_ESCAPE]
	        },
	        {
	          begin: /'/, end: /'/,
	          contains: [hljs.BACKSLASH_ESCAPE]
	        },
	        {
	          begin: /"""/, end: /"""/,
	          contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]
	        },
	        {
	          begin: /"/, end: /"/,
	          contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]
	        },
	        {
	          begin: /\\/, end: /(\s|$)/,
	          excludeEnd: true
	        }
	      ]
	    },
	    {
	      className: 'regexp',
	      variants: [
	        {
	          begin: '//', end: '//[gim]*',
	          contains: [SUBST, hljs.HASH_COMMENT_MODE]
	        },
	        {
	          // regex can't start with space to parse x / 2 / 3 as two divisions
	          // regex can't start with *, and it supports an "illegal" in the main mode
	          begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
	        }
	      ]
	    },
	    {
	      begin: '@' + JS_IDENT_RE
	    },
	    {
	      begin: '``', end: '``',
	      excludeBegin: true, excludeEnd: true,
	      subLanguage: 'javascript'
	    }
	  ];
	  SUBST.contains = EXPRESSIONS;
	
	  var PARAMS = {
	    className: 'params',
	    begin: '\\(', returnBegin: true,
	    /* We need another contained nameless mode to not have every nested
	    pair of parens to be called "params" */
	    contains: [
	      {
	        begin: /\(/, end: /\)/,
	        keywords: KEYWORDS,
	        contains: ['self'].concat(EXPRESSIONS)
	      }
	    ]
	  };
	
	  return {
	    aliases: ['ls'],
	    keywords: KEYWORDS,
	    illegal: /\/\*/,
	    contains: EXPRESSIONS.concat([
	      hljs.COMMENT('\\/\\*', '\\*\\/'),
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'function',
	        contains: [TITLE, PARAMS],
	        returnBegin: true,
	        variants: [
	          {
	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B\\->\\*?', end: '\\->\\*?'
	          },
	          {
	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?!?(\\(.*\\))?\\s*\\B[-~]{1,2}>\\*?', end: '[-~]{1,2}>\\*?'
	          },
	          {
	            begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B!?[-~]{1,2}>\\*?', end: '!?[-~]{1,2}>\\*?'
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class',
	        end: '$',
	        illegal: /[:="\[\]]/,
	        contains: [
	          {
	            beginKeywords: 'extends',
	            endsWithParent: true,
	            illegal: /[:="\[\]]/,
	            contains: [TITLE]
	          },
	          TITLE
	        ]
	      },
	      {
	        begin: JS_IDENT_RE + ':', end: ':',
	        returnBegin: true, returnEnd: true,
	        relevance: 0
	      }
	    ])
	  };
	};

/***/ },
/* 192 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	
	    var LSL_STRING_ESCAPE_CHARS = {
	        className: 'subst',
	        begin: /\\[tn"\\]/
	    };
	
	    var LSL_STRINGS = {
	        className: 'string',
	        begin: '"',
	        end: '"',
	        contains: [
	            LSL_STRING_ESCAPE_CHARS
	        ]
	    };
	
	    var LSL_NUMBERS = {
	        className: 'number',
	        begin: hljs.C_NUMBER_RE
	    };
	
	    var LSL_CONSTANTS = {
	        className: 'literal',
	        variants: [
	            {
	                begin: '\\b(?:PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b'
	            },
	            {
	                begin: '\\b(?:XP_ERROR_(?:EXPERIENCES_DISABLED|EXPERIENCE_(?:DISABLED|SUSPENDED)|INVALID_(?:EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(?:FOUND|PERMITTED(?:_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(?:PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(?:_OBJECT)?|(?:DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(?:FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(?:_(?:BY_(?:LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(?:PARCEL(?:_OWNER)?|REGION)))?|CAMERA_(?:PITCH|DISTANCE|BEHINDNESS_(?:ANGLE|LAG)|(?:FOCUS|POSITION)(?:_(?:THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(?:ROOT|SET|ALL_(?:OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(?:IVE|_(?:ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(?:FWD|BACK|(?:ROT_)?(?:LEFT|RIGHT)|UP|DOWN|(?:ML_)?LBUTTON)|PERMISSION_(?:RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(?:CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(?:TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(?:INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(?:_START)?|TELEPORT|MEDIA)|OBJECT_(?:CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(?:PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_ON_REZ|NAME|DESC|POS|PRIM_(?:COUNT|EQUIVALENCE)|RETURN_(?:PARCEL(?:_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP|CREATOR|ATTACHED_POINT|RENDER_WEIGHT|(?:BODY_SHAPE|PATHFINDING)_TYPE|(?:RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(?:MEMORY|TIME))|TYPE_(?:INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(?:DEBUG|PUBLIC)_CHANNEL|ATTACH_(?:AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](?:SHOULDER|HAND|FOOT|EAR|EYE|[UL](?:ARM|LEG)|HIP)|(?:LEFT|RIGHT)_PEC|HUD_(?:CENTER_[12]|TOP_(?:RIGHT|CENTER|LEFT)|BOTTOM(?:_(?:RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(?:BASE|TIP)|[LR]WING|FACE_(?:JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(?:LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(?:ONLINE|NAME|BORN|SIM_(?:POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(?:ON_FILE|USED)|REMOTE_DATA_(?:CHANNEL|REQUEST|REPLY)|PSYS_(?:PART_(?:BF_(?:ZERO|ONE(?:_MINUS_(?:DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(?:START|END)_(?:COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(?:RIBBON|WIND|INTERP_(?:COLOR|SCALE)|BOUNCE|FOLLOW_(?:SRC|VELOCITY)|TARGET_(?:POS|LINEAR)|EMISSIVE)_MASK)|SRC_(?:MAX_AGE|PATTERN|ANGLE_(?:BEGIN|END)|BURST_(?:RATE|PART_COUNT|RADIUS|SPEED_(?:MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(?:DROP|EXPLODE|ANGLE(?:_CONE(?:_EMPTY)?)?)))|VEHICLE_(?:REFERENCE_FRAME|TYPE_(?:NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(?:LINEAR|ANGULAR)_(?:FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(?:HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(?:LINEAR|ANGULAR)_(?:DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:ALPHA_MODE(?:_(?:BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[ABCD]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(?:AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b'
	            },
	            {
	                begin: '\\b(?:FALSE|TRUE)\\b'
	            },
	            {
	                begin: '\\b(?:ZERO_ROTATION)\\b'
	            },
	            {
	                begin: '\\b(?:EOF|JSON_(?:ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(?:BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(?:GRANTED|DENIED))\\b'
	            },
	            {
	                begin: '\\b(?:ZERO_VECTOR|TOUCH_INVALID_(?:TEXCOORD|VECTOR))\\b'
	            }
	        ]
	    };
	
	    var LSL_FUNCTIONS = {
	        className: 'built_in',
	        begin: '\\b(?:ll(?:AgentInExperience|(?:Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(?:Details|ErrorMessage)|ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached(?:List)?|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|Request(?:Experience)?Permissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b'
	    };
	
	    return {
	        illegal: ':',
	        contains: [
	            LSL_STRINGS,
	            {
	                className: 'comment',
	                variants: [
	                    hljs.COMMENT('//', '$'),
	                    hljs.COMMENT('/\\*', '\\*/')
	                ]
	            },
	            LSL_NUMBERS,
	            {
	                className: 'section',
	                variants: [
	                    {
	                        begin: '\\b(?:state|default)\\b'
	                    },
	                    {
	                        begin: '\\b(?:state_(?:entry|exit)|touch(?:_(?:start|end))?|(?:land_)?collision(?:_(?:start|end))?|timer|listen|(?:no_)?sensor|control|(?:not_)?at_(?:rot_)?target|money|email|experience_permissions(?:_denied)?|run_time_permissions|changed|attach|dataserver|moving_(?:start|end)|link_message|(?:on|object)_rez|remote_data|http_re(?:sponse|quest)|path_update|transaction_result)\\b'
	                    }
	                ]
	            },
	            LSL_FUNCTIONS,
	            LSL_CONSTANTS,
	            {
	                className: 'type',
	                begin: '\\b(?:integer|float|string|key|vector|quaternion|rotation|list)\\b'
	            }
	        ]
	    };
	};

/***/ },
/* 193 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var OPENING_LONG_BRACKET = '\\[=*\\[';
	  var CLOSING_LONG_BRACKET = '\\]=*\\]';
	  var LONG_BRACKETS = {
	    begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
	    contains: ['self']
	  };
	  var COMMENTS = [
	    hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),
	    hljs.COMMENT(
	      '--' + OPENING_LONG_BRACKET,
	      CLOSING_LONG_BRACKET,
	      {
	        contains: [LONG_BRACKETS],
	        relevance: 10
	      }
	    )
	  ];
	  return {
	    lexemes: hljs.UNDERSCORE_IDENT_RE,
	    keywords: {
	      keyword:
	        'and break do else elseif end false for if in local nil not or repeat return then ' +
	        'true until while',
	      built_in:
	        '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load ' +
	        'loadfile loadstring module next pairs pcall print rawequal rawget rawset require ' +
	        'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug ' +
	        'io math os package string table'
	    },
	    contains: COMMENTS.concat([
	      {
	        className: 'function',
	        beginKeywords: 'function', end: '\\)',
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*'}),
	          {
	            className: 'params',
	            begin: '\\(', endsWithParent: true,
	            contains: COMMENTS
	          }
	        ].concat(COMMENTS)
	      },
	      hljs.C_NUMBER_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
	        contains: [LONG_BRACKETS],
	        relevance: 5
	      }
	    ])
	  };
	};

/***/ },
/* 194 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var VARIABLE = {
	    className: 'variable',
	    begin: /\$\(/, end: /\)/,
	    contains: [hljs.BACKSLASH_ESCAPE]
	  };
	  return {
	    aliases: ['mk', 'mak'],
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        begin: /^\w+\s*\W*=/, returnBegin: true,
	        relevance: 0,
	        starts: {
	          end: /\s*\W*=/, excludeEnd: true,
	          starts: {
	            end: /$/,
	            relevance: 0,
	            contains: [
	              VARIABLE
	            ]
	          }
	        }
	      },
	      {
	        className: 'section',
	        begin: /^[\w]+:\s*$/
	      },
	      {
	        className: 'meta',
	        begin: /^\.PHONY:/, end: /$/,
	        keywords: {'meta-keyword': '.PHONY'}, lexemes: /[\.\w]+/
	      },
	      {
	        begin: /^\t+/, end: /$/,
	        relevance: 0,
	        contains: [
	          hljs.QUOTE_STRING_MODE,
	          VARIABLE
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 195 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['mma'],
	    lexemes: '(\\$|\\b)' + hljs.IDENT_RE + '\\b',
	    keywords: 'AbelianGroup Abort AbortKernels AbortProtect Above Abs Absolute AbsoluteCorrelation AbsoluteCorrelationFunction AbsoluteCurrentValue AbsoluteDashing AbsoluteFileName AbsoluteOptions AbsolutePointSize AbsoluteThickness AbsoluteTime AbsoluteTiming AccountingForm Accumulate Accuracy AccuracyGoal ActionDelay ActionMenu ActionMenuBox ActionMenuBoxOptions Active ActiveItem ActiveStyle AcyclicGraphQ AddOnHelpPath AddTo AdjacencyGraph AdjacencyList AdjacencyMatrix AdjustmentBox AdjustmentBoxOptions AdjustTimeSeriesForecast AffineTransform After AiryAi AiryAiPrime AiryAiZero AiryBi AiryBiPrime AiryBiZero AlgebraicIntegerQ AlgebraicNumber AlgebraicNumberDenominator AlgebraicNumberNorm AlgebraicNumberPolynomial AlgebraicNumberTrace AlgebraicRules AlgebraicRulesData Algebraics AlgebraicUnitQ Alignment AlignmentMarker AlignmentPoint All AllowedDimensions AllowGroupClose AllowInlineCells AllowKernelInitialization AllowReverseGroupClose AllowScriptLevelChange AlphaChannel AlternatingGroup AlternativeHypothesis Alternatives AmbientLight Analytic AnchoredSearch And AndersonDarlingTest AngerJ AngleBracket AngularGauge Animate AnimationCycleOffset AnimationCycleRepetitions AnimationDirection AnimationDisplayTime AnimationRate AnimationRepetitions AnimationRunning Animator AnimatorBox AnimatorBoxOptions AnimatorElements Annotation Annuity AnnuityDue Antialiasing Antisymmetric Apart ApartSquareFree Appearance AppearanceElements AppellF1 Append AppendTo Apply ArcCos ArcCosh ArcCot ArcCoth ArcCsc ArcCsch ArcSec ArcSech ArcSin ArcSinDistribution ArcSinh ArcTan ArcTanh Arg ArgMax ArgMin ArgumentCountQ ARIMAProcess ArithmeticGeometricMean ARMAProcess ARProcess Array ArrayComponents ArrayDepth ArrayFlatten ArrayPad ArrayPlot ArrayQ ArrayReshape ArrayRules Arrays Arrow Arrow3DBox ArrowBox Arrowheads AspectRatio AspectRatioFixed Assert Assuming Assumptions AstronomicalData Asynchronous AsynchronousTaskObject AsynchronousTasks AtomQ Attributes AugmentedSymmetricPolynomial AutoAction AutoDelete AutoEvaluateEvents AutoGeneratedPackage AutoIndent AutoIndentSpacings AutoItalicWords AutoloadPath AutoMatch Automatic AutomaticImageSize AutoMultiplicationSymbol AutoNumberFormatting AutoOpenNotebooks AutoOpenPalettes AutorunSequencing AutoScaling AutoScroll AutoSpacing AutoStyleOptions AutoStyleWords Axes AxesEdge AxesLabel AxesOrigin AxesStyle Axis ' +
	      'BabyMonsterGroupB Back Background BackgroundTasksSettings Backslash Backsubstitution Backward Band BandpassFilter BandstopFilter BarabasiAlbertGraphDistribution BarChart BarChart3D BarLegend BarlowProschanImportance BarnesG BarOrigin BarSpacing BartlettHannWindow BartlettWindow BaseForm Baseline BaselinePosition BaseStyle BatesDistribution BattleLemarieWavelet Because BeckmannDistribution Beep Before Begin BeginDialogPacket BeginFrontEndInteractionPacket BeginPackage BellB BellY Below BenfordDistribution BeniniDistribution BenktanderGibratDistribution BenktanderWeibullDistribution BernoulliB BernoulliDistribution BernoulliGraphDistribution BernoulliProcess BernsteinBasis BesselFilterModel BesselI BesselJ BesselJZero BesselK BesselY BesselYZero Beta BetaBinomialDistribution BetaDistribution BetaNegativeBinomialDistribution BetaPrimeDistribution BetaRegularized BetweennessCentrality BezierCurve BezierCurve3DBox BezierCurve3DBoxOptions BezierCurveBox BezierCurveBoxOptions BezierFunction BilateralFilter Binarize BinaryFormat BinaryImageQ BinaryRead BinaryReadList BinaryWrite BinCounts BinLists Binomial BinomialDistribution BinomialProcess BinormalDistribution BiorthogonalSplineWavelet BipartiteGraphQ BirnbaumImportance BirnbaumSaundersDistribution BitAnd BitClear BitGet BitLength BitNot BitOr BitSet BitShiftLeft BitShiftRight BitXor Black BlackmanHarrisWindow BlackmanNuttallWindow BlackmanWindow Blank BlankForm BlankNullSequence BlankSequence Blend Block BlockRandom BlomqvistBeta BlomqvistBetaTest Blue Blur BodePlot BohmanWindow Bold Bookmarks Boole BooleanConsecutiveFunction BooleanConvert BooleanCountingFunction BooleanFunction BooleanGraph BooleanMaxterms BooleanMinimize BooleanMinterms Booleans BooleanTable BooleanVariables BorderDimensions BorelTannerDistribution Bottom BottomHatTransform BoundaryStyle Bounds Box BoxBaselineShift BoxData BoxDimensions Boxed Boxes BoxForm BoxFormFormatTypes BoxFrame BoxID BoxMargins BoxMatrix BoxRatios BoxRotation BoxRotationPoint BoxStyle BoxWhiskerChart Bra BracketingBar BraKet BrayCurtisDistance BreadthFirstScan Break Brown BrownForsytheTest BrownianBridgeProcess BrowserCategory BSplineBasis BSplineCurve BSplineCurve3DBox BSplineCurveBox BSplineCurveBoxOptions BSplineFunction BSplineSurface BSplineSurface3DBox BubbleChart BubbleChart3D BubbleScale BubbleSizes BulletGauge BusinessDayQ ButterflyGraph ButterworthFilterModel Button ButtonBar ButtonBox ButtonBoxOptions ButtonCell ButtonContents ButtonData ButtonEvaluator ButtonExpandable ButtonFrame ButtonFunction ButtonMargins ButtonMinHeight ButtonNote ButtonNotebook ButtonSource ButtonStyle ButtonStyleMenuListing Byte ByteCount ByteOrdering ' +
	      'C CachedValue CacheGraphics CalendarData CalendarType CallPacket CanberraDistance Cancel CancelButton CandlestickChart Cap CapForm CapitalDifferentialD CardinalBSplineBasis CarmichaelLambda Cases Cashflow Casoratian Catalan CatalanNumber Catch CauchyDistribution CauchyWindow CayleyGraph CDF CDFDeploy CDFInformation CDFWavelet Ceiling Cell CellAutoOverwrite CellBaseline CellBoundingBox CellBracketOptions CellChangeTimes CellContents CellContext CellDingbat CellDynamicExpression CellEditDuplicate CellElementsBoundingBox CellElementSpacings CellEpilog CellEvaluationDuplicate CellEvaluationFunction CellEventActions CellFrame CellFrameColor CellFrameLabelMargins CellFrameLabels CellFrameMargins CellGroup CellGroupData CellGrouping CellGroupingRules CellHorizontalScrolling CellID CellLabel CellLabelAutoDelete CellLabelMargins CellLabelPositioning CellMargins CellObject CellOpen CellPrint CellProlog Cells CellSize CellStyle CellTags CellularAutomaton CensoredDistribution Censoring Center CenterDot CentralMoment CentralMomentGeneratingFunction CForm ChampernowneNumber ChanVeseBinarize Character CharacterEncoding CharacterEncodingsPath CharacteristicFunction CharacteristicPolynomial CharacterRange Characters ChartBaseStyle ChartElementData ChartElementDataFunction ChartElementFunction ChartElements ChartLabels ChartLayout ChartLegends ChartStyle Chebyshev1FilterModel Chebyshev2FilterModel ChebyshevDistance ChebyshevT ChebyshevU Check CheckAbort CheckAll Checkbox CheckboxBar CheckboxBox CheckboxBoxOptions ChemicalData ChessboardDistance ChiDistribution ChineseRemainder ChiSquareDistribution ChoiceButtons ChoiceDialog CholeskyDecomposition Chop Circle CircleBox CircleDot CircleMinus CirclePlus CircleTimes CirculantGraph CityData Clear ClearAll ClearAttributes ClearSystemCache ClebschGordan ClickPane Clip ClipboardNotebook ClipFill ClippingStyle ClipPlanes ClipRange Clock ClockGauge ClockwiseContourIntegral Close Closed CloseKernels ClosenessCentrality Closing ClosingAutoSave ClosingEvent ClusteringComponents CMYKColor Coarse Coefficient CoefficientArrays CoefficientDomain CoefficientList CoefficientRules CoifletWavelet Collect Colon ColonForm ColorCombine ColorConvert ColorData ColorDataFunction ColorFunction ColorFunctionScaling Colorize ColorNegate ColorOutput ColorProfileData ColorQuantize ColorReplace ColorRules ColorSelectorSettings ColorSeparate ColorSetter ColorSetterBox ColorSetterBoxOptions ColorSlider ColorSpace Column ColumnAlignments ColumnBackgrounds ColumnForm ColumnLines ColumnsEqual ColumnSpacings ColumnWidths CommonDefaultFormatTypes Commonest CommonestFilter CommonUnits CommunityBoundaryStyle CommunityGraphPlot CommunityLabels CommunityRegionStyle CompatibleUnitQ CompilationOptions CompilationTarget Compile Compiled CompiledFunction Complement CompleteGraph CompleteGraphQ CompleteKaryTree CompletionsListPacket Complex Complexes ComplexExpand ComplexInfinity ComplexityFunction ComponentMeasurements ' +
	      'ComponentwiseContextMenu Compose ComposeList ComposeSeries Composition CompoundExpression CompoundPoissonDistribution CompoundPoissonProcess CompoundRenewalProcess Compress CompressedData Condition ConditionalExpression Conditioned Cone ConeBox ConfidenceLevel ConfidenceRange ConfidenceTransform ConfigurationPath Congruent Conjugate ConjugateTranspose Conjunction Connect ConnectedComponents ConnectedGraphQ ConnesWindow ConoverTest ConsoleMessage ConsoleMessagePacket ConsolePrint Constant ConstantArray Constants ConstrainedMax ConstrainedMin ContentPadding ContentsBoundingBox ContentSelectable ContentSize Context ContextMenu Contexts ContextToFilename ContextToFileName Continuation Continue ContinuedFraction ContinuedFractionK ContinuousAction ContinuousMarkovProcess ContinuousTimeModelQ ContinuousWaveletData ContinuousWaveletTransform ContourDetect ContourGraphics ContourIntegral ContourLabels ContourLines ContourPlot ContourPlot3D Contours ContourShading ContourSmoothing ContourStyle ContraharmonicMean Control ControlActive ControlAlignment ControllabilityGramian ControllabilityMatrix ControllableDecomposition ControllableModelQ ControllerDuration ControllerInformation ControllerInformationData ControllerLinking ControllerManipulate ControllerMethod ControllerPath ControllerState ControlPlacement ControlsRendering ControlType Convergents ConversionOptions ConversionRules ConvertToBitmapPacket ConvertToPostScript ConvertToPostScriptPacket Convolve ConwayGroupCo1 ConwayGroupCo2 ConwayGroupCo3 CoordinateChartData CoordinatesToolOptions CoordinateTransform CoordinateTransformData CoprimeQ Coproduct CopulaDistribution Copyable CopyDirectory CopyFile CopyTag CopyToClipboard CornerFilter CornerNeighbors Correlation CorrelationDistance CorrelationFunction CorrelationTest Cos Cosh CoshIntegral CosineDistance CosineWindow CosIntegral Cot Coth Count CounterAssignments CounterBox CounterBoxOptions CounterClockwiseContourIntegral CounterEvaluator CounterFunction CounterIncrements CounterStyle CounterStyleMenuListing CountRoots CountryData Covariance CovarianceEstimatorFunction CovarianceFunction CoxianDistribution CoxIngersollRossProcess CoxModel CoxModelFit CramerVonMisesTest CreateArchive CreateDialog CreateDirectory CreateDocument CreateIntermediateDirectories CreatePalette CreatePalettePacket CreateScheduledTask CreateTemporary CreateWindow CriticalityFailureImportance CriticalitySuccessImportance CriticalSection Cross CrossingDetect CrossMatrix Csc Csch CubeRoot Cubics Cuboid CuboidBox Cumulant CumulantGeneratingFunction Cup CupCap Curl CurlyDoubleQuote CurlyQuote CurrentImage CurrentlySpeakingPacket CurrentValue CurvatureFlowFilter CurveClosed Cyan CycleGraph CycleIndexPolynomial Cycles CyclicGroup Cyclotomic Cylinder CylinderBox CylindricalDecomposition ' +
	      'D DagumDistribution DamerauLevenshteinDistance DampingFactor Darker Dashed Dashing DataCompression DataDistribution DataRange DataReversed Date DateDelimiters DateDifference DateFunction DateList DateListLogPlot DateListPlot DatePattern DatePlus DateRange DateString DateTicksFormat DaubechiesWavelet DavisDistribution DawsonF DayCount DayCountConvention DayMatchQ DayName DayPlus DayRange DayRound DeBruijnGraph Debug DebugTag Decimal DeclareKnownSymbols DeclarePackage Decompose Decrement DedekindEta Default DefaultAxesStyle DefaultBaseStyle DefaultBoxStyle DefaultButton DefaultColor DefaultControlPlacement DefaultDuplicateCellStyle DefaultDuration DefaultElement DefaultFaceGridsStyle DefaultFieldHintStyle DefaultFont DefaultFontProperties DefaultFormatType DefaultFormatTypeForStyle DefaultFrameStyle DefaultFrameTicksStyle DefaultGridLinesStyle DefaultInlineFormatType DefaultInputFormatType DefaultLabelStyle DefaultMenuStyle DefaultNaturalLanguage DefaultNewCellStyle DefaultNewInlineCellStyle DefaultNotebook DefaultOptions DefaultOutputFormatType DefaultStyle DefaultStyleDefinitions DefaultTextFormatType DefaultTextInlineFormatType DefaultTicksStyle DefaultTooltipStyle DefaultValues Defer DefineExternal DefineInputStreamMethod DefineOutputStreamMethod Definition Degree DegreeCentrality DegreeGraphDistribution DegreeLexicographic DegreeReverseLexicographic Deinitialization Del Deletable Delete DeleteBorderComponents DeleteCases DeleteContents DeleteDirectory DeleteDuplicates DeleteFile DeleteSmallComponents DeleteWithContents DeletionWarning Delimiter DelimiterFlashTime DelimiterMatching Delimiters Denominator DensityGraphics DensityHistogram DensityPlot DependentVariables Deploy Deployed Depth DepthFirstScan Derivative DerivativeFilter DescriptorStateSpace DesignMatrix Det DGaussianWavelet DiacriticalPositioning Diagonal DiagonalMatrix Dialog DialogIndent DialogInput DialogLevel DialogNotebook DialogProlog DialogReturn DialogSymbols Diamond DiamondMatrix DiceDissimilarity DictionaryLookup DifferenceDelta DifferenceOrder DifferenceRoot DifferenceRootReduce Differences DifferentialD DifferentialRoot DifferentialRootReduce DifferentiatorFilter DigitBlock DigitBlockMinimum DigitCharacter DigitCount DigitQ DihedralGroup Dilation Dimensions DiracComb DiracDelta DirectedEdge DirectedEdges DirectedGraph DirectedGraphQ DirectedInfinity Direction Directive Directory DirectoryName DirectoryQ DirectoryStack DirichletCharacter DirichletConvolve DirichletDistribution DirichletL DirichletTransform DirichletWindow DisableConsolePrintPacket DiscreteChirpZTransform DiscreteConvolve DiscreteDelta DiscreteHadamardTransform DiscreteIndicator DiscreteLQEstimatorGains DiscreteLQRegulatorGains DiscreteLyapunovSolve DiscreteMarkovProcess DiscretePlot DiscretePlot3D DiscreteRatio DiscreteRiccatiSolve DiscreteShift DiscreteTimeModelQ DiscreteUniformDistribution DiscreteVariables DiscreteWaveletData DiscreteWaveletPacketTransform ' +
	      'DiscreteWaveletTransform Discriminant Disjunction Disk DiskBox DiskMatrix Dispatch DispersionEstimatorFunction Display DisplayAllSteps DisplayEndPacket DisplayFlushImagePacket DisplayForm DisplayFunction DisplayPacket DisplayRules DisplaySetSizePacket DisplayString DisplayTemporary DisplayWith DisplayWithRef DisplayWithVariable DistanceFunction DistanceTransform Distribute Distributed DistributedContexts DistributeDefinitions DistributionChart DistributionDomain DistributionFitTest DistributionParameterAssumptions DistributionParameterQ Dithering Div Divergence Divide DivideBy Dividers Divisible Divisors DivisorSigma DivisorSum DMSList DMSString Do DockedCells DocumentNotebook DominantColors DOSTextFormat Dot DotDashed DotEqual Dotted DoubleBracketingBar DoubleContourIntegral DoubleDownArrow DoubleLeftArrow DoubleLeftRightArrow DoubleLeftTee DoubleLongLeftArrow DoubleLongLeftRightArrow DoubleLongRightArrow DoubleRightArrow DoubleRightTee DoubleUpArrow DoubleUpDownArrow DoubleVerticalBar DoublyInfinite Down DownArrow DownArrowBar DownArrowUpArrow DownLeftRightVector DownLeftTeeVector DownLeftVector DownLeftVectorBar DownRightTeeVector DownRightVector DownRightVectorBar Downsample DownTee DownTeeArrow DownValues DragAndDrop DrawEdges DrawFrontFaces DrawHighlighted Drop DSolve Dt DualLinearProgramming DualSystemsModel DumpGet DumpSave DuplicateFreeQ Dynamic DynamicBox DynamicBoxOptions DynamicEvaluationTimeout DynamicLocation DynamicModule DynamicModuleBox DynamicModuleBoxOptions DynamicModuleParent DynamicModuleValues DynamicName DynamicNamespace DynamicReference DynamicSetting DynamicUpdating DynamicWrapper DynamicWrapperBox DynamicWrapperBoxOptions ' +
	      'E EccentricityCentrality EdgeAdd EdgeBetweennessCentrality EdgeCapacity EdgeCapForm EdgeColor EdgeConnectivity EdgeCost EdgeCount EdgeCoverQ EdgeDashing EdgeDelete EdgeDetect EdgeForm EdgeIndex EdgeJoinForm EdgeLabeling EdgeLabels EdgeLabelStyle EdgeList EdgeOpacity EdgeQ EdgeRenderingFunction EdgeRules EdgeShapeFunction EdgeStyle EdgeThickness EdgeWeight Editable EditButtonSettings EditCellTagsSettings EditDistance EffectiveInterest Eigensystem Eigenvalues EigenvectorCentrality Eigenvectors Element ElementData Eliminate EliminationOrder EllipticE EllipticExp EllipticExpPrime EllipticF EllipticFilterModel EllipticK EllipticLog EllipticNomeQ EllipticPi EllipticReducedHalfPeriods EllipticTheta EllipticThetaPrime EmitSound EmphasizeSyntaxErrors EmpiricalDistribution Empty EmptyGraphQ EnableConsolePrintPacket Enabled Encode End EndAdd EndDialogPacket EndFrontEndInteractionPacket EndOfFile EndOfLine EndOfString EndPackage EngineeringForm Enter EnterExpressionPacket EnterTextPacket Entropy EntropyFilter Environment Epilog Equal EqualColumns EqualRows EqualTilde EquatedTo Equilibrium EquirippleFilterKernel Equivalent Erf Erfc Erfi ErlangB ErlangC ErlangDistribution Erosion ErrorBox ErrorBoxOptions ErrorNorm ErrorPacket ErrorsDialogSettings EstimatedDistribution EstimatedProcess EstimatorGains EstimatorRegulator EuclideanDistance EulerE EulerGamma EulerianGraphQ EulerPhi Evaluatable Evaluate Evaluated EvaluatePacket EvaluationCell EvaluationCompletionAction EvaluationElements EvaluationMode EvaluationMonitor EvaluationNotebook EvaluationObject EvaluationOrder Evaluator EvaluatorNames EvenQ EventData EventEvaluator EventHandler EventHandlerTag EventLabels ExactBlackmanWindow ExactNumberQ ExactRootIsolation ExampleData Except ExcludedForms ExcludePods Exclusions ExclusionsStyle Exists Exit ExitDialog Exp Expand ExpandAll ExpandDenominator ExpandFileName ExpandNumerator Expectation ExpectationE ExpectedValue ExpGammaDistribution ExpIntegralE ExpIntegralEi Exponent ExponentFunction ExponentialDistribution ExponentialFamily ExponentialGeneratingFunction ExponentialMovingAverage ExponentialPowerDistribution ExponentPosition ExponentStep Export ExportAutoReplacements ExportPacket ExportString Expression ExpressionCell ExpressionPacket ExpToTrig ExtendedGCD Extension ExtentElementFunction ExtentMarkers ExtentSize ExternalCall ExternalDataCharacterEncoding Extract ExtractArchive ExtremeValueDistribution ' +
	      'FaceForm FaceGrids FaceGridsStyle Factor FactorComplete Factorial Factorial2 FactorialMoment FactorialMomentGeneratingFunction FactorialPower FactorInteger FactorList FactorSquareFree FactorSquareFreeList FactorTerms FactorTermsList Fail FailureDistribution False FARIMAProcess FEDisableConsolePrintPacket FeedbackSector FeedbackSectorStyle FeedbackType FEEnableConsolePrintPacket Fibonacci FieldHint FieldHintStyle FieldMasked FieldSize File FileBaseName FileByteCount FileDate FileExistsQ FileExtension FileFormat FileHash FileInformation FileName FileNameDepth FileNameDialogSettings FileNameDrop FileNameJoin FileNames FileNameSetter FileNameSplit FileNameTake FilePrint FileType FilledCurve FilledCurveBox Filling FillingStyle FillingTransform FilterRules FinancialBond FinancialData FinancialDerivative FinancialIndicator Find FindArgMax FindArgMin FindClique FindClusters FindCurvePath FindDistributionParameters FindDivisions FindEdgeCover FindEdgeCut FindEulerianCycle FindFaces FindFile FindFit FindGeneratingFunction FindGeoLocation FindGeometricTransform FindGraphCommunities FindGraphIsomorphism FindGraphPartition FindHamiltonianCycle FindIndependentEdgeSet FindIndependentVertexSet FindInstance FindIntegerNullVector FindKClan FindKClique FindKClub FindKPlex FindLibrary FindLinearRecurrence FindList FindMaximum FindMaximumFlow FindMaxValue FindMinimum FindMinimumCostFlow FindMinimumCut FindMinValue FindPermutation FindPostmanTour FindProcessParameters FindRoot FindSequenceFunction FindSettings FindShortestPath FindShortestTour FindThreshold FindVertexCover FindVertexCut Fine FinishDynamic FiniteAbelianGroupCount FiniteGroupCount FiniteGroupData First FirstPassageTimeDistribution FischerGroupFi22 FischerGroupFi23 FischerGroupFi24Prime FisherHypergeometricDistribution FisherRatioTest FisherZDistribution Fit FitAll FittedModel FixedPoint FixedPointList FlashSelection Flat Flatten FlattenAt FlatTopWindow FlipView Floor FlushPrintOutputPacket Fold FoldList Font FontColor FontFamily FontForm FontName FontOpacity FontPostScriptName FontProperties FontReencoding FontSize FontSlant FontSubstitutions FontTracking FontVariations FontWeight For ForAll Format FormatRules FormatType FormatTypeAutoConvert FormatValues FormBox FormBoxOptions FortranForm Forward ForwardBackward Fourier FourierCoefficient FourierCosCoefficient FourierCosSeries FourierCosTransform FourierDCT FourierDCTFilter FourierDCTMatrix FourierDST FourierDSTMatrix FourierMatrix FourierParameters FourierSequenceTransform FourierSeries FourierSinCoefficient FourierSinSeries FourierSinTransform FourierTransform FourierTrigSeries FractionalBrownianMotionProcess FractionalPart FractionBox FractionBoxOptions FractionLine Frame FrameBox FrameBoxOptions Framed FrameInset FrameLabel Frameless FrameMargins FrameStyle FrameTicks FrameTicksStyle FRatioDistribution FrechetDistribution FreeQ FrequencySamplingFilterKernel FresnelC FresnelS Friday FrobeniusNumber FrobeniusSolve ' +
	      'FromCharacterCode FromCoefficientRules FromContinuedFraction FromDate FromDigits FromDMS Front FrontEndDynamicExpression FrontEndEventActions FrontEndExecute FrontEndObject FrontEndResource FrontEndResourceString FrontEndStackSize FrontEndToken FrontEndTokenExecute FrontEndValueCache FrontEndVersion FrontFaceColor FrontFaceOpacity Full FullAxes FullDefinition FullForm FullGraphics FullOptions FullSimplify Function FunctionExpand FunctionInterpolation FunctionSpace FussellVeselyImportance ' +
	      'GaborFilter GaborMatrix GaborWavelet GainMargins GainPhaseMargins Gamma GammaDistribution GammaRegularized GapPenalty Gather GatherBy GaugeFaceElementFunction GaugeFaceStyle GaugeFrameElementFunction GaugeFrameSize GaugeFrameStyle GaugeLabels GaugeMarkers GaugeStyle GaussianFilter GaussianIntegers GaussianMatrix GaussianWindow GCD GegenbauerC General GeneralizedLinearModelFit GenerateConditions GeneratedCell GeneratedParameters GeneratingFunction Generic GenericCylindricalDecomposition GenomeData GenomeLookup GeodesicClosing GeodesicDilation GeodesicErosion GeodesicOpening GeoDestination GeodesyData GeoDirection GeoDistance GeoGridPosition GeometricBrownianMotionProcess GeometricDistribution GeometricMean GeometricMeanFilter GeometricTransformation GeometricTransformation3DBox GeometricTransformation3DBoxOptions GeometricTransformationBox GeometricTransformationBoxOptions GeoPosition GeoPositionENU GeoPositionXYZ GeoProjectionData GestureHandler GestureHandlerTag Get GetBoundingBoxSizePacket GetContext GetEnvironment GetFileName GetFrontEndOptionsDataPacket GetLinebreakInformationPacket GetMenusPacket GetPageBreakInformationPacket Glaisher GlobalClusteringCoefficient GlobalPreferences GlobalSession Glow GoldenRatio GompertzMakehamDistribution GoodmanKruskalGamma GoodmanKruskalGammaTest Goto Grad Gradient GradientFilter GradientOrientationFilter Graph GraphAssortativity GraphCenter GraphComplement GraphData GraphDensity GraphDiameter GraphDifference GraphDisjointUnion ' +
	      'GraphDistance GraphDistanceMatrix GraphElementData GraphEmbedding GraphHighlight GraphHighlightStyle GraphHub Graphics Graphics3D Graphics3DBox Graphics3DBoxOptions GraphicsArray GraphicsBaseline GraphicsBox GraphicsBoxOptions GraphicsColor GraphicsColumn GraphicsComplex GraphicsComplex3DBox GraphicsComplex3DBoxOptions GraphicsComplexBox GraphicsComplexBoxOptions GraphicsContents GraphicsData GraphicsGrid GraphicsGridBox GraphicsGroup GraphicsGroup3DBox GraphicsGroup3DBoxOptions GraphicsGroupBox GraphicsGroupBoxOptions GraphicsGrouping GraphicsHighlightColor GraphicsRow GraphicsSpacing GraphicsStyle GraphIntersection GraphLayout GraphLinkEfficiency GraphPeriphery GraphPlot GraphPlot3D GraphPower GraphPropertyDistribution GraphQ GraphRadius GraphReciprocity GraphRoot GraphStyle GraphUnion Gray GrayLevel GreatCircleDistance Greater GreaterEqual GreaterEqualLess GreaterFullEqual GreaterGreater GreaterLess GreaterSlantEqual GreaterTilde Green Grid GridBaseline GridBox GridBoxAlignment GridBoxBackground GridBoxDividers GridBoxFrame GridBoxItemSize GridBoxItemStyle GridBoxOptions GridBoxSpacings GridCreationSettings GridDefaultElement GridElementStyleOptions GridFrame GridFrameMargins GridGraph GridLines GridLinesStyle GroebnerBasis GroupActionBase GroupCentralizer GroupElementFromWord GroupElementPosition GroupElementQ GroupElements GroupElementToWord GroupGenerators GroupMultiplicationTable GroupOrbits GroupOrder GroupPageBreakWithin GroupSetwiseStabilizer GroupStabilizer GroupStabilizerChain Gudermannian GumbelDistribution ' +
	      'HaarWavelet HadamardMatrix HalfNormalDistribution HamiltonianGraphQ HammingDistance HammingWindow HankelH1 HankelH2 HankelMatrix HannPoissonWindow HannWindow HaradaNortonGroupHN HararyGraph HarmonicMean HarmonicMeanFilter HarmonicNumber Hash HashTable Haversine HazardFunction Head HeadCompose Heads HeavisideLambda HeavisidePi HeavisideTheta HeldGroupHe HeldPart HelpBrowserLookup HelpBrowserNotebook HelpBrowserSettings HermiteDecomposition HermiteH HermitianMatrixQ HessenbergDecomposition Hessian HexadecimalCharacter Hexahedron HexahedronBox HexahedronBoxOptions HiddenSurface HighlightGraph HighlightImage HighpassFilter HigmanSimsGroupHS HilbertFilter HilbertMatrix Histogram Histogram3D HistogramDistribution HistogramList HistogramTransform HistogramTransformInterpolation HitMissTransform HITSCentrality HodgeDual HoeffdingD HoeffdingDTest Hold HoldAll HoldAllComplete HoldComplete HoldFirst HoldForm HoldPattern HoldRest HolidayCalendar HomeDirectory HomePage Horizontal HorizontalForm HorizontalGauge HorizontalScrollPosition HornerForm HotellingTSquareDistribution HoytDistribution HTMLSave Hue HumpDownHump HumpEqual HurwitzLerchPhi HurwitzZeta HyperbolicDistribution HypercubeGraph HyperexponentialDistribution Hyperfactorial Hypergeometric0F1 Hypergeometric0F1Regularized Hypergeometric1F1 Hypergeometric1F1Regularized Hypergeometric2F1 Hypergeometric2F1Regularized HypergeometricDistribution HypergeometricPFQ HypergeometricPFQRegularized HypergeometricU Hyperlink HyperlinkCreationSettings Hyphenation HyphenationOptions HypoexponentialDistribution HypothesisTestData ' +
	      'I Identity IdentityMatrix If IgnoreCase Im Image Image3D Image3DSlices ImageAccumulate ImageAdd ImageAdjust ImageAlign ImageApply ImageAspectRatio ImageAssemble ImageCache ImageCacheValid ImageCapture ImageChannels ImageClip ImageColorSpace ImageCompose ImageConvolve ImageCooccurrence ImageCorners ImageCorrelate ImageCorrespondingPoints ImageCrop ImageData ImageDataPacket ImageDeconvolve ImageDemosaic ImageDifference ImageDimensions ImageDistance ImageEffect ImageFeatureTrack ImageFileApply ImageFileFilter ImageFileScan ImageFilter ImageForestingComponents ImageForwardTransformation ImageHistogram ImageKeypoints ImageLevels ImageLines ImageMargins ImageMarkers ImageMeasurements ImageMultiply ImageOffset ImagePad ImagePadding ImagePartition ImagePeriodogram ImagePerspectiveTransformation ImageQ ImageRangeCache ImageReflect ImageRegion ImageResize ImageResolution ImageRotate ImageRotated ImageScaled ImageScan ImageSize ImageSizeAction ImageSizeCache ImageSizeMultipliers ImageSizeRaw ImageSubtract ImageTake ImageTransformation ImageTrim ImageType ImageValue ImageValuePositions Implies Import ImportAutoReplacements ImportString ImprovementImportance In IncidenceGraph IncidenceList IncidenceMatrix IncludeConstantBasis IncludeFileExtension IncludePods IncludeSingularTerm Increment Indent IndentingNewlineSpacings IndentMaxFraction IndependenceTest IndependentEdgeSetQ IndependentUnit IndependentVertexSetQ Indeterminate IndexCreationOptions Indexed IndexGraph IndexTag Inequality InexactNumberQ InexactNumbers Infinity Infix Information Inherited InheritScope Initialization InitializationCell InitializationCellEvaluation InitializationCellWarning InlineCounterAssignments InlineCounterIncrements InlineRules Inner Inpaint Input InputAliases InputAssumptions InputAutoReplacements InputField InputFieldBox InputFieldBoxOptions InputForm InputGrouping InputNamePacket InputNotebook InputPacket InputSettings InputStream InputString InputStringPacket InputToBoxFormPacket Insert InsertionPointObject InsertResults Inset Inset3DBox Inset3DBoxOptions InsetBox InsetBoxOptions Install InstallService InString Integer IntegerDigits IntegerExponent IntegerLength IntegerPart IntegerPartitions IntegerQ Integers IntegerString Integral Integrate Interactive InteractiveTradingChart Interlaced Interleaving InternallyBalancedDecomposition InterpolatingFunction InterpolatingPolynomial Interpolation InterpolationOrder InterpolationPoints InterpolationPrecision Interpretation InterpretationBox InterpretationBoxOptions InterpretationFunction ' +
	      'InterpretTemplate InterquartileRange Interrupt InterruptSettings Intersection Interval IntervalIntersection IntervalMemberQ IntervalUnion Inverse InverseBetaRegularized InverseCDF InverseChiSquareDistribution InverseContinuousWaveletTransform InverseDistanceTransform InverseEllipticNomeQ InverseErf InverseErfc InverseFourier InverseFourierCosTransform InverseFourierSequenceTransform InverseFourierSinTransform InverseFourierTransform InverseFunction InverseFunctions InverseGammaDistribution InverseGammaRegularized InverseGaussianDistribution InverseGudermannian InverseHaversine InverseJacobiCD InverseJacobiCN InverseJacobiCS InverseJacobiDC InverseJacobiDN InverseJacobiDS InverseJacobiNC InverseJacobiND InverseJacobiNS InverseJacobiSC InverseJacobiSD InverseJacobiSN InverseLaplaceTransform InversePermutation InverseRadon InverseSeries InverseSurvivalFunction InverseWaveletTransform InverseWeierstrassP InverseZTransform Invisible InvisibleApplication InvisibleTimes IrreduciblePolynomialQ IsolatingInterval IsomorphicGraphQ IsotopeData Italic Item ItemBox ItemBoxOptions ItemSize ItemStyle ItoProcess ' +
	      'JaccardDissimilarity JacobiAmplitude Jacobian JacobiCD JacobiCN JacobiCS JacobiDC JacobiDN JacobiDS JacobiNC JacobiND JacobiNS JacobiP JacobiSC JacobiSD JacobiSN JacobiSymbol JacobiZeta JankoGroupJ1 JankoGroupJ2 JankoGroupJ3 JankoGroupJ4 JarqueBeraALMTest JohnsonDistribution Join Joined JoinedCurve JoinedCurveBox JoinForm JordanDecomposition JordanModelDecomposition ' +
	      'K KagiChart KaiserBesselWindow KaiserWindow KalmanEstimator KalmanFilter KarhunenLoeveDecomposition KaryTree KatzCentrality KCoreComponents KDistribution KelvinBei KelvinBer KelvinKei KelvinKer KendallTau KendallTauTest KernelExecute KernelMixtureDistribution KernelObject Kernels Ket Khinchin KirchhoffGraph KirchhoffMatrix KleinInvariantJ KnightTourGraph KnotData KnownUnitQ KolmogorovSmirnovTest KroneckerDelta KroneckerModelDecomposition KroneckerProduct KroneckerSymbol KuiperTest KumaraswamyDistribution Kurtosis KuwaharaFilter ' +
	      'Label Labeled LabeledSlider LabelingFunction LabelStyle LaguerreL LambdaComponents LambertW LanczosWindow LandauDistribution Language LanguageCategory LaplaceDistribution LaplaceTransform Laplacian LaplacianFilter LaplacianGaussianFilter Large Larger Last Latitude LatitudeLongitude LatticeData LatticeReduce Launch LaunchKernels LayeredGraphPlot LayerSizeFunction LayoutInformation LCM LeafCount LeapYearQ LeastSquares LeastSquaresFilterKernel Left LeftArrow LeftArrowBar LeftArrowRightArrow LeftDownTeeVector LeftDownVector LeftDownVectorBar LeftRightArrow LeftRightVector LeftTee LeftTeeArrow LeftTeeVector LeftTriangle LeftTriangleBar LeftTriangleEqual LeftUpDownVector LeftUpTeeVector LeftUpVector LeftUpVectorBar LeftVector LeftVectorBar LegendAppearance Legended LegendFunction LegendLabel LegendLayout LegendMargins LegendMarkers LegendMarkerSize LegendreP LegendreQ LegendreType Length LengthWhile LerchPhi Less LessEqual LessEqualGreater LessFullEqual LessGreater LessLess LessSlantEqual LessTilde LetterCharacter LetterQ Level LeveneTest LeviCivitaTensor LevyDistribution Lexicographic LibraryFunction LibraryFunctionError LibraryFunctionInformation LibraryFunctionLoad LibraryFunctionUnload LibraryLoad LibraryUnload LicenseID LiftingFilterData LiftingWaveletTransform LightBlue LightBrown LightCyan Lighter LightGray LightGreen Lighting LightingAngle LightMagenta LightOrange LightPink LightPurple LightRed LightSources LightYellow Likelihood Limit LimitsPositioning LimitsPositioningTokens LindleyDistribution Line Line3DBox LinearFilter LinearFractionalTransform LinearModelFit LinearOffsetFunction LinearProgramming LinearRecurrence LinearSolve LinearSolveFunction LineBox LineBreak LinebreakAdjustments LineBreakChart LineBreakWithin LineColor LineForm LineGraph LineIndent LineIndentMaxFraction LineIntegralConvolutionPlot LineIntegralConvolutionScale LineLegend LineOpacity LineSpacing LineWrapParts LinkActivate LinkClose LinkConnect LinkConnectedQ LinkCreate LinkError LinkFlush LinkFunction LinkHost LinkInterrupt LinkLaunch LinkMode LinkObject LinkOpen LinkOptions LinkPatterns LinkProtocol LinkRead LinkReadHeld LinkReadyQ Links LinkWrite LinkWriteHeld LiouvilleLambda List Listable ListAnimate ListContourPlot ListContourPlot3D ListConvolve ListCorrelate ListCurvePathPlot ListDeconvolve ListDensityPlot Listen ListFourierSequenceTransform ListInterpolation ListLineIntegralConvolutionPlot ListLinePlot ListLogLinearPlot ListLogLogPlot ListLogPlot ListPicker ListPickerBox ListPickerBoxBackground ListPickerBoxOptions ListPlay ListPlot ListPlot3D ListPointPlot3D ListPolarPlot ListQ ListStreamDensityPlot ListStreamPlot ListSurfacePlot3D ListVectorDensityPlot ListVectorPlot ListVectorPlot3D ListZTransform Literal LiteralSearch LocalClusteringCoefficient LocalizeVariables LocationEquivalenceTest LocationTest Locator LocatorAutoCreate LocatorBox LocatorBoxOptions LocatorCentering LocatorPane LocatorPaneBox LocatorPaneBoxOptions ' +
	      'LocatorRegion Locked Log Log10 Log2 LogBarnesG LogGamma LogGammaDistribution LogicalExpand LogIntegral LogisticDistribution LogitModelFit LogLikelihood LogLinearPlot LogLogisticDistribution LogLogPlot LogMultinormalDistribution LogNormalDistribution LogPlot LogRankTest LogSeriesDistribution LongEqual Longest LongestAscendingSequence LongestCommonSequence LongestCommonSequencePositions LongestCommonSubsequence LongestCommonSubsequencePositions LongestMatch LongForm Longitude LongLeftArrow LongLeftRightArrow LongRightArrow Loopback LoopFreeGraphQ LowerCaseQ LowerLeftArrow LowerRightArrow LowerTriangularize LowpassFilter LQEstimatorGains LQGRegulator LQOutputRegulatorGains LQRegulatorGains LUBackSubstitution LucasL LuccioSamiComponents LUDecomposition LyapunovSolve LyonsGroupLy ' +
	      'MachineID MachineName MachineNumberQ MachinePrecision MacintoshSystemPageSetup Magenta Magnification Magnify MainSolve MaintainDynamicCaches Majority MakeBoxes MakeExpression MakeRules MangoldtLambda ManhattanDistance Manipulate Manipulator MannWhitneyTest MantissaExponent Manual Map MapAll MapAt MapIndexed MAProcess MapThread MarcumQ MardiaCombinedTest MardiaKurtosisTest MardiaSkewnessTest MarginalDistribution MarkovProcessProperties Masking MatchingDissimilarity MatchLocalNameQ MatchLocalNames MatchQ Material MathematicaNotation MathieuC MathieuCharacteristicA MathieuCharacteristicB MathieuCharacteristicExponent MathieuCPrime MathieuGroupM11 MathieuGroupM12 MathieuGroupM22 MathieuGroupM23 MathieuGroupM24 MathieuS MathieuSPrime MathMLForm MathMLText Matrices MatrixExp MatrixForm MatrixFunction MatrixLog MatrixPlot MatrixPower MatrixQ MatrixRank Max MaxBend MaxDetect MaxExtraBandwidths MaxExtraConditions MaxFeatures MaxFilter Maximize MaxIterations MaxMemoryUsed MaxMixtureKernels MaxPlotPoints MaxPoints MaxRecursion MaxStableDistribution MaxStepFraction MaxSteps MaxStepSize MaxValue MaxwellDistribution McLaughlinGroupMcL Mean MeanClusteringCoefficient MeanDegreeConnectivity MeanDeviation MeanFilter MeanGraphDistance MeanNeighborDegree MeanShift MeanShiftFilter Median MedianDeviation MedianFilter Medium MeijerG MeixnerDistribution MemberQ MemoryConstrained MemoryInUse Menu MenuAppearance MenuCommandKey MenuEvaluator MenuItem MenuPacket MenuSortingValue MenuStyle MenuView MergeDifferences Mesh MeshFunctions MeshRange MeshShading MeshStyle Message MessageDialog MessageList MessageName MessageOptions MessagePacket Messages MessagesNotebook MetaCharacters MetaInformation Method MethodOptions MexicanHatWavelet MeyerWavelet Min MinDetect MinFilter MinimalPolynomial MinimalStateSpaceModel Minimize Minors MinRecursion MinSize MinStableDistribution Minus MinusPlus MinValue Missing MissingDataMethod MittagLefflerE MixedRadix MixedRadixQuantity MixtureDistribution Mod Modal Mode Modular ModularLambda Module Modulus MoebiusMu Moment Momentary MomentConvert MomentEvaluate MomentGeneratingFunction Monday Monitor MonomialList MonomialOrder MonsterGroupM MorletWavelet MorphologicalBinarize MorphologicalBranchPoints MorphologicalComponents MorphologicalEulerNumber MorphologicalGraph MorphologicalPerimeter MorphologicalTransform Most MouseAnnotation MouseAppearance MouseAppearanceTag MouseButtons Mouseover MousePointerNote MousePosition MovingAverage MovingMedian MoyalDistribution MultiedgeStyle MultilaunchWarning MultiLetterItalics MultiLetterStyle MultilineFunction Multinomial MultinomialDistribution MultinormalDistribution MultiplicativeOrder Multiplicity Multiselection MultivariateHypergeometricDistribution MultivariatePoissonDistribution MultivariateTDistribution ' +
	      'N NakagamiDistribution NameQ Names NamespaceBox Nand NArgMax NArgMin NBernoulliB NCache NDSolve NDSolveValue Nearest NearestFunction NeedCurrentFrontEndPackagePacket NeedCurrentFrontEndSymbolsPacket NeedlemanWunschSimilarity Needs Negative NegativeBinomialDistribution NegativeMultinomialDistribution NeighborhoodGraph Nest NestedGreaterGreater NestedLessLess NestedScriptRules NestList NestWhile NestWhileList NevilleThetaC NevilleThetaD NevilleThetaN NevilleThetaS NewPrimitiveStyle NExpectation Next NextPrime NHoldAll NHoldFirst NHoldRest NicholsGridLines NicholsPlot NIntegrate NMaximize NMaxValue NMinimize NMinValue NominalVariables NonAssociative NoncentralBetaDistribution NoncentralChiSquareDistribution NoncentralFRatioDistribution NoncentralStudentTDistribution NonCommutativeMultiply NonConstants None NonlinearModelFit NonlocalMeansFilter NonNegative NonPositive Nor NorlundB Norm Normal NormalDistribution NormalGrouping Normalize NormalizedSquaredEuclideanDistance NormalsFunction NormFunction Not NotCongruent NotCupCap NotDoubleVerticalBar Notebook NotebookApply NotebookAutoSave NotebookClose NotebookConvertSettings NotebookCreate NotebookCreateReturnObject NotebookDefault NotebookDelete NotebookDirectory NotebookDynamicExpression NotebookEvaluate NotebookEventActions NotebookFileName NotebookFind NotebookFindReturnObject NotebookGet NotebookGetLayoutInformationPacket NotebookGetMisspellingsPacket NotebookInformation NotebookInterfaceObject NotebookLocate NotebookObject NotebookOpen NotebookOpenReturnObject NotebookPath NotebookPrint NotebookPut NotebookPutReturnObject NotebookRead NotebookResetGeneratedCells Notebooks NotebookSave NotebookSaveAs NotebookSelection NotebookSetupLayoutInformationPacket NotebooksMenu NotebookWrite NotElement NotEqualTilde NotExists NotGreater NotGreaterEqual NotGreaterFullEqual NotGreaterGreater NotGreaterLess NotGreaterSlantEqual NotGreaterTilde NotHumpDownHump NotHumpEqual NotLeftTriangle NotLeftTriangleBar NotLeftTriangleEqual NotLess NotLessEqual NotLessFullEqual NotLessGreater NotLessLess NotLessSlantEqual NotLessTilde NotNestedGreaterGreater NotNestedLessLess NotPrecedes NotPrecedesEqual NotPrecedesSlantEqual NotPrecedesTilde NotReverseElement NotRightTriangle NotRightTriangleBar NotRightTriangleEqual NotSquareSubset NotSquareSubsetEqual NotSquareSuperset NotSquareSupersetEqual NotSubset NotSubsetEqual NotSucceeds NotSucceedsEqual NotSucceedsSlantEqual NotSucceedsTilde NotSuperset NotSupersetEqual NotTilde NotTildeEqual NotTildeFullEqual NotTildeTilde NotVerticalBar NProbability NProduct NProductFactors NRoots NSolve NSum NSumTerms Null NullRecords NullSpace NullWords Number NumberFieldClassNumber NumberFieldDiscriminant NumberFieldFundamentalUnits NumberFieldIntegralBasis NumberFieldNormRepresentatives NumberFieldRegulator NumberFieldRootsOfUnity NumberFieldSignature NumberForm NumberFormat NumberMarks NumberMultiplier NumberPadding NumberPoint NumberQ NumberSeparator ' +
	      'NumberSigns NumberString Numerator NumericFunction NumericQ NuttallWindow NValues NyquistGridLines NyquistPlot ' +
	      'O ObservabilityGramian ObservabilityMatrix ObservableDecomposition ObservableModelQ OddQ Off Offset OLEData On ONanGroupON OneIdentity Opacity Open OpenAppend Opener OpenerBox OpenerBoxOptions OpenerView OpenFunctionInspectorPacket Opening OpenRead OpenSpecialOptions OpenTemporary OpenWrite Operate OperatingSystem OptimumFlowData Optional OptionInspectorSettings OptionQ Options OptionsPacket OptionsPattern OptionValue OptionValueBox OptionValueBoxOptions Or Orange Order OrderDistribution OrderedQ Ordering Orderless OrnsteinUhlenbeckProcess Orthogonalize Out Outer OutputAutoOverwrite OutputControllabilityMatrix OutputControllableModelQ OutputForm OutputFormData OutputGrouping OutputMathEditExpression OutputNamePacket OutputResponse OutputSizeLimit OutputStream Over OverBar OverDot Overflow OverHat Overlaps Overlay OverlayBox OverlayBoxOptions Overscript OverscriptBox OverscriptBoxOptions OverTilde OverVector OwenT OwnValues ' +
	      'PackingMethod PaddedForm Padding PadeApproximant PadLeft PadRight PageBreakAbove PageBreakBelow PageBreakWithin PageFooterLines PageFooters PageHeaderLines PageHeaders PageHeight PageRankCentrality PageWidth PairedBarChart PairedHistogram PairedSmoothHistogram PairedTTest PairedZTest PaletteNotebook PalettePath Pane PaneBox PaneBoxOptions Panel PanelBox PanelBoxOptions Paneled PaneSelector PaneSelectorBox PaneSelectorBoxOptions PaperWidth ParabolicCylinderD ParagraphIndent ParagraphSpacing ParallelArray ParallelCombine ParallelDo ParallelEvaluate Parallelization Parallelize ParallelMap ParallelNeeds ParallelProduct ParallelSubmit ParallelSum ParallelTable ParallelTry Parameter ParameterEstimator ParameterMixtureDistribution ParameterVariables ParametricFunction ParametricNDSolve ParametricNDSolveValue ParametricPlot ParametricPlot3D ParentConnect ParentDirectory ParentForm Parenthesize ParentList ParetoDistribution Part PartialCorrelationFunction PartialD ParticleData Partition PartitionsP PartitionsQ ParzenWindow PascalDistribution PassEventsDown PassEventsUp Paste PasteBoxFormInlineCells PasteButton Path PathGraph PathGraphQ Pattern PatternSequence PatternTest PauliMatrix PaulWavelet Pause PausedTime PDF PearsonChiSquareTest PearsonCorrelationTest PearsonDistribution PerformanceGoal PeriodicInterpolation Periodogram PeriodogramArray PermutationCycles PermutationCyclesQ PermutationGroup PermutationLength PermutationList PermutationListQ PermutationMax PermutationMin PermutationOrder PermutationPower PermutationProduct PermutationReplace Permutations PermutationSupport Permute PeronaMalikFilter Perpendicular PERTDistribution PetersenGraph PhaseMargins Pi Pick PIDData PIDDerivativeFilter PIDFeedforward PIDTune Piecewise PiecewiseExpand PieChart PieChart3D PillaiTrace PillaiTraceTest Pink Pivoting PixelConstrained PixelValue PixelValuePositions Placed Placeholder PlaceholderReplace Plain PlanarGraphQ Play PlayRange Plot Plot3D Plot3Matrix PlotDivision PlotJoined PlotLabel PlotLayout PlotLegends PlotMarkers PlotPoints PlotRange PlotRangeClipping PlotRangePadding PlotRegion PlotStyle Plus PlusMinus Pochhammer PodStates PodWidth Point Point3DBox PointBox PointFigureChart PointForm PointLegend PointSize PoissonConsulDistribution PoissonDistribution PoissonProcess PoissonWindow PolarAxes PolarAxesOrigin PolarGridLines PolarPlot PolarTicks PoleZeroMarkers PolyaAeppliDistribution PolyGamma Polygon Polygon3DBox Polygon3DBoxOptions PolygonBox PolygonBoxOptions PolygonHoleScale PolygonIntersections PolygonScale PolyhedronData PolyLog PolynomialExtendedGCD PolynomialForm PolynomialGCD PolynomialLCM PolynomialMod PolynomialQ PolynomialQuotient PolynomialQuotientRemainder PolynomialReduce PolynomialRemainder Polynomials PopupMenu PopupMenuBox PopupMenuBoxOptions PopupView PopupWindow Position Positive PositiveDefiniteMatrixQ PossibleZeroQ Postfix PostScript Power PowerDistribution PowerExpand PowerMod PowerModList ' +
	      'PowerSpectralDensity PowersRepresentations PowerSymmetricPolynomial Precedence PrecedenceForm Precedes PrecedesEqual PrecedesSlantEqual PrecedesTilde Precision PrecisionGoal PreDecrement PredictionRoot PreemptProtect PreferencesPath Prefix PreIncrement Prepend PrependTo PreserveImageOptions Previous PriceGraphDistribution PrimaryPlaceholder Prime PrimeNu PrimeOmega PrimePi PrimePowerQ PrimeQ Primes PrimeZetaP PrimitiveRoot PrincipalComponents PrincipalValue Print PrintAction PrintForm PrintingCopies PrintingOptions PrintingPageRange PrintingStartingPageNumber PrintingStyleEnvironment PrintPrecision PrintTemporary Prism PrismBox PrismBoxOptions PrivateCellOptions PrivateEvaluationOptions PrivateFontOptions PrivateFrontEndOptions PrivateNotebookOptions PrivatePaths Probability ProbabilityDistribution ProbabilityPlot ProbabilityPr ProbabilityScalePlot ProbitModelFit ProcessEstimator ProcessParameterAssumptions ProcessParameterQ ProcessStateDomain ProcessTimeDomain Product ProductDistribution ProductLog ProgressIndicator ProgressIndicatorBox ProgressIndicatorBoxOptions Projection Prolog PromptForm Properties Property PropertyList PropertyValue Proportion Proportional Protect Protected ProteinData Pruning PseudoInverse Purple Put PutAppend Pyramid PyramidBox PyramidBoxOptions ' +
	      'QBinomial QFactorial QGamma QHypergeometricPFQ QPochhammer QPolyGamma QRDecomposition QuadraticIrrationalQ Quantile QuantilePlot Quantity QuantityForm QuantityMagnitude QuantityQ QuantityUnit Quartics QuartileDeviation Quartiles QuartileSkewness QueueingNetworkProcess QueueingProcess QueueProperties Quiet Quit Quotient QuotientRemainder ' +
	      'RadialityCentrality RadicalBox RadicalBoxOptions RadioButton RadioButtonBar RadioButtonBox RadioButtonBoxOptions Radon RamanujanTau RamanujanTauL RamanujanTauTheta RamanujanTauZ Random RandomChoice RandomComplex RandomFunction RandomGraph RandomImage RandomInteger RandomPermutation RandomPrime RandomReal RandomSample RandomSeed RandomVariate RandomWalkProcess Range RangeFilter RangeSpecification RankedMax RankedMin Raster Raster3D Raster3DBox Raster3DBoxOptions RasterArray RasterBox RasterBoxOptions Rasterize RasterSize Rational RationalFunctions Rationalize Rationals Ratios Raw RawArray RawBoxes RawData RawMedium RayleighDistribution Re Read ReadList ReadProtected Real RealBlockDiagonalForm RealDigits RealExponent Reals Reap Record RecordLists RecordSeparators Rectangle RectangleBox RectangleBoxOptions RectangleChart RectangleChart3D RecurrenceFilter RecurrenceTable RecurringDigitsForm Red Reduce RefBox ReferenceLineStyle ReferenceMarkers ReferenceMarkerStyle Refine ReflectionMatrix ReflectionTransform Refresh RefreshRate RegionBinarize RegionFunction RegionPlot RegionPlot3D RegularExpression Regularization Reinstall Release ReleaseHold ReliabilityDistribution ReliefImage ReliefPlot Remove RemoveAlphaChannel RemoveAsynchronousTask Removed RemoveInputStreamMethod RemoveOutputStreamMethod RemoveProperty RemoveScheduledTask RenameDirectory RenameFile RenderAll RenderingOptions RenewalProcess RenkoChart Repeated RepeatedNull RepeatedString Replace ReplaceAll ReplaceHeldPart ReplaceImageValue ReplaceList ReplacePart ReplacePixelValue ReplaceRepeated Resampling Rescale RescalingTransform ResetDirectory ResetMenusPacket ResetScheduledTask Residue Resolve Rest Resultant ResumePacket Return ReturnExpressionPacket ReturnInputFormPacket ReturnPacket ReturnTextPacket Reverse ReverseBiorthogonalSplineWavelet ReverseElement ReverseEquilibrium ReverseGraph ReverseUpEquilibrium RevolutionAxis RevolutionPlot3D RGBColor RiccatiSolve RiceDistribution RidgeFilter RiemannR RiemannSiegelTheta RiemannSiegelZ Riffle Right RightArrow RightArrowBar RightArrowLeftArrow RightCosetRepresentative RightDownTeeVector RightDownVector RightDownVectorBar RightTee RightTeeArrow RightTeeVector RightTriangle RightTriangleBar RightTriangleEqual RightUpDownVector RightUpTeeVector RightUpVector RightUpVectorBar RightVector RightVectorBar RiskAchievementImportance RiskReductionImportance RogersTanimotoDissimilarity Root RootApproximant RootIntervals RootLocusPlot RootMeanSquare RootOfUnityQ RootReduce Roots RootSum Rotate RotateLabel RotateLeft RotateRight RotationAction RotationBox RotationBoxOptions RotationMatrix RotationTransform Round RoundImplies RoundingRadius Row RowAlignments RowBackgrounds RowBox RowHeights RowLines RowMinHeight RowReduce RowsEqual RowSpacings RSolve RudvalisGroupRu Rule RuleCondition RuleDelayed RuleForm RulerUnits Run RunScheduledTask RunThrough RuntimeAttributes RuntimeOptions RussellRaoDissimilarity ' +
	      'SameQ SameTest SampleDepth SampledSoundFunction SampledSoundList SampleRate SamplingPeriod SARIMAProcess SARMAProcess SatisfiabilityCount SatisfiabilityInstances SatisfiableQ Saturday Save Saveable SaveAutoDelete SaveDefinitions SawtoothWave Scale Scaled ScaleDivisions ScaledMousePosition ScaleOrigin ScalePadding ScaleRanges ScaleRangeStyle ScalingFunctions ScalingMatrix ScalingTransform Scan ScheduledTaskActiveQ ScheduledTaskData ScheduledTaskObject ScheduledTasks SchurDecomposition ScientificForm ScreenRectangle ScreenStyleEnvironment ScriptBaselineShifts ScriptLevel ScriptMinSize ScriptRules ScriptSizeMultipliers Scrollbars ScrollingOptions ScrollPosition Sec Sech SechDistribution SectionGrouping SectorChart SectorChart3D SectorOrigin SectorSpacing SeedRandom Select Selectable SelectComponents SelectedCells SelectedNotebook Selection SelectionAnimate SelectionCell SelectionCellCreateCell SelectionCellDefaultStyle SelectionCellParentStyle SelectionCreateCell SelectionDebuggerTag SelectionDuplicateCell SelectionEvaluate SelectionEvaluateCreateCell SelectionMove SelectionPlaceholder SelectionSetStyle SelectWithContents SelfLoops SelfLoopStyle SemialgebraicComponentInstances SendMail Sequence SequenceAlignment SequenceForm SequenceHold SequenceLimit Series SeriesCoefficient SeriesData SessionTime Set SetAccuracy SetAlphaChannel SetAttributes Setbacks SetBoxFormNamesPacket SetDelayed SetDirectory SetEnvironment SetEvaluationNotebook SetFileDate SetFileLoadingContext SetNotebookStatusLine SetOptions SetOptionsPacket SetPrecision SetProperty SetSelectedNotebook SetSharedFunction SetSharedVariable SetSpeechParametersPacket SetStreamPosition SetSystemOptions Setter SetterBar SetterBox SetterBoxOptions Setting SetValue Shading Shallow ShannonWavelet ShapiroWilkTest Share Sharpen ShearingMatrix ShearingTransform ShenCastanMatrix Short ShortDownArrow Shortest ShortestMatch ShortestPathFunction ShortLeftArrow ShortRightArrow ShortUpArrow Show ShowAutoStyles ShowCellBracket ShowCellLabel ShowCellTags ShowClosedCellArea ShowContents ShowControls ShowCursorTracker ShowGroupOpenCloseIcon ShowGroupOpener ShowInvisibleCharacters ShowPageBreaks ShowPredictiveInterface ShowSelection ShowShortBoxForm ShowSpecialCharacters ShowStringCharacters ShowSyntaxStyles ShrinkingDelay ShrinkWrapBoundingBox SiegelTheta SiegelTukeyTest Sign Signature SignedRankTest SignificanceLevel SignPadding SignTest SimilarityRules SimpleGraph SimpleGraphQ Simplify Sin Sinc SinghMaddalaDistribution SingleEvaluation SingleLetterItalics SingleLetterStyle SingularValueDecomposition SingularValueList SingularValuePlot SingularValues Sinh SinhIntegral SinIntegral SixJSymbol Skeleton SkeletonTransform SkellamDistribution Skewness SkewNormalDistribution Skip SliceDistribution Slider Slider2D Slider2DBox Slider2DBoxOptions SliderBox SliderBoxOptions SlideView Slot SlotSequence Small SmallCircle Smaller SmithDelayCompensator SmithWatermanSimilarity ' +
	      'SmoothDensityHistogram SmoothHistogram SmoothHistogram3D SmoothKernelDistribution SocialMediaData Socket SokalSneathDissimilarity Solve SolveAlways SolveDelayed Sort SortBy Sound SoundAndGraphics SoundNote SoundVolume Sow Space SpaceForm Spacer Spacings Span SpanAdjustments SpanCharacterRounding SpanFromAbove SpanFromBoth SpanFromLeft SpanLineThickness SpanMaxSize SpanMinSize SpanningCharacters SpanSymmetric SparseArray SpatialGraphDistribution Speak SpeakTextPacket SpearmanRankTest SpearmanRho Spectrogram SpectrogramArray Specularity SpellingCorrection SpellingDictionaries SpellingDictionariesPath SpellingOptions SpellingSuggestionsPacket Sphere SphereBox SphericalBesselJ SphericalBesselY SphericalHankelH1 SphericalHankelH2 SphericalHarmonicY SphericalPlot3D SphericalRegion SpheroidalEigenvalue SpheroidalJoiningFactor SpheroidalPS SpheroidalPSPrime SpheroidalQS SpheroidalQSPrime SpheroidalRadialFactor SpheroidalS1 SpheroidalS1Prime SpheroidalS2 SpheroidalS2Prime Splice SplicedDistribution SplineClosed SplineDegree SplineKnots SplineWeights Split SplitBy SpokenString Sqrt SqrtBox SqrtBoxOptions Square SquaredEuclideanDistance SquareFreeQ SquareIntersection SquaresR SquareSubset SquareSubsetEqual SquareSuperset SquareSupersetEqual SquareUnion SquareWave StabilityMargins StabilityMarginsStyle StableDistribution Stack StackBegin StackComplete StackInhibit StandardDeviation StandardDeviationFilter StandardForm Standardize StandbyDistribution Star StarGraph StartAsynchronousTask StartingStepSize StartOfLine StartOfString StartScheduledTask StartupSound StateDimensions StateFeedbackGains StateOutputEstimator StateResponse StateSpaceModel StateSpaceRealization StateSpaceTransform StationaryDistribution StationaryWaveletPacketTransform StationaryWaveletTransform StatusArea StatusCentrality StepMonitor StieltjesGamma StirlingS1 StirlingS2 StopAsynchronousTask StopScheduledTask StrataVariables StratonovichProcess StreamColorFunction StreamColorFunctionScaling StreamDensityPlot StreamPlot StreamPoints StreamPosition Streams StreamScale StreamStyle String StringBreak StringByteCount StringCases StringCount StringDrop StringExpression StringForm StringFormat StringFreeQ StringInsert StringJoin StringLength StringMatchQ StringPosition StringQ StringReplace StringReplaceList StringReplacePart StringReverse StringRotateLeft StringRotateRight StringSkeleton StringSplit StringTake StringToStream StringTrim StripBoxes StripOnInput StripWrapperBoxes StrokeForm StructuralImportance StructuredArray StructuredSelection StruveH StruveL Stub StudentTDistribution Style StyleBox StyleBoxAutoDelete StyleBoxOptions StyleData StyleDefinitions StyleForm StyleKeyMapping StyleMenuListing StyleNameDialogSettings StyleNames StylePrint StyleSheetPath Subfactorial Subgraph SubMinus SubPlus SubresultantPolynomialRemainders ' +
	      'SubresultantPolynomials Subresultants Subscript SubscriptBox SubscriptBoxOptions Subscripted Subset SubsetEqual Subsets SubStar Subsuperscript SubsuperscriptBox SubsuperscriptBoxOptions Subtract SubtractFrom SubValues Succeeds SucceedsEqual SucceedsSlantEqual SucceedsTilde SuchThat Sum SumConvergence Sunday SuperDagger SuperMinus SuperPlus Superscript SuperscriptBox SuperscriptBoxOptions Superset SupersetEqual SuperStar Surd SurdForm SurfaceColor SurfaceGraphics SurvivalDistribution SurvivalFunction SurvivalModel SurvivalModelFit SuspendPacket SuzukiDistribution SuzukiGroupSuz SwatchLegend Switch Symbol SymbolName SymletWavelet Symmetric SymmetricGroup SymmetricMatrixQ SymmetricPolynomial SymmetricReduction Symmetrize SymmetrizedArray SymmetrizedArrayRules SymmetrizedDependentComponents SymmetrizedIndependentComponents SymmetrizedReplacePart SynchronousInitialization SynchronousUpdating Syntax SyntaxForm SyntaxInformation SyntaxLength SyntaxPacket SyntaxQ SystemDialogInput SystemException SystemHelpPath SystemInformation SystemInformationData SystemOpen SystemOptions SystemsModelDelay SystemsModelDelayApproximate SystemsModelDelete SystemsModelDimensions SystemsModelExtract SystemsModelFeedbackConnect SystemsModelLabels SystemsModelOrder SystemsModelParallelConnect SystemsModelSeriesConnect SystemsModelStateFeedbackConnect SystemStub ' +
	      'Tab TabFilling Table TableAlignments TableDepth TableDirections TableForm TableHeadings TableSpacing TableView TableViewBox TabSpacings TabView TabViewBox TabViewBoxOptions TagBox TagBoxNote TagBoxOptions TaggingRules TagSet TagSetDelayed TagStyle TagUnset Take TakeWhile Tally Tan Tanh TargetFunctions TargetUnits TautologyQ TelegraphProcess TemplateBox TemplateBoxOptions TemplateSlotSequence TemporalData Temporary TemporaryVariable TensorContract TensorDimensions TensorExpand TensorProduct TensorQ TensorRank TensorReduce TensorSymmetry TensorTranspose TensorWedge Tetrahedron TetrahedronBox TetrahedronBoxOptions TeXForm TeXSave Text Text3DBox Text3DBoxOptions TextAlignment TextBand TextBoundingBox TextBox TextCell TextClipboardType TextData TextForm TextJustification TextLine TextPacket TextParagraph TextRecognize TextRendering TextStyle Texture TextureCoordinateFunction TextureCoordinateScaling Therefore ThermometerGauge Thick Thickness Thin Thinning ThisLink ThompsonGroupTh Thread ThreeJSymbol Threshold Through Throw Thumbnail Thursday Ticks TicksStyle Tilde TildeEqual TildeFullEqual TildeTilde TimeConstrained TimeConstraint Times TimesBy TimeSeriesForecast TimeSeriesInvertibility TimeUsed TimeValue TimeZone Timing Tiny TitleGrouping TitsGroupT ToBoxes ToCharacterCode ToColor ToContinuousTimeModel ToDate ToDiscreteTimeModel ToeplitzMatrix ToExpression ToFileName Together Toggle ToggleFalse Toggler TogglerBar TogglerBox TogglerBoxOptions ToHeldExpression ToInvertibleTimeSeries TokenWords Tolerance ToLowerCase ToNumberField TooBig Tooltip TooltipBox TooltipBoxOptions TooltipDelay TooltipStyle Top TopHatTransform TopologicalSort ToRadicals ToRules ToString Total TotalHeight TotalVariationFilter TotalWidth TouchscreenAutoZoom TouchscreenControlPlacement ToUpperCase Tr Trace TraceAbove TraceAction TraceBackward TraceDepth TraceDialog TraceForward TraceInternal TraceLevel TraceOff TraceOn TraceOriginal TracePrint TraceScan TrackedSymbols TradingChart TraditionalForm TraditionalFunctionNotation TraditionalNotation TraditionalOrder TransferFunctionCancel TransferFunctionExpand TransferFunctionFactor TransferFunctionModel TransferFunctionPoles TransferFunctionTransform TransferFunctionZeros TransformationFunction TransformationFunctions TransformationMatrix TransformedDistribution TransformedField Translate TranslationTransform TransparentColor Transpose TreeForm TreeGraph TreeGraphQ TreePlot TrendStyle TriangleWave TriangularDistribution Trig TrigExpand TrigFactor TrigFactorList Trigger TrigReduce TrigToExp TrimmedMean True TrueQ TruncatedDistribution TsallisQExponentialDistribution TsallisQGaussianDistribution TTest Tube TubeBezierCurveBox TubeBezierCurveBoxOptions TubeBox TubeBSplineCurveBox TubeBSplineCurveBoxOptions Tuesday TukeyLambdaDistribution TukeyWindow Tuples TuranGraph TuringMachine ' +
	      'Transparent ' +
	      'UnateQ Uncompress Undefined UnderBar Underflow Underlined Underoverscript UnderoverscriptBox UnderoverscriptBoxOptions Underscript UnderscriptBox UnderscriptBoxOptions UndirectedEdge UndirectedGraph UndirectedGraphQ UndocumentedTestFEParserPacket UndocumentedTestGetSelectionPacket Unequal Unevaluated UniformDistribution UniformGraphDistribution UniformSumDistribution Uninstall Union UnionPlus Unique UnitBox UnitConvert UnitDimensions Unitize UnitRootTest UnitSimplify UnitStep UnitTriangle UnitVector Unprotect UnsameQ UnsavedVariables Unset UnsetShared UntrackedVariables Up UpArrow UpArrowBar UpArrowDownArrow Update UpdateDynamicObjects UpdateDynamicObjectsSynchronous UpdateInterval UpDownArrow UpEquilibrium UpperCaseQ UpperLeftArrow UpperRightArrow UpperTriangularize Upsample UpSet UpSetDelayed UpTee UpTeeArrow UpValues URL URLFetch URLFetchAsynchronous URLSave URLSaveAsynchronous UseGraphicsRange Using UsingFrontEnd ' +
	      'V2Get ValidationLength Value ValueBox ValueBoxOptions ValueForm ValueQ ValuesData Variables Variance VarianceEquivalenceTest VarianceEstimatorFunction VarianceGammaDistribution VarianceTest VectorAngle VectorColorFunction VectorColorFunctionScaling VectorDensityPlot VectorGlyphData VectorPlot VectorPlot3D VectorPoints VectorQ Vectors VectorScale VectorStyle Vee Verbatim Verbose VerboseConvertToPostScriptPacket VerifyConvergence VerifySolutions VerifyTestAssumptions Version VersionNumber VertexAdd VertexCapacity VertexColors VertexComponent VertexConnectivity VertexCoordinateRules VertexCoordinates VertexCorrelationSimilarity VertexCosineSimilarity VertexCount VertexCoverQ VertexDataCoordinates VertexDegree VertexDelete VertexDiceSimilarity VertexEccentricity VertexInComponent VertexInDegree VertexIndex VertexJaccardSimilarity VertexLabeling VertexLabels VertexLabelStyle VertexList VertexNormals VertexOutComponent VertexOutDegree VertexQ VertexRenderingFunction VertexReplace VertexShape VertexShapeFunction VertexSize VertexStyle VertexTextureCoordinates VertexWeight Vertical VerticalBar VerticalForm VerticalGauge VerticalSeparator VerticalSlider VerticalTilde ViewAngle ViewCenter ViewMatrix ViewPoint ViewPointSelectorSettings ViewPort ViewRange ViewVector ViewVertical VirtualGroupData Visible VisibleCell VoigtDistribution VonMisesDistribution ' +
	      'WaitAll WaitAsynchronousTask WaitNext WaitUntil WakebyDistribution WalleniusHypergeometricDistribution WaringYuleDistribution WatershedComponents WatsonUSquareTest WattsStrogatzGraphDistribution WaveletBestBasis WaveletFilterCoefficients WaveletImagePlot WaveletListPlot WaveletMapIndexed WaveletMatrixPlot WaveletPhi WaveletPsi WaveletScale WaveletScalogram WaveletThreshold WeaklyConnectedComponents WeaklyConnectedGraphQ WeakStationarity WeatherData WeberE Wedge Wednesday WeibullDistribution WeierstrassHalfPeriods WeierstrassInvariants WeierstrassP WeierstrassPPrime WeierstrassSigma WeierstrassZeta WeightedAdjacencyGraph WeightedAdjacencyMatrix WeightedData WeightedGraphQ Weights WelchWindow WheelGraph WhenEvent Which While White Whitespace WhitespaceCharacter WhittakerM WhittakerW WienerFilter WienerProcess WignerD WignerSemicircleDistribution WilksW WilksWTest WindowClickSelect WindowElements WindowFloating WindowFrame WindowFrameElements WindowMargins WindowMovable WindowOpacity WindowSelected WindowSize WindowStatusArea WindowTitle WindowToolbars WindowWidth With WolframAlpha WolframAlphaDate WolframAlphaQuantity WolframAlphaResult Word WordBoundary WordCharacter WordData WordSearch WordSeparators WorkingPrecision Write WriteString Wronskian ' +
	      'XMLElement XMLObject Xnor Xor ' +
	      'Yellow YuleDissimilarity ' +
	      'ZernikeR ZeroSymmetric ZeroTest ZeroWidthTimes Zeta ZetaZero ZipfDistribution ZTest ZTransform ' +
	      '$Aborted $ActivationGroupID $ActivationKey $ActivationUserRegistered $AddOnsDirectory $AssertFunction $Assumptions $AsynchronousTask $BaseDirectory $BatchInput $BatchOutput $BoxForms $ByteOrdering $Canceled $CharacterEncoding $CharacterEncodings $CommandLine $CompilationTarget $ConditionHold $ConfiguredKernels $Context $ContextPath $ControlActiveSetting $CreationDate $CurrentLink $DateStringFormat $DefaultFont $DefaultFrontEnd $DefaultImagingDevice $DefaultPath $Display $DisplayFunction $DistributedContexts $DynamicEvaluation $Echo $Epilog $ExportFormats $Failed $FinancialDataSource $FormatType $FrontEnd $FrontEndSession $GeoLocation $HistoryLength $HomeDirectory $HTTPCookies $IgnoreEOF $ImagingDevices $ImportFormats $InitialDirectory $Input $InputFileName $InputStreamMethods $Inspector $InstallationDate $InstallationDirectory $InterfaceEnvironment $IterationLimit $KernelCount $KernelID $Language $LaunchDirectory $LibraryPath $LicenseExpirationDate $LicenseID $LicenseProcesses $LicenseServer $LicenseSubprocesses $LicenseType $Line $Linked $LinkSupported $LoadedFiles $MachineAddresses $MachineDomain $MachineDomains $MachineEpsilon $MachineID $MachineName $MachinePrecision $MachineType $MaxExtraPrecision $MaxLicenseProcesses $MaxLicenseSubprocesses $MaxMachineNumber $MaxNumber $MaxPiecewiseCases $MaxPrecision $MaxRootDegree $MessageGroups $MessageList $MessagePrePrint $Messages $MinMachineNumber $MinNumber $MinorReleaseNumber $MinPrecision $ModuleNumber $NetworkLicense $NewMessage $NewSymbol $Notebooks $NumberMarks $Off $OperatingSystem $Output $OutputForms $OutputSizeLimit $OutputStreamMethods $Packages $ParentLink $ParentProcessID $PasswordFile $PatchLevelID $Path $PathnameSeparator $PerformanceGoal $PipeSupported $Post $Pre $PreferencesDirectory $PrePrint $PreRead $PrintForms $PrintLiteral $ProcessID $ProcessorCount $ProcessorType $ProductInformation $ProgramName $RandomState $RecursionLimit $ReleaseNumber $RootDirectory $ScheduledTask $ScriptCommandLine $SessionID $SetParentLink $SharedFunctions $SharedVariables $SoundDisplay $SoundDisplayFunction $SuppressInputFormHeads $SynchronousEvaluation $SyntaxHandler $System $SystemCharacterEncoding $SystemID $SystemWordLength $TemporaryDirectory $TemporaryPrefix $TextStyle $TimedOut $TimeUnit $TimeZone $TopDirectory $TraceOff $TraceOn $TracePattern $TracePostAction $TracePreAction $Urgent $UserAddOnsDirectory $UserBaseDirectory $UserDocumentsDirectory $UserName $Version $VersionNumber',
	    contains: [
	      {
	        className: 'comment',
	        begin: /\(\*/, end: /\*\)/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        begin: /\{/, end: /\}/,
	        illegal: /:/
	      }
	    ]
	  };
	};

/***/ },
/* 196 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var COMMON_CONTAINS = [
	    hljs.C_NUMBER_MODE,
	    {
	      className: 'string',
	      begin: '\'', end: '\'',
	      contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
	    }
	  ];
	  var TRANSPOSE = {
	    relevance: 0,
	    contains: [
	      {
	        begin: /'['\.]*/
	      }
	    ]
	  };
	
	  return {
	    keywords: {
	      keyword:
	        'break case catch classdef continue else elseif end enumerated events for function ' +
	        'global if methods otherwise parfor persistent properties return spmd switch try while',
	      built_in:
	        'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan ' +
	        'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot ' +
	        'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog ' +
	        'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal ' +
	        'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli ' +
	        'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma ' +
	        'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms ' +
	        'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones ' +
	        'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ' +
	        'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril ' +
	        'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute ' +
	        'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan ' +
	        'isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal ' +
	        'rosser toeplitz vander wilkinson'
	    },
	    illegal: '(//|"|#|/\\*|\\s+/\\w+)',
	    contains: [
	      {
	        className: 'function',
	        beginKeywords: 'function', end: '$',
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            className: 'params',
	            variants: [
	              {begin: '\\(', end: '\\)'},
	              {begin: '\\[', end: '\\]'}
	            ]
	          }
	        ]
	      },
	      {
	        begin: /[a-zA-Z_][a-zA-Z_0-9]*'['\.]*/,
	        returnBegin: true,
	        relevance: 0,
	        contains: [
	          {begin: /[a-zA-Z_][a-zA-Z_0-9]*/, relevance: 0},
	          TRANSPOSE.contains[0]
	        ]
	      },
	      {
	        begin: '\\[', end: '\\]',
	        contains: COMMON_CONTAINS,
	        relevance: 0,
	        starts: TRANSPOSE
	      },
	      {
	        begin: '\\{', end: /}/,
	        contains: COMMON_CONTAINS,
	        relevance: 0,
	        starts: TRANSPOSE
	      },
	      {
	        // transpose operators at the end of a function call
	        begin: /\)/,
	        relevance: 0,
	        starts: TRANSPOSE
	      },
	      hljs.COMMENT('^\\s*\\%\\{\\s*$', '^\\s*\\%\\}\\s*$'),
	      hljs.COMMENT('\\%', '$')
	    ].concat(COMMON_CONTAINS)
	  };
	};

/***/ },
/* 197 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = 'if then else elseif for thru do while unless step in and or not';
	  var LITERALS = 'true false unknown inf minf ind und %e %i %pi %phi %gamma';
	  var BUILTIN_FUNCTIONS =
	        ' abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate'
	      + ' addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix'
	      + ' adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type'
	      + ' alias allroots alphacharp alphanumericp amortization %and annuity_fv'
	      + ' annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2'
	      + ' applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply'
	      + ' arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger'
	      + ' asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order'
	      + ' asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method'
	      + ' av average_degree backtrace bars barsplot barsplot_description base64 base64_decode'
	      + ' bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx'
	      + ' bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify'
	      + ' bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized'
	      + ' bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp'
	      + ' bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition'
	      + ' block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description'
	      + ' break bug_report build_info|10 buildq build_sample burn cabs canform canten'
	      + ' cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli'
	      + ' cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform'
	      + ' cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel'
	      + ' cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial'
	      + ' cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson'
	      + ' cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay'
	      + ' ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic'
	      + ' cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2'
	      + ' charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps'
	      + ' chinese cholesky christof chromatic_index chromatic_number cint circulant_graph'
	      + ' clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph'
	      + ' clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse'
	      + ' collectterms columnop columnspace columnswap columnvector combination combine'
	      + ' comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph'
	      + ' complete_graph complex_number_p components compose_functions concan concat'
	      + ' conjugate conmetderiv connected_components connect_vertices cons constant'
	      + ' constantp constituent constvalue cont2part content continuous_freq contortion'
	      + ' contour_plot contract contract_edge contragrad contrib_ode convert coord'
	      + ' copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1'
	      + ' covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline'
	      + ' ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph'
	      + ' cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate'
	      + ' declare declare_constvalue declare_dimensions declare_fundamental_dimensions'
	      + ' declare_fundamental_units declare_qty declare_translated declare_unit_conversion'
	      + ' declare_units declare_weights decsym defcon define define_alt_display define_variable'
	      + ' defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten'
	      + ' delta demo demoivre denom depends derivdegree derivlist describe desolve'
	      + ' determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag'
	      + ' diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export'
	      + ' dimacs_import dimension dimensionless dimensions dimensions_as_list direct'
	      + ' directory discrete_freq disjoin disjointp disolate disp dispcon dispform'
	      + ' dispfun dispJordan display disprule dispterms distrib divide divisors divsum'
	      + ' dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart'
	      + ' draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring'
	      + ' edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth'
	      + ' einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome'
	      + ' ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using'
	      + ' ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi'
	      + ' ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp'
	      + ' equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors'
	      + ' euler ev eval_string evenp every evolution evolution2d evundiff example exp'
	      + ' expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci'
	      + ' expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li'
	      + ' expintegral_shi expintegral_si explicit explose exponentialize express expt'
	      + ' exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum'
	      + ' factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements'
	      + ' fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge'
	      + ' file_search file_type fillarray findde find_root find_root_abs find_root_error'
	      + ' find_root_rel first fix flatten flength float floatnump floor flower_snark'
	      + ' flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran'
	      + ' fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp'
	      + ' foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s'
	      + ' from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp'
	      + ' fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units'
	      + ' fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized'
	      + ' gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide'
	      + ' gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym'
	      + ' geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean'
	      + ' geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string'
	      + ' get_pixel get_plot_option get_tex_environment get_tex_environment_default'
	      + ' get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close'
	      + ' gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum'
	      + ' gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import'
	      + ' graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery'
	      + ' graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph'
	      + ' grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path'
	      + ' hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite'
	      + ' hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description'
	      + ' hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph'
	      + ' icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy'
	      + ' ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart'
	      + ' imetric implicit implicit_derivative implicit_plot indexed_tensor indices'
	      + ' induced_subgraph inferencep inference_result infix info_display init_atensor'
	      + ' init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions'
	      + ' integrate intersect intersection intervalp intopois intosum invariant1 invariant2'
	      + ' inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc'
	      + ' inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns'
	      + ' inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint'
	      + ' invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph'
	      + ' is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate'
	      + ' isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph'
	      + ' items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc'
	      + ' jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd'
	      + ' jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill'
	      + ' killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis'
	      + ' kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform'
	      + ' kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete'
	      + ' kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace'
	      + ' kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2'
	      + ' kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson'
	      + ' kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange'
	      + ' laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp'
	      + ' lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length'
	      + ' let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit'
	      + ' Lindstedt linear linearinterpol linear_program linear_regression line_graph'
	      + ' linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials'
	      + ' listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry'
	      + ' log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst'
	      + ' lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact'
	      + ' lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub'
	      + ' lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma'
	      + ' make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country'
	      + ' make_polygon make_random_state make_rgb_picture makeset make_string_input_stream'
	      + ' make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom'
	      + ' maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display'
	      + ' mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker'
	      + ' max max_clique max_degree max_flow maximize_lp max_independent_set max_matching'
	      + ' maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform'
	      + ' mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete'
	      + ' mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic'
	      + ' mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t'
	      + ' mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull'
	      + ' median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree'
	      + ' min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor'
	      + ' minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton'
	      + ' mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions'
	      + ' multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff'
	      + ' multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary'
	      + ' natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext'
	      + ' newdet new_graph newline newton new_variable next_prime nicedummies niceindices'
	      + ' ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp'
	      + ' nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst'
	      + ' nthroot nullity nullspace num numbered_boundaries numberp number_to_octets'
	      + ' num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai'
	      + ' nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin'
	      + ' oid_to_octets op opena opena_binary openr openr_binary openw openw_binary'
	      + ' operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless'
	      + ' orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap'
	      + ' out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface'
	      + ' parg parGosper parse_string parse_timedate part part2cont partfrac partition'
	      + ' partition_set partpol path_digraph path_graph pathname_directory pathname_name'
	      + ' pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform'
	      + ' pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete'
	      + ' pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal'
	      + ' pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal'
	      + ' pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t'
	      + ' pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph'
	      + ' petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding'
	      + ' playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff'
	      + ' poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar'
	      + ' polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion'
	      + ' poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal'
	      + ' poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal'
	      + ' poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation'
	      + ' poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm'
	      + ' poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form'
	      + ' poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part'
	      + ' poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension'
	      + ' poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod'
	      + ' powerseries powerset prefix prev_prime primep primes principal_components'
	      + ' print printf printfile print_graph printpois printprops prodrac product properties'
	      + ' propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct'
	      + ' puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp'
	      + ' quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile'
	      + ' quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2'
	      + ' quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f'
	      + ' quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel'
	      + ' quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal'
	      + ' quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t'
	      + ' quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t'
	      + ' quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan'
	      + ' radius random random_bernoulli random_beta random_binomial random_bipartite_graph'
	      + ' random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform'
	      + ' random_exp random_f random_gamma random_general_finite_discrete random_geometric'
	      + ' random_graph random_graph1 random_gumbel random_hypergeometric random_laplace'
	      + ' random_logistic random_lognormal random_negative_binomial random_network'
	      + ' random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto'
	      + ' random_permutation random_poisson random_rayleigh random_regular_graph random_student_t'
	      + ' random_tournament random_tree random_weibull range rank rat ratcoef ratdenom'
	      + ' ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump'
	      + ' ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array'
	      + ' read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline'
	      + ' read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate'
	      + ' realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar'
	      + ' rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus'
	      + ' rem remainder remarray rembox remcomps remcon remcoord remfun remfunction'
	      + ' remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions'
	      + ' remove_fundamental_units remove_plot_option remove_vertex rempart remrule'
	      + ' remsym remvalue rename rename_file reset reset_displays residue resolvante'
	      + ' resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein'
	      + ' resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer'
	      + ' rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann'
	      + ' rinvariant risch rk rmdir rncombine romberg room rootscontract round row'
	      + ' rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i'
	      + ' scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description'
	      + ' scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second'
	      + ' sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight'
	      + ' setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state'
	      + ' set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications'
	      + ' set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path'
	      + ' show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform'
	      + ' simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert'
	      + ' sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial'
	      + ' skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp'
	      + ' skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric'
	      + ' skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic'
	      + ' skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t'
	      + ' skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t'
	      + ' skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph'
	      + ' smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve'
	      + ' solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export'
	      + ' sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1'
	      + ' spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition'
	      + ' sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus'
	      + ' ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot'
	      + ' starplot_description status std std1 std_bernoulli std_beta std_binomial'
	      + ' std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma'
	      + ' std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace'
	      + ' std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t'
	      + ' std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull'
	      + ' stemplot stirling stirling1 stirling2 strim striml strimr string stringout'
	      + ' stringp strong_components struve_h struve_l sublis sublist sublist_indices'
	      + ' submatrix subsample subset subsetp subst substinpart subst_parallel substpart'
	      + ' substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext'
	      + ' symbolp symmdifference symmetricp system take_channel take_inference tan'
	      + ' tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract'
	      + ' tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference'
	      + ' test_normality test_proportion test_proportions_difference test_rank_sum'
	      + ' test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display'
	      + ' texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter'
	      + ' toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep'
	      + ' totalfourier totient tpartpol trace tracematrix trace_options transform_sample'
	      + ' translate translate_file transpose treefale tree_reduce treillis treinat'
	      + ' triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate'
	      + ' truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph'
	      + ' truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget'
	      + ' ultraspherical underlying_graph undiff union unique uniteigenvectors unitp'
	      + ' units unit_step unitvector unorder unsum untellrat untimer'
	      + ' untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli'
	      + ' var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform'
	      + ' var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel'
	      + ' var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial'
	      + ' var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson'
	      + ' var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp'
	      + ' verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance'
	      + ' vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle'
	      + ' vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j'
	      + ' wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian'
	      + ' xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta'
	      + ' zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors'
	      + ' zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table'
	      + ' absboxchar activecontexts adapt_depth additive adim aform algebraic'
	      + ' algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic'
	      + ' animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar'
	      + ' asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top'
	      + ' azimuth background background_color backsubst berlefact bernstein_explicit'
	      + ' besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest'
	      + ' border boundaries_array box boxchar breakup %c capping cauchysum cbrange'
	      + ' cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics'
	      + ' colorbox columns commutative complex cone context contexts contour contour_levels'
	      + ' cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp'
	      + ' cube current_let_rule_package cylinder data_file_name debugmode decreasing'
	      + ' default_let_rule_package delay dependencies derivabbrev derivsubst detout'
	      + ' diagmetric diff dim dimensions dispflag display2d|10 display_format_internal'
	      + ' distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor'
	      + ' doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules'
	      + ' dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart'
	      + ' edge_color edge_coloring edge_partition edge_type edge_width %edispflag'
	      + ' elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer'
	      + ' epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type'
	      + ' %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand'
	      + ' expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine'
	      + ' factlim factorflag factorial_expand factors_only fb feature features'
	      + ' file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10'
	      + ' file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color'
	      + ' fill_density filled_func fixed_vertices flipflag float2bf font font_size'
	      + ' fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim'
	      + ' gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command'
	      + ' gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command'
	      + ' gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command'
	      + ' gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble'
	      + ' gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args'
	      + ' Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both'
	      + ' head_length head_type height hypergeometric_representation %iargs ibase'
	      + ' icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form'
	      + ' ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval'
	      + ' infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued'
	      + ' integrate_use_rootsof integration_constant integration_constant_counter interpolate_color'
	      + ' intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr'
	      + ' julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment'
	      + ' label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max'
	      + ' leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear'
	      + ' linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params'
	      + ' linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname'
	      + ' loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx'
	      + ' logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros'
	      + ' mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult'
	      + ' matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10'
	      + ' maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint'
	      + ' maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp'
	      + ' mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver'
	      + ' modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag'
	      + ' newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc'
	      + ' noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np'
	      + ' npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties'
	      + ' opsubst optimprefix optionset orientation origin orthopoly_returns_intervals'
	      + ' outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution'
	      + ' %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart'
	      + ' png_file pochhammer_max_index points pointsize point_size points_joined point_type'
	      + ' poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm'
	      + ' poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list'
	      + ' poly_secondary_elimination_order poly_top_reduction_only posfun position'
	      + ' powerdisp pred prederror primep_number_of_tests product_use_gamma program'
	      + ' programmode promote_float_to_bigfloat prompt proportional_axes props psexpand'
	      + ' ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof'
	      + ' ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann'
	      + ' ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw'
	      + ' refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs'
	      + ' rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy'
	      + ' same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck'
	      + ' setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width'
	      + ' show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type'
	      + ' show_vertices show_weight simp simplified_output simplify_products simpproduct'
	      + ' simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn'
	      + ' solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag'
	      + ' stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda'
	      + ' subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric'
	      + ' tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials'
	      + ' tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch'
	      + ' tr track transcompile transform transform_xy translate_fast_arrays transparent'
	      + ' transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex'
	      + ' tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign'
	      + ' trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars'
	      + ' tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode'
	      + ' tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes'
	      + ' ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble'
	      + ' usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition'
	      + ' vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface'
	      + ' wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel'
	      + ' xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate'
	      + ' xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel'
	      + ' xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width'
	      + ' ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis'
	      + ' ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis'
	      + ' yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob'
	      + ' zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest';
	  var SYMBOLS = '_ __ %|0 %%|0';
	
	  return {
	    lexemes: '[A-Za-z_%][0-9A-Za-z_%]*',
	    keywords: {
	      keyword: KEYWORDS,
	      literal: LITERALS,
	      built_in: BUILTIN_FUNCTIONS,
	      symbol: SYMBOLS,
	    },
	    contains: [
	      {
	        className: 'comment',
	        begin: '/\\*',
	        end: '\\*/',
	        contains: ['self']
	      },
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'number',
	        relevance: 0,
	        variants: [
	          {
	            // float number w/ exponent
	            // hmm, I wonder if we ought to include other exponent markers?
	            begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b',
	          },
	          {
	            // bigfloat number
	            begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b',
	            relevance: 10
	          },
	          {
	            // float number w/out exponent
	            // Doesn't seem to recognize floats which start with '.'
	            begin: '\\b(\\.\\d+|\\d+\\.\\d+)\\b',
	          },
	          {
	            // integer in base up to 36
	            // Doesn't seem to recognize integers which end with '.'
	            begin: '\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b',
	          }
	        ]
	      }
	    ],
	    illegal: /@/
	  }
	};

/***/ },
/* 198 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords:
	      'int float string vector matrix if else switch case default while do for in break ' +
	      'continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic ' +
	      'addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey ' +
	      'affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve ' +
	      'alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor ' +
	      'animDisplay animView annotate appendStringArray applicationName applyAttrPreset ' +
	      'applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx ' +
	      'artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu ' +
	      'artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand ' +
	      'assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface ' +
	      'attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu ' +
	      'attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp ' +
	      'attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery ' +
	      'autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults ' +
	      'bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership ' +
	      'bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType ' +
	      'boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu ' +
	      'buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge ' +
	      'cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch ' +
	      'catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox ' +
	      'character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp ' +
	      'checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip ' +
	      'clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore ' +
	      'closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter ' +
	      'cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color ' +
	      'colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp ' +
	      'colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem ' +
	      'componentEditor compositingInterop computePolysetVolume condition cone confirmDialog ' +
	      'connectAttr connectControl connectDynamic connectJoint connectionInfo constrain ' +
	      'constrainValue constructionHistory container containsMultibyte contextInfo control ' +
	      'convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation ' +
	      'convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache ' +
	      'cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel ' +
	      'cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver ' +
	      'cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor ' +
	      'createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer ' +
	      'createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse ' +
	      'currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx ' +
	      'curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface ' +
	      'curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox ' +
	      'defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete ' +
	      'deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes ' +
	      'delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo ' +
	      'dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable ' +
	      'disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected ' +
	      'displayColor displayCull displayLevelOfDetail displayPref displayRGBColor ' +
	      'displaySmoothness displayStats displayString displaySurface distanceDimContext ' +
	      'distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct ' +
	      'doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator ' +
	      'duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression ' +
	      'dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor ' +
	      'dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers ' +
	      'editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor ' +
	      'editorTemplate effector emit emitter enableDevice encodeString endString endsWith env ' +
	      'equivalent equivalentTol erf error eval evalDeferred evalEcho event ' +
	      'exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp ' +
	      'expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof ' +
	      'fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo ' +
	      'filetest filletCurve filter filterCurve filterExpand filterStudioImport ' +
	      'findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster ' +
	      'finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar ' +
	      'floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo ' +
	      'fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint ' +
	      'frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss ' +
	      'geometryConstraint getApplicationVersionAsFloat getAttr getClassification ' +
	      'getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes ' +
	      'getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender ' +
	      'glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl ' +
	      'gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid ' +
	      'gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap ' +
	      'HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor ' +
	      'HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached ' +
	      'HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel ' +
	      'headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey ' +
	      'hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender ' +
	      'hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox ' +
	      'iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ' +
	      'ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ' +
	      'ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform ' +
	      'insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance ' +
	      'instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp ' +
	      'interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf ' +
	      'isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect ' +
	      'itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx ' +
	      'jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner ' +
	      'keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx ' +
	      'keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx ' +
	      'keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx ' +
	      'keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor ' +
	      'layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList ' +
	      'lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep ' +
	      'listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory ' +
	      'listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation ' +
	      'listNodeTypes listPanelCategories listRelatives listSets listTransforms ' +
	      'listUnselected listerEditor loadFluid loadNewShelf loadPlugin ' +
	      'loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log ' +
	      'longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive ' +
	      'makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext ' +
	      'manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx ' +
	      'manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout ' +
	      'menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp ' +
	      'mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move ' +
	      'moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute ' +
	      'nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast ' +
	      'nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint ' +
	      'normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect ' +
	      'nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref ' +
	      'nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType ' +
	      'objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface ' +
	      'offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit ' +
	      'orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier ' +
	      'paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration ' +
	      'panelHistory paramDimContext paramDimension paramLocator parent parentConstraint ' +
	      'particle particleExists particleInstancer particleRenderInfo partition pasteKey ' +
	      'pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture ' +
	      'pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo ' +
	      'pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult ' +
	      'pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend ' +
	      'polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal ' +
	      'polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge ' +
	      'polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge ' +
	      'polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet ' +
	      'polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet ' +
	      'polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection ' +
	      'polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge ' +
	      'polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet ' +
	      'polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix ' +
	      'polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut ' +
	      'polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet ' +
	      'polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge ' +
	      'polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex ' +
	      'polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection ' +
	      'polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection ' +
	      'polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint ' +
	      'polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate ' +
	      'polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge ' +
	      'polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing ' +
	      'polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet ' +
	      'polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace ' +
	      'popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer ' +
	      'projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx ' +
	      'propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd ' +
	      'python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection ' +
	      'radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl ' +
	      'readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference ' +
	      'referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE ' +
	      'registerPluginResource rehash reloadImage removeJoint removeMultiInstance ' +
	      'removePanelCategory rename renameAttr renameSelectionList renameUI render ' +
	      'renderGlobalsNode renderInfo renderLayerButton renderLayerParent ' +
	      'renderLayerPostProcess renderLayerUnparent renderManip renderPartition ' +
	      'renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor ' +
	      'renderWindowSelectContext renderer reorder reorderDeformers requires reroot ' +
	      'resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget ' +
	      'reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx ' +
	      'rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout ' +
	      'runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage ' +
	      'saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale ' +
	      'scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor ' +
	      'sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable ' +
	      'scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt ' +
	      'searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey ' +
	      'selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType ' +
	      'selectedNodes selectionConnection separator setAttr setAttrEnumResource ' +
	      'setAttrMapping setAttrNiceNameResource setConstraintRestPosition ' +
	      'setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr ' +
	      'setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe ' +
	      'setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag ' +
	      'setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject ' +
	      'setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets ' +
	      'shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare ' +
	      'shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField ' +
	      'shortNameOf showHelp showHidden showManipCtx showSelectionInTitle ' +
	      'showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface ' +
	      'size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep ' +
	      'snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound ' +
	      'soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort ' +
	      'spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString ' +
	      'startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp ' +
	      'stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex ' +
	      'stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex ' +
	      'stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString ' +
	      'stringToStringArray strip stripPrefixFromName stroke subdAutoProjection ' +
	      'subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV ' +
	      'subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror ' +
	      'subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease ' +
	      'subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring ' +
	      'surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton ' +
	      'symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext ' +
	      'texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext ' +
	      'texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text ' +
	      'textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList ' +
	      'textToShelf textureDisplacePlane textureHairColor texturePlacementContext ' +
	      'textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath ' +
	      'toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower ' +
	      'toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper ' +
	      'trace track trackCtx transferAttributes transformCompare transformLimits translator ' +
	      'trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence ' +
	      'twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit ' +
	      'unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink ' +
	      'uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane ' +
	      'viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex ' +
	      'waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire ' +
	      'wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform',
	    illegal: '</',
	    contains: [
	      hljs.C_NUMBER_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '`', end: '`',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      { // eats variables
	        begin: '[\\$\\%\\@](\\^\\w\\b|#\\w+|[^\\s\\w{]|{\\w+}|\\w+)'
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	};

/***/ },
/* 199 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	    keyword:
	      'module use_module import_module include_module end_module initialise ' +
	      'mutable initialize finalize finalise interface implementation pred ' +
	      'mode func type inst solver any_pred any_func is semidet det nondet ' +
	      'multi erroneous failure cc_nondet cc_multi typeclass instance where ' +
	      'pragma promise external trace atomic or_else require_complete_switch ' +
	      'require_det require_semidet require_multi require_nondet ' +
	      'require_cc_multi require_cc_nondet require_erroneous require_failure',
	    meta:
	      // pragma
	      'inline no_inline type_spec source_file fact_table obsolete memo ' +
	      'loop_check minimal_model terminates does_not_terminate ' +
	      'check_termination promise_equivalent_clauses ' +
	      // preprocessor
	      'foreign_proc foreign_decl foreign_code foreign_type ' +
	      'foreign_import_module foreign_export_enum foreign_export ' +
	      'foreign_enum may_call_mercury will_not_call_mercury thread_safe ' +
	      'not_thread_safe maybe_thread_safe promise_pure promise_semipure ' +
	      'tabled_for_io local untrailed trailed attach_to_io_state ' +
	      'can_pass_as_mercury_type stable will_not_throw_exception ' +
	      'may_modify_trail will_not_modify_trail may_duplicate ' +
	      'may_not_duplicate affects_liveness does_not_affect_liveness ' +
	      'doesnt_affect_liveness no_sharing unknown_sharing sharing',
	    built_in:
	      'some all not if then else true fail false try catch catch_any ' +
	      'semidet_true semidet_false semidet_fail impure_true impure semipure'
	  };
	
	  var COMMENT = hljs.COMMENT('%', '$');
	
	  var NUMCODE = {
	    className: 'number',
	    begin: "0'.\\|0[box][0-9a-fA-F]*"
	  };
	
	  var ATOM = hljs.inherit(hljs.APOS_STRING_MODE, {relevance: 0});
	  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {relevance: 0});
	  var STRING_FMT = {
	    className: 'subst',
	    begin: '\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]',
	    relevance: 0
	  };
	  STRING.contains.push(STRING_FMT);
	
	  var IMPLICATION = {
	    className: 'built_in',
	    variants: [
	      {begin: '<=>'},
	      {begin: '<=', relevance: 0},
	      {begin: '=>', relevance: 0},
	      {begin: '/\\\\'},
	      {begin: '\\\\/'}
	    ]
	  };
	
	  var HEAD_BODY_CONJUNCTION = {
	    className: 'built_in',
	    variants: [
	      {begin: ':-\\|-->'},
	      {begin: '=', relevance: 0}
	    ]
	  };
	
	  return {
	    aliases: ['m', 'moo'],
	    keywords: KEYWORDS,
	    contains: [
	      IMPLICATION,
	      HEAD_BODY_CONJUNCTION,
	      COMMENT,
	      hljs.C_BLOCK_COMMENT_MODE,
	      NUMCODE,
	      hljs.NUMBER_MODE,
	      ATOM,
	      STRING,
	      {begin: /:-/} // relevance booster
	    ]
	  };
	};

/***/ },
/* 200 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	    //local labels: %?[FB]?[AT]?\d{1,2}\w+
	  return {
	    case_insensitive: true,
	    aliases: ['mips'],
	    lexemes: '\\.?' + hljs.IDENT_RE,
	    keywords: {
	      meta:
	        //GNU preprocs
	        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',
	      built_in:
	        '$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' + // integer registers
	        '$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' + // integer registers
	        'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' + // integer register aliases
	        't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' + // integer register aliases
	        'k0 k1 gp sp fp ra ' + // integer register aliases
	        '$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' + // floating-point registers
	        '$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' + // floating-point registers
	        'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' + // Coprocessor 0 registers
	        'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' + // Coprocessor 0 registers
	        'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' + // Coprocessor 0 registers
	        'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers
	    },
	    contains: [
	      {
	        className: 'keyword',
	        begin: '\\b('+     //mnemonics
	            // 32-bit integer instructions
	            'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|' +
	            'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\.hb)?|jr(\.hb)?|lbu?|lhu?|' +
	            'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|' +
	            'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|' +
	            'srlv?|subu?|sw[lr]?|xori?|wsbh|' +
	            // floating-point instructions
	            'abs\.[sd]|add\.[sd]|alnv.ps|bc1[ft]l?|' +
	            'c\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\.[sd]|' +
	            '(ceil|floor|round|trunc)\.[lw]\.[sd]|cfc1|cvt\.d\.[lsw]|' +
	            'cvt\.l\.[dsw]|cvt\.ps\.s|cvt\.s\.[dlw]|cvt\.s\.p[lu]|cvt\.w\.[dls]|' +
	            'div\.[ds]|ldx?c1|luxc1|lwx?c1|madd\.[sd]|mfc1|mov[fntz]?\.[ds]|' +
	            'msub\.[sd]|mth?c1|mul\.[ds]|neg\.[ds]|nmadd\.[ds]|nmsub\.[ds]|' +
	            'p[lu][lu]\.ps|recip\.fmt|r?sqrt\.[ds]|sdx?c1|sub\.[ds]|suxc1|' +
	            'swx?c1|' +
	            // system control instructions
	            'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|' +
	            'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|' +
	            'tlti?u?|tnei?|wait|wrpgpr'+
	        ')',
	        end: '\\s'
	      },
	      hljs.COMMENT('[;#]', '$'),
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\'',
	        end: '[^\\\\]\'',
	        relevance: 0
	      },
	      {
	        className: 'title',
	        begin: '\\|', end: '\\|',
	        illegal: '\\n',
	        relevance: 0
	      },
	      {
	        className: 'number',
	        variants: [
	            {begin: '0x[0-9a-f]+'}, //hex
	            {begin: '\\b-?\\d+'}           //bare number
	        ],
	        relevance: 0
	      },
	      {
	        className: 'symbol',
	        variants: [
	            {begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:'}, //GNU MIPS syntax
	            {begin: '^\\s*[0-9]+:'}, // numbered local labels
	            {begin: '[0-9]+[bf]' }  // number local label reference (backwards, forwards)
	        ],
	        relevance: 0
	      }
	    ],
	    illegal: '\/'
	  };
	};

/***/ },
/* 201 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords:
	      'environ vocabularies notations constructors definitions ' +
	      'registrations theorems schemes requirements begin end definition ' +
	      'registration cluster existence pred func defpred deffunc theorem ' +
	      'proof let take assume then thus hence ex for st holds consider ' +
	      'reconsider such that and in provided of as from be being by means ' +
	      'equals implies iff redefine define now not or attr is mode ' +
	      'suppose per cases set thesis contradiction scheme reserve struct ' +
	      'correctness compatibility coherence symmetry assymetry ' +
	      'reflexivity irreflexivity connectedness uniqueness commutativity ' +
	      'idempotence involutiveness projectivity',
	    contains: [
	      hljs.COMMENT('::', '$')
	    ]
	  };
	};

/***/ },
/* 202 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var PERL_KEYWORDS = 'getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ' +
	    'ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime ' +
	    'readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq' +
	    'fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent ' +
	    'shutdown dump chomp connect getsockname die socketpair close flock exists index shmget' +
	    'sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr ' +
	    'unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 ' +
	    'getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline ' +
	    'endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand ' +
	    'mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink ' +
	    'getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr ' +
	    'untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link ' +
	    'getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller ' +
	    'lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and ' +
	    'sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 ' +
	    'chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach ' +
	    'tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir' +
	    'ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe ' +
	    'atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when';
	  var SUBST = {
	    className: 'subst',
	    begin: '[$@]\\{', end: '\\}',
	    keywords: PERL_KEYWORDS
	  };
	  var METHOD = {
	    begin: '->{', end: '}'
	    // contains defined later
	  };
	  var VAR = {
	    variants: [
	      {begin: /\$\d/},
	      {begin: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},
	      {begin: /[\$%@][^\s\w{]/, relevance: 0}
	    ]
	  };
	  var STRING_CONTAINS = [hljs.BACKSLASH_ESCAPE, SUBST, VAR];
	  var PERL_DEFAULT_CONTAINS = [
	    VAR,
	    hljs.HASH_COMMENT_MODE,
	    hljs.COMMENT(
	      '^\\=\\w',
	      '\\=cut',
	      {
	        endsWithParent: true
	      }
	    ),
	    METHOD,
	    {
	      className: 'string',
	      contains: STRING_CONTAINS,
	      variants: [
	        {
	          begin: 'q[qwxr]?\\s*\\(', end: '\\)',
	          relevance: 5
	        },
	        {
	          begin: 'q[qwxr]?\\s*\\[', end: '\\]',
	          relevance: 5
	        },
	        {
	          begin: 'q[qwxr]?\\s*\\{', end: '\\}',
	          relevance: 5
	        },
	        {
	          begin: 'q[qwxr]?\\s*\\|', end: '\\|',
	          relevance: 5
	        },
	        {
	          begin: 'q[qwxr]?\\s*\\<', end: '\\>',
	          relevance: 5
	        },
	        {
	          begin: 'qw\\s+q', end: 'q',
	          relevance: 5
	        },
	        {
	          begin: '\'', end: '\'',
	          contains: [hljs.BACKSLASH_ESCAPE]
	        },
	        {
	          begin: '"', end: '"'
	        },
	        {
	          begin: '`', end: '`',
	          contains: [hljs.BACKSLASH_ESCAPE]
	        },
	        {
	          begin: '{\\w+}',
	          contains: [],
	          relevance: 0
	        },
	        {
	          begin: '\-?\\w+\\s*\\=\\>',
	          contains: [],
	          relevance: 0
	        }
	      ]
	    },
	    {
	      className: 'number',
	      begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
	      relevance: 0
	    },
	    { // regexp container
	      begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
	      keywords: 'split return print reverse grep',
	      relevance: 0,
	      contains: [
	        hljs.HASH_COMMENT_MODE,
	        {
	          className: 'regexp',
	          begin: '(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*',
	          relevance: 10
	        },
	        {
	          className: 'regexp',
	          begin: '(m|qr)?/', end: '/[a-z]*',
	          contains: [hljs.BACKSLASH_ESCAPE],
	          relevance: 0 // allows empty "//" which is a common comment delimiter in other languages
	        }
	      ]
	    },
	    {
	      className: 'function',
	      beginKeywords: 'sub', end: '(\\s*\\(.*?\\))?[;{]', excludeEnd: true,
	      relevance: 5,
	      contains: [hljs.TITLE_MODE]
	    },
	    {
	      begin: '-\\w\\b',
	      relevance: 0
	    },
	    {
	      begin: "^__DATA__$",
	      end: "^__END__$",
	      subLanguage: 'mojolicious',
	      contains: [
	        {
	            begin: "^@@.*",
	            end: "$",
	            className: "comment"
	        }
	      ]
	    }
	  ];
	  SUBST.contains = PERL_DEFAULT_CONTAINS;
	  METHOD.contains = PERL_DEFAULT_CONTAINS;
	
	  return {
	    aliases: ['pl', 'pm'],
	    lexemes: /[\w\.]+/,
	    keywords: PERL_KEYWORDS,
	    contains: PERL_DEFAULT_CONTAINS
	  };
	};

/***/ },
/* 203 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    subLanguage: 'xml',
	    contains: [
	      {
	        className: 'meta',
	        begin: '^__(END|DATA)__$'
	      },
	    // mojolicious line
	      {
	        begin: "^\\s*%{1,2}={0,2}", end: '$',
	        subLanguage: 'perl'
	      },
	    // mojolicious block
	      {
	        begin: "<%{1,2}={0,2}",
	        end: "={0,1}%>",
	        subLanguage: 'perl',
	        excludeBegin: true,
	        excludeEnd: true
	      }
	    ]
	  };
	};

/***/ },
/* 204 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var NUMBER = {
	    className: 'number', relevance: 0,
	    variants: [
	      {
	        begin: '[$][a-fA-F0-9]+'
	      },
	      hljs.NUMBER_MODE
	    ]
	  };
	
	  return {
	    case_insensitive: true,
	    keywords: {
	      keyword: 'public private property continue exit extern new try catch ' +
	        'eachin not abstract final select case default const local global field ' +
	        'end if then else elseif endif while wend repeat until forever for ' +
	        'to step next return module inline throw import',
	
	      built_in: 'DebugLog DebugStop Error Print ACos ACosr ASin ASinr ATan ATan2 ATan2r ATanr Abs Abs Ceil ' +
	        'Clamp Clamp Cos Cosr Exp Floor Log Max Max Min Min Pow Sgn Sgn Sin Sinr Sqrt Tan Tanr Seed PI HALFPI TWOPI',
	
	      literal: 'true false null and or shl shr mod'
	    },
	    illegal: /\/\*/,
	    contains: [
	      hljs.COMMENT('#rem', '#end'),
	      hljs.COMMENT(
	        "'",
	        '$',
	        {
	          relevance: 0
	        }
	      ),
	      {
	        className: 'function',
	        beginKeywords: 'function method', end: '[(=:]|$',
	        illegal: /\n/,
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class interface', end: '$',
	        contains: [
	          {
	            beginKeywords: 'extends implements'
	          },
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        className: 'built_in',
	        begin: '\\b(self|super)\\b'
	      },
	      {
	        className: 'meta',
	        begin: '\\s*#', end: '$',
	        keywords: {'meta-keyword': 'if else elseif endif end then'}
	      },
	      {
	        className: 'meta',
	        begin: '^\\s*strict\\b'
	      },
	      {
	        beginKeywords: 'alias', end: '=',
	        contains: [hljs.UNDERSCORE_TITLE_MODE]
	      },
	      hljs.QUOTE_STRING_MODE,
	      NUMBER
	    ]
	  }
	};

/***/ },
/* 205 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	    keyword:
	      // Moonscript keywords
	      'if then not for in while do return else elseif break continue switch and or ' +
	      'unless when class extends super local import export from using',
	    literal:
	      'true false nil',
	    built_in:
	      '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load ' +
	      'loadfile loadstring module next pairs pcall print rawequal rawget rawset require ' +
	      'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug ' +
	      'io math os package string table'
	  };
	  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
	  var SUBST = {
	    className: 'subst',
	    begin: /#\{/, end: /}/,
	    keywords: KEYWORDS
	  };
	  var EXPRESSIONS = [
	    hljs.inherit(hljs.C_NUMBER_MODE,
	      {starts: {end: '(\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp
	    {
	      className: 'string',
	      variants: [
	        {
	          begin: /'/, end: /'/,
	          contains: [hljs.BACKSLASH_ESCAPE]
	        },
	        {
	          begin: /"/, end: /"/,
	          contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	        }
	      ]
	    },
	    {
	      className: 'built_in',
	      begin: '@__' + hljs.IDENT_RE
	    },
	    {
	      begin: '@' + hljs.IDENT_RE // relevance booster on par with CoffeeScript
	    },
	    {
	      begin: hljs.IDENT_RE + '\\\\' + hljs.IDENT_RE // inst\method
	    }
	  ];
	  SUBST.contains = EXPRESSIONS;
	
	  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
	  var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
	  var PARAMS = {
	    className: 'params',
	    begin: '\\([^\\(]', returnBegin: true,
	    /* We need another contained nameless mode to not have every nested
	    pair of parens to be called "params" */
	    contains: [{
	      begin: /\(/, end: /\)/,
	      keywords: KEYWORDS,
	      contains: ['self'].concat(EXPRESSIONS)
	    }]
	  };
	
	  return {
	    aliases: ['moon'],
	    keywords: KEYWORDS,
	    illegal: /\/\*/,
	    contains: EXPRESSIONS.concat([
	      hljs.COMMENT('--', '$'),
	      {
	        className: 'function',  // function: -> =>
	        begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
	        returnBegin: true,
	        contains: [TITLE, PARAMS]
	      },
	      {
	        begin: /[\(,:=]\s*/, // anonymous function start
	        relevance: 0,
	        contains: [
	          {
	            className: 'function',
	            begin: PARAMS_RE, end: '[-=]>',
	            returnBegin: true,
	            contains: [PARAMS]
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class',
	        end: '$',
	        illegal: /[:="\[\]]/,
	        contains: [
	          {
	            beginKeywords: 'extends',
	            endsWithParent: true,
	            illegal: /[:="\[\]]/,
	            contains: [TITLE]
	          },
	          TITLE
	        ]
	      },
	      {
	        className: 'name',    // table
	        begin: JS_IDENT_RE + ':', end: ':',
	        returnBegin: true, returnEnd: true,
	        relevance: 0
	      }
	    ])
	  };
	};

/***/ },
/* 206 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var VAR = {
	    className: 'variable',
	    variants: [
	      {begin: /\$\d+/},
	      {begin: /\$\{/, end: /}/},
	      {begin: '[\\$\\@]' + hljs.UNDERSCORE_IDENT_RE}
	    ]
	  };
	  var DEFAULT = {
	    endsWithParent: true,
	    lexemes: '[a-z/_]+',
	    keywords: {
	      literal:
	        'on off yes no true false none blocked debug info notice warn error crit ' +
	        'select break last permanent redirect kqueue rtsig epoll poll /dev/poll'
	    },
	    relevance: 0,
	    illegal: '=>',
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        className: 'string',
	        contains: [hljs.BACKSLASH_ESCAPE, VAR],
	        variants: [
	          {begin: /"/, end: /"/},
	          {begin: /'/, end: /'/}
	        ]
	      },
	      // this swallows entire URLs to avoid detecting numbers within
	      {
	        begin: '([a-z]+):/', end: '\\s', endsWithParent: true, excludeEnd: true,
	        contains: [VAR]
	      },
	      {
	        className: 'regexp',
	        contains: [hljs.BACKSLASH_ESCAPE, VAR],
	        variants: [
	          {begin: "\\s\\^", end: "\\s|{|;", returnEnd: true},
	          // regexp locations (~, ~*)
	          {begin: "~\\*?\\s+", end: "\\s|{|;", returnEnd: true},
	          // *.example.com
	          {begin: "\\*(\\.[a-z\\-]+)+"},
	          // sub.example.*
	          {begin: "([a-z\\-]+\\.)+\\*"}
	        ]
	      },
	      // IP
	      {
	        className: 'number',
	        begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
	      },
	      // units
	      {
	        className: 'number',
	        begin: '\\b\\d+[kKmMgGdshdwy]*\\b',
	        relevance: 0
	      },
	      VAR
	    ]
	  };
	
	  return {
	    aliases: ['nginxconf'],
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        begin: hljs.UNDERSCORE_IDENT_RE + '\\s+{', returnBegin: true,
	        end: '{',
	        contains: [
	          {
	            className: 'section',
	            begin: hljs.UNDERSCORE_IDENT_RE
	          }
	        ],
	        relevance: 0
	      },
	      {
	        begin: hljs.UNDERSCORE_IDENT_RE + '\\s', end: ';|{', returnBegin: true,
	        contains: [
	          {
	            className: 'attribute',
	            begin: hljs.UNDERSCORE_IDENT_RE,
	            starts: DEFAULT
	          }
	        ],
	        relevance: 0
	      }
	    ],
	    illegal: '[^\\s\\}]'
	  };
	};

/***/ },
/* 207 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['nim'],
	    keywords: {
	      keyword:
	        'addr and as asm bind block break case cast const continue converter ' +
	        'discard distinct div do elif else end enum except export finally ' +
	        'for from generic if import in include interface is isnot iterator ' +
	        'let macro method mixin mod nil not notin object of or out proc ptr ' +
	        'raise ref return shl shr static template try tuple type using var ' +
	        'when while with without xor yield',
	      literal:
	        'shared guarded stdin stdout stderr result true false',
	      built_in:
	        'int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float ' +
	        'float32 float64 bool char string cstring pointer expr stmt void ' +
	        'auto any range array openarray varargs seq set clong culong cchar ' +
	        'cschar cshort cint csize clonglong cfloat cdouble clongdouble ' +
	        'cuchar cushort cuint culonglong cstringarray semistatic'
	    },
	    contains: [ {
	        className: 'meta', // Actually pragma
	        begin: /{\./,
	        end: /\.}/,
	        relevance: 10
	      }, {
	        className: 'string',
	        begin: /[a-zA-Z]\w*"/,
	        end: /"/,
	        contains: [{begin: /""/}]
	      }, {
	        className: 'string',
	        begin: /([a-zA-Z]\w*)?"""/,
	        end: /"""/
	      },
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'type',
	        begin: /\b[A-Z]\w+\b/,
	        relevance: 0
	      }, {
	        className: 'number',
	        relevance: 0,
	        variants: [
	          {begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/},
	          {begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/},
	          {begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/},
	          {begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/}
	        ]
	      },
	      hljs.HASH_COMMENT_MODE
	    ]
	  }
	};

/***/ },
/* 208 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var NIX_KEYWORDS = {
	    keyword:
	      'rec with let in inherit assert if else then',
	    literal:
	      'true false or and null',
	    built_in:
	      'import abort baseNameOf dirOf isNull builtins map removeAttrs throw ' +
	      'toString derivation'
	  };
	  var ANTIQUOTE = {
	    className: 'subst',
	    begin: /\$\{/,
	    end: /}/,
	    keywords: NIX_KEYWORDS
	  };
	  var ATTRS = {
	    begin: /[a-zA-Z0-9-_]+(\s*=)/, returnBegin: true,
	    relevance: 0,
	    contains: [
	      {
	        className: 'attr',
	        begin: /\S+/
	      }
	    ]
	  };
	  var STRING = {
	    className: 'string',
	    contains: [ANTIQUOTE],
	    variants: [
	      {begin: "''", end: "''"},
	      {begin: '"', end: '"'}
	    ]
	  };
	  var EXPRESSIONS = [
	    hljs.NUMBER_MODE,
	    hljs.HASH_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    STRING,
	    ATTRS
	  ];
	  ANTIQUOTE.contains = EXPRESSIONS;
	  return {
	    aliases: ["nixos"],
	    keywords: NIX_KEYWORDS,
	    contains: EXPRESSIONS
	  };
	};

/***/ },
/* 209 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var CONSTANTS = {
	    className: 'variable',
	    begin: /\$(ADMINTOOLS|APPDATA|CDBURN_AREA|CMDLINE|COMMONFILES32|COMMONFILES64|COMMONFILES|COOKIES|DESKTOP|DOCUMENTS|EXEDIR|EXEFILE|EXEPATH|FAVORITES|FONTS|HISTORY|HWNDPARENT|INSTDIR|INTERNET_CACHE|LANGUAGE|LOCALAPPDATA|MUSIC|NETHOOD|OUTDIR|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES32|PROGRAMFILES64|PROGRAMFILES|QUICKLAUNCH|RECENT|RESOURCES_LOCALIZED|RESOURCES|SENDTO|SMPROGRAMS|SMSTARTUP|STARTMENU|SYSDIR|TEMP|TEMPLATES|VIDEOS|WINDIR)/
	  };
	
	  var DEFINES = {
	    // ${defines}
	    className: 'variable',
	    begin: /\$+{[\w\.:-]+}/
	  };
	
	  var VARIABLES = {
	    // $variables
	    className: 'variable',
	    begin: /\$+\w+/,
	    illegal: /\(\){}/
	  };
	
	  var LANGUAGES = {
	    // $(language_strings)
	    className: 'variable',
	    begin: /\$+\([\w\^\.:-]+\)/
	  };
	
	  var PARAMETERS = {
	    // command parameters
	    className: 'params',
	    begin: '(ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HKCR|HKCU|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM|HKPD|HKU|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)'
	  };
	
	  var COMPILER = {
	    // !compiler_flags
	    className: 'keyword',
	    begin: /\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversionsystem|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|searchparse|searchreplace|tempfile|undef|verbose|warning)/
	  };
	
	  var METACHARS = {
	    // $\n, $\r, $\t, $$
	    className: 'subst',
	    begin: /\$(\\[nrt]|\$)/
	  };
	
	  var PLUGINS = {
	    // plug::ins
	    className: 'class',
	    begin: /\w+\:\:\w+/
	  };
	
	    var STRING = {
	      className: 'string',
	      variants: [
	        {
	          begin: '"', end: '"'
	        },
	        {
	          begin: '\'', end: '\''
	        },
	        {
	          begin: '`', end: '`'
	        }
	      ],
	      illegal: /\n/,
	      contains: [
	        METACHARS,
	        CONSTANTS,
	        DEFINES,
	        VARIABLES,
	        LANGUAGES
	      ]
	  };
	
	  return {
	    case_insensitive: false,
	    keywords: {
	      keyword:
	      'Abort AddBrandingImage AddSize AllowRootDirInstall AllowSkipFiles AutoCloseWindow BGFont BGGradient BrandingText BringToFront Call CallInstDLL Caption ChangeUI CheckBitmap ClearErrors CompletedText ComponentText CopyFiles CRCCheck CreateDirectory CreateFont CreateShortCut Delete DeleteINISec DeleteINIStr DeleteRegKey DeleteRegValue DetailPrint DetailsButtonText DirText DirVar DirVerify EnableWindow EnumRegKey EnumRegValue Exch Exec ExecShell ExecWait ExpandEnvStrings File FileBufSize FileClose FileErrorText FileOpen FileRead FileReadByte FileReadUTF16LE FileReadWord FileSeek FileWrite FileWriteByte FileWriteUTF16LE FileWriteWord FindClose FindFirst FindNext FindWindow FlushINI FunctionEnd GetCurInstType GetCurrentAddress GetDlgItem GetDLLVersion GetDLLVersionLocal GetErrorLevel GetFileTime GetFileTimeLocal GetFullPathName GetFunctionAddress GetInstDirError GetLabelAddress GetTempFileName Goto HideWindow Icon IfAbort IfErrors IfFileExists IfRebootFlag IfSilent InitPluginsDir InstallButtonText InstallColors InstallDir InstallDirRegKey InstProgressFlags InstType InstTypeGetText InstTypeSetText IntCmp IntCmpU IntFmt IntOp IsWindow LangString LicenseBkColor LicenseData LicenseForceSelection LicenseLangString LicenseText LoadLanguageFile LockWindow LogSet LogText ManifestDPIAware ManifestSupportedOS MessageBox MiscButtonText Name Nop OutFile Page PageCallbacks PageExEnd Pop Push Quit ReadEnvStr ReadINIStr ReadRegDWORD ReadRegStr Reboot RegDLL Rename RequestExecutionLevel ReserveFile Return RMDir SearchPath SectionEnd SectionGetFlags SectionGetInstTypes SectionGetSize SectionGetText SectionGroupEnd SectionIn SectionSetFlags SectionSetInstTypes SectionSetSize SectionSetText SendMessage SetAutoClose SetBrandingImage SetCompress SetCompressor SetCompressorDictSize SetCtlColors SetCurInstType SetDatablockOptimize SetDateSave SetDetailsPrint SetDetailsView SetErrorLevel SetErrors SetFileAttributes SetFont SetOutPath SetOverwrite SetRebootFlag SetRegView SetShellVarContext SetSilent ShowInstDetails ShowUninstDetails ShowWindow SilentInstall SilentUnInstall Sleep SpaceTexts StrCmp StrCmpS StrCpy StrLen SubCaption Unicode UninstallButtonText UninstallCaption UninstallIcon UninstallSubCaption UninstallText UninstPage UnRegDLL Var VIAddVersionKey VIFileVersion VIProductVersion WindowIcon WriteINIStr WriteRegBin WriteRegDWORD WriteRegExpandStr WriteRegStr WriteUninstaller XPStyle',
	      literal:
	      'admin all auto both bottom bzip2 colored components current custom directory false force hide highest ifdiff ifnewer instfiles lastused leave left license listonly lzma nevershow none normal notset off on open print right show silent silentlog smooth textonly top true try un.components un.custom un.directory un.instfiles un.license uninstConfirm user Win10 Win7 Win8 WinVista zlib'
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.COMMENT(
	        ';',
	        '$',
	        {
	          relevance: 0
	        }
	      ),
	      {
	        className: 'function',
	        beginKeywords: 'Function PageEx Section SectionGroup', end: '$'
	      },
	      STRING,
	      COMPILER,
	      DEFINES,
	      VARIABLES,
	      LANGUAGES,
	      PARAMETERS,
	      PLUGINS,
	      hljs.NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 210 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var API_CLASS = {
	    className: 'built_in',
	    begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+',
	  };
	  var OBJC_KEYWORDS = {
	    keyword:
	      'int float while char export sizeof typedef const struct for union ' +
	      'unsigned long volatile static bool mutable if do return goto void ' +
	      'enum else break extern asm case short default double register explicit ' +
	      'signed typename this switch continue wchar_t inline readonly assign ' +
	      'readwrite self @synchronized id typeof ' +
	      'nonatomic super unichar IBOutlet IBAction strong weak copy ' +
	      'in out inout bycopy byref oneway __strong __weak __block __autoreleasing ' +
	      '@private @protected @public @try @property @end @throw @catch @finally ' +
	      '@autoreleasepool @synthesize @dynamic @selector @optional @required ' +
	      '@encode @package @import @defs @compatibility_alias ' +
	      '__bridge __bridge_transfer __bridge_retained __bridge_retain ' +
	      '__covariant __contravariant __kindof ' +
	      '_Nonnull _Nullable _Null_unspecified ' +
	      '__FUNCTION__ __PRETTY_FUNCTION__ __attribute__ ' +
	      'getter setter retain unsafe_unretained ' +
	      'nonnull nullable null_unspecified null_resettable class instancetype ' +
	      'NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER ' +
	      'NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED ' +
	      'NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE ' +
	      'NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END ' +
	      'NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW ' +
	      'NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN',
	    literal:
	      'false true FALSE TRUE nil YES NO NULL',
	    built_in:
	      'BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once'
	  };
	  var LEXEMES = /[a-zA-Z@][a-zA-Z0-9_]*/;
	  var CLASS_KEYWORDS = '@interface @class @protocol @implementation';
	  return {
	    aliases: ['mm', 'objc', 'obj-c'],
	    keywords: OBJC_KEYWORDS,
	    lexemes: LEXEMES,
	    illegal: '</',
	    contains: [
	      API_CLASS,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        variants: [
	          {
	            begin: '@"', end: '"',
	            illegal: '\\n',
	            contains: [hljs.BACKSLASH_ESCAPE]
	          },
	          {
	            begin: '\'', end: '[^\\\\]\'',
	            illegal: '[^\\\\][^\']'
	          }
	        ]
	      },
	      {
	        className: 'meta',
	        begin: '#',
	        end: '$',
	        contains: [
	          {
	            className: 'meta-string',
	            variants: [
	              { begin: '\"', end: '\"' },
	              { begin: '<', end: '>' }
	            ]
	          }
	        ]
	      },
	      {
	        className: 'class',
	        begin: '(' + CLASS_KEYWORDS.split(' ').join('|') + ')\\b', end: '({|$)', excludeEnd: true,
	        keywords: CLASS_KEYWORDS, lexemes: LEXEMES,
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        begin: '\\.'+hljs.UNDERSCORE_IDENT_RE,
	        relevance: 0
	      }
	    ]
	  };
	};

/***/ },
/* 211 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  /* missing support for heredoc-like string (OCaml 4.0.2+) */
	  return {
	    aliases: ['ml'],
	    keywords: {
	      keyword:
	        'and as assert asr begin class constraint do done downto else end ' +
	        'exception external for fun function functor if in include ' +
	        'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +
	        'mod module mutable new object of open! open or private rec sig struct ' +
	        'then to try type val! val virtual when while with ' +
	        /* camlp4 */
	        'parser value',
	      built_in:
	        /* built-in types */
	        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +
	        /* (some) types in Pervasives */
	        'in_channel out_channel ref',
	      literal:
	        'true false'
	    },
	    illegal: /\/\/|>>/,
	    lexemes: '[a-z_]\\w*!?',
	    contains: [
	      {
	        className: 'literal',
	        begin: '\\[(\\|\\|)?\\]|\\(\\)',
	        relevance: 0
	      },
	      hljs.COMMENT(
	        '\\(\\*',
	        '\\*\\)',
	        {
	          contains: ['self']
	        }
	      ),
	      { /* type variable */
	        className: 'symbol',
	        begin: '\'[A-Za-z_](?!\')[\\w\']*'
	        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
	      },
	      { /* polymorphic variant */
	        className: 'type',
	        begin: '`[A-Z][\\w\']*'
	      },
	      { /* module or constructor */
	        className: 'type',
	        begin: '\\b[A-Z][\\w\']*',
	        relevance: 0
	      },
	      { /* don't color identifiers, but safely catch all identifiers with '*/
	        begin: '[a-z_]\\w*\'[\\w\']*', relevance: 0
	      },
	      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
	      {
	        className: 'number',
	        begin:
	          '\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +
	          '0[oO][0-7_]+[Lln]?|' +
	          '0[bB][01_]+[Lln]?|' +
	          '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
	        relevance: 0
	      },
	      {
	        begin: /[-=]>/ // relevance booster
	      }
	    ]
	  }
	};

/***/ },
/* 212 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
		var SPECIAL_VARS = {
			className: 'keyword',
			begin: '\\$(f[asn]|t|vp[rtd]|children)'
		},
		LITERALS = {
			className: 'literal',
			begin: 'false|true|PI|undef'
		},
		NUMBERS = {
			className: 'number',
			begin: '\\b\\d+(\\.\\d+)?(e-?\\d+)?', //adds 1e5, 1e-10
			relevance: 0
		},
		STRING = hljs.inherit(hljs.QUOTE_STRING_MODE,{illegal: null}),
		PREPRO = {
			className: 'meta',
			keywords: {'meta-keyword': 'include use'},
			begin: 'include|use <',
			end: '>'
		},
		PARAMS = {
			className: 'params',
			begin: '\\(', end: '\\)',
			contains: ['self', NUMBERS, STRING, SPECIAL_VARS, LITERALS]
		},
		MODIFIERS = {
			begin: '[*!#%]',
			relevance: 0
		},
		FUNCTIONS = {
			className: 'function',
			beginKeywords: 'module function',
			end: '\\=|\\{',
			contains: [PARAMS, hljs.UNDERSCORE_TITLE_MODE]
		};
	
		return {
			aliases: ['scad'],
			keywords: {
				keyword: 'function module include use for intersection_for if else \\%',
				literal: 'false true PI undef',
				built_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'
			},
			contains: [
				hljs.C_LINE_COMMENT_MODE,
				hljs.C_BLOCK_COMMENT_MODE,
				NUMBERS,
				PREPRO,
				STRING,
				SPECIAL_VARS,
				MODIFIERS,
				FUNCTIONS
			]
		}
	};

/***/ },
/* 213 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var OXYGENE_KEYWORDS = 'abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue '+
	    'create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false '+
	    'final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited '+
	    'inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of '+
	    'old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly '+
	    'record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple '+
	    'type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal '+
	    'register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained';
	  var CURLY_COMMENT =  hljs.COMMENT(
	    '{',
	    '}',
	    {
	      relevance: 0
	    }
	  );
	  var PAREN_COMMENT = hljs.COMMENT(
	    '\\(\\*',
	    '\\*\\)',
	    {
	      relevance: 10
	    }
	  );
	  var STRING = {
	    className: 'string',
	    begin: '\'', end: '\'',
	    contains: [{begin: '\'\''}]
	  };
	  var CHAR_STRING = {
	    className: 'string', begin: '(#\\d+)+'
	  };
	  var FUNCTION = {
	    className: 'function',
	    beginKeywords: 'function constructor destructor procedure method', end: '[:;]',
	    keywords: 'function constructor|10 destructor|10 procedure|10 method|10',
	    contains: [
	      hljs.TITLE_MODE,
	      {
	        className: 'params',
	        begin: '\\(', end: '\\)',
	        keywords: OXYGENE_KEYWORDS,
	        contains: [STRING, CHAR_STRING]
	      },
	      CURLY_COMMENT, PAREN_COMMENT
	    ]
	  };
	  return {
	    case_insensitive: true,
	    lexemes: /\.?\w+/,
	    keywords: OXYGENE_KEYWORDS,
	    illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
	    contains: [
	      CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE,
	      STRING, CHAR_STRING,
	      hljs.NUMBER_MODE,
	      FUNCTION,
	      {
	        className: 'class',
	        begin: '=\\bclass\\b', end: 'end;',
	        keywords: OXYGENE_KEYWORDS,
	        contains: [
	          STRING, CHAR_STRING,
	          CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE,
	          FUNCTION
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 214 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var CURLY_SUBCOMMENT = hljs.COMMENT(
	    '{',
	    '}',
	    {
	      contains: ['self']
	    }
	  );
	  return {
	    subLanguage: 'xml', relevance: 0,
	    contains: [
	      hljs.COMMENT('^#', '$'),
	      hljs.COMMENT(
	        '\\^rem{',
	        '}',
	        {
	          relevance: 10,
	          contains: [
	            CURLY_SUBCOMMENT
	          ]
	        }
	      ),
	      {
	        className: 'meta',
	        begin: '^@(?:BASE|USE|CLASS|OPTIONS)$',
	        relevance: 10
	      },
	      {
	        className: 'title',
	        begin: '@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$'
	      },
	      {
	        className: 'variable',
	        begin: '\\$\\{?[\\w\\-\\.\\:]+\\}?'
	      },
	      {
	        className: 'keyword',
	        begin: '\\^[\\w\\-\\.\\:]+'
	      },
	      {
	        className: 'number',
	        begin: '\\^#[0-9a-fA-F]+'
	      },
	      hljs.C_NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 215 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var MACRO = {
	    className: 'variable',
	    begin: /\$[\w\d#@][\w\d_]*/
	  };
	  var TABLE = {
	    className: 'variable',
	    begin: /<(?!\/)/, end: />/
	  };
	  var QUOTE_STRING = {
	    className: 'string',
	    begin: /"/, end: /"/
	  };
	
	  return {
	    aliases: ['pf.conf'],
	    lexemes: /[a-z0-9_<>-]+/,
	    keywords: {
	      built_in: /* block match pass are "actions" in pf.conf(5), the rest are
	                 * lexically similar top-level commands.
	                 */
	        'block match pass load anchor|5 antispoof|10 set table',
	      keyword:
	        'in out log quick on rdomain inet inet6 proto from port os to route' +
	        'allow-opts divert-packet divert-reply divert-to flags group icmp-type' +
	        'icmp6-type label once probability recieved-on rtable prio queue' +
	        'tos tag tagged user keep fragment for os drop' +
	        'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin' +
	        'source-hash static-port' +
	        'dup-to reply-to route-to' +
	        'parent bandwidth default min max qlimit' +
	        'block-policy debug fingerprints hostid limit loginterface optimization' +
	        'reassemble ruleset-optimization basic none profile skip state-defaults' +
	        'state-policy timeout' +
	        'const counters persist' +
	        'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy' +
	        'source-track global rule max-src-nodes max-src-states max-src-conn' +
	        'max-src-conn-rate overload flush' +
	        'scrub|5 max-mss min-ttl no-df|10 random-id',
	      literal:
	        'all any no-route self urpf-failed egress|5 unknown'
	    },
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.NUMBER_MODE,
	      hljs.QUOTE_STRING_MODE,
	      MACRO,
	      TABLE
	    ]
	  };
	};

/***/ },
/* 216 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var VARIABLE = {
	    begin: '\\$+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'
	  };
	  var PREPROCESSOR = {
	    className: 'meta', begin: /<\?(php)?|\?>/
	  };
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE, PREPROCESSOR],
	    variants: [
	      {
	        begin: 'b"', end: '"'
	      },
	      {
	        begin: 'b\'', end: '\''
	      },
	      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
	    ]
	  };
	  var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};
	  return {
	    aliases: ['php3', 'php4', 'php5', 'php6'],
	    case_insensitive: true,
	    keywords:
	      'and include_once list abstract global private echo interface as static endswitch ' +
	      'array null if endwhile or const for endforeach self var while isset public ' +
	      'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' +
	      'return parent clone use __CLASS__ __LINE__ else break print eval new ' +
	      'catch __METHOD__ case exception default die require __FUNCTION__ ' +
	      'enddeclare final try switch continue endfor endif declare unset true false ' +
	      'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' +
	      'yield finally',
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.COMMENT('//', '$', {contains: [PREPROCESSOR]}),
	      hljs.COMMENT(
	        '/\\*',
	        '\\*/',
	        {
	          contains: [
	            {
	              className: 'doctag',
	              begin: '@[A-Za-z]+'
	            }
	          ]
	        }
	      ),
	      hljs.COMMENT(
	        '__halt_compiler.+?;',
	        false,
	        {
	          endsWithParent: true,
	          keywords: '__halt_compiler',
	          lexemes: hljs.UNDERSCORE_IDENT_RE
	        }
	      ),
	      {
	        className: 'string',
	        begin: /<<<['"]?\w+['"]?$/, end: /^\w+;?$/,
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          {
	            className: 'subst',
	            variants: [
	              {begin: /\$\w+/},
	              {begin: /\{\$/, end: /\}/}
	            ]
	          }
	        ]
	      },
	      PREPROCESSOR,
	      {
	        className: 'keyword', begin: /\$this\b/
	      },
	      VARIABLE,
	      {
	        // swallow composed identifiers to avoid parsing them as keywords
	        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
	      },
	      {
	        className: 'function',
	        beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
	        illegal: '\\$|\\[|%',
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            className: 'params',
	            begin: '\\(', end: '\\)',
	            contains: [
	              'self',
	              VARIABLE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              STRING,
	              NUMBER
	            ]
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class interface', end: '{', excludeEnd: true,
	        illegal: /[:\(\$"]/,
	        contains: [
	          {beginKeywords: 'extends implements'},
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        beginKeywords: 'namespace', end: ';',
	        illegal: /[\.']/,
	        contains: [hljs.UNDERSCORE_TITLE_MODE]
	      },
	      {
	        beginKeywords: 'use', end: ';',
	        contains: [hljs.UNDERSCORE_TITLE_MODE]
	      },
	      {
	        begin: '=>' // No markup, just a relevance booster
	      },
	      STRING,
	      NUMBER
	    ]
	  };
	};

/***/ },
/* 217 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	    keyword:
	      'actor addressof and as be break class compile_error compile_intrinsic' +
	      'consume continue delegate digestof do else elseif embed end error' +
	      'for fun if ifdef in interface is isnt lambda let match new not object' +
	      'or primitive recover repeat return struct then trait try type until ' +
	      'use var where while with xor',
	    meta:
	      'iso val tag trn box ref',
	    literal:
	      'this false true'
	  };
	
	  var TRIPLE_QUOTE_STRING_MODE = {
	    className: 'string',
	    begin: '"""', end: '"""',
	    relevance: 10
	  };
	
	  var QUOTE_STRING_MODE = {
	    className: 'string',
	    begin: '"', end: '"',
	    contains: [hljs.BACKSLASH_ESCAPE]
	  };
	
	  var SINGLE_QUOTE_CHAR_MODE = {
	    className: 'string',
	    begin: '\'', end: '\'',
	    contains: [hljs.BACKSLASH_ESCAPE],
	    relevance: 0
	  };
	
	  var TYPE_NAME = {
	    className: 'type',
	    begin: '\\b_?[A-Z][\\w]*',
	    relevance: 0
	  };
	
	  var PRIMED_NAME = {
	    begin: hljs.IDENT_RE + '\'', relevance: 0
	  };
	
	  var CLASS = {
	    className: 'class',
	    beginKeywords: 'class actor', end: '$',
	    contains: [
	      hljs.TITLE_MODE,
	      hljs.C_LINE_COMMENT_MODE
	    ]
	  }
	
	  var FUNCTION = {
	    className: 'function',
	    beginKeywords: 'new fun', end: '=>',
	    contains: [
	      hljs.TITLE_MODE,
	      {
	        begin: /\(/, end: /\)/,
	        contains: [
	          TYPE_NAME,
	          PRIMED_NAME,
	          hljs.C_NUMBER_MODE,
	          hljs.C_BLOCK_COMMENT_MODE
	        ]
	      },
	      {
	        begin: /:/, endsWithParent: true,
	        contains: [TYPE_NAME]
	      },
	      hljs.C_LINE_COMMENT_MODE
	    ]
	  }
	
	  return {
	    keywords: KEYWORDS,
	    contains: [
	      CLASS,
	      FUNCTION,
	      TYPE_NAME,
	      TRIPLE_QUOTE_STRING_MODE,
	      QUOTE_STRING_MODE,
	      SINGLE_QUOTE_CHAR_MODE,
	      PRIMED_NAME,
	      hljs.C_NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	};

/***/ },
/* 218 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var BACKTICK_ESCAPE = {
	    begin: '`[\\s\\S]',
	    relevance: 0
	  };
	  var VAR = {
	    className: 'variable',
	    variants: [
	      {begin: /\$[\w\d][\w\d_:]*/}
	    ]
	  };
	  var LITERAL = {
	    className: 'literal',
	    begin: /\$(null|true|false)\b/
	  };
	  var QUOTE_STRING = {
	    className: 'string',
	    variants: [
	      { begin: /"/, end: /"/ },
	      { begin: /@"/, end: /^"@/ }
	    ],
	    contains: [
	      BACKTICK_ESCAPE,
	      VAR,
	      {
	        className: 'variable',
	        begin: /\$[A-z]/, end: /[^A-z]/
	      }
	    ]
	  };
	  var APOS_STRING = {
	    className: 'string',
	    variants: [
	      { begin: /'/, end: /'/ },
	      { begin: /@'/, end: /^'@/ }
	    ]
	  };
	
	  var PS_HELPTAGS = {
	    className: 'doctag',
	    variants: [
	      /* no paramater help tags */ 
	      { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
	      /* one parameter help tags */
	      { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
	    ]
	  };
	  var PS_COMMENT = hljs.inherit(
	    hljs.COMMENT(null, null),
	    {
	      variants: [
	        /* single-line comment */
	        { begin: /#/, end: /$/ },
	        /* multi-line comment */
	        { begin: /<#/, end: /#>/ }
	      ],
	      contains: [PS_HELPTAGS]
	    }
	  );
	
	  return {
	    aliases: ['ps'],
	    lexemes: /-?[A-z\.\-]+/,
	    case_insensitive: true,
	    keywords: {
	      keyword: 'if else foreach return function do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch',
	      built_in: 'Add-Computer Add-Content Add-History Add-JobTrigger Add-Member Add-PSSnapin Add-Type Checkpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item Clear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession Connect-WSMan Convert-Path ConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString ConvertTo-Xml Copy-Item Copy-ItemProperty Debug-Process Disable-ComputerRestore Disable-JobTrigger Disable-PSBreakpoint Disable-PSRemoting Disable-PSSessionConfiguration Disable-WSManCredSSP Disconnect-PSSession Disconnect-WSMan Disable-ScheduledJob Enable-ComputerRestore Enable-JobTrigger Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration Enable-ScheduledJob Enable-WSManCredSSP Enter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter Export-Csv Export-FormatData Export-ModuleMember Export-PSSession ForEach-Object Format-Custom Format-List Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint Get-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date Get-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Host Get-HotFix Get-Help Get-History Get-IseSnippet Get-Item Get-ItemProperty Get-Job Get-JobTrigger Get-Location Get-Member Get-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive Get-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-ScheduledJob Get-ScheduledJobOption Get-Service Get-TraceSource Get-Transaction Get-TypeData Get-UICulture Get-Unique Get-Variable Get-Verb Get-WinEvent Get-WmiObject Get-WSManCredSSP Get-WSManInstance Group-Object Import-Alias Import-Clixml Import-Counter Import-Csv Import-IseSnippet Import-LocalizedData Import-PSSession Import-Module Invoke-AsWorkflow Invoke-Command Invoke-Expression Invoke-History Invoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod Invoke-WSManAction Join-Path Limit-EventLog Measure-Command Measure-Object Move-Item Move-ItemProperty New-Alias New-Event New-EventLog New-IseSnippet New-Item New-ItemProperty New-JobTrigger New-Object New-Module New-ModuleManifest New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption New-PSTransportOption New-PSWorkflowExecutionOption New-PSWorkflowSession New-ScheduledJobOption New-Service New-TimeSpan New-Variable New-WebServiceProxy New-WinEvent New-WSManInstance New-WSManSessionOption Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String Pop-Location Push-Location Read-Host Receive-Job Register-EngineEvent Register-ObjectEvent Register-PSSessionConfiguration Register-ScheduledJob Register-WmiEvent Remove-Computer Remove-Event Remove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-JobTrigger Remove-Module Remove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData Remove-Variable Remove-WmiObject Remove-WSManInstance Rename-Computer Rename-Item Rename-ItemProperty Reset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service Restore-Computer Resume-Job Resume-Service Save-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-JobTrigger Set-Location Set-PSBreakpoint Set-PSDebug Set-PSSessionConfiguration Set-ScheduledJob Set-ScheduledJobOption Set-Service Set-StrictMode Set-TraceSource Set-Variable Set-WmiInstance Set-WSManInstance Set-WSManQuickConfig Show-Command Show-ControlPanelItem Show-EventLog Sort-Object Split-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction Start-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript Suspend-Job Suspend-Service Tee-Object Test-ComputerSecureChannel Test-Connection Test-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command Unblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration Unregister-ScheduledJob Update-FormatData Update-Help Update-List Update-TypeData Use-Transaction Wait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog Write-Host Write-Output Write-Progress Write-Verbose Write-Warning Add-MDTPersistentDrive Disable-MDTMonitorService Enable-MDTMonitorService Get-MDTDeploymentShareStatistics Get-MDTMonitorData Get-MDTOperatingSystemCatalog Get-MDTPersistentDrive Import-MDTApplication Import-MDTDriver Import-MDTOperatingSystem Import-MDTPackage Import-MDTTaskSequence New-MDTDatabase Remove-MDTMonitorData Remove-MDTPersistentDrive Restore-MDTPersistentDrive Set-MDTMonitorData Test-MDTDeploymentShare Test-MDTMonitorData Update-MDTDatabaseSchema Update-MDTDeploymentShare Update-MDTLinkedDS Update-MDTMedia Update-MDTMedia Add-VamtProductKey Export-VamtData Find-VamtManagedMachine Get-VamtConfirmationId Get-VamtProduct Get-VamtProductKey Import-VamtData Initialize-VamtData Install-VamtConfirmationId Install-VamtProductActivation Install-VamtProductKey Update-VamtProduct',
	      nomarkup: '-ne -eq -lt -gt -ge -le -not -like -notlike -match -notmatch -contains -notcontains -in -notin -replace'
	    },
	    contains: [
	      BACKTICK_ESCAPE,
	      hljs.NUMBER_MODE,
	      QUOTE_STRING,
	      APOS_STRING,
	      LITERAL,
	      VAR,
	      PS_COMMENT
	    ]
	  };
	};

/***/ },
/* 219 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: {
	      keyword: 'BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color ' +
	        'double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject ' +
	        'Object StringDict StringList Table TableRow XML ' +
	        // Java keywords
	        'false synchronized int abstract float private char boolean static null if const ' +
	        'for true while long throw strictfp finally protected import native final return void ' +
	        'enum else break transient new catch instanceof byte super volatile case assert short ' +
	        'package default double public try this switch continue throws protected public private',
	      literal: 'P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI',
	      title: 'setup draw',
	      built_in: 'displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key ' +
	        'keyCode pixels focused frameCount frameRate height width ' +
	        'size createGraphics beginDraw createShape loadShape PShape arc ellipse line point ' +
	        'quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint ' +
	        'curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex ' +
	        'endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap ' +
	        'strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased ' +
	        'mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour ' +
	        'millis minute month second year background clear colorMode fill noFill noStroke stroke alpha ' +
	        'blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY ' +
	        'screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ' +
	        'ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle ' +
	        'pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf ' +
	        'nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset ' +
	        'box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings ' +
	        'loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput ' +
	        'createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings ' +
	        'saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale ' +
	        'shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal ' +
	        'pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap ' +
	        'blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont ' +
	        'loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil ' +
	        'constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees ' +
	        'radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 220 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    contains: [
	      hljs.C_NUMBER_MODE,
	      {
	        begin: '[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}', end: ':',
	        excludeEnd: true
	      },
	      {
	        begin: '(ncalls|tottime|cumtime)', end: '$',
	        keywords: 'ncalls tottime|10 cumtime|10 filename',
	        relevance: 10
	      },
	      {
	        begin: 'function calls', end: '$',
	        contains: [hljs.C_NUMBER_MODE],
	        relevance: 10
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\\(', end: '\\)$',
	        excludeBegin: true, excludeEnd: true,
	        relevance: 0
	      }
	    ]
	  };
	};

/***/ },
/* 221 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	
	  var ATOM = {
	
	    begin: /[a-z][A-Za-z0-9_]*/,
	    relevance: 0
	  };
	
	  var VAR = {
	
	    className: 'symbol',
	    variants: [
	      {begin: /[A-Z][a-zA-Z0-9_]*/},
	      {begin: /_[A-Za-z0-9_]*/},
	    ],
	    relevance: 0
	  };
	
	  var PARENTED = {
	
	    begin: /\(/,
	    end: /\)/,
	    relevance: 0
	  };
	
	  var LIST = {
	
	    begin: /\[/,
	    end: /\]/
	  };
	
	  var LINE_COMMENT = {
	
	    className: 'comment',
	    begin: /%/, end: /$/,
	    contains: [hljs.PHRASAL_WORDS_MODE]
	  };
	
	  var BACKTICK_STRING = {
	
	    className: 'string',
	    begin: /`/, end: /`/,
	    contains: [hljs.BACKSLASH_ESCAPE]
	  };
	
	  var CHAR_CODE = {
	
	    className: 'string', // 0'a etc.
	    begin: /0\'(\\\'|.)/
	  };
	
	  var SPACE_CODE = {
	
	    className: 'string',
	    begin: /0\'\\s/ // 0'\s
	  };
	
	  var PRED_OP = { // relevance booster
	    begin: /:-/
	  };
	
	  var inner = [
	
	    ATOM,
	    VAR,
	    PARENTED,
	    PRED_OP,
	    LIST,
	    LINE_COMMENT,
	    hljs.C_BLOCK_COMMENT_MODE,
	    hljs.QUOTE_STRING_MODE,
	    hljs.APOS_STRING_MODE,
	    BACKTICK_STRING,
	    CHAR_CODE,
	    SPACE_CODE,
	    hljs.C_NUMBER_MODE
	  ];
	
	  PARENTED.contains = inner;
	  LIST.contains = inner;
	
	  return {
	    contains: inner.concat([
	      {begin: /\.$/} // relevance booster
	    ])
	  };
	};

/***/ },
/* 222 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: {
	      keyword: 'package import option optional required repeated group',
	      built_in: 'double float int32 int64 uint32 uint64 sint32 sint64 ' +
	        'fixed32 fixed64 sfixed32 sfixed64 bool string bytes',
	      literal: 'true false'
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      {
	        className: 'class',
	        beginKeywords: 'message enum service', end: /\{/,
	        illegal: /\n/,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {
	            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
	          })
	        ]
	      },
	      {
	        className: 'function',
	        beginKeywords: 'rpc',
	        end: /;/, excludeEnd: true,
	        keywords: 'rpc returns'
	      },
	      {
	        begin: /^\s*[A-Z_]+/,
	        end: /\s*=/, excludeEnd: true
	      }
	    ]
	  };
	};

/***/ },
/* 223 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	
	  var PUPPET_KEYWORDS = {
	    keyword:
	    /* language keywords */
	      'and case default else elsif false if in import enherits node or true undef unless main settings $string ',
	    literal:
	    /* metaparameters */
	      'alias audit before loglevel noop require subscribe tag ' +
	    /* normal attributes */
	      'owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check ' +
	      'en_address ip_address realname command environment hour monute month monthday special target weekday '+
	      'creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore ' +
	      'links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source ' +
	      'souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid '+
	      'ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel ' +
	      'native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options ' +
	      'device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use ' +
	      'message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform ' +
	      'responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running ' +
	      'start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age ' +
	      'password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled ' +
	      'enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist ' +
	      'priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey ' +
	      'sslverify mounted',
	    built_in:
	    /* core facts */
	      'architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers ' +
	      'domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces '+
	      'ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion ' +
	      'kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease ' +
	      'lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major ' +
	      'macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease '+
	      'operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion '+
	      'rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced '+
	      'selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime '+
	      'uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version'
	  };
	
	  var COMMENT = hljs.COMMENT('#', '$');
	
	  var IDENT_RE = '([A-Za-z_]|::)(\\w|::)*';
	
	  var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE});
	
	  var VARIABLE = {className: 'variable', begin: '\\$' + IDENT_RE};
	
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE, VARIABLE],
	    variants: [
	      {begin: /'/, end: /'/},
	      {begin: /"/, end: /"/}
	    ]
	  };
	
	  return {
	    aliases: ['pp'],
	    contains: [
	      COMMENT,
	      VARIABLE,
	      STRING,
	      {
	        beginKeywords: 'class', end: '\\{|;',
	        illegal: /=/,
	        contains: [TITLE, COMMENT]
	      },
	      {
	        beginKeywords: 'define', end: /\{/,
	        contains: [
	          {
	            className: 'section', begin: hljs.IDENT_RE, endsParent: true
	          }
	        ]
	      },
	      {
	        begin: hljs.IDENT_RE + '\\s+\\{', returnBegin: true,
	        end: /\S/,
	        contains: [
	          {
	            className: 'keyword',
	            begin: hljs.IDENT_RE
	          },
	          {
	            begin: /\{/, end: /\}/,
	            keywords: PUPPET_KEYWORDS,
	            relevance: 0,
	            contains: [
	              STRING,
	              COMMENT,
	              {
	                begin:'[a-zA-Z_]+\\s*=>',
	                returnBegin: true, end: '=>',
	                contains: [
	                  {
	                    className: 'attr',
	                    begin: hljs.IDENT_RE,
	                  }
	                ]
	              },
	              {
	                className: 'number',
	                begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
	                relevance: 0
	              },
	              VARIABLE
	            ]
	          }
	        ],
	        relevance: 0
	      }
	    ]
	  }
	};

/***/ },
/* 224 */
/***/ function(module, exports) {

	module.exports = // Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;
	
	function(hljs) {
	  var STRINGS = { // PB IDE color: #0080FF (Azure Radiance)
	    className: 'string',
	    begin: '(~)?"', end: '"',
	    illegal: '\\n'
	  };
	  var CONSTANTS = { // PB IDE color: #924B72 (Cannon Pink)
	    //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
	    className: 'symbol',
	    begin: '#[a-zA-Z_]\\w*\\$?'
	  };
	
	  return {
	    aliases: ['pb', 'pbi'],
	    keywords: // PB IDE color: #006666 (Blue Stone) + Bold
	      // The following keywords list was taken and adapted from GuShH's PureBasic language file for GeSHi...
	      'And As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerEndIf CompilerEndSelect ' +
	      'CompilerError CompilerIf CompilerSelect Continue Data DataSection EndDataSection Debug DebugLevel ' +
	      'Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM ' +
	      'EnableDebugger EnableExplicit End EndEnumeration EndIf EndImport EndInterface EndMacro EndProcedure ' +
	      'EndSelect EndStructure EndStructureUnion EndWith Enumeration Extends FakeReturn For Next ForEach ' +
	      'ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface Macro ' +
	      'NewList Not Or ProcedureReturn Protected Prototype ' +
	      'PrototypeC Read ReDim Repeat Until Restore Return Select Shared Static Step Structure StructureUnion ' +
	      'Swap To Wend While With XIncludeFile XOr ' +
	      'Procedure ProcedureC ProcedureCDLL ProcedureDLL Declare DeclareC DeclareCDLL DeclareDLL',
	    contains: [
	      // COMMENTS | PB IDE color: #00AAAA (Persian Green)
	      hljs.COMMENT(';', '$', {relevance: 0}),
	
	      { // PROCEDURES DEFINITIONS
	        className: 'function',
	        begin: '\\b(Procedure|Declare)(C|CDLL|DLL)?\\b',
	        end: '\\(',
	        excludeEnd: true,
	        returnBegin: true,
	        contains: [
	          { // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
	            className: 'keyword',
	            begin: '(Procedure|Declare)(C|CDLL|DLL)?',
	            excludeEnd: true
	          },
	          { // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
	            className: 'type',
	            begin: '\\.\\w*'
	            // end: ' ',
	          },
	          hljs.UNDERSCORE_TITLE_MODE // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
	        ]
	      },
	      STRINGS,
	      CONSTANTS
	    ]
	  };
	};

/***/ },
/* 225 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var PROMPT = {
	    className: 'meta',  begin: /^(>>>|\.\.\.) /
	  };
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE],
	    variants: [
	      {
	        begin: /(u|b)?r?'''/, end: /'''/,
	        contains: [PROMPT],
	        relevance: 10
	      },
	      {
	        begin: /(u|b)?r?"""/, end: /"""/,
	        contains: [PROMPT],
	        relevance: 10
	      },
	      {
	        begin: /(u|r|ur)'/, end: /'/,
	        relevance: 10
	      },
	      {
	        begin: /(u|r|ur)"/, end: /"/,
	        relevance: 10
	      },
	      {
	        begin: /(b|br)'/, end: /'/
	      },
	      {
	        begin: /(b|br)"/, end: /"/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };
	  var NUMBER = {
	    className: 'number', relevance: 0,
	    variants: [
	      {begin: hljs.BINARY_NUMBER_RE + '[lLjJ]?'},
	      {begin: '\\b(0o[0-7]+)[lLjJ]?'},
	      {begin: hljs.C_NUMBER_RE + '[lLjJ]?'}
	    ]
	  };
	  var PARAMS = {
	    className: 'params',
	    begin: /\(/, end: /\)/,
	    contains: ['self', PROMPT, NUMBER, STRING]
	  };
	  return {
	    aliases: ['py', 'gyp'],
	    keywords: {
	      keyword:
	        'and elif is global as in if from raise for except finally print import pass return ' +
	        'exec else break not with class assert yield try while continue del or def lambda ' +
	        'async await nonlocal|10 None True False',
	      built_in:
	        'Ellipsis NotImplemented'
	    },
	    illegal: /(<\/|->|\?)|=>/,
	    contains: [
	      PROMPT,
	      NUMBER,
	      STRING,
	      hljs.HASH_COMMENT_MODE,
	      {
	        variants: [
	          {className: 'function', beginKeywords: 'def'},
	          {className: 'class', beginKeywords: 'class'}
	        ],
	        end: /:/,
	        illegal: /[${=;\n,]/,
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          PARAMS,
	          {
	            begin: /->/, endsWithParent: true,
	            keywords: 'None'
	          }
	        ]
	      },
	      {
	        className: 'meta',
	        begin: /^[\t ]*@/, end: /$/
	      },
	      {
	        begin: /\b(print|exec)\(/ // don’t highlight keywords-turned-functions in Python 3
	      }
	    ]
	  };
	};

/***/ },
/* 226 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var Q_KEYWORDS = {
	  keyword:
	    'do while select delete by update from',
	  literal:
	    '0b 1b',
	  built_in:
	    'neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum',
	  type:
	    '`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid'
	  };
	  return {
	  aliases:['k', 'kdb'],
	  keywords: Q_KEYWORDS,
	  lexemes: /(`?)[A-Za-z0-9_]+\b/,
	  contains: [
	  hljs.C_LINE_COMMENT_MODE,
	    hljs.QUOTE_STRING_MODE,
	    hljs.C_NUMBER_MODE
	     ]
	  };
	};

/***/ },
/* 227 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	      keyword:
	        'in of on if for while finally var new function do return void else break catch ' +
	        'instanceof with throw case default try this switch continue typeof delete ' +
	        'let yield const export super debugger as async await import',
	      literal:
	        'true false null undefined NaN Infinity',
	      built_in:
	        'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
	        'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
	        'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
	        'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
	        'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
	        'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
	        'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +
	        'Behavior bool color coordinate date double enumeration font geocircle georectangle ' +
	        'geoshape int list matrix4x4 parent point quaternion real rect ' +
	        'size string url var variant vector2d vector3d vector4d' +
	        'Promise'
	    };
	
	  var QML_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9\\._]*';
	
	  // Isolate property statements. Ends at a :, =, ;, ,, a comment or end of line.
	  // Use property class.
	  var PROPERTY = {
	      className: 'keyword',
	      begin: '\\bproperty\\b',
	      starts: {
	        className: 'string',
	        end: '(:|=|;|,|//|/\\*|$)',
	        returnEnd: true
	      }
	  };
	
	  // Isolate signal statements. Ends at a ) a comment or end of line.
	  // Use property class.
	  var SIGNAL = {
	      className: 'keyword',
	      begin: '\\bsignal\\b',
	      starts: {
	        className: 'string',
	        end: '(\\(|:|=|;|,|//|/\\*|$)',
	        returnEnd: true
	      }
	  };
	
	  // id: is special in QML. When we see id: we want to mark the id: as attribute and
	  // emphasize the token following.
	  var ID_ID = {
	      className: 'attribute',
	      begin: '\\bid\\s*:',
	      starts: {
	        className: 'string',
	        end: QML_IDENT_RE,
	        returnEnd: false
	      }
	  };
	
	  // Find QML object attribute. An attribute is a QML identifier followed by :.
	  // Unfortunately it's hard to know where it ends, as it may contain scalars,
	  // objects, object definitions, or javascript. The true end is either when the parent
	  // ends or the next attribute is detected.
	  var QML_ATTRIBUTE = {
	    begin: QML_IDENT_RE + '\\s*:',
	    returnBegin: true,
	    contains: [
	      {
	        className: 'attribute',
	        begin: QML_IDENT_RE,
	        end: '\\s*:',
	        excludeEnd: true,
	        relevance: 0
	      }
	    ],
	    relevance: 0
	  };
	
	  // Find QML object. A QML object is a QML identifier followed by { and ends at the matching }.
	  // All we really care about is finding IDENT followed by { and just mark up the IDENT and ignore the {.
	  var QML_OBJECT = {
	    begin: QML_IDENT_RE + '\\s*{', end: '{',
	    returnBegin: true,
	    relevance: 0,
	    contains: [
	      hljs.inherit(hljs.TITLE_MODE, {begin: QML_IDENT_RE})
	    ]
	  };
	
	  return {
	    aliases: ['qt'],
	    case_insensitive: false,
	    keywords: KEYWORDS,
	    contains: [
	      {
	        className: 'meta',
	        begin: /^\s*['"]use (strict|asm)['"]/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      { // template string
	        className: 'string',
	        begin: '`', end: '`',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          {
	            className: 'subst',
	            begin: '\\$\\{', end: '\\}'
	          }
	        ]
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'number',
	        variants: [
	          { begin: '\\b(0[bB][01]+)' },
	          { begin: '\\b(0[oO][0-7]+)' },
	          { begin: hljs.C_NUMBER_RE }
	        ],
	        relevance: 0
	      },
	      { // "value" container
	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
	        keywords: 'return throw case',
	        contains: [
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.REGEXP_MODE,
	          { // E4X / JSX
	            begin: /</, end: />\s*[);\]]/,
	            relevance: 0,
	            subLanguage: 'xml'
	          }
	        ],
	        relevance: 0
	      },
	      SIGNAL,
	      PROPERTY,
	      {
	        className: 'function',
	        beginKeywords: 'function', end: /\{/, excludeEnd: true,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][0-9A-Za-z$_]*/}),
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/,
	            excludeBegin: true,
	            excludeEnd: true,
	            contains: [
	              hljs.C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE
	            ]
	          }
	        ],
	        illegal: /\[|%/
	      },
	      {
	        begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
	      },
	      ID_ID,
	      QML_ATTRIBUTE,
	      QML_OBJECT
	    ],
	    illegal: /#/
	  };
	};

/***/ },
/* 228 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var IDENT_RE = '([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*';
	
	  return {
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      {
	        begin: IDENT_RE,
	        lexemes: IDENT_RE,
	        keywords: {
	          keyword:
	            'function if in break next repeat else for return switch while try tryCatch ' +
	            'stop warning require library attach detach source setMethod setGeneric ' +
	            'setGroupGeneric setClass ...',
	          literal:
	            'NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 ' +
	            'NA_complex_|10'
	        },
	        relevance: 0
	      },
	      {
	        // hex value
	        className: 'number',
	        begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
	        relevance: 0
	      },
	      {
	        // explicit integer
	        className: 'number',
	        begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
	        relevance: 0
	      },
	      {
	        // number with trailing decimal
	        className: 'number',
	        begin: "\\d+\\.(?!\\d)(?:i\\b)?",
	        relevance: 0
	      },
	      {
	        // number
	        className: 'number',
	        begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
	        relevance: 0
	      },
	      {
	        // number with leading decimal
	        className: 'number',
	        begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
	        relevance: 0
	      },
	
	      {
	        // escaped identifier
	        begin: '`',
	        end: '`',
	        relevance: 0
	      },
	
	      {
	        className: 'string',
	        contains: [hljs.BACKSLASH_ESCAPE],
	        variants: [
	          {begin: '"', end: '"'},
	          {begin: "'", end: "'"}
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 229 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords:
	      'ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis ' +
	      'Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone ' +
	      'CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail ' +
	      'DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format ' +
	      'FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry ' +
	      'Hider Hyperboloid Identity Illuminate Imager Interior LightSource ' +
	      'MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte ' +
	      'MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option ' +
	      'Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples ' +
	      'PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection ' +
	      'Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ' +
	      'ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere ' +
	      'SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd ' +
	      'TransformPoints Translate TrimCurve WorldBegin WorldEnd',
	    illegal: '</',
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.C_NUMBER_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE
	    ]
	  };
	};

/***/ },
/* 230 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var IDENTIFIER = '[a-zA-Z-_][^\\n{]+\\{';
	
	  var PROPERTY = {
	    className: 'attribute',
	    begin: /[a-zA-Z-_]+/, end: /\s*:/, excludeEnd: true,
	    starts: {
	      end: ';',
	      relevance: 0,
	      contains: [
	        {
	          className: 'variable',
	          begin: /\.[a-zA-Z-_]+/
	        },
	        {
	          className: 'keyword',
	          begin: /\(optional\)/
	        }
	      ]
	    }
	  };
	
	  return {
	    aliases: ['graph', 'instances'],
	    case_insensitive: true,
	    keywords: 'import',
	    contains: [
	      // Facet sections
	      {
	        begin: '^facet ' + IDENTIFIER,
	        end: '}',
	        keywords: 'facet',
	        contains: [
	          PROPERTY,
	          hljs.HASH_COMMENT_MODE
	        ]
	      },
	
	      // Instance sections
	      {
	        begin: '^\\s*instance of ' + IDENTIFIER,
	        end: '}',
	        keywords: 'name count channels instance-data instance-state instance of',
	        illegal: /\S/,
	        contains: [
	          'self',
	          PROPERTY,
	          hljs.HASH_COMMENT_MODE
	        ]
	      },
	
	      // Component sections
	      {
	        begin: '^' + IDENTIFIER,
	        end: '}',
	        contains: [
	          PROPERTY,
	          hljs.HASH_COMMENT_MODE
	        ]
	      },
	
	      // Comments
	      hljs.HASH_COMMENT_MODE
	    ]
	  };
	};

/***/ },
/* 231 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: {
	      keyword:
	        'float color point normal vector matrix while for if do return else break extern continue',
	      built_in:
	        'abs acos ambient area asin atan atmosphere attribute calculatenormal ceil cellnoise ' +
	        'clamp comp concat cos degrees depth Deriv diffuse distance Du Dv environment exp ' +
	        'faceforward filterstep floor format fresnel incident length lightsource log match ' +
	        'max min mod noise normalize ntransform opposite option phong pnoise pow printf ' +
	        'ptlined radians random reflect refract renderinfo round setcomp setxcomp setycomp ' +
	        'setzcomp shadow sign sin smoothstep specular specularbrdf spline sqrt step tan ' +
	        'texture textureinfo trace transform vtransform xcomp ycomp zcomp'
	    },
	    illegal: '</',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '#', end: '$'
	      },
	      {
	        className: 'class',
	        beginKeywords: 'surface displacement light volume imager', end: '\\('
	      },
	      {
	        beginKeywords: 'illuminate illuminance gather', end: '\\('
	      }
	    ]
	  };
	};

/***/ },
/* 232 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: {
	       keyword: 'BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE ' +
	         'INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 ' +
	         'INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 ' +
	         'INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 ' +
	         'INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 ' +
	         'INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 ' +
	         'INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 ' +
	         'INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 ' +
	         'INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 ' +
	         'INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 ' +
	         'INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 ' +
	         'INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 ' +
	         'INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 ' +
	         'INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 ' +
	         'INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 ' +
	         'MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER ' +
	         'OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE ' +
	         'NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH ' +
	         'IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND ' +
	         'UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ' +
	         'ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE ' +
	         'GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE ' +
	         'SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING ' +
	         'DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF ' +
	         'MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY ' +
	         'YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE ' +
	         'COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR ' +
	         'READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ' +
	         'ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE ' +
	         'EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE ' +
	         'SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL ' +
	         'COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN ' +
	         'MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING ' +
	         'FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM ' +
	         'NUMDAYS READ_DATE STAGING',
	       built_in: 'IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML ' +
	         'DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT ' +
	         'DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE ' +
	         'DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT ' +
	         'DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'literal',
	        variants: [
	          {begin: '#\\s+[a-zA-Z\\ \\.]*', relevance: 0}, // looks like #-comment
	          {begin: '#[a-zA-Z\\ \\.]+'}
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 233 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var NUM_SUFFIX = '([uif](8|16|32|64|size))\?';
	  var KEYWORDS =
	    'alignof as be box break const continue crate do else enum extern ' +
	    'false fn for if impl in let loop match mod mut offsetof once priv ' +
	    'proc pub pure ref return self Self sizeof static struct super trait true ' +
	    'type typeof unsafe unsized use virtual while where yield move default ' +
	    'int i8 i16 i32 i64 isize ' +
	    'uint u8 u32 u64 usize ' +
	    'float f32 f64 ' +
	    'str char bool'
	  var BUILTINS =
	    // prelude
	    'Copy Send Sized Sync Drop Fn FnMut FnOnce drop Box ToOwned Clone ' +
	    'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' +
	    'Extend IntoIterator DoubleEndedIterator ExactSizeIterator Option ' +
	    'Result SliceConcatExt String ToString Vec ' +
	    // macros
	    'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' +
	    'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' +
	    'include_bin! include_str! line! local_data_key! module_path! ' +
	    'option_env! print! println! select! stringify! try! unimplemented! ' +
	    'unreachable! vec! write! writeln! macro_rules!';
	  return {
	    aliases: ['rs'],
	    keywords: {
	      keyword:
	        KEYWORDS,
	      literal:
	        'true false Some None Ok Err',
	      built_in:
	        BUILTINS
	    },
	    lexemes: hljs.IDENT_RE + '!?',
	    illegal: '</',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.COMMENT('/\\*', '\\*/', {contains: ['self']}),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {begin: /b?"/, illegal: null}),
	      {
	        className: 'string',
	        variants: [
	           { begin: /r(#*)".*?"\1(?!#)/ },
	           { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
	        ]
	      },
	      {
	        className: 'symbol',
	        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
	      },
	      {
	        className: 'number',
	        variants: [
	          { begin: '\\b0b([01_]+)' + NUM_SUFFIX },
	          { begin: '\\b0o([0-7_]+)' + NUM_SUFFIX },
	          { begin: '\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX },
	          { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +
	                   NUM_SUFFIX
	          }
	        ],
	        relevance: 0
	      },
	      {
	        className: 'function',
	        beginKeywords: 'fn', end: '(\\(|<)', excludeEnd: true,
	        contains: [hljs.UNDERSCORE_TITLE_MODE]
	      },
	      {
	        className: 'meta',
	        begin: '#\\!?\\[', end: '\\]',
	        contains: [
	          {
	            className: 'meta-string',
	            begin: /"/, end: /"/
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'type', end: ';',
	        contains: [
	          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})
	        ],
	        illegal: '\\S'
	      },
	      {
	        className: 'class',
	        beginKeywords: 'trait enum struct', end: '{',
	        contains: [
	          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})
	        ],
	        illegal: '[\\w\\d]'
	      },
	      {
	        begin: hljs.IDENT_RE + '::',
	        keywords: {built_in: BUILTINS}
	      },
	      {
	        begin: '->'
	      }
	    ]
	  };
	};

/***/ },
/* 234 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	
	  var ANNOTATION = { className: 'meta', begin: '@[A-Za-z]+' };
	
	  // used in strings for escaping/interpolation/substitution
	  var SUBST = {
	    className: 'subst',
	    variants: [
	      {begin: '\\$[A-Za-z0-9_]+'},
	      {begin: '\\${', end: '}'}
	    ]
	  };
	
	  var STRING = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"', end: '"',
	        illegal: '\\n',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      {
	        begin: '"""', end: '"""',
	        relevance: 10
	      },
	      {
	        begin: '[a-z]+"', end: '"',
	        illegal: '\\n',
	        contains: [hljs.BACKSLASH_ESCAPE, SUBST]
	      },
	      {
	        className: 'string',
	        begin: '[a-z]+"""', end: '"""',
	        contains: [SUBST],
	        relevance: 10
	      }
	    ]
	
	  };
	
	  var SYMBOL = {
	    className: 'symbol',
	    begin: '\'\\w[\\w\\d_]*(?!\')'
	  };
	
	  var TYPE = {
	    className: 'type',
	    begin: '\\b[A-Z][A-Za-z0-9_]*',
	    relevance: 0
	  };
	
	  var NAME = {
	    className: 'title',
	    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
	    relevance: 0
	  };
	
	  var CLASS = {
	    className: 'class',
	    beginKeywords: 'class object trait type',
	    end: /[:={\[\n;]/,
	    excludeEnd: true,
	    contains: [
	      {
	        beginKeywords: 'extends with',
	        relevance: 10
	      },
	      {
	        begin: /\[/,
	        end: /\]/,
	        excludeBegin: true,
	        excludeEnd: true,
	        relevance: 0,
	        contains: [TYPE]
	      },
	      {
	        className: 'params',
	        begin: /\(/,
	        end: /\)/,
	        excludeBegin: true,
	        excludeEnd: true,
	        relevance: 0,
	        contains: [TYPE]
	      },
	      NAME
	    ]
	  };
	
	  var METHOD = {
	    className: 'function',
	    beginKeywords: 'def',
	    end: /[:={\[(\n;]/,
	    excludeEnd: true,
	    contains: [NAME]
	  };
	
	  return {
	    keywords: {
	      literal: 'true false null',
	      keyword: 'type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      STRING,
	      SYMBOL,
	      TYPE,
	      METHOD,
	      CLASS,
	      hljs.C_NUMBER_MODE,
	      ANNOTATION
	    ]
	  };
	};

/***/ },
/* 235 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
	  var SCHEME_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+([./]\\d+)?';
	  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';
	  var BUILTINS = {
	    'builtin-name':
	      'case-lambda call/cc class define-class exit-handler field import ' +
	      'inherit init-field interface let*-values let-values let/ec mixin ' +
	      'opt-lambda override protect provide public rename require ' +
	      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +
	      'when with-syntax and begin call-with-current-continuation ' +
	      'call-with-input-file call-with-output-file case cond define ' +
	      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +
	      'let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / ' +
	      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +
	      'boolean? caar cadr call-with-input-file call-with-output-file ' +
	      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +
	      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +
	      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +
	      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +
	      'char? close-input-port close-output-port complex? cons cos ' +
	      'current-input-port current-output-port denominator display eof-object? ' +
	      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +
	      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +
	      'integer? interaction-environment lcm length list list->string ' +
	      'list->vector list-ref list-tail list? load log magnitude make-polar ' +
	      'make-rectangular make-string make-vector max member memq memv min ' +
	      'modulo negative? newline not null-environment null? number->string ' +
	      'number? numerator odd? open-input-file open-output-file output-port? ' +
	      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +
	      'rational? rationalize read read-char real-part real? remainder reverse ' +
	      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +
	      'string->list string->number string->symbol string-append string-ci<=? ' +
	      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +
	      'string-fill! string-length string-ref string-set! string<=? string<? ' +
	      'string=? string>=? string>? string? substring symbol->string symbol? ' +
	      'tan transcript-off transcript-on truncate values vector ' +
	      'vector->list vector-fill! vector-length vector-ref vector-set! ' +
	      'with-input-from-file with-output-to-file write write-char zero?'
	  };
	
	  var SHEBANG = {
	    className: 'meta',
	    begin: '^#!',
	    end: '$'
	  };
	
	  var LITERAL = {
	    className: 'literal',
	    begin: '(#t|#f|#\\\\' + SCHEME_IDENT_RE + '|#\\\\.)'
	  };
	
	  var NUMBER = {
	    className: 'number',
	    variants: [
	      { begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 },
	      { begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 },
	      { begin: '#b[0-1]+(/[0-1]+)?' },
	      { begin: '#o[0-7]+(/[0-7]+)?' },
	      { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }
	    ]
	  };
	
	  var STRING = hljs.QUOTE_STRING_MODE;
	
	  var REGULAR_EXPRESSION = {
	    className: 'regexp',
	    begin: '#[pr]x"',
	    end: '[^\\\\]"'
	  };
	
	  var COMMENT_MODES = [
	    hljs.COMMENT(
	      ';',
	      '$',
	      {
	        relevance: 0
	      }
	    ),
	    hljs.COMMENT('#\\|', '\\|#')
	  ];
	
	  var IDENT = {
	    begin: SCHEME_IDENT_RE,
	    relevance: 0
	  };
	
	  var QUOTED_IDENT = {
	    className: 'symbol',
	    begin: '\'' + SCHEME_IDENT_RE
	  };
	
	  var BODY = {
	    endsWithParent: true,
	    relevance: 0
	  };
	
	  var QUOTED_LIST = {
	    begin: /'/,
	    contains: [
	      {
	        begin: '\\(', end: '\\)',
	        contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]
	      }
	    ]
	  };
	
	  var NAME = {
	    className: 'name',
	    begin: SCHEME_IDENT_RE,
	    lexemes: SCHEME_IDENT_RE,
	    keywords: BUILTINS
	  };
	
	  var LAMBDA = {
	    begin: /lambda/, endsWithParent: true, returnBegin: true,
	    contains: [
	      NAME,
	      {
	        begin: /\(/, end: /\)/, endsParent: true,
	        contains: [IDENT],
	      }
	    ]
	  };
	
	  var LIST = {
	    variants: [
	      { begin: '\\(', end: '\\)' },
	      { begin: '\\[', end: '\\]' }
	    ],
	    contains: [LAMBDA, NAME, BODY]
	  };
	
	  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);
	
	  return {
	    illegal: /\S/,
	    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)
	  };
	};

/***/ },
/* 236 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	
	  var COMMON_CONTAINS = [
	    hljs.C_NUMBER_MODE,
	    {
	      className: 'string',
	      begin: '\'|\"', end: '\'|\"',
	      contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
	    }
	  ];
	
	  return {
	    aliases: ['sci'],
	    lexemes: /%?\w+/,
	    keywords: {
	      keyword: 'abort break case clear catch continue do elseif else endfunction end for function '+
	        'global if pause return resume select try then while',
	      literal:
	        '%f %F %t %T %pi %eps %inf %nan %e %i %z %s',
	      built_in: // Scilab has more than 2000 functions. Just list the most commons
	       'abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error '+
	       'exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty '+
	       'isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log '+
	       'max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real '+
	       'round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan '+
	       'type typename warning zeros matrix'
	    },
	    illegal: '("|#|/\\*|\\s+/\\w+)',
	    contains: [
	      {
	        className: 'function',
	        beginKeywords: 'function', end: '$',
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            className: 'params',
	            begin: '\\(', end: '\\)'
	          }
	        ]
	      },
	      {
	        begin: '[a-zA-Z_][a-zA-Z_0-9]*(\'+[\\.\']*|[\\.\']+)', end: '',
	        relevance: 0
	      },
	      {
	        begin: '\\[', end: '\\]\'*[\\.\']*',
	        relevance: 0,
	        contains: COMMON_CONTAINS
	      },
	      hljs.COMMENT('//', '$')
	    ].concat(COMMON_CONTAINS)
	  };
	};

/***/ },
/* 237 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
	  var VARIABLE = {
	    className: 'variable',
	    begin: '(\\$' + IDENT_RE + ')\\b'
	  };
	  var HEXCOLOR = {
	    className: 'number', begin: '#[0-9A-Fa-f]+'
	  };
	  var DEF_INTERNALS = {
	    className: 'attribute',
	    begin: '[A-Z\\_\\.\\-]+', end: ':',
	    excludeEnd: true,
	    illegal: '[^\\s]',
	    starts: {
	      endsWithParent: true, excludeEnd: true,
	      contains: [
	        HEXCOLOR,
	        hljs.CSS_NUMBER_MODE,
	        hljs.QUOTE_STRING_MODE,
	        hljs.APOS_STRING_MODE,
	        hljs.C_BLOCK_COMMENT_MODE,
	        {
	          className: 'meta', begin: '!important'
	        }
	      ]
	    }
	  };
	  return {
	    case_insensitive: true,
	    illegal: '[=/|\']',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'selector-id', begin: '\\#[A-Za-z0-9_-]+',
	        relevance: 0
	      },
	      {
	        className: 'selector-class', begin: '\\.[A-Za-z0-9_-]+',
	        relevance: 0
	      },
	      {
	        className: 'selector-attr', begin: '\\[', end: '\\]',
	        illegal: '$'
	      },
	      {
	        className: 'selector-tag', // begin: IDENT_RE, end: '[,|\\s]'
	        begin: '\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b',
	        relevance: 0
	      },
	      {
	        begin: ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)'
	      },
	      {
	        begin: '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)'
	      },
	      VARIABLE,
	      {
	        className: 'attribute',
	        begin: '\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b',
	        illegal: '[^\\s]'
	      },
	      {
	        begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b'
	      },
	      {
	        begin: ':', end: ';',
	        contains: [
	          VARIABLE,
	          HEXCOLOR,
	          hljs.CSS_NUMBER_MODE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          {
	            className: 'meta', begin: '!important'
	          }
	        ]
	      },
	      {
	        begin: '@', end: '[{;]',
	        keywords: 'mixin include extend for if else each while charset import debug media page content font-face namespace warn',
	        contains: [
	          VARIABLE,
	          hljs.QUOTE_STRING_MODE,
	          hljs.APOS_STRING_MODE,
	          HEXCOLOR,
	          hljs.CSS_NUMBER_MODE,
	          {
	            begin: '\\s[A-Za-z0-9_.-]+',
	            relevance: 0
	          }
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 238 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var smali_instr_low_prio = ['add', 'and', 'cmp', 'cmpg', 'cmpl', 'const', 'div', 'double', 'float', 'goto', 'if', 'int', 'long', 'move', 'mul', 'neg', 'new', 'nop', 'not', 'or', 'rem', 'return', 'shl', 'shr', 'sput', 'sub', 'throw', 'ushr', 'xor'];
	  var smali_instr_high_prio = ['aget', 'aput', 'array', 'check', 'execute', 'fill', 'filled', 'goto/16', 'goto/32', 'iget', 'instance', 'invoke', 'iput', 'monitor', 'packed', 'sget', 'sparse'];
	  var smali_keywords = ['transient', 'constructor', 'abstract', 'final', 'synthetic', 'public', 'private', 'protected', 'static', 'bridge', 'system'];
	  return {
	    aliases: ['smali'],
	    contains: [
	      {
	        className: 'string',
	        begin: '"', end: '"',
	        relevance: 0
	      },
	      hljs.COMMENT(
	        '#',
	        '$',
	        {
	          relevance: 0
	        }
	      ),
	      {
	        className: 'keyword',
	        variants: [
	          {begin: '\\s*\\.end\\s[a-zA-Z0-9]*'},
	          {begin: '^[ ]*\\.[a-zA-Z]*', relevance: 0},
	          {begin: '\\s:[a-zA-Z_0-9]*', relevance: 0},
	          {begin: '\\s(' + smali_keywords.join('|') + ')'}
	        ]
	      },
	      {
	        className: 'built_in',
	        variants : [
	          {
	            begin: '\\s('+smali_instr_low_prio.join('|')+')\\s'
	          },
	          {
	            begin: '\\s('+smali_instr_low_prio.join('|')+')((\\-|/)[a-zA-Z0-9]+)+\\s',
	            relevance: 10
	          },
	          {
	            begin: '\\s('+smali_instr_high_prio.join('|')+')((\\-|/)[a-zA-Z0-9]+)*\\s',
	            relevance: 10
	          },
	        ]
	      },
	      {
	        className: 'class',
	        begin: 'L[^\(;:\n]*;',
	        relevance: 0
	      },
	      {
	        begin: '[vp][0-9]+',
	      }
	    ]
	  };
	};

/***/ },
/* 239 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';
	  var CHAR = {
	    className: 'string',
	    begin: '\\$.{1}'
	  };
	  var SYMBOL = {
	    className: 'symbol',
	    begin: '#' + hljs.UNDERSCORE_IDENT_RE
	  };
	  return {
	    aliases: ['st'],
	    keywords: 'self super nil true false thisContext', // only 6
	    contains: [
	      hljs.COMMENT('"', '"'),
	      hljs.APOS_STRING_MODE,
	      {
	        className: 'type',
	        begin: '\\b[A-Z][A-Za-z0-9_]*',
	        relevance: 0
	      },
	      {
	        begin: VAR_IDENT_RE + ':',
	        relevance: 0
	      },
	      hljs.C_NUMBER_MODE,
	      SYMBOL,
	      CHAR,
	      {
	        // This looks more complicated than needed to avoid combinatorial
	        // explosion under V8. It effectively means `| var1 var2 ... |` with
	        // whitespace adjacent to `|` being optional.
	        begin: '\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\|',
	        returnBegin: true, end: /\|/,
	        illegal: /\S/,
	        contains: [{begin: '(\\|[ ]*)?' + VAR_IDENT_RE}]
	      },
	      {
	        begin: '\\#\\(', end: '\\)',
	        contains: [
	          hljs.APOS_STRING_MODE,
	          CHAR,
	          hljs.C_NUMBER_MODE,
	          SYMBOL
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 240 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['ml'],
	    keywords: {
	      keyword:
	        /* according to Definition of Standard ML 97  */
	        'abstype and andalso as case datatype do else end eqtype ' +
	        'exception fn fun functor handle if in include infix infixr ' +
	        'let local nonfix of op open orelse raise rec sharing sig ' +
	        'signature struct structure then type val with withtype where while',
	      built_in:
	        /* built-in types according to basis library */
	        'array bool char exn int list option order real ref string substring vector unit word',
	      literal:
	        'true false NONE SOME LESS EQUAL GREATER nil'
	    },
	    illegal: /\/\/|>>/,
	    lexemes: '[a-z_]\\w*!?',
	    contains: [
	      {
	        className: 'literal',
	        begin: /\[(\|\|)?\]|\(\)/,
	        relevance: 0
	      },
	      hljs.COMMENT(
	        '\\(\\*',
	        '\\*\\)',
	        {
	          contains: ['self']
	        }
	      ),
	      { /* type variable */
	        className: 'symbol',
	        begin: '\'[A-Za-z_](?!\')[\\w\']*'
	        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
	      },
	      { /* polymorphic variant */
	        className: 'type',
	        begin: '`[A-Z][\\w\']*'
	      },
	      { /* module or constructor */
	        className: 'type',
	        begin: '\\b[A-Z][\\w\']*',
	        relevance: 0
	      },
	      { /* don't color identifiers, but safely catch all identifiers with '*/
	        begin: '[a-z_]\\w*\'[\\w\']*'
	      },
	      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
	      {
	        className: 'number',
	        begin:
	          '\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +
	          '0[oO][0-7_]+[Lln]?|' +
	          '0[bB][01_]+[Lln]?|' +
	          '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
	        relevance: 0
	      },
	      {
	        begin: /[-=]>/ // relevance booster
	      }
	    ]
	  };
	};

/***/ },
/* 241 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var CPP = hljs.getLanguage('cpp').exports;
	
	  // In SQF strings, quotes matching the start are escaped by adding a consecutive.
	  // Example of single escaped quotes: " "" " and  ' '' '.
	  var STRINGS = {
	    className: 'string',
	    variants: [
	      {
	        begin: '"',
	        end: '"',
	        contains: [{begin: '""', relevance: 0}]
	      },
	      {
	        begin: '\'',
	        end: '\'',
	        contains: [{begin: '\'\'', relevance: 0}]
	      }
	    ]
	  };
	
	  return {
	    aliases: ['sqf'],
	    case_insensitive: true,
	    keywords: {
	      keyword:
	        'case catch default do else exit exitWith for forEach from if ' +
	        'switch then throw to try while with',
	      built_in:
	        'or plus abs accTime acos action actionKeys actionKeysImages ' +
	        'actionKeysNames actionKeysNamesArray actionName activateAddons ' +
	        'activatedAddons activateKey addAction addBackpack addBackpackCargo ' +
	        'addBackpackCargoGlobal addBackpackGlobal addCamShake ' +
	        'addCuratorAddons addCuratorCameraArea addCuratorEditableObjects ' +
	        'addCuratorEditingArea addCuratorPoints addEditorObject ' +
	        'addEventHandler addGoggles addGroupIcon addHandgunItem addHeadgear ' +
	        'addItem addItemCargo addItemCargoGlobal addItemPool ' +
	        'addItemToBackpack addItemToUniform addItemToVest addLiveStats ' +
	        'addMagazine addMagazine array addMagazineAmmoCargo ' +
	        'addMagazineCargo addMagazineCargoGlobal addMagazineGlobal ' +
	        'addMagazinePool addMagazines addMagazineTurret addMenu addMenuItem ' +
	        'addMissionEventHandler addMPEventHandler addMusicEventHandler ' +
	        'addPrimaryWeaponItem addPublicVariableEventHandler addRating ' +
	        'addResources addScore addScoreSide addSecondaryWeaponItem ' +
	        'addSwitchableUnit addTeamMember addToRemainsCollector addUniform ' +
	        'addVehicle addVest addWaypoint addWeapon addWeaponCargo ' +
	        'addWeaponCargoGlobal addWeaponGlobal addWeaponPool addWeaponTurret ' +
	        'agent agents AGLToASL aimedAtTarget aimPos airDensityRTD ' +
	        'airportSide AISFinishHeal alive allControls allCurators allDead ' +
	        'allDeadMen allDisplays allGroups allMapMarkers allMines ' +
	        'allMissionObjects allow3DMode allowCrewInImmobile ' +
	        'allowCuratorLogicIgnoreAreas allowDamage allowDammage ' +
	        'allowFileOperations allowFleeing allowGetIn allPlayers allSites ' +
	        'allTurrets allUnits allUnitsUAV allVariables ammo and animate ' +
	        'animateDoor animationPhase animationState append armoryPoints ' +
	        'arrayIntersect asin ASLToAGL ASLToATL assert assignAsCargo ' +
	        'assignAsCargoIndex assignAsCommander assignAsDriver assignAsGunner ' +
	        'assignAsTurret assignCurator assignedCargo assignedCommander ' +
	        'assignedDriver assignedGunner assignedItems assignedTarget ' +
	        'assignedTeam assignedVehicle assignedVehicleRole assignItem ' +
	        'assignTeam assignToAirport atan atan2 atg ATLToASL attachedObject ' +
	        'attachedObjects attachedTo attachObject attachTo attackEnabled ' +
	        'backpack backpackCargo backpackContainer backpackItems ' +
	        'backpackMagazines backpackSpaceFor behaviour benchmark binocular ' +
	        'blufor boundingBox boundingBoxReal boundingCenter breakOut breakTo ' +
	        'briefingName buildingExit buildingPos buttonAction buttonSetAction ' +
	        'cadetMode call callExtension camCommand camCommit ' +
	        'camCommitPrepared camCommitted camConstuctionSetParams camCreate ' +
	        'camDestroy cameraEffect cameraEffectEnableHUD cameraInterest ' +
	        'cameraOn cameraView campaignConfigFile camPreload camPreloaded ' +
	        'camPrepareBank camPrepareDir camPrepareDive camPrepareFocus ' +
	        'camPrepareFov camPrepareFovRange camPreparePos camPrepareRelPos ' +
	        'camPrepareTarget camSetBank camSetDir camSetDive camSetFocus ' +
	        'camSetFov camSetFovRange camSetPos camSetRelPos camSetTarget ' +
	        'camTarget camUseNVG canAdd canAddItemToBackpack ' +
	        'canAddItemToUniform canAddItemToVest cancelSimpleTaskDestination ' +
	        'canFire canMove canSlingLoad canStand canUnloadInCombat captive ' +
	        'captiveNum cbChecked cbSetChecked ceil cheatsEnabled ' +
	        'checkAIFeature civilian className clearAllItemsFromBackpack ' +
	        'clearBackpackCargo clearBackpackCargoGlobal clearGroupIcons ' +
	        'clearItemCargo clearItemCargoGlobal clearItemPool ' +
	        'clearMagazineCargo clearMagazineCargoGlobal clearMagazinePool ' +
	        'clearOverlay clearRadio clearWeaponCargo clearWeaponCargoGlobal ' +
	        'clearWeaponPool closeDialog closeDisplay closeOverlay ' +
	        'collapseObjectTree combatMode commandArtilleryFire commandChat ' +
	        'commander commandFire commandFollow commandFSM commandGetOut ' +
	        'commandingMenu commandMove commandRadio commandStop commandTarget ' +
	        'commandWatch comment commitOverlay compile compileFinal ' +
	        'completedFSM composeText configClasses configFile configHierarchy ' +
	        'configName configProperties configSourceMod configSourceModList ' +
	        'connectTerminalToUAV controlNull controlsGroupCtrl ' +
	        'copyFromClipboard copyToClipboard copyWaypoints cos count ' +
	        'countEnemy countFriendly countSide countType countUnknown ' +
	        'createAgent createCenter createDialog createDiaryLink ' +
	        'createDiaryRecord createDiarySubject createDisplay ' +
	        'createGearDialog createGroup createGuardedPoint createLocation ' +
	        'createMarker createMarkerLocal createMenu createMine ' +
	        'createMissionDisplay createSimpleTask createSite createSoundSource ' +
	        'createTask createTeam createTrigger createUnit createUnit array ' +
	        'createVehicle createVehicle array createVehicleCrew ' +
	        'createVehicleLocal crew ctrlActivate ctrlAddEventHandler ' +
	        'ctrlAutoScrollDelay ctrlAutoScrollRewind ctrlAutoScrollSpeed ' +
	        'ctrlChecked ctrlClassName ctrlCommit ctrlCommitted ctrlCreate ' +
	        'ctrlDelete ctrlEnable ctrlEnabled ctrlFade ctrlHTMLLoaded ctrlIDC ' +
	        'ctrlIDD ctrlMapAnimAdd ctrlMapAnimClear ctrlMapAnimCommit ' +
	        'ctrlMapAnimDone ctrlMapCursor ctrlMapMouseOver ctrlMapScale ' +
	        'ctrlMapScreenToWorld ctrlMapWorldToScreen ctrlModel ' +
	        'ctrlModelDirAndUp ctrlModelScale ctrlParent ctrlPosition ' +
	        'ctrlRemoveAllEventHandlers ctrlRemoveEventHandler ctrlScale ' +
	        'ctrlSetActiveColor ctrlSetAutoScrollDelay ctrlSetAutoScrollRewind ' +
	        'ctrlSetAutoScrollSpeed ctrlSetBackgroundColor ctrlSetChecked ' +
	        'ctrlSetEventHandler ctrlSetFade ctrlSetFocus ctrlSetFont ' +
	        'ctrlSetFontH1 ctrlSetFontH1B ctrlSetFontH2 ctrlSetFontH2B ' +
	        'ctrlSetFontH3 ctrlSetFontH3B ctrlSetFontH4 ctrlSetFontH4B ' +
	        'ctrlSetFontH5 ctrlSetFontH5B ctrlSetFontH6 ctrlSetFontH6B ' +
	        'ctrlSetFontHeight ctrlSetFontHeightH1 ctrlSetFontHeightH2 ' +
	        'ctrlSetFontHeightH3 ctrlSetFontHeightH4 ctrlSetFontHeightH5 ' +
	        'ctrlSetFontHeightH6 ctrlSetFontP ctrlSetFontPB ' +
	        'ctrlSetForegroundColor ctrlSetModel ctrlSetModelDirAndUp ' +
	        'ctrlSetModelScale ctrlSetPosition ctrlSetScale ' +
	        'ctrlSetStructuredText ctrlSetText ctrlSetTextColor ctrlSetTooltip ' +
	        'ctrlSetTooltipColorBox ctrlSetTooltipColorShade ' +
	        'ctrlSetTooltipColorText ctrlShow ctrlShown ctrlText ctrlTextHeight ' +
	        'ctrlType ctrlVisible curatorAddons curatorCamera curatorCameraArea ' +
	        'curatorCameraAreaCeiling curatorCoef curatorEditableObjects ' +
	        'curatorEditingArea curatorEditingAreaType curatorMouseOver ' +
	        'curatorPoints curatorRegisteredObjects curatorSelected ' +
	        'curatorWaypointCost currentChannel currentCommand currentMagazine ' +
	        'currentMagazineDetail currentMagazineDetailTurret ' +
	        'currentMagazineTurret currentMuzzle currentNamespace currentTask ' +
	        'currentTasks currentThrowable currentVisionMode currentWaypoint ' +
	        'currentWeapon currentWeaponMode currentWeaponTurret currentZeroing ' +
	        'cursorTarget customChat customRadio cutFadeOut cutObj cutRsc ' +
	        'cutText damage date dateToNumber daytime deActivateKey ' +
	        'debriefingText debugFSM debugLog deg deleteAt deleteCenter ' +
	        'deleteCollection deleteEditorObject deleteGroup deleteIdentity ' +
	        'deleteLocation deleteMarker deleteMarkerLocal deleteRange ' +
	        'deleteResources deleteSite deleteStatus deleteTeam deleteVehicle ' +
	        'deleteVehicleCrew deleteWaypoint detach detectedMines ' +
	        'diag activeMissionFSMs diag activeSQFScripts diag activeSQSScripts ' +
	        'diag captureFrame diag captureSlowFrame diag fps diag fpsMin ' +
	        'diag frameNo diag log diag logSlowFrame diag tickTime dialog ' +
	        'diarySubjectExists didJIP didJIPOwner difficulty difficultyEnabled ' +
	        'difficultyEnabledRTD direction directSay disableAI ' +
	        'disableCollisionWith disableConversation disableDebriefingStats ' +
	        'disableSerialization disableTIEquipment disableUAVConnectability ' +
	        'disableUserInput displayAddEventHandler displayCtrl displayNull ' +
	        'displayRemoveAllEventHandlers displayRemoveEventHandler ' +
	        'displaySetEventHandler dissolveTeam distance distance2D ' +
	        'distanceSqr distributionRegion doArtilleryFire doFire doFollow ' +
	        'doFSM doGetOut doMove doorPhase doStop doTarget doWatch drawArrow ' +
	        'drawEllipse drawIcon drawIcon3D drawLine drawLine3D drawLink ' +
	        'drawLocation drawRectangle driver drop east echo editObject ' +
	        'editorSetEventHandler effectiveCommander emptyPositions enableAI ' +
	        'enableAIFeature enableAttack enableCamShake enableCaustics ' +
	        'enableCollisionWith enableCopilot enableDebriefingStats ' +
	        'enableDiagLegend enableEndDialog enableEngineArtillery ' +
	        'enableEnvironment enableFatigue enableGunLights enableIRLasers ' +
	        'enableMimics enablePersonTurret enableRadio enableReload ' +
	        'enableRopeAttach enableSatNormalOnDetail enableSaving ' +
	        'enableSentences enableSimulation enableSimulationGlobal ' +
	        'enableTeamSwitch enableUAVConnectability enableUAVWaypoints ' +
	        'endLoadingScreen endMission engineOn enginesIsOnRTD enginesRpmRTD ' +
	        'enginesTorqueRTD entities estimatedEndServerTime estimatedTimeLeft ' +
	        'evalObjectArgument everyBackpack everyContainer exec ' +
	        'execEditorScript execFSM execVM exp expectedDestination ' +
	        'eyeDirection eyePos face faction fadeMusic fadeRadio fadeSound ' +
	        'fadeSpeech failMission fillWeaponsFromPool find findCover ' +
	        'findDisplay findEditorObject findEmptyPosition ' +
	        'findEmptyPositionReady findNearestEnemy finishMissionInit finite ' +
	        'fire fireAtTarget firstBackpack flag flagOwner fleeing floor ' +
	        'flyInHeight fog fogForecast fogParams forceAddUniform forceEnd ' +
	        'forceMap forceRespawn forceSpeed forceWalk forceWeaponFire ' +
	        'forceWeatherChange forEachMember forEachMemberAgent ' +
	        'forEachMemberTeam format formation formationDirection ' +
	        'formationLeader formationMembers formationPosition formationTask ' +
	        'formatText formLeader freeLook fromEditor fuel fullCrew ' +
	        'gearSlotAmmoCount gearSlotData getAllHitPointsDamage getAmmoCargo ' +
	        'getArray getArtilleryAmmo getArtilleryComputerSettings ' +
	        'getArtilleryETA getAssignedCuratorLogic getAssignedCuratorUnit ' +
	        'getBackpackCargo getBleedingRemaining getBurningValue ' +
	        'getCargoIndex getCenterOfMass getClientState getConnectedUAV ' +
	        'getDammage getDescription getDir getDirVisual getDLCs ' +
	        'getEditorCamera getEditorMode getEditorObjectScope ' +
	        'getElevationOffset getFatigue getFriend getFSMVariable ' +
	        'getFuelCargo getGroupIcon getGroupIconParams getGroupIcons ' +
	        'getHideFrom getHit getHitIndex getHitPointDamage getItemCargo ' +
	        'getMagazineCargo getMarkerColor getMarkerPos getMarkerSize ' +
	        'getMarkerType getMass getModelInfo getNumber getObjectArgument ' +
	        'getObjectChildren getObjectDLC getObjectMaterials getObjectProxy ' +
	        'getObjectTextures getObjectType getObjectViewDistance ' +
	        'getOxygenRemaining getPersonUsedDLCs getPlayerChannel getPlayerUID ' +
	        'getPos getPosASL getPosASLVisual getPosASLW getPosATL ' +
	        'getPosATLVisual getPosVisual getPosWorld getRepairCargo ' +
	        'getResolution getShadowDistance getSlingLoad getSpeed ' +
	        'getSuppression getTerrainHeightASL getText getVariable ' +
	        'getWeaponCargo getWPPos glanceAt globalChat globalRadio goggles ' +
	        'goto group groupChat groupFromNetId groupIconSelectable ' +
	        'groupIconsVisible groupId groupOwner groupRadio groupSelectedUnits ' +
	        'groupSelectUnit grpNull gunner gusts halt handgunItems ' +
	        'handgunMagazine handgunWeapon handsHit hasInterface hasWeapon ' +
	        'hcAllGroups hcGroupParams hcLeader hcRemoveAllGroups hcRemoveGroup ' +
	        'hcSelected hcSelectGroup hcSetGroup hcShowBar hcShownBar headgear ' +
	        'hideBody hideObject hideObjectGlobal hint hintC hintCadet ' +
	        'hintSilent hmd hostMission htmlLoad HUDMovementLevels humidity ' +
	        'image importAllGroups importance in incapacitatedState independent ' +
	        'inflame inflamed inGameUISetEventHandler inheritsFrom ' +
	        'initAmbientLife inputAction inRangeOfArtillery insertEditorObject ' +
	        'intersect isAbleToBreathe isAgent isArray isAutoHoverOn ' +
	        'isAutonomous isAutotest isBleeding isBurning isClass ' +
	        'isCollisionLightOn isCopilotEnabled isDedicated isDLCAvailable ' +
	        'isEngineOn isEqualTo isFlashlightOn isFlatEmpty isForcedWalk ' +
	        'isFormationLeader isHidden isInRemainsCollector ' +
	        'isInstructorFigureEnabled isIRLaserOn isKeyActive isKindOf ' +
	        'isLightOn isLocalized isManualFire isMarkedForCollection ' +
	        'isMultiplayer isNil isNull isNumber isObjectHidden isObjectRTD ' +
	        'isOnRoad isPipEnabled isPlayer isRealTime isServer ' +
	        'isShowing3DIcons isSteamMission isStreamFriendlyUIEnabled isText ' +
	        'isTouchingGround isTurnedOut isTutHintsEnabled isUAVConnectable ' +
	        'isUAVConnected isUniformAllowed isWalking isWeaponDeployed ' +
	        'isWeaponRested itemCargo items itemsWithMagazines join joinAs ' +
	        'joinAsSilent joinSilent joinString kbAddDatabase ' +
	        'kbAddDatabaseTargets kbAddTopic kbHasTopic kbReact kbRemoveTopic ' +
	        'kbTell kbWasSaid keyImage keyName knowsAbout land landAt ' +
	        'landResult language laserTarget lbAdd lbClear lbColor lbCurSel ' +
	        'lbData lbDelete lbIsSelected lbPicture lbSelection lbSetColor ' +
	        'lbSetCurSel lbSetData lbSetPicture lbSetPictureColor ' +
	        'lbSetPictureColorDisabled lbSetPictureColorSelected ' +
	        'lbSetSelectColor lbSetSelectColorRight lbSetSelected lbSetTooltip ' +
	        'lbSetValue lbSize lbSort lbSortByValue lbText lbValue leader ' +
	        'leaderboardDeInit leaderboardGetRows leaderboardInit leaveVehicle ' +
	        'libraryCredits libraryDisclaimers lifeState lightAttachObject ' +
	        'lightDetachObject lightIsOn lightnings limitSpeed linearConversion ' +
	        'lineBreak lineIntersects lineIntersectsObjs lineIntersectsSurfaces ' +
	        'lineIntersectsWith linkItem list listObjects ln lnbAddArray ' +
	        'lnbAddColumn lnbAddRow lnbClear lnbColor lnbCurSelRow lnbData ' +
	        'lnbDeleteColumn lnbDeleteRow lnbGetColumnsPosition lnbPicture ' +
	        'lnbSetColor lnbSetColumnsPos lnbSetCurSelRow lnbSetData ' +
	        'lnbSetPicture lnbSetText lnbSetValue lnbSize lnbText lnbValue load ' +
	        'loadAbs loadBackpack loadFile loadGame loadIdentity loadMagazine ' +
	        'loadOverlay loadStatus loadUniform loadVest local localize ' +
	        'locationNull locationPosition lock lockCameraTo lockCargo ' +
	        'lockDriver locked lockedCargo lockedDriver lockedTurret lockTurret ' +
	        'lockWP log logEntities lookAt lookAtPos magazineCargo magazines ' +
	        'magazinesAllTurrets magazinesAmmo magazinesAmmoCargo ' +
	        'magazinesAmmoFull magazinesDetail magazinesDetailBackpack ' +
	        'magazinesDetailUniform magazinesDetailVest magazinesTurret ' +
	        'magazineTurretAmmo mapAnimAdd mapAnimClear mapAnimCommit ' +
	        'mapAnimDone mapCenterOnCamera mapGridPosition ' +
	        'markAsFinishedOnSteam markerAlpha markerBrush markerColor ' +
	        'markerDir markerPos markerShape markerSize markerText markerType ' +
	        'max members min mineActive mineDetectedBy missionConfigFile ' +
	        'missionName missionNamespace missionStart mod modelToWorld ' +
	        'modelToWorldVisual moonIntensity morale move moveInAny moveInCargo ' +
	        'moveInCommander moveInDriver moveInGunner moveInTurret ' +
	        'moveObjectToEnd moveOut moveTime moveTo moveToCompleted ' +
	        'moveToFailed musicVolume name name location nameSound nearEntities ' +
	        'nearestBuilding nearestLocation nearestLocations ' +
	        'nearestLocationWithDubbing nearestObject nearestObjects ' +
	        'nearObjects nearObjectsReady nearRoads nearSupplies nearTargets ' +
	        'needReload netId netObjNull newOverlay nextMenuItemIndex ' +
	        'nextWeatherChange nMenuItems not numberToDate objectCurators ' +
	        'objectFromNetId objectParent objNull objStatus onBriefingGroup ' +
	        'onBriefingNotes onBriefingPlan onBriefingTeamSwitch ' +
	        'onCommandModeChanged onDoubleClick onEachFrame onGroupIconClick ' +
	        'onGroupIconOverEnter onGroupIconOverLeave ' +
	        'onHCGroupSelectionChanged onMapSingleClick onPlayerConnected ' +
	        'onPlayerDisconnected onPreloadFinished onPreloadStarted ' +
	        'onShowNewObject onTeamSwitch openCuratorInterface openMap ' +
	        'openYoutubeVideo opfor or orderGetIn overcast overcastForecast ' +
	        'owner param params parseNumber parseText parsingNamespace ' +
	        'particlesQuality pi pickWeaponPool pitch playableSlotsNumber ' +
	        'playableUnits playAction playActionNow player playerRespawnTime ' +
	        'playerSide playersNumber playGesture playMission playMove ' +
	        'playMoveNow playMusic playScriptedMission playSound playSound3D ' +
	        'position positionCameraToWorld posScreenToWorld posWorldToScreen ' +
	        'ppEffectAdjust ppEffectCommit ppEffectCommitted ppEffectCreate ' +
	        'ppEffectDestroy ppEffectEnable ppEffectForceInNVG precision ' +
	        'preloadCamera preloadObject preloadSound preloadTitleObj ' +
	        'preloadTitleRsc preprocessFile preprocessFileLineNumbers ' +
	        'primaryWeapon primaryWeaponItems primaryWeaponMagazine priority ' +
	        'private processDiaryLink productVersion profileName ' +
	        'profileNamespace profileNameSteam progressLoadingScreen ' +
	        'progressPosition progressSetPosition publicVariable ' +
	        'publicVariableClient publicVariableServer pushBack putWeaponPool ' +
	        'queryItemsPool queryMagazinePool queryWeaponPool rad ' +
	        'radioChannelAdd radioChannelCreate radioChannelRemove ' +
	        'radioChannelSetCallSign radioChannelSetLabel radioVolume rain ' +
	        'rainbow random rank rankId rating rectangular registeredTasks ' +
	        'registerTask reload reloadEnabled remoteControl remoteExec ' +
	        'remoteExecCall removeAction removeAllActions ' +
	        'removeAllAssignedItems removeAllContainers removeAllCuratorAddons ' +
	        'removeAllCuratorCameraAreas removeAllCuratorEditingAreas ' +
	        'removeAllEventHandlers removeAllHandgunItems removeAllItems ' +
	        'removeAllItemsWithMagazines removeAllMissionEventHandlers ' +
	        'removeAllMPEventHandlers removeAllMusicEventHandlers ' +
	        'removeAllPrimaryWeaponItems removeAllWeapons removeBackpack ' +
	        'removeBackpackGlobal removeCuratorAddons removeCuratorCameraArea ' +
	        'removeCuratorEditableObjects removeCuratorEditingArea ' +
	        'removeDrawIcon removeDrawLinks removeEventHandler ' +
	        'removeFromRemainsCollector removeGoggles removeGroupIcon ' +
	        'removeHandgunItem removeHeadgear removeItem removeItemFromBackpack ' +
	        'removeItemFromUniform removeItemFromVest removeItems ' +
	        'removeMagazine removeMagazineGlobal removeMagazines ' +
	        'removeMagazinesTurret removeMagazineTurret removeMenuItem ' +
	        'removeMissionEventHandler removeMPEventHandler ' +
	        'removeMusicEventHandler removePrimaryWeaponItem ' +
	        'removeSecondaryWeaponItem removeSimpleTask removeSwitchableUnit ' +
	        'removeTeamMember removeUniform removeVest removeWeapon ' +
	        'removeWeaponGlobal removeWeaponTurret requiredVersion ' +
	        'resetCamShake resetSubgroupDirection resistance resize resources ' +
	        'respawnVehicle restartEditorCamera reveal revealMine reverse ' +
	        'reversedMouseY roadsConnectedTo roleDescription ' +
	        'ropeAttachedObjects ropeAttachedTo ropeAttachEnabled ropeAttachTo ' +
	        'ropeCreate ropeCut ropeEndPosition ropeLength ropes ropeUnwind ' +
	        'ropeUnwound rotorsForcesRTD rotorsRpmRTD round runInitScript ' +
	        'safeZoneH safeZoneW safeZoneWAbs safeZoneX safeZoneXAbs safeZoneY ' +
	        'saveGame saveIdentity saveJoysticks saveOverlay ' +
	        'saveProfileNamespace saveStatus saveVar savingEnabled say say2D ' +
	        'say3D scopeName score scoreSide screenToWorld scriptDone ' +
	        'scriptName scriptNull scudState secondaryWeapon ' +
	        'secondaryWeaponItems secondaryWeaponMagazine select ' +
	        'selectBestPlaces selectDiarySubject selectedEditorObjects ' +
	        'selectEditorObject selectionPosition selectLeader selectNoPlayer ' +
	        'selectPlayer selectWeapon selectWeaponTurret sendAUMessage ' +
	        'sendSimpleCommand sendTask sendTaskResult sendUDPMessage ' +
	        'serverCommand serverCommandAvailable serverCommandExecutable ' +
	        'serverName serverTime set setAccTime setAirportSide setAmmo ' +
	        'setAmmoCargo setAperture setApertureNew setArmoryPoints ' +
	        'setAttributes setAutonomous setBehaviour setBleedingRemaining ' +
	        'setCameraInterest setCamShakeDefParams setCamShakeParams ' +
	        'setCamUseTi setCaptive setCenterOfMass setCollisionLight ' +
	        'setCombatMode setCompassOscillation setCuratorCameraAreaCeiling ' +
	        'setCuratorCoef setCuratorEditingAreaType setCuratorWaypointCost ' +
	        'setCurrentChannel setCurrentTask setCurrentWaypoint setDamage ' +
	        'setDammage setDate setDebriefingText setDefaultCamera ' +
	        'setDestination setDetailMapBlendPars setDir setDirection ' +
	        'setDrawIcon setDropInterval setEditorMode setEditorObjectScope ' +
	        'setEffectCondition setFace setFaceAnimation setFatigue ' +
	        'setFlagOwner setFlagSide setFlagTexture setFog setFog array ' +
	        'setFormation setFormationTask setFormDir setFriend setFromEditor ' +
	        'setFSMVariable setFuel setFuelCargo setGroupIcon ' +
	        'setGroupIconParams setGroupIconsSelectable setGroupIconsVisible ' +
	        'setGroupId setGroupIdGlobal setGroupOwner setGusts setHideBehind ' +
	        'setHit setHitIndex setHitPointDamage setHorizonParallaxCoef ' +
	        'setHUDMovementLevels setIdentity setImportance setLeader ' +
	        'setLightAmbient setLightAttenuation setLightBrightness ' +
	        'setLightColor setLightDayLight setLightFlareMaxDistance ' +
	        'setLightFlareSize setLightIntensity setLightnings setLightUseFlare ' +
	        'setLocalWindParams setMagazineTurretAmmo setMarkerAlpha ' +
	        'setMarkerAlphaLocal setMarkerBrush setMarkerBrushLocal ' +
	        'setMarkerColor setMarkerColorLocal setMarkerDir setMarkerDirLocal ' +
	        'setMarkerPos setMarkerPosLocal setMarkerShape setMarkerShapeLocal ' +
	        'setMarkerSize setMarkerSizeLocal setMarkerText setMarkerTextLocal ' +
	        'setMarkerType setMarkerTypeLocal setMass setMimic setMousePosition ' +
	        'setMusicEffect setMusicEventHandler setName setNameSound ' +
	        'setObjectArguments setObjectMaterial setObjectProxy ' +
	        'setObjectTexture setObjectTextureGlobal setObjectViewDistance ' +
	        'setOvercast setOwner setOxygenRemaining setParticleCircle ' +
	        'setParticleClass setParticleFire setParticleParams ' +
	        'setParticleRandom setPilotLight setPiPEffect setPitch setPlayable ' +
	        'setPlayerRespawnTime setPos setPosASL setPosASL2 setPosASLW ' +
	        'setPosATL setPosition setPosWorld setRadioMsg setRain setRainbow ' +
	        'setRandomLip setRank setRectangular setRepairCargo ' +
	        'setShadowDistance setSide setSimpleTaskDescription ' +
	        'setSimpleTaskDestination setSimpleTaskTarget setSimulWeatherLayers ' +
	        'setSize setSkill setSkill array setSlingLoad setSoundEffect ' +
	        'setSpeaker setSpeech setSpeedMode setStatValue setSuppression ' +
	        'setSystemOfUnits setTargetAge setTaskResult setTaskState ' +
	        'setTerrainGrid setText setTimeMultiplier setTitleEffect ' +
	        'setTriggerActivation setTriggerArea setTriggerStatements ' +
	        'setTriggerText setTriggerTimeout setTriggerType setType ' +
	        'setUnconscious setUnitAbility setUnitPos setUnitPosWeak ' +
	        'setUnitRank setUnitRecoilCoefficient setUnloadInCombat ' +
	        'setUserActionText setVariable setVectorDir setVectorDirAndUp ' +
	        'setVectorUp setVehicleAmmo setVehicleAmmoDef setVehicleArmor ' +
	        'setVehicleId setVehicleLock setVehiclePosition setVehicleTiPars ' +
	        'setVehicleVarName setVelocity setVelocityTransformation ' +
	        'setViewDistance setVisibleIfTreeCollapsed setWaves ' +
	        'setWaypointBehaviour setWaypointCombatMode ' +
	        'setWaypointCompletionRadius setWaypointDescription ' +
	        'setWaypointFormation setWaypointHousePosition ' +
	        'setWaypointLoiterRadius setWaypointLoiterType setWaypointName ' +
	        'setWaypointPosition setWaypointScript setWaypointSpeed ' +
	        'setWaypointStatements setWaypointTimeout setWaypointType ' +
	        'setWaypointVisible setWeaponReloadingTime setWind setWindDir ' +
	        'setWindForce setWindStr setWPPos show3DIcons showChat ' +
	        'showCinemaBorder showCommandingMenu showCompass showCuratorCompass ' +
	        'showGPS showHUD showLegend showMap shownArtilleryComputer ' +
	        'shownChat shownCompass shownCuratorCompass showNewEditorObject ' +
	        'shownGPS shownHUD shownMap shownPad shownRadio shownUAVFeed ' +
	        'shownWarrant shownWatch showPad showRadio showSubtitles ' +
	        'showUAVFeed showWarrant showWatch showWaypoint side sideChat ' +
	        'sideEnemy sideFriendly sideLogic sideRadio sideUnknown simpleTasks ' +
	        'simulationEnabled simulCloudDensity simulCloudOcclusion ' +
	        'simulInClouds simulWeatherSync sin size sizeOf skill skillFinal ' +
	        'skipTime sleep sliderPosition sliderRange sliderSetPosition ' +
	        'sliderSetRange sliderSetSpeed sliderSpeed slingLoadAssistantShown ' +
	        'soldierMagazines someAmmo sort soundVolume spawn speaker speed ' +
	        'speedMode splitString sqrt squadParams stance startLoadingScreen ' +
	        'step stop stopped str sunOrMoon supportInfo suppressFor ' +
	        'surfaceIsWater surfaceNormal surfaceType swimInDepth ' +
	        'switchableUnits switchAction switchCamera switchGesture ' +
	        'switchLight switchMove synchronizedObjects synchronizedTriggers ' +
	        'synchronizedWaypoints synchronizeObjectsAdd ' +
	        'synchronizeObjectsRemove synchronizeTrigger synchronizeWaypoint ' +
	        'synchronizeWaypoint trigger systemChat systemOfUnits tan ' +
	        'targetKnowledge targetsAggregate targetsQuery taskChildren ' +
	        'taskCompleted taskDescription taskDestination taskHint taskNull ' +
	        'taskParent taskResult taskState teamMember teamMemberNull teamName ' +
	        'teams teamSwitch teamSwitchEnabled teamType terminate ' +
	        'terrainIntersect terrainIntersectASL text text location textLog ' +
	        'textLogFormat tg time timeMultiplier titleCut titleFadeOut ' +
	        'titleObj titleRsc titleText toArray toLower toString toUpper ' +
	        'triggerActivated triggerActivation triggerArea ' +
	        'triggerAttachedVehicle triggerAttachObject triggerAttachVehicle ' +
	        'triggerStatements triggerText triggerTimeout triggerTimeoutCurrent ' +
	        'triggerType turretLocal turretOwner turretUnit tvAdd tvClear ' +
	        'tvCollapse tvCount tvCurSel tvData tvDelete tvExpand tvPicture ' +
	        'tvSetCurSel tvSetData tvSetPicture tvSetPictureColor tvSetTooltip ' +
	        'tvSetValue tvSort tvSortByValue tvText tvValue type typeName ' +
	        'typeOf UAVControl uiNamespace uiSleep unassignCurator unassignItem ' +
	        'unassignTeam unassignVehicle underwater uniform uniformContainer ' +
	        'uniformItems uniformMagazines unitAddons unitBackpack unitPos ' +
	        'unitReady unitRecoilCoefficient units unitsBelowHeight unlinkItem ' +
	        'unlockAchievement unregisterTask updateDrawIcon updateMenuItem ' +
	        'updateObjectTree useAudioTimeForMoves vectorAdd vectorCos ' +
	        'vectorCrossProduct vectorDiff vectorDir vectorDirVisual ' +
	        'vectorDistance vectorDistanceSqr vectorDotProduct vectorFromTo ' +
	        'vectorMagnitude vectorMagnitudeSqr vectorMultiply vectorNormalized ' +
	        'vectorUp vectorUpVisual vehicle vehicleChat vehicleRadio vehicles ' +
	        'vehicleVarName velocity velocityModelSpace verifySignature vest ' +
	        'vestContainer vestItems vestMagazines viewDistance visibleCompass ' +
	        'visibleGPS visibleMap visiblePosition visiblePositionASL ' +
	        'visibleWatch waitUntil waves waypointAttachedObject ' +
	        'waypointAttachedVehicle waypointAttachObject waypointAttachVehicle ' +
	        'waypointBehaviour waypointCombatMode waypointCompletionRadius ' +
	        'waypointDescription waypointFormation waypointHousePosition ' +
	        'waypointLoiterRadius waypointLoiterType waypointName ' +
	        'waypointPosition waypoints waypointScript waypointsEnabledUAV ' +
	        'waypointShow waypointSpeed waypointStatements waypointTimeout ' +
	        'waypointTimeoutCurrent waypointType waypointVisible ' +
	        'weaponAccessories weaponCargo weaponDirection weaponLowered ' +
	        'weapons weaponsItems weaponsItemsCargo weaponState weaponsTurret ' +
	        'weightRTD west WFSideText wind windDir windStr wingsForcesRTD ' +
	        'worldName worldSize worldToModel worldToModelVisual worldToScreen ' +
	        '_forEachIndex _this _x',
	      literal:
	        'true false nil'
	    },
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.NUMBER_MODE,
	      STRINGS,
	      CPP.preprocessor
	    ],
	    illegal: /#/
	  };
	};

/***/ },
/* 242 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var COMMENT_MODE = hljs.COMMENT('--', '$');
	  return {
	    case_insensitive: true,
	    illegal: /[<>{}*#]/,
	    contains: [
	      {
	        beginKeywords:
	          'begin end start commit rollback savepoint lock alter create drop rename call ' +
	          'delete do handler insert load replace select truncate update set show pragma grant ' +
	          'merge describe use explain help declare prepare execute deallocate release ' +
	          'unlock purge reset change stop analyze cache flush optimize repair kill ' +
	          'install uninstall checksum restore check backup revoke comment',
	        end: /;/, endsWithParent: true,
	        lexemes: /[\w\.]+/,
	        keywords: {
	          keyword:
	            'abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +
	            'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +
	            'allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply ' +
	            'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +
	            'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +
	            'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +
	            'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +
	            'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +
	            'buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +
	            'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +
	            'char_length character_length characters characterset charindex charset charsetform charsetid check ' +
	            'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +
	            'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +
	            'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +
	            'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +
	            'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +
	            'consider consistent constant constraint constraints constructor container content contents context ' +
	            'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +
	            'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +
	            'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +
	            'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +
	            'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +
	            'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +
	            'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +
	            'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +
	            'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +
	            'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +
	            'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +
	            'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +
	            'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +
	            'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +
	            'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +
	            'execu execut execute exempt exists exit exp expire explain export export_set extended extent external ' +
	            'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +
	            'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +
	            'finish first first_value fixed flash_cache flashback floor flush following follows for forall force ' +
	            'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +
	            'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +
	            'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +
	            'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +
	            'hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified ' +
	            'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +
	            'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +
	            'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +
	            'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +
	            'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +
	            'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase ' +
	            'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +
	            'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +
	            'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +
	            'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +
	            'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +
	            'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +
	            'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +
	            'minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month ' +
	            'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +
	            'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +
	            'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +
	            'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +
	            'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +
	            'noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +
	            'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +
	            'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +
	            'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +
	            'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +
	            'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +
	            'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +
	            'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +
	            'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +
	            'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +
	            'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +
	            'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +
	            'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +
	            'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +
	            'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +
	            'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +
	            'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +
	            'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +
	            'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +
	            'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +
	            'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +
	            'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +
	            'sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select ' +
	            'self sequence sequential serializable server servererror session session_user sessions_per_user set ' +
	            'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +
	            'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +
	            'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +
	            'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +
	            'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +
	            'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +
	            'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +
	            'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +
	            'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +
	            'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +
	            'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +
	            'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo ' +
	            'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +
	            'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +
	            'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +
	            'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +
	            'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +
	            'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot ' +
	            'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +
	            'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +
	            'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +
	            'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +
	            'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +
	            'wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped ' +
	            'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +
	            'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',
	          literal:
	            'true false null',
	          built_in:
	            'array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number ' +
	            'numeric real record serial serial8 smallint text varchar varying void'
	        },
	        contains: [
	          {
	            className: 'string',
	            begin: '\'', end: '\'',
	            contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
	          },
	          {
	            className: 'string',
	            begin: '"', end: '"',
	            contains: [hljs.BACKSLASH_ESCAPE, {begin: '""'}]
	          },
	          {
	            className: 'string',
	            begin: '`', end: '`',
	            contains: [hljs.BACKSLASH_ESCAPE]
	          },
	          hljs.C_NUMBER_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          COMMENT_MODE
	        ]
	      },
	      hljs.C_BLOCK_COMMENT_MODE,
	      COMMENT_MODE
	    ]
	  };
	};

/***/ },
/* 243 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        begin: hljs.UNDERSCORE_IDENT_RE,
	        lexemes: hljs.UNDERSCORE_IDENT_RE,
	        keywords: {
	          // Stan's keywords
	          name:
	            'for in while repeat until if then else',
	          // Stan's probablity distributions (less beta and gamma, as commonly
	          // used for parameter names). So far, _log and _rng variants are not
	          // included
	          symbol:
	            'bernoulli bernoulli_logit binomial binomial_logit '               +
	            'beta_binomial hypergeometric categorical categorical_logit '      +
	            'ordered_logistic neg_binomial neg_binomial_2 '                    +
	            'neg_binomial_2_log poisson poisson_log multinomial normal '       +
	            'exp_mod_normal skew_normal student_t cauchy double_exponential '  +
	            'logistic gumbel lognormal chi_square inv_chi_square '             +
	            'scaled_inv_chi_square exponential inv_gamma weibull frechet '     +
	            'rayleigh wiener pareto pareto_type_2 von_mises uniform '          +
	            'multi_normal multi_normal_prec multi_normal_cholesky multi_gp '   +
	            'multi_gp_cholesky multi_student_t gaussian_dlm_obs dirichlet '    +
	            'lkj_corr lkj_corr_cholesky wishart inv_wishart',
	          // Stan's data types
	          'selector-tag':
	            'int real vector simplex unit_vector ordered positive_ordered '    +
	            'row_vector matrix cholesky_factor_corr cholesky_factor_cov '      +
	            'corr_matrix cov_matrix',
	          // Stan's model blocks
	          title:
	            'functions model data parameters quantities transformed '          +
	            'generated',
	          literal:
	            'true false'
	        },
	        relevance: 0
	      },
	      // The below is all taken from the R language definition
	      {
	        // hex value
	        className: 'number',
	        begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
	        relevance: 0
	      },
	      {
	        // hex value
	        className: 'number',
	        begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
	        relevance: 0
	      },
	      {
	        // explicit integer
	        className: 'number',
	        begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
	        relevance: 0
	      },
	      {
	        // number with trailing decimal
	        className: 'number',
	        begin: "\\d+\\.(?!\\d)(?:i\\b)?",
	        relevance: 0
	      },
	      {
	        // number
	        className: 'number',
	        begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
	        relevance: 0
	      },
	      {
	        // number with leading decimal
	        className: 'number',
	        begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
	        relevance: 0
	      }
	    ]
	  };
	};

/***/ },
/* 244 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['do', 'ado'],
	    case_insensitive: true,
	    keywords: 'if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize meqparse mer merg merge mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5',
	        contains: [
	      {
	        className: 'symbol',
	        begin: /`[a-zA-Z0-9_]+'/
	      },
	      {
	        className: 'variable',
	        begin: /\$\{?[a-zA-Z0-9_]+\}?/
	      },
	      {
	        className: 'string',
	        variants: [
	          {begin: '`"[^\r\n]*?"\''},
	          {begin: '"[^\r\n"]*"'}
	        ]
	      },
	
	      {
	        className: 'built_in',
	        variants: [
	          {
	            begin: '\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\(|$)'
	          }
	        ]
	      },
	
	      hljs.COMMENT('^[ \t]*\\*.*$', false),
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE
	    ]
	  };
	};

/***/ },
/* 245 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var STEP21_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
	  var STEP21_KEYWORDS = {
	    keyword: 'HEADER ENDSEC DATA'
	  };
	  var STEP21_START = {
	    className: 'meta',
	    begin: 'ISO-10303-21;',
	    relevance: 10
	  };
	  var STEP21_CLOSE = {
	    className: 'meta',
	    begin: 'END-ISO-10303-21;',
	    relevance: 10
	  };
	
	  return {
	    aliases: ['p21', 'step', 'stp'],
	    case_insensitive: true, // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
	    lexemes: STEP21_IDENT_RE,
	    keywords: STEP21_KEYWORDS,
	    contains: [
	      STEP21_START,
	      STEP21_CLOSE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.COMMENT('/\\*\\*!', '\\*/'),
	      hljs.C_NUMBER_MODE,
	      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
	      {
	        className: 'string',
	        begin: "'", end: "'"
	      },
	      {
	        className: 'symbol',
	        variants: [
	          {
	            begin: '#', end: '\\d+',
	            illegal: '\\W'
	          }
	        ]
	      }
	    ]
	  };
	};

/***/ },
/* 246 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	
	  var VARIABLE = {
	    className: 'variable',
	    begin: '\\$' + hljs.IDENT_RE
	  };
	
	  var HEX_COLOR = {
	    className: 'number',
	    begin: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})'
	  };
	
	  var AT_KEYWORDS = [
	    'charset',
	    'css',
	    'debug',
	    'extend',
	    'font-face',
	    'for',
	    'import',
	    'include',
	    'media',
	    'mixin',
	    'page',
	    'warn',
	    'while'
	  ];
	
	  var PSEUDO_SELECTORS = [
	    'after',
	    'before',
	    'first-letter',
	    'first-line',
	    'active',
	    'first-child',
	    'focus',
	    'hover',
	    'lang',
	    'link',
	    'visited'
	  ];
	
	  var TAGS = [
	    'a',
	    'abbr',
	    'address',
	    'article',
	    'aside',
	    'audio',
	    'b',
	    'blockquote',
	    'body',
	    'button',
	    'canvas',
	    'caption',
	    'cite',
	    'code',
	    'dd',
	    'del',
	    'details',
	    'dfn',
	    'div',
	    'dl',
	    'dt',
	    'em',
	    'fieldset',
	    'figcaption',
	    'figure',
	    'footer',
	    'form',
	    'h1',
	    'h2',
	    'h3',
	    'h4',
	    'h5',
	    'h6',
	    'header',
	    'hgroup',
	    'html',
	    'i',
	    'iframe',
	    'img',
	    'input',
	    'ins',
	    'kbd',
	    'label',
	    'legend',
	    'li',
	    'mark',
	    'menu',
	    'nav',
	    'object',
	    'ol',
	    'p',
	    'q',
	    'quote',
	    'samp',
	    'section',
	    'span',
	    'strong',
	    'summary',
	    'sup',
	    'table',
	    'tbody',
	    'td',
	    'textarea',
	    'tfoot',
	    'th',
	    'thead',
	    'time',
	    'tr',
	    'ul',
	    'var',
	    'video'
	  ];
	
	  var TAG_END = '[\\.\\s\\n\\[\\:,]';
	
	  var ATTRIBUTES = [
	    'align-content',
	    'align-items',
	    'align-self',
	    'animation',
	    'animation-delay',
	    'animation-direction',
	    'animation-duration',
	    'animation-fill-mode',
	    'animation-iteration-count',
	    'animation-name',
	    'animation-play-state',
	    'animation-timing-function',
	    'auto',
	    'backface-visibility',
	    'background',
	    'background-attachment',
	    'background-clip',
	    'background-color',
	    'background-image',
	    'background-origin',
	    'background-position',
	    'background-repeat',
	    'background-size',
	    'border',
	    'border-bottom',
	    'border-bottom-color',
	    'border-bottom-left-radius',
	    'border-bottom-right-radius',
	    'border-bottom-style',
	    'border-bottom-width',
	    'border-collapse',
	    'border-color',
	    'border-image',
	    'border-image-outset',
	    'border-image-repeat',
	    'border-image-slice',
	    'border-image-source',
	    'border-image-width',
	    'border-left',
	    'border-left-color',
	    'border-left-style',
	    'border-left-width',
	    'border-radius',
	    'border-right',
	    'border-right-color',
	    'border-right-style',
	    'border-right-width',
	    'border-spacing',
	    'border-style',
	    'border-top',
	    'border-top-color',
	    'border-top-left-radius',
	    'border-top-right-radius',
	    'border-top-style',
	    'border-top-width',
	    'border-width',
	    'bottom',
	    'box-decoration-break',
	    'box-shadow',
	    'box-sizing',
	    'break-after',
	    'break-before',
	    'break-inside',
	    'caption-side',
	    'clear',
	    'clip',
	    'clip-path',
	    'color',
	    'column-count',
	    'column-fill',
	    'column-gap',
	    'column-rule',
	    'column-rule-color',
	    'column-rule-style',
	    'column-rule-width',
	    'column-span',
	    'column-width',
	    'columns',
	    'content',
	    'counter-increment',
	    'counter-reset',
	    'cursor',
	    'direction',
	    'display',
	    'empty-cells',
	    'filter',
	    'flex',
	    'flex-basis',
	    'flex-direction',
	    'flex-flow',
	    'flex-grow',
	    'flex-shrink',
	    'flex-wrap',
	    'float',
	    'font',
	    'font-family',
	    'font-feature-settings',
	    'font-kerning',
	    'font-language-override',
	    'font-size',
	    'font-size-adjust',
	    'font-stretch',
	    'font-style',
	    'font-variant',
	    'font-variant-ligatures',
	    'font-weight',
	    'height',
	    'hyphens',
	    'icon',
	    'image-orientation',
	    'image-rendering',
	    'image-resolution',
	    'ime-mode',
	    'inherit',
	    'initial',
	    'justify-content',
	    'left',
	    'letter-spacing',
	    'line-height',
	    'list-style',
	    'list-style-image',
	    'list-style-position',
	    'list-style-type',
	    'margin',
	    'margin-bottom',
	    'margin-left',
	    'margin-right',
	    'margin-top',
	    'marks',
	    'mask',
	    'max-height',
	    'max-width',
	    'min-height',
	    'min-width',
	    'nav-down',
	    'nav-index',
	    'nav-left',
	    'nav-right',
	    'nav-up',
	    'none',
	    'normal',
	    'object-fit',
	    'object-position',
	    'opacity',
	    'order',
	    'orphans',
	    'outline',
	    'outline-color',
	    'outline-offset',
	    'outline-style',
	    'outline-width',
	    'overflow',
	    'overflow-wrap',
	    'overflow-x',
	    'overflow-y',
	    'padding',
	    'padding-bottom',
	    'padding-left',
	    'padding-right',
	    'padding-top',
	    'page-break-after',
	    'page-break-before',
	    'page-break-inside',
	    'perspective',
	    'perspective-origin',
	    'pointer-events',
	    'position',
	    'quotes',
	    'resize',
	    'right',
	    'tab-size',
	    'table-layout',
	    'text-align',
	    'text-align-last',
	    'text-decoration',
	    'text-decoration-color',
	    'text-decoration-line',
	    'text-decoration-style',
	    'text-indent',
	    'text-overflow',
	    'text-rendering',
	    'text-shadow',
	    'text-transform',
	    'text-underline-position',
	    'top',
	    'transform',
	    'transform-origin',
	    'transform-style',
	    'transition',
	    'transition-delay',
	    'transition-duration',
	    'transition-property',
	    'transition-timing-function',
	    'unicode-bidi',
	    'vertical-align',
	    'visibility',
	    'white-space',
	    'widows',
	    'width',
	    'word-break',
	    'word-spacing',
	    'word-wrap',
	    'z-index'
	  ];
	
	  // illegals
	  var ILLEGAL = [
	    '\\?',
	    '(\\bReturn\\b)', // monkey
	    '(\\bEnd\\b)', // monkey
	    '(\\bend\\b)', // vbscript
	    '(\\bdef\\b)', // gradle
	    ';', // a whole lot of languages
	    '#\\s', // markdown
	    '\\*\\s', // markdown
	    '===\\s', // markdown
	    '\\|',
	    '%', // prolog
	  ];
	
	  return {
	    aliases: ['styl'],
	    case_insensitive: false,
	    keywords: 'if else for in',
	    illegal: '(' + ILLEGAL.join('|') + ')',
	    contains: [
	
	      // strings
	      hljs.QUOTE_STRING_MODE,
	      hljs.APOS_STRING_MODE,
	
	      // comments
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	
	      // hex colors
	      HEX_COLOR,
	
	      // class tag
	      {
	        begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
	        returnBegin: true,
	        contains: [
	          {className: 'selector-class', begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*'}
	        ]
	      },
	
	      // id tag
	      {
	        begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
	        returnBegin: true,
	        contains: [
	          {className: 'selector-id', begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*'}
	        ]
	      },
	
	      // tags
	      {
	        begin: '\\b(' + TAGS.join('|') + ')' + TAG_END,
	        returnBegin: true,
	        contains: [
	          {className: 'selector-tag', begin: '\\b[a-zA-Z][a-zA-Z0-9_-]*'}
	        ]
	      },
	
	      // psuedo selectors
	      {
	        begin: '&?:?:\\b(' + PSEUDO_SELECTORS.join('|') + ')' + TAG_END
	      },
	
	      // @ keywords
	      {
	        begin: '\@(' + AT_KEYWORDS.join('|') + ')\\b'
	      },
	
	      // variables
	      VARIABLE,
	
	      // dimension
	      hljs.CSS_NUMBER_MODE,
	
	      // number
	      hljs.NUMBER_MODE,
	
	      // functions
	      //  - only from beginning of line + whitespace
	      {
	        className: 'function',
	        begin: '^[a-zA-Z][a-zA-Z0-9_\-]*\\(.*\\)',
	        illegal: '[\\n]',
	        returnBegin: true,
	        contains: [
	          {className: 'title', begin: '\\b[a-zA-Z][a-zA-Z0-9_\-]*'},
	          {
	            className: 'params',
	            begin: /\(/,
	            end: /\)/,
	            contains: [
	              HEX_COLOR,
	              VARIABLE,
	              hljs.APOS_STRING_MODE,
	              hljs.CSS_NUMBER_MODE,
	              hljs.NUMBER_MODE,
	              hljs.QUOTE_STRING_MODE
	            ]
	          }
	        ]
	      },
	
	      // attributes
	      //  - only from beginning of line + whitespace
	      //  - must have whitespace after it
	      {
	        className: 'attribute',
	        begin: '\\b(' + ATTRIBUTES.reverse().join('|') + ')\\b',
	        starts: {
	          // value container
	          end: /;|$/,
	          contains: [
	            HEX_COLOR,
	            VARIABLE,
	            hljs.APOS_STRING_MODE,
	            hljs.QUOTE_STRING_MODE,
	            hljs.CSS_NUMBER_MODE,
	            hljs.NUMBER_MODE,
	            hljs.C_BLOCK_COMMENT_MODE
	          ],
	          illegal: /\./,
	          relevance: 0
	        }
	      }
	    ]
	  };
	};

/***/ },
/* 247 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var DETAILS = {
	    className: 'string',
	    begin: '\\[\n(multipart)?', end: '\\]\n'
	  };
	  var TIME = {
	    className: 'string',
	    begin: '\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}\.\\d+Z'
	  };
	  var PROGRESSVALUE = {
	    className: 'string',
	    begin: '(\\+|-)\\d+'
	  };
	  var KEYWORDS = {
	    className: 'keyword',
	    relevance: 10,
	    variants: [
	      { begin: '^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?' },
	      { begin: '^progress(:?)(\\s+)?(pop|push)?' },
	      { begin: '^tags:' },
	      { begin: '^time:' }
	    ],
	  };
	  return {
	    case_insensitive: true,
	    contains: [
	      DETAILS,
	      TIME,
	      PROGRESSVALUE,
	      KEYWORDS
	    ]
	  };
	};

/***/ },
/* 248 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var SWIFT_KEYWORDS = {
	      keyword: '__COLUMN__ __FILE__ __FUNCTION__ __LINE__ as as! as? associativity ' +
	        'break case catch class continue convenience default defer deinit didSet do ' +
	        'dynamic dynamicType else enum extension fallthrough false final for func ' +
	        'get guard if import in indirect infix init inout internal is lazy left let ' +
	        'mutating nil none nonmutating operator optional override postfix precedence ' +
	        'prefix private protocol Protocol public repeat required rethrows return ' +
	        'right self Self set static struct subscript super switch throw throws true ' +
	        'try try! try? Type typealias unowned var weak where while willSet',
	      literal: 'true false nil',
	      built_in: 'abs advance alignof alignofValue anyGenerator assert assertionFailure ' +
	        'bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC ' +
	        'bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros ' +
	        'debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords ' +
	        'enumerate equal fatalError filter find getBridgedObjectiveCType getVaList ' +
	        'indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC ' +
	        'isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare ' +
	        'map max maxElement min minElement numericCast overlaps partition posix ' +
	        'precondition preconditionFailure print println quickSort readLine reduce reflect ' +
	        'reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split ' +
	        'startsWith stride strideof strideofValue swap toString transcode ' +
	        'underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap ' +
	        'unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer ' +
	        'withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers ' +
	        'withUnsafePointer withUnsafePointers withVaList zip'
	    };
	
	  var TYPE = {
	    className: 'type',
	    begin: '\\b[A-Z][\\w\u00C0-\u02B8\']*',
	    relevance: 0
	  };
	  var BLOCK_COMMENT = hljs.COMMENT(
	    '/\\*',
	    '\\*/',
	    {
	      contains: ['self']
	    }
	  );
	  var SUBST = {
	    className: 'subst',
	    begin: /\\\(/, end: '\\)',
	    keywords: SWIFT_KEYWORDS,
	    contains: [] // assigned later
	  };
	  var NUMBERS = {
	      className: 'number',
	      begin: '\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b',
	      relevance: 0
	  };
	  var QUOTE_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {
	    contains: [SUBST, hljs.BACKSLASH_ESCAPE]
	  });
	  SUBST.contains = [NUMBERS];
	
	  return {
	    keywords: SWIFT_KEYWORDS,
	    contains: [
	      QUOTE_STRING_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      BLOCK_COMMENT,
	      TYPE,
	      NUMBERS,
	      {
	        className: 'function',
	        beginKeywords: 'func', end: '{', excludeEnd: true,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {
	            begin: /[A-Za-z$_][0-9A-Za-z$_]*/
	          }),
	          {
	            begin: /</, end: />/
	          },
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/, endsParent: true,
	            keywords: SWIFT_KEYWORDS,
	            contains: [
	              'self',
	              NUMBERS,
	              QUOTE_STRING_MODE,
	              hljs.C_BLOCK_COMMENT_MODE,
	              {begin: ':'} // relevance booster
	            ],
	            illegal: /["']/
	          }
	        ],
	        illegal: /\[|%/
	      },
	      {
	        className: 'class',
	        beginKeywords: 'struct protocol class extension enum',
	        keywords: SWIFT_KEYWORDS,
	        end: '\\{',
	        excludeEnd: true,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/})
	        ]
	      },
	      {
	        className: 'meta', // @attributes
	        begin: '(@warn_unused_result|@exported|@lazy|@noescape|' +
	                  '@NSCopying|@NSManaged|@objc|@convention|@required|' +
	                  '@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|' +
	                  '@infix|@prefix|@postfix|@autoclosure|@testable|@available|' +
	                  '@nonobjc|@NSApplicationMain|@UIApplicationMain)'
	
	      },
	      {
	        beginKeywords: 'import', end: /$/,
	        contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT]
	      }
	    ]
	  };
	};

/***/ },
/* 249 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	
	  var COMMENT = {
	    className: 'comment',
	    begin: /\$noop\(/,
	    end: /\)/,
	    contains: [{
	      begin: /\(/,
	      end: /\)/,
	      contains: ['self', {
	        begin: /\\./
	      }]
	    }],
	    relevance: 10
	  };
	
	  var FUNCTION = {
	    className: 'keyword',
	    begin: /\$(?!noop)[a-zA-Z][_a-zA-Z0-9]*/,
	    end: /\(/,
	    excludeEnd: true
	  };
	
	  var VARIABLE = {
	    className: 'variable',
	    begin: /%[_a-zA-Z0-9:]*/,
	    end: '%'
	  };
	
	  var ESCAPE_SEQUENCE = {
	    className: 'symbol',
	    begin: /\\./
	  };
	
	  return {
	    contains: [
	      COMMENT,
	      FUNCTION,
	      VARIABLE,
	      ESCAPE_SEQUENCE
	    ]
	  };
	};

/***/ },
/* 250 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var LITERALS = {literal: '{ } true false yes no Yes No True False null'};
	
	  var keyPrefix = '^[ \\-]*';
	  var keyName =  '[a-zA-Z_][\\w\\-]*';
	  var KEY = {
	    className: 'attr',
	    variants: [
	      { begin: keyPrefix + keyName + ":"},
	      { begin: keyPrefix + '"' + keyName + '"' + ":"},
	      { begin: keyPrefix + "'" + keyName + "'" + ":"}
	    ]
	  };
	
	  var TEMPLATE_VARIABLES = {
	    className: 'template-variable',
	    variants: [
	      { begin: '\{\{', end: '\}\}' }, // jinja templates Ansible
	      { begin: '%\{', end: '\}' } // Ruby i18n
	    ]
	  };
	  var STRING = {
	    className: 'string',
	    relevance: 0,
	    variants: [
	      {begin: /'/, end: /'/},
	      {begin: /"/, end: /"/}
	    ],
	    contains: [
	      hljs.BACKSLASH_ESCAPE,
	      TEMPLATE_VARIABLES
	    ]
	  };
	
	  return {
	    case_insensitive: true,
	    aliases: ['yml', 'YAML', 'yaml'],
	    contains: [
	      KEY,
	      {
	        className: 'meta',
	        begin: '^---\s*$',
	        relevance: 10
	      },
	      { // multi line string
	        className: 'string',
	        begin: '[\\|>] *$',
	        returnEnd: true,
	        contains: STRING.contains,
	        // very simple termination: next hash key
	        end: KEY.variants[0].begin
	      },
	      { // Ruby/Rails erb
	        begin: '<%[%=-]?', end: '[%-]?%>',
	        subLanguage: 'ruby',
	        excludeBegin: true,
	        excludeEnd: true,
	        relevance: 0
	      },
	      { // data type
	        className: 'type',
	        begin: '!!' + hljs.UNDERSCORE_IDENT_RE,
	      },
	      { // fragment id &ref
	        className: 'meta',
	        begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$',
	      },
	      { // fragment reference *ref
	        className: 'meta',
	        begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
	      },
	      { // array listing
	        className: 'bullet',
	        begin: '^ *-',
	        relevance: 0
	      },
	      STRING,
	      hljs.HASH_COMMENT_MODE,
	      hljs.C_NUMBER_MODE
	    ],
	    keywords: LITERALS
	  };
	};

/***/ },
/* 251 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    case_insensitive: true,
	    contains: [
	      hljs.HASH_COMMENT_MODE,
	      // version of format and total amount of testcases
	      {
	        className: 'meta',
	        variants: [
	          { begin: '^TAP version (\\d+)$' },
	          { begin: '^1\\.\\.(\\d+)$' }
	        ],
	      },
	      // YAML block
	      {
	        begin: '(\s+)?---$', end: '\\.\\.\\.$',
	        subLanguage: 'yaml',
	        relevance: 0
	      },
		  // testcase number
	      {
	        className: 'number',
	        begin: ' (\\d+) '
	      },
		  // testcase status and description
	      {
	        className: 'symbol',
	        variants: [
	          { begin: '^ok' },
	          { begin: '^not ok' }
	        ],
	      },
	    ]
	  };
	};

/***/ },
/* 252 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['tk'],
	    keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' +
	      'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' +
	      'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' +
	      'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' +
	      'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' +
	      'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 '+
	      'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex '+
	      'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename '+
	      'return safe scan seek set socket source split string subst switch tcl_endOfWord '+
	      'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter '+
	      'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update '+
	      'uplevel upvar variable vwait while',
	    contains: [
	      hljs.COMMENT(';[ \\t]*#', '$'),
	      hljs.COMMENT('^[ \\t]*#', '$'),
	      {
	        beginKeywords: 'proc',
	        end: '[\\{]',
	        excludeEnd: true,
	        contains: [
	          {
	            className: 'title',
	            begin: '[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
	            end: '[ \\t\\n\\r]',
	            endsWithParent: true,
	            excludeEnd: true
	          }
	        ]
	      },
	      {
	        excludeEnd: true,
	        variants: [
	          {
	            begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\(([a-zA-Z0-9_])*\\)',
	            end: '[^a-zA-Z0-9_\\}\\$]'
	          },
	          {
	            begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
	            end: '(\\))?[^a-zA-Z0-9_\\}\\$]'
	          }
	        ]
	      },
	      {
	        className: 'string',
	        contains: [hljs.BACKSLASH_ESCAPE],
	        variants: [
	          hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
	          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
	        ]
	      },
	      {
	        className: 'number',
	        variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
	      }
	    ]
	  }
	};

/***/ },
/* 253 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var COMMAND = {
	    className: 'tag',
	    begin: /\\/,
	    relevance: 0,
	    contains: [
	      {
	        className: 'name',
	        variants: [
	          {begin: /[a-zA-Zа-яА-я]+[*]?/},
	          {begin: /[^a-zA-Zа-яА-я0-9]/}
	        ],
	        starts: {
	          endsWithParent: true,
	          relevance: 0,
	          contains: [
	            {
	              className: 'string', // because it looks like attributes in HTML tags
	              variants: [
	                {begin: /\[/, end: /\]/},
	                {begin: /\{/, end: /\}/}
	              ]
	            },
	            {
	              begin: /\s*=\s*/, endsWithParent: true,
	              relevance: 0,
	              contains: [
	                {
	                  className: 'number',
	                  begin: /-?\d*\.?\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/
	                }
	              ]
	            }
	          ]
	        }
	      }
	    ]
	  };
	
	  return {
	    contains: [
	      COMMAND,
	      {
	        className: 'formula',
	        contains: [COMMAND],
	        relevance: 0,
	        variants: [
	          {begin: /\$\$/, end: /\$\$/},
	          {begin: /\$/, end: /\$/}
	        ]
	      },
	      hljs.COMMENT(
	        '%',
	        '$',
	        {
	          relevance: 0
	        }
	      )
	    ]
	  };
	};

/***/ },
/* 254 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var BUILT_IN_TYPES = 'bool byte i16 i32 i64 double string binary';
	  return {
	    keywords: {
	      keyword:
	        'namespace const typedef struct enum service exception void oneway set list map required optional',
	      built_in:
	        BUILT_IN_TYPES,
	      literal:
	        'true false'
	    },
	    contains: [
	      hljs.QUOTE_STRING_MODE,
	      hljs.NUMBER_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'class',
	        beginKeywords: 'struct enum service exception', end: /\{/,
	        illegal: /\n/,
	        contains: [
	          hljs.inherit(hljs.TITLE_MODE, {
	            starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
	          })
	        ]
	      },
	      {
	        begin: '\\b(set|list|map)\\s*<', end: '>',
	        keywords: BUILT_IN_TYPES,
	        contains: ['self']
	      }
	    ]
	  };
	};

/***/ },
/* 255 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var TPID = {
	    className: 'number',
	    begin: '[1-9][0-9]*', /* no leading zeros */
	    relevance: 0
	  };
	  var TPLABEL = {
	    className: 'symbol',
	    begin: ':[^\\]]+'
	  };
	  var TPDATA = {
	    className: 'built_in',
	    begin: '(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|\
	    TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[', end: '\\]',
	    contains: [
	      'self',
	      TPID,
	      TPLABEL
	    ]
	  };
	  var TPIO = {
	    className: 'built_in',
	    begin: '(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[', end: '\\]',
	    contains: [
	      'self',
	      TPID,
	      hljs.QUOTE_STRING_MODE, /* for pos section at bottom */
	      TPLABEL
	    ]
	  };
	
	  return {
	    keywords: {
	      keyword:
	        'ABORT ACC ADJUST AND AP_LD BREAK CALL CNT COL CONDITION CONFIG DA DB ' +
	        'DIV DETECT ELSE END ENDFOR ERR_NUM ERROR_PROG FINE FOR GP GUARD INC ' +
	        'IF JMP LINEAR_MAX_SPEED LOCK MOD MONITOR OFFSET Offset OR OVERRIDE ' +
	        'PAUSE PREG PTH RT_LD RUN SELECT SKIP Skip TA TB TO TOOL_OFFSET ' +
	        'Tool_Offset UF UT UFRAME_NUM UTOOL_NUM UNLOCK WAIT X Y Z W P R STRLEN ' +
	        'SUBSTR FINDSTR VOFFSET PROG ATTR MN POS',
	      literal:
	        'ON OFF max_speed LPOS JPOS ENABLE DISABLE START STOP RESET'
	    },
	    contains: [
	      TPDATA,
	      TPIO,
	      {
	        className: 'keyword',
	        begin: '/(PROG|ATTR|MN|POS|END)\\b'
	      },
	      {
	        /* this is for cases like ,CALL */
	        className: 'keyword',
	        begin: '(CALL|RUN|POINT_LOGIC|LBL)\\b'
	      },
	      {
	        /* this is for cases like CNT100 where the default lexemes do not
	         * separate the keyword and the number */
	        className: 'keyword',
	        begin: '\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)'
	      },
	      {
	        /* to catch numbers that do not have a word boundary on the left */
	        className: 'number',
	        begin: '\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b',
	        relevance: 0
	      },
	      hljs.COMMENT('//', '[;$]'),
	      hljs.COMMENT('!', '[;$]'),
	      hljs.COMMENT('--eg:', '$'),
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        begin: '\'', end: '\''
	      },
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'variable',
	        begin: '\\$[A-Za-z0-9_]+'
	      }
	    ]
	  };
	};

/***/ },
/* 256 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var PARAMS = {
	    className: 'params',
	    begin: '\\(', end: '\\)'
	  };
	
	  var FUNCTION_NAMES = 'attribute block constant cycle date dump include ' +
	                  'max min parent random range source template_from_string';
	
	  var FUNCTIONS = {
	    beginKeywords: FUNCTION_NAMES,
	    keywords: {name: FUNCTION_NAMES},
	    relevance: 0,
	    contains: [
	      PARAMS
	    ]
	  };
	
	  var FILTER = {
	    begin: /\|[A-Za-z_]+:?/,
	    keywords:
	      'abs batch capitalize convert_encoding date date_modify default ' +
	      'escape first format join json_encode keys last length lower ' +
	      'merge nl2br number_format raw replace reverse round slice sort split ' +
	      'striptags title trim upper url_encode',
	    contains: [
	      FUNCTIONS
	    ]
	  };
	
	  var TAGS = 'autoescape block do embed extends filter flush for ' +
	    'if import include macro sandbox set spaceless use verbatim';
	
	  TAGS = TAGS + ' ' + TAGS.split(' ').map(function(t){return 'end' + t}).join(' ');
	
	  return {
	    aliases: ['craftcms'],
	    case_insensitive: true,
	    subLanguage: 'xml',
	    contains: [
	      hljs.COMMENT(/\{#/, /#}/),
	      {
	        className: 'template-tag',
	        begin: /\{%/, end: /%}/,
	        contains: [
	          {
	            className: 'name',
	            begin: /\w+/,
	            keywords: TAGS,
	            starts: {
	              endsWithParent: true,
	              contains: [FILTER, FUNCTIONS],
	              relevance: 0
	            }
	          }
	        ]
	      },
	      {
	        className: 'template-variable',
	        begin: /\{\{/, end: /}}/,
	        contains: ['self', FILTER, FUNCTIONS]
	      }
	    ]
	  };
	};

/***/ },
/* 257 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = {
	    keyword:
	      'in if for while finally var new function do return void else break catch ' +
	      'instanceof with throw case default try this switch continue typeof delete ' +
	      'let yield const class public private protected get set super ' +
	      'static implements enum export import declare type namespace abstract',
	    literal:
	      'true false null undefined NaN Infinity',
	    built_in:
	      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
	      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
	      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
	      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
	      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
	      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
	      'module console window document any number boolean string void'
	  };
	
	  return {
	    aliases: ['ts'],
	    keywords: KEYWORDS,
	    contains: [
	      {
	        className: 'meta',
	        begin: /^\s*['"]use strict['"]/
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      { // template string
	        className: 'string',
	        begin: '`', end: '`',
	        contains: [
	          hljs.BACKSLASH_ESCAPE,
	          {
	            className: 'subst',
	            begin: '\\$\\{', end: '\\}'
	          }
	        ]
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'number',
	        variants: [
	          { begin: '\\b(0[bB][01]+)' },
	          { begin: '\\b(0[oO][0-7]+)' },
	          { begin: hljs.C_NUMBER_RE }
	        ],
	        relevance: 0
	      },
	      { // "value" container
	        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
	        keywords: 'return throw case',
	        contains: [
	          hljs.C_LINE_COMMENT_MODE,
	          hljs.C_BLOCK_COMMENT_MODE,
	          hljs.REGEXP_MODE
	        ],
	        relevance: 0
	      },
	      {
	        className: 'function',
	        begin: 'function', end: /[\{;]/, excludeEnd: true,
	        keywords: KEYWORDS,
	        contains: [
	          'self',
	          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][0-9A-Za-z$_]*/}),
	          {
	            className: 'params',
	            begin: /\(/, end: /\)/,
	            excludeBegin: true,
	            excludeEnd: true,
	            keywords: KEYWORDS,
	            contains: [
	              hljs.C_LINE_COMMENT_MODE,
	              hljs.C_BLOCK_COMMENT_MODE
	            ],
	            illegal: /["'\(]/
	          }
	        ],
	        illegal: /%/,
	        relevance: 0 // () => {} is more typical in TypeScript
	      },
	      {
	        beginKeywords: 'constructor', end: /\{/, excludeEnd: true
	      },
	      { // prevent references like module.id from being higlighted as module definitions
	        begin: /module\./,
	        keywords: {built_in: 'module'},
	        relevance: 0
	      },
	      {
	        beginKeywords: 'module', end: /\{/, excludeEnd: true
	      },
	      {
	        beginKeywords: 'interface', end: /\{/, excludeEnd: true,
	        keywords: 'interface extends'
	      },
	      {
	        begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
	      },
	      {
	        begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
	      }
	    ]
	  };
	};

/***/ },
/* 258 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    keywords: {
	      keyword:
	        // Value types
	        'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 ' +
	        'uint16 uint32 uint64 float double bool struct enum string void ' +
	        // Reference types
	        'weak unowned owned ' +
	        // Modifiers
	        'async signal static abstract interface override virtual delegate ' +
	        // Control Structures
	        'if while do for foreach else switch case break default return try catch ' +
	        // Visibility
	        'public private protected internal ' +
	        // Other
	        'using new this get set const stdout stdin stderr var',
	      built_in:
	        'DBus GLib CCode Gee Object Gtk Posix',
	      literal:
	        'false true null'
	    },
	    contains: [
	      {
	        className: 'class',
	        beginKeywords: 'class interface namespace', end: '{', excludeEnd: true,
	        illegal: '[^,:\\n\\s\\.]',
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.C_BLOCK_COMMENT_MODE,
	      {
	        className: 'string',
	        begin: '"""', end: '"""',
	        relevance: 5
	      },
	      hljs.APOS_STRING_MODE,
	      hljs.QUOTE_STRING_MODE,
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '^#', end: '$',
	        relevance: 2
	      }
	    ]
	  };
	};

/***/ },
/* 259 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['vb'],
	    case_insensitive: true,
	    keywords: {
	      keyword:
	        'addhandler addressof alias and andalso aggregate ansi as assembly auto binary by byref byval ' + /* a-b */
	        'call case catch class compare const continue custom declare default delegate dim distinct do ' + /* c-d */
	        'each equals else elseif end enum erase error event exit explicit finally for friend from function ' + /* e-f */
	        'get global goto group handles if implements imports in inherits interface into is isfalse isnot istrue ' + /* g-i */
	        'join key let lib like loop me mid mod module mustinherit mustoverride mybase myclass ' + /* j-m */
	        'namespace narrowing new next not notinheritable notoverridable ' + /* n */
	        'of off on operator option optional or order orelse overloads overridable overrides ' + /* o */
	        'paramarray partial preserve private property protected public ' + /* p */
	        'raiseevent readonly redim rem removehandler resume return ' + /* r */
	        'select set shadows shared skip static step stop structure strict sub synclock ' + /* s */
	        'take text then throw to try unicode until using when where while widening with withevents writeonly xor', /* t-x */
	      built_in:
	        'boolean byte cbool cbyte cchar cdate cdec cdbl char cint clng cobj csbyte cshort csng cstr ctype ' +  /* b-c */
	        'date decimal directcast double gettype getxmlnamespace iif integer long object ' + /* d-o */
	        'sbyte short single string trycast typeof uinteger ulong ushort', /* s-u */
	      literal:
	        'true false nothing'
	    },
	    illegal: '//|{|}|endif|gosub|variant|wend', /* reserved deprecated keywords */
	    contains: [
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
	      hljs.COMMENT(
	        '\'',
	        '$',
	        {
	          returnBegin: true,
	          contains: [
	            {
	              className: 'doctag',
	              begin: '\'\'\'|<!--|-->',
	              contains: [hljs.PHRASAL_WORDS_MODE]
	            },
	            {
	              className: 'doctag',
	              begin: '</?', end: '>',
	              contains: [hljs.PHRASAL_WORDS_MODE]
	            }
	          ]
	        }
	      ),
	      hljs.C_NUMBER_MODE,
	      {
	        className: 'meta',
	        begin: '#', end: '$',
	        keywords: {'meta-keyword': 'if else elseif end region externalsource'}
	      }
	    ]
	  };
	};

/***/ },
/* 260 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    aliases: ['vbs'],
	    case_insensitive: true,
	    keywords: {
	      keyword:
	        'call class const dim do loop erase execute executeglobal exit for each next function ' +
	        'if then else on error option explicit new private property let get public randomize ' +
	        'redim rem select case set stop sub while wend with end to elseif is or xor and not ' +
	        'class_initialize class_terminate default preserve in me byval byref step resume goto',
	      built_in:
	        'lcase month vartype instrrev ubound setlocale getobject rgb getref string ' +
	        'weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency ' +
	        'conversions csng timevalue second year space abs clng timeserial fixs len asc ' +
	        'isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate ' +
	        'instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex ' +
	        'chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim ' +
	        'strcomp int createobject loadpicture tan formatnumber mid scriptenginebuildversion ' +
	        'scriptengine split scriptengineminorversion cint sin datepart ltrim sqr ' +
	        'scriptenginemajorversion time derived eval date formatpercent exp inputbox left ascw ' +
	        'chrw regexp server response request cstr err',
	      literal:
	        'true false null nothing empty'
	    },
	    illegal: '//',
	    contains: [
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
	      hljs.COMMENT(
	        /'/,
	        /$/,
	        {
	          relevance: 0
	        }
	      ),
	      hljs.C_NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 261 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    subLanguage: 'xml',
	    contains: [
	      {
	        begin: '<%', end: '%>',
	        subLanguage: 'vbscript'
	      }
	    ]
	  };
	};

/***/ },
/* 262 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var SV_KEYWORDS = {
	    keyword:
	      'accept_on alias always always_comb always_ff always_latch and assert assign ' +
	      'assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 ' +
	      'byte case casex casez cell chandle checker class clocking cmos config const ' +
	      'constraint context continue cover covergroup coverpoint cross deassign default ' +
	      'defparam design disable dist do edge else end endcase endchecker endclass ' +
	      'endclocking endconfig endfunction endgenerate endgroup endinterface endmodule ' +
	      'endpackage endprimitive endprogram endproperty endspecify endsequence endtable ' +
	      'endtask enum event eventually expect export extends extern final first_match for ' +
	      'force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 ' +
	      'if iff ifnone ignore_bins illegal_bins implements implies import incdir include ' +
	      'initial inout input inside instance int integer interconnect interface intersect ' +
	      'join join_any join_none large let liblist library local localparam logic longint ' +
	      'macromodule matches medium modport module nand negedge nettype new nexttime nmos ' +
	      'nor noshowcancelled not notif0 notif1 or output package packed parameter pmos ' +
	      'posedge primitive priority program property protected pull0 pull1 pulldown pullup ' +
	      'pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos ' +
	      'real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran ' +
	      'rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared ' +
	      'sequence shortint shortreal showcancelled signed small soft solve specify specparam ' +
	      'static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on ' +
	      'sync_reject_on table tagged task this throughout time timeprecision timeunit tran ' +
	      'tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 ' +
	      'unsigned until until_with untyped use uwire var vectored virtual void wait wait_order ' +
	      'wand weak weak0 weak1 while wildcard wire with within wor xnor xor',
	    literal:
	      'null',
	    built_in:
	      '$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale ' +
	      '$bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat ' +
	      '$realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson ' +
	      '$assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff ' +
	      '$assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk ' +
	      '$fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control ' +
	      '$coverage_get $coverage_save $set_coverage_db_name $rose $stable $past ' +
	      '$rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display ' +
	      '$coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename ' +
	      '$unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow ' +
	      '$floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning ' +
	      '$dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh ' +
	      '$tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random ' +
	      '$dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson ' +
	      '$dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array ' +
	      '$async$nand$array $async$or$array $async$nor$array $sync$and$array ' +
	      '$sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf ' +
	      '$async$and$plane $async$nand$plane $async$or$plane $async$nor$plane ' +
	      '$sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system ' +
	      '$display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo ' +
	      '$write $readmemb $readmemh $writememh $value$plusargs ' +
	      '$dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit ' +
	      '$writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb ' +
	      '$dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall ' +
	      '$dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo ' +
	      '$fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh ' +
	      '$swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb ' +
	      '$fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat ' +
	      '$sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror'
	    };
	  return {
	    aliases: ['v', 'sv', 'svh'],
	    case_insensitive: false,
	    keywords: SV_KEYWORDS, lexemes: /[\w\$]+/,
	    contains: [
	      hljs.C_BLOCK_COMMENT_MODE,
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'number',
	        contains: [hljs.BACKSLASH_ESCAPE],
	        variants: [
	          {begin: '\\b((\\d+\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},
	          {begin: '\\B((\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},
	          {begin: '\\b([0-9_])+', relevance: 0}
	        ]
	      },
	      /* parameters to instances */
	      {
	        className: 'variable',
	        variants: [
	          {begin: '#\\((?!parameter).+\\)'},
	          {begin: '\\.\\w+', relevance: 0},
	        ]
	      },
	      {
	        className: 'meta',
	        begin: '`', end: '$',
	        keywords: {'meta-keyword': 'define __FILE__ ' +
	          '__LINE__ begin_keywords celldefine default_nettype define ' +
	          'else elsif end_keywords endcelldefine endif ifdef ifndef ' +
	          'include line nounconnected_drive pragma resetall timescale ' +
	          'unconnected_drive undef undefineall'},
	        relevance: 0
	      }
	    ]
	  }; // return
	};

/***/ },
/* 263 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  // Regular expression for VHDL numeric literals.
	
	  // Decimal literal:
	  var INTEGER_RE = '\\d(_|\\d)*';
	  var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
	  var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
	  // Based literal:
	  var BASED_INTEGER_RE = '\\w+';
	  var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';
	
	  var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';
	
	  return {
	    case_insensitive: true,
	    keywords: {
	      keyword:
	        'abs access after alias all and architecture array assert assume assume_guarantee attribute ' +
	        'begin block body buffer bus case component configuration constant context cover disconnect ' +
	        'downto default else elsif end entity exit fairness file for force function generate ' +
	        'generic group guarded if impure in inertial inout is label library linkage literal ' +
	        'loop map mod nand new next nor not null of on open or others out package port ' +
	        'postponed procedure process property protected pure range record register reject ' +
	        'release rem report restrict restrict_guarantee return rol ror select sequence ' +
	        'severity shared signal sla sll sra srl strong subtype then to transport type ' +
	        'unaffected units until use variable vmode vprop vunit wait when while with xnor xor',
	      built_in:
	        'boolean bit character ' +
	        'integer time delay_length natural positive ' +
	        'string bit_vector file_open_kind file_open_status ' +
	        'std_logic std_logic_vector unsigned signed boolean_vector integer_vector ' +
	        'std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signed' +
	        'real_vector time_vector',
	      literal:
	        'false true note warning error failure ' +  // severity_level
	        'line text side width'                      // textio
	    },
	    illegal: '{',
	    contains: [
	      hljs.C_BLOCK_COMMENT_MODE,      // VHDL-2008 block commenting.
	      hljs.COMMENT('--', '$'),
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'number',
	        begin: NUMBER_RE,
	        relevance: 0
	      },
	      {
	        className: 'string',
	        begin: '\'(U|X|0|1|Z|W|L|H|-)\'',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      {
	        className: 'symbol',
	        begin: '\'[A-Za-z](_?[A-Za-z0-9])*',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      }
	    ]
	  };
	};

/***/ },
/* 264 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    lexemes: /[!#@\w]+/,
	    keywords: {
	      keyword:
	        // express version except: ! & * < = > !! # @ @@
	        'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope '+
	        'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc '+
	        'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 '+
	        'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor '+
	        'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew '+
	        'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ '+
	        // full version
	        'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload '+
	        'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap '+
	        'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor '+
	        'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap '+
	        'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview '+
	        'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap '+
	        'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext '+
	        'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding '+
	        'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace '+
	        'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious '+'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew '+
	        'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',
	      built_in: //built in func
	        'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv ' +
	        'complete_check add getwinposx getqflist getwinposy screencol ' +
	        'clearmatches empty extend getcmdpos mzeval garbagecollect setreg ' +
	        'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable ' +
	        'shiftwidth max sinh isdirectory synID system inputrestore winline ' +
	        'atan visualmode inputlist tabpagewinnr round getregtype mapcheck ' +
	        'hasmapto histdel argidx findfile sha256 exists toupper getcmdline ' +
	        'taglist string getmatches bufnr strftime winwidth bufexists ' +
	        'strtrans tabpagebuflist setcmdpos remote_read printf setloclist ' +
	        'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval ' +
	        'resolve libcallnr foldclosedend reverse filter has_key bufname ' +
	        'str2float strlen setline getcharmod setbufvar index searchpos ' +
	        'shellescape undofile foldclosed setqflist buflisted strchars str2nr ' +
	        'virtcol floor remove undotree remote_expr winheight gettabwinvar ' +
	        'reltime cursor tabpagenr finddir localtime acos getloclist search ' +
	        'tanh matchend rename gettabvar strdisplaywidth type abs py3eval ' +
	        'setwinvar tolower wildmenumode log10 spellsuggest bufloaded ' +
	        'synconcealed nextnonblank server2client complete settabwinvar ' +
	        'executable input wincol setmatches getftype hlID inputsave ' +
	        'searchpair or screenrow line settabvar histadd deepcopy strpart ' +
	        'remote_peek and eval getftime submatch screenchar winsaveview ' +
	        'matchadd mkdir screenattr getfontname libcall reltimestr getfsize ' +
	        'winnr invert pow getbufline byte2line soundfold repeat fnameescape ' +
	        'tagfiles sin strwidth spellbadword trunc maparg log lispindent ' +
	        'hostname setpos globpath remote_foreground getchar synIDattr ' +
	        'fnamemodify cscope_connection stridx winbufnr indent min ' +
	        'complete_add nr2char searchpairpos inputdialog values matchlist ' +
	        'items hlexists strridx browsedir expand fmod pathshorten line2byte ' +
	        'argc count getwinvar glob foldtextresult getreg foreground cosh ' +
	        'matchdelete has char2nr simplify histget searchdecl iconv ' +
	        'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos ' +
	        'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar ' +
	        'islocked escape eventhandler remote_send serverlist winrestview ' +
	        'synstack pyeval prevnonblank readfile cindent filereadable changenr ' +
	        'exp'
	    },
	    illegal: /;/,
	    contains: [
	      hljs.NUMBER_MODE,
	      hljs.APOS_STRING_MODE,
	
	      /*
	      A double quote can start either a string or a line comment. Strings are
	      ended before the end of a line by another double quote and can contain
	      escaped double-quotes and post-escaped line breaks.
	
	      Also, any double quote at the beginning of a line is a comment but we
	      don't handle that properly at the moment: any double quote inside will
	      turn them into a string. Handling it properly will require a smarter
	      parser.
	      */
	      {
	        className: 'string',
	        begin: /"(\\"|\n\\|[^"\n])*"/
	      },
	      hljs.COMMENT('"', '$'),
	
	      {
	        className: 'variable',
	        begin: /[bwtglsav]:[\w\d_]*/
	      },
	      {
	        className: 'function',
	        beginKeywords: 'function function!', end: '$',
	        relevance: 0,
	        contains: [
	          hljs.TITLE_MODE,
	          {
	            className: 'params',
	            begin: '\\(', end: '\\)'
	          }
	        ]
	      },
	      {
	        className: 'symbol',
	        begin: /<[\w-]+>/
	      }
	    ]
	  };
	};

/***/ },
/* 265 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  return {
	    case_insensitive: true,
	    lexemes: '[.%]?' + hljs.IDENT_RE,
	    keywords: {
	      keyword:
	        'lock rep repe repz repne repnz xaquire xrelease bnd nobnd ' +
	        'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',
	      built_in:
	        // Instruction pointer
	        'ip eip rip ' +
	        // 8-bit registers
	        'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ' +
	        // 16-bit registers
	        'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w ' +
	        // 32-bit registers
	        'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d ' +
	        // 64-bit registers
	        'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 ' +
	        // Segment registers
	        'cs ds es fs gs ss ' +
	        // Floating point stack registers
	        'st st0 st1 st2 st3 st4 st5 st6 st7 ' +
	        // MMX Registers
	        'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 ' +
	        // SSE registers
	        'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 ' +
	        'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ' +
	        // AVX registers
	        'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ' +
	        'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 ' +
	        // AVX-512F registers
	        'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 ' +
	        'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 ' +
	        // AVX-512F mask registers
	        'k0 k1 k2 k3 k4 k5 k6 k7 ' +
	        // Bound (MPX) register
	        'bnd0 bnd1 bnd2 bnd3 ' +
	        // Special register
	        'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 ' +
	        // NASM altreg package
	        'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b ' +
	        'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d ' +
	        'r0h r1h r2h r3h ' +
	        'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l ' +
	
	        'db dw dd dq dt ddq do dy dz ' +
	        'resb resw resd resq rest resdq reso resy resz ' +
	        'incbin equ times ' +
	        'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',
	
	      meta:
	        '%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif ' +
	        '%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep ' +
	        '%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment ' +
	        '.nolist ' +
	        '__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ ' +
	        '__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend ' +
	        'align alignb sectalign daz nodaz up down zero default option assume public ' +
	
	        'bits use16 use32 use64 default section segment absolute extern global common cpu float ' +
	        '__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ ' +
	        '__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ ' +
	        '__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e ' +
	        'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'
	    },
	    contains: [
	      hljs.COMMENT(
	        ';',
	        '$',
	        {
	          relevance: 0
	        }
	      ),
	      {
	        className: 'number',
	        variants: [
	          // Float number and x87 BCD
	          {
	            begin: '\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|' +
	                   '(0[Xx])?[0-9][0-9_]*\\.?[0-9_]*(?:[pP](?:[+-]?[0-9_]+)?)?)\\b',
	            relevance: 0
	          },
	
	          // Hex number in $
	          { begin: '\\$[0-9][0-9A-Fa-f]*', relevance: 0 },
	
	          // Number in H,D,T,Q,O,B,Y suffix
	          { begin: '\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b' },
	
	          // Number in X,D,T,Q,O,B,Y prefix
	          { begin: '\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b'}
	        ]
	      },
	      // Double quote string
	      hljs.QUOTE_STRING_MODE,
	      {
	        className: 'string',
	        variants: [
	          // Single-quoted string
	          { begin: '\'', end: '[^\\\\]\'' },
	          // Backquoted string
	          { begin: '`', end: '[^\\\\]`' }
	        ],
	        relevance: 0
	      },
	      {
	        className: 'symbol',
	        variants: [
	          // Global label and local label
	          { begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)' },
	          // Macro-local label
	          { begin: '^\\s*%%[A-Za-z0-9_$#@~.?]*:' }
	        ],
	        relevance: 0
	      },
	      // Macro parameter
	      {
	        className: 'subst',
	        begin: '%[0-9]+',
	        relevance: 0
	      },
	      // Macro parameter
	      {
	        className: 'subst',
	        begin: '%!\S+',
	        relevance: 0
	      },
	      {
	        className: 'meta',
	        begin: /^\s*\.[\w_-]+/
	      }
	    ]
	  };
	};

/***/ },
/* 266 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var BUILTIN_MODULES =
	    'ObjectLoader Animate MovieCredits Slides Filters Shading Materials LensFlare Mapping VLCAudioVideo ' +
	    'StereoDecoder PointCloud NetworkAccess RemoteControl RegExp ChromaKey Snowfall NodeJS Speech Charts';
	
	  var XL_KEYWORDS = {
	    keyword:
	      'if then else do while until for loop import with is as where when by data constant ' +
	      'integer real text name boolean symbol infix prefix postfix block tree',
	    literal:
	      'true false nil',
	    built_in:
	      'in mod rem and or xor not abs sign floor ceil sqrt sin cos tan asin ' +
	      'acos atan exp expm1 log log2 log10 log1p pi at text_length text_range ' +
	      'text_find text_replace contains page slide basic_slide title_slide ' +
	      'title subtitle fade_in fade_out fade_at clear_color color line_color ' +
	      'line_width texture_wrap texture_transform texture scale_?x scale_?y ' +
	      'scale_?z? translate_?x translate_?y translate_?z? rotate_?x rotate_?y ' +
	      'rotate_?z? rectangle circle ellipse sphere path line_to move_to ' +
	      'quad_to curve_to theme background contents locally time mouse_?x ' +
	      'mouse_?y mouse_buttons ' +
	      BUILTIN_MODULES
	  };
	
	  var DOUBLE_QUOTE_TEXT = {
	    className: 'string',
	    begin: '"', end: '"', illegal: '\\n'
	  };
	  var SINGLE_QUOTE_TEXT = {
	    className: 'string',
	    begin: '\'', end: '\'', illegal: '\\n'
	  };
	  var LONG_TEXT = {
	    className: 'string',
	    begin: '<<', end: '>>'
	  };
	  var BASED_NUMBER = {
	    className: 'number',
	    begin: '[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'
	  };
	  var IMPORT = {
	    beginKeywords: 'import', end: '$',
	    keywords: XL_KEYWORDS,
	    contains: [DOUBLE_QUOTE_TEXT]
	  };
	  var FUNCTION_DEFINITION = {
	    className: 'function',
	    begin: /[a-z][^\n]*->/, returnBegin: true, end: /->/,
	    contains: [
	      hljs.inherit(hljs.TITLE_MODE, {starts: {
	        endsWithParent: true,
	        keywords: XL_KEYWORDS
	      }})
	    ]
	  };
	  return {
	    aliases: ['tao'],
	    lexemes: /[a-zA-Z][a-zA-Z0-9_?]*/,
	    keywords: XL_KEYWORDS,
	    contains: [
	    hljs.C_LINE_COMMENT_MODE,
	    hljs.C_BLOCK_COMMENT_MODE,
	    DOUBLE_QUOTE_TEXT,
	    SINGLE_QUOTE_TEXT,
	    LONG_TEXT,
	    FUNCTION_DEFINITION,
	    IMPORT,
	    BASED_NUMBER,
	    hljs.NUMBER_MODE
	    ]
	  };
	};

/***/ },
/* 267 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var KEYWORDS = 'for let if while then else return where group by xquery encoding version' +
	    'module namespace boundary-space preserve strip default collation base-uri ordering' +
	    'copy-namespaces order declare import schema namespace function option in allowing empty' +
	    'at tumbling window sliding window start when only end when previous next stable ascending' +
	    'descending empty greatest least some every satisfies switch case typeswitch try catch and' +
	    'or to union intersect instance of treat as castable cast map array delete insert into' +
	    'replace value rename copy modify update';
	  var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';
	  var VAR = {
	    begin: /\$[a-zA-Z0-9\-]+/
	  };
	
	  var NUMBER = {
	    className: 'number',
	    begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
	    relevance: 0
	  };
	
	  var STRING = {
	    className: 'string',
	    variants: [
	      {begin: /"/, end: /"/, contains: [{begin: /""/, relevance: 0}]},
	      {begin: /'/, end: /'/, contains: [{begin: /''/, relevance: 0}]}
	    ]
	  };
	
	  var ANNOTATION = {
	    className: 'meta',
	    begin: '%\\w+'
	  };
	
	  var COMMENT = {
	    className: 'comment',
	    begin: '\\(:', end: ':\\)',
	    relevance: 10,
	    contains: [
	      {
	        className: 'doctag', begin: '@\\w+'
	      }
	    ]
	  };
	
	  var METHOD = {
	    begin: '{', end: '}'
	  };
	
	  var CONTAINS = [
	    VAR,
	    STRING,
	    NUMBER,
	    COMMENT,
	    ANNOTATION,
	    METHOD
	  ];
	  METHOD.contains = CONTAINS;
	
	
	  return {
	    aliases: ['xpath', 'xq'],
	    case_insensitive: false,
	    lexemes: /[a-zA-Z\$][a-zA-Z0-9_:\-]*/,
	    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
	    keywords: {
	      keyword: KEYWORDS,
	      literal: LITERAL
	    },
	    contains: CONTAINS
	  };
	};

/***/ },
/* 268 */
/***/ function(module, exports) {

	module.exports = function(hljs) {
	  var STRING = {
	    className: 'string',
	    contains: [hljs.BACKSLASH_ESCAPE],
	    variants: [
	      {
	        begin: 'b"', end: '"'
	      },
	      {
	        begin: 'b\'', end: '\''
	      },
	      hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
	      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
	    ]
	  };
	  var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};
	  return {
	    aliases: ['zep'],
	    case_insensitive: true,
	    keywords:
	      'and include_once list abstract global private echo interface as static endswitch ' +
	      'array null if endwhile or const for endforeach self var let while isset public ' +
	      'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' +
	      'return parent clone use __CLASS__ __LINE__ else break print eval new ' +
	      'catch __METHOD__ case exception default die require __FUNCTION__ ' +
	      'enddeclare final try switch continue endfor endif declare unset true false ' +
	      'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' +
	      'yield finally int uint long ulong char uchar double float bool boolean string' +
	      'likely unlikely',
	    contains: [
	      hljs.C_LINE_COMMENT_MODE,
	      hljs.HASH_COMMENT_MODE,
	      hljs.COMMENT(
	        '/\\*',
	        '\\*/',
	        {
	          contains: [
	            {
	              className: 'doctag',
	              begin: '@[A-Za-z]+'
	            }
	          ]
	        }
	      ),
	      hljs.COMMENT(
	        '__halt_compiler.+?;',
	        false,
	        {
	          endsWithParent: true,
	          keywords: '__halt_compiler',
	          lexemes: hljs.UNDERSCORE_IDENT_RE
	        }
	      ),
	      {
	        className: 'string',
	        begin: '<<<[\'"]?\\w+[\'"]?$', end: '^\\w+;',
	        contains: [hljs.BACKSLASH_ESCAPE]
	      },
	      {
	        // swallow composed identifiers to avoid parsing them as keywords
	        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
	      },
	      {
	        className: 'function',
	        beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
	        illegal: '\\$|\\[|%',
	        contains: [
	          hljs.UNDERSCORE_TITLE_MODE,
	          {
	            className: 'params',
	            begin: '\\(', end: '\\)',
	            contains: [
	              'self',
	              hljs.C_BLOCK_COMMENT_MODE,
	              STRING,
	              NUMBER
	            ]
	          }
	        ]
	      },
	      {
	        className: 'class',
	        beginKeywords: 'class interface', end: '{', excludeEnd: true,
	        illegal: /[:\(\$"]/,
	        contains: [
	          {beginKeywords: 'extends implements'},
	          hljs.UNDERSCORE_TITLE_MODE
	        ]
	      },
	      {
	        beginKeywords: 'namespace', end: ';',
	        illegal: /[\.']/,
	        contains: [hljs.UNDERSCORE_TITLE_MODE]
	      },
	      {
	        beginKeywords: 'use', end: ';',
	        contains: [hljs.UNDERSCORE_TITLE_MODE]
	      },
	      {
	        begin: '=>' // No markup, just a relevance booster
	      },
	      STRING,
	      NUMBER
	    ]
	  };
	};

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(270);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../../node_modules/css-loader/index.js!./github.css", function() {
				var newContent = require("!!./../../../../../node_modules/css-loader/index.js!./github.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, "/*\n\ngithub.com style (c) Vasily Polovnyov <vast@whiteants.net>\n\n*/\n\n.hljs {\n  display: block;\n  overflow-x: auto;\n  padding: 0.5em;\n  color: #333;\n  background: #f8f8f8;\n}\n\n.hljs-comment,\n.hljs-quote {\n  color: #998;\n  font-style: italic;\n}\n\n.hljs-keyword,\n.hljs-selector-tag,\n.hljs-subst {\n  color: #333;\n  font-weight: bold;\n}\n\n.hljs-number,\n.hljs-literal,\n.hljs-variable,\n.hljs-template-variable,\n.hljs-tag .hljs-attr {\n  color: #008080;\n}\n\n.hljs-string,\n.hljs-doctag {\n  color: #d14;\n}\n\n.hljs-title,\n.hljs-section,\n.hljs-selector-id {\n  color: #900;\n  font-weight: bold;\n}\n\n.hljs-subst {\n  font-weight: normal;\n}\n\n.hljs-type,\n.hljs-class .hljs-title {\n  color: #458;\n  font-weight: bold;\n}\n\n.hljs-tag,\n.hljs-name,\n.hljs-attribute {\n  color: #000080;\n  font-weight: normal;\n}\n\n.hljs-regexp,\n.hljs-link {\n  color: #009926;\n}\n\n.hljs-symbol,\n.hljs-bullet {\n  color: #990073;\n}\n\n.hljs-built_in,\n.hljs-builtin-name {\n  color: #0086b3;\n}\n\n.hljs-meta {\n  color: #999;\n  font-weight: bold;\n}\n\n.hljs-deletion {\n  background: #fdd;\n}\n\n.hljs-addition {\n  background: #dfd;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-strong {\n  font-weight: bold;\n}\n", ""]);
	
	// exports


/***/ },
/* 271 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.removeIndent = exports.extractRealImports = exports.extractExampleCode = undefined;
	
	var _escapeRegExp = __webpack_require__(274);
	
	var _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Get all lines with '// real-import:' prefix and returns them
	 */
	var extractRealImports = function extractRealImports(txt) {
	  var regexExpr = /\/\/ *real-import:(.*)/g;
	  var match = regexExpr.exec(txt);
	
	  if (!match) return '';
	
	  var result = [];
	  while (match != null) {
	    result.push(match[1]);
	    match = regexExpr.exec(txt);
	  }
	  return result.join('\n');
	};
	
	/**
	 *  Counts number of leading spaces on first line and removes them on every line
	 */
	var removeIndent = function removeIndent(txt) {
	  var amountLeadingSpaced = txt.search(/\S/);
	  var regexExp = new RegExp('^( {' + amountLeadingSpaced + '})', 'gm');
	  return txt.replace(regexExp, '');
	};
	
	/**
	 *  Get all lines between example start and example end string or the whole string if not present
	 */
	var extractExampleCode = function extractExampleCode(txt) {
	  var startString = '{/* start example */}';
	  var endString = '{/* end example */}';
	
	  if (txt.indexOf(startString) <= -1 || txt.indexOf(endString) <= -1) return txt;
	
	  var regexExpr = new RegExp((0, _escapeRegExp2.default)(startString) + '[\\r\\n]([\\s\\S]*?)[\r\n].*' + (0, _escapeRegExp2.default)(endString), '');
	  return txt.match(regexExpr).pop();
	};
	
	exports.extractExampleCode = extractExampleCode;
	exports.extractRealImports = extractRealImports;
	exports.removeIndent = removeIndent;

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(275);
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	    reHasRegExpChar = RegExp(reRegExpChar.source);
	
	/**
	 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escapeRegExp('[lodash](https://lodash.com/)');
	 * // => '\[lodash\]\(https://lodash\.com/\)'
	 */
	function escapeRegExp(string) {
	  string = toString(string);
	  return (string && reHasRegExpChar.test(string))
	    ? string.replace(reRegExpChar, '\\$&')
	    : string;
	}
	
	module.exports = escapeRegExp;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(276);
	
	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}
	
	module.exports = toString;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(277),
	    arrayMap = __webpack_require__(280),
	    isArray = __webpack_require__(281),
	    isSymbol = __webpack_require__(282);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = baseToString;


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(278);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(279);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ },
/* 279 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 280 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);
	
	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}
	
	module.exports = arrayMap;


/***/ },
/* 281 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	module.exports = isArray;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(283),
	    isObjectLike = __webpack_require__(286);
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}
	
	module.exports = isSymbol;


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(277),
	    getRawTag = __webpack_require__(284),
	    objectToString = __webpack_require__(285);
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  value = Object(value);
	  return (symToStringTag && symToStringTag in value)
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	module.exports = baseGetTag;


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(277);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	module.exports = getRawTag;


/***/ },
/* 285 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	module.exports = objectToString;


/***/ },
/* 286 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.utils = exports.resolver = exports.handlers = exports.defaultHandlers = exports.parse = undefined;
	
	var _handlers = __webpack_require__(288);
	
	var handlers = _interopRequireWildcard(_handlers);
	
	var _parse = __webpack_require__(405);
	
	var _parse2 = _interopRequireDefault(_parse);
	
	var _resolver = __webpack_require__(454);
	
	var resolver = _interopRequireWildcard(_resolver);
	
	var _utils = __webpack_require__(462);
	
	var utils = _interopRequireWildcard(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var defaultResolver = resolver.findExportedComponentDefinition;
	var defaultHandlers = [handlers.propTypeHandler, handlers.propTypeCompositionHandler, handlers.propDocBlockHandler, handlers.flowTypeHandler, handlers.flowTypeDocBlockHandler, handlers.defaultPropsHandler, handlers.componentDocblockHandler, handlers.displayNameHandler, handlers.componentMethodsHandler, handlers.componentMethodsJsDocHandler];
	
	/**
	 * See `lib/parse.js` for more information about the arguments. This function
	 * simply sets default values for convenience.
	 *
	 * The default resolver looks for *exported* `React.createClass(def)` calls
	 * and expected `def` to resolve to an object expression.
	 *
	 * The default `handlers` look for `propTypes` and `getDefaultProps` in the
	 * provided object expression, and extract prop type information, prop
	 * documentation (from docblocks), default prop values and component
	 * documentation (from a docblock).
	 */
	function defaultParse( // eslint-disable-line no-unused-vars
	src, resolver, // eslint-disable-line no-shadow
	handlers // eslint-disable-line no-shadow
	) {
	  if (!resolver) {
	    resolver = defaultResolver;
	  }
	  if (!handlers) {
	    handlers = defaultHandlers;
	  }
	
	  return (0, _parse2.default)(src, resolver, handlers);
	}
	
	exports.parse = defaultParse;
	exports.defaultHandlers = defaultHandlers;
	exports.handlers = handlers;
	exports.resolver = resolver;
	exports.utils = utils;

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _componentDocblockHandler = __webpack_require__(289);
	
	Object.defineProperty(exports, 'componentDocblockHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_componentDocblockHandler).default;
	  }
	});
	
	var _componentMethodsHandler = __webpack_require__(341);
	
	Object.defineProperty(exports, 'componentMethodsHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_componentMethodsHandler).default;
	  }
	});
	
	var _componentMethodsJsDocHandler = __webpack_require__(369);
	
	Object.defineProperty(exports, 'componentMethodsJsDocHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_componentMethodsJsDocHandler).default;
	  }
	});
	
	var _defaultPropsHandler = __webpack_require__(380);
	
	Object.defineProperty(exports, 'defaultPropsHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_defaultPropsHandler).default;
	  }
	});
	
	var _propTypeHandler = __webpack_require__(384);
	
	Object.defineProperty(exports, 'propTypeHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_propTypeHandler).default;
	  }
	});
	
	var _propTypeCompositionHandler = __webpack_require__(398);
	
	Object.defineProperty(exports, 'propTypeCompositionHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_propTypeCompositionHandler).default;
	  }
	});
	
	var _propDocBlockHandler = __webpack_require__(399);
	
	Object.defineProperty(exports, 'propDocBlockHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_propDocBlockHandler).default;
	  }
	});
	
	var _displayNameHandler = __webpack_require__(401);
	
	Object.defineProperty(exports, 'displayNameHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_displayNameHandler).default;
	  }
	});
	
	var _flowTypeHandler = __webpack_require__(402);
	
	Object.defineProperty(exports, 'flowTypeHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_flowTypeHandler).default;
	  }
	});
	
	var _flowTypeDocBlockHandler = __webpack_require__(404);
	
	Object.defineProperty(exports, 'flowTypeDocBlockHandler', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_flowTypeDocBlockHandler).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = componentDocblockHandler;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _docblock = __webpack_require__(340);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes; /*
	                                                * Copyright (c) 2015, Facebook, Inc.
	                                                * All rights reserved.
	                                                *
	                                                * This source code is licensed under the BSD-style license found in the
	                                                * LICENSE file in the root directory of this source tree. An additional grant
	                                                * of patent rights can be found in the PATENTS file in the same directory.
	                                                *
	                                                * 
	                                                *
	                                                */
	
	function isClassDefinition(nodePath) {
	  var node = nodePath.node;
	  return types.ClassDeclaration.check(node) || types.ClassExpression.check(node);
	}
	
	/**
	 * Finds the nearest block comment before the component definition.
	 */
	function componentDocblockHandler(documentation, path) {
	  var description = null;
	  // Find parent statement (e.g. var Component = React.createClass(<path>);)
	  var searchPath = path;
	  while (searchPath && !types.Statement.check(searchPath.node)) {
	    searchPath = searchPath.parent;
	  }
	  if (searchPath) {
	    // If the parent is an export statement, we have to traverse one more up
	    if (types.ExportNamedDeclaration.check(searchPath.parentPath.node) || types.ExportDefaultDeclaration.check(searchPath.parentPath.node)) {
	      searchPath = searchPath.parentPath;
	    }
	    description = (0, _docblock.getDocblock)(searchPath);
	  }
	  if (description == null && isClassDefinition(path)) {
	    // If we have a class declaration or expression, then the comment might be
	    // attached to the first decorator instead.
	    if (path.node.decorators && path.node.decorators.length > 0) {
	      description = (0, _docblock.getDocblock)(path.get('decorators', 0));
	    }
	  }
	  if (description == null) {
	    // If this is the first statement in the module body, the comment is attached
	    // to the program node
	    var programPath = searchPath;
	    while (programPath && !types.Program.check(programPath.node)) {
	      programPath = programPath.parent;
	    }
	    if (programPath.get('body', 0) === searchPath) {
	      description = (0, _docblock.getDocblock)(programPath);
	    }
	  }
	  documentation.set('description', description || '');
	}

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var types = __webpack_require__(292);
	var parse = __webpack_require__(312).parse;
	var Printer = __webpack_require__(338).Printer;
	
	function print(node, options) {
	    return new Printer(options).print(node);
	}
	
	function prettyPrint(node, options) {
	    return new Printer(options).printGenerically(node);
	}
	
	function run(transformer, options) {
	    return runFile(process.argv[2], transformer, options);
	}
	
	function runFile(path, transformer, options) {
	    __webpack_require__(339).readFile(path, "utf-8", function(err, code) {
	        if (err) {
	            console.error(err);
	            return;
	        }
	
	        runString(code, transformer, options);
	    });
	}
	
	function defaultWriteback(output) {
	    process.stdout.write(output);
	}
	
	function runString(code, transformer, options) {
	    var writeback = options && options.writeback || defaultWriteback;
	    transformer(parse(code, options), function(node) {
	        writeback(print(node, options).code);
	    });
	}
	
	Object.defineProperties(exports, {
	    /**
	     * Parse a string of code into an augmented syntax tree suitable for
	     * arbitrary modification and reprinting.
	     */
	    parse: {
	        enumerable: true,
	        value: parse
	    },
	
	    /**
	     * Traverse and potentially modify an abstract syntax tree using a
	     * convenient visitor syntax:
	     *
	     *   recast.visit(ast, {
	     *     names: [],
	     *     visitIdentifier: function(path) {
	     *       var node = path.value;
	     *       this.visitor.names.push(node.name);
	     *       this.traverse(path);
	     *     }
	     *   });
	     */
	    visit: {
	        enumerable: true,
	        value: types.visit
	    },
	
	    /**
	     * Reprint a modified syntax tree using as much of the original source
	     * code as possible.
	     */
	    print: {
	        enumerable: true,
	        value: print
	    },
	
	    /**
	     * Print without attempting to reuse any original source code.
	     */
	    prettyPrint: {
	        enumerable: false,
	        value: prettyPrint
	    },
	
	    /**
	     * Customized version of require("ast-types").
	     */
	    types: {
	        enumerable: false,
	        value: types
	    },
	
	    /**
	     * Convenient command-line interface (see e.g. example/add-braces).
	     */
	    run: {
	        enumerable: false,
	        value: run
	    }
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(291)))

/***/ },
/* 291 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	// This module was originally created so that Recast could add its own
	// custom types to the AST type system (in particular, the File type), but
	// those types are now incorporated into ast-types, so this module doesn't
	// have much to do anymore. Still, it might prove useful in the future.
	module.exports = __webpack_require__(293);


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(294)([
	    // This core module of AST types captures ES5 as it is parsed today by
	    // git://github.com/ariya/esprima.git#master.
	    __webpack_require__(301),
	
	    // Feel free to add to or remove from this list of extension modules to
	    // configure the precise type hierarchy that you need.
	    __webpack_require__(303),
	    __webpack_require__(304),
	    __webpack_require__(305),
	    __webpack_require__(306),
	    __webpack_require__(307),
	    __webpack_require__(308),
	    __webpack_require__(309),
	    __webpack_require__(310),
	    __webpack_require__(311)
	]);


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (defs) {
	    var used = [];
	    var usedResult = [];
	    var fork = {};
	
	    function use(plugin) {
	        var idx = used.indexOf(plugin);
	        if (idx === -1) {
	            idx = used.length;
	            used.push(plugin);
	            usedResult[idx] = plugin(fork);
	        }
	        return usedResult[idx];
	    }
	
	    fork.use = use;
	
	    var types = use(__webpack_require__(295));
	
	    defs.forEach(use);
	
	    types.finalize();
	
	    var exports = {
	        Type: types.Type,
	        builtInTypes: types.builtInTypes,
	        namedTypes: types.namedTypes,
	        builders: types.builders,
	        defineMethod: types.defineMethod,
	        getFieldNames: types.getFieldNames,
	        getFieldValue: types.getFieldValue,
	        eachField: types.eachField,
	        someField: types.someField,
	        getSupertypeNames: types.getSupertypeNames,
	        astNodesAreEquivalent: use(__webpack_require__(296)),
	        finalize: types.finalize,
	        Path: use(__webpack_require__(297)),
	        NodePath: use(__webpack_require__(298)),
	        PathVisitor: use(__webpack_require__(300)),
	        use: use
	    };
	
	    exports.visit = exports.PathVisitor.visit;
	
	    return exports;
	};

/***/ },
/* 295 */
/***/ function(module, exports) {

	var Ap = Array.prototype;
	var slice = Ap.slice;
	var map = Ap.map;
	var each = Ap.forEach;
	var Op = Object.prototype;
	var objToStr = Op.toString;
	var funObjStr = objToStr.call(function(){});
	var strObjStr = objToStr.call("");
	var hasOwn = Op.hasOwnProperty;
	
	module.exports = function () {
	
	    var exports = {};
	
	    // A type is an object with a .check method that takes a value and returns
	    // true or false according to whether the value matches the type.
	
	    function Type(check, name) {
	        var self = this;
	        if (!(self instanceof Type)) {
	            throw new Error("Type constructor cannot be invoked without 'new'");
	        }
	
	        // Unfortunately we can't elegantly reuse isFunction and isString,
	        // here, because this code is executed while defining those types.
	        if (objToStr.call(check) !== funObjStr) {
	            throw new Error(check + " is not a function");
	        }
	
	        // The `name` parameter can be either a function or a string.
	        var nameObjStr = objToStr.call(name);
	        if (!(nameObjStr === funObjStr ||
	          nameObjStr === strObjStr)) {
	            throw new Error(name + " is neither a function nor a string");
	        }
	
	        Object.defineProperties(self, {
	            name: {value: name},
	            check: {
	                value: function (value, deep) {
	                    var result = check.call(self, value, deep);
	                    if (!result && deep && objToStr.call(deep) === funObjStr)
	                        deep(self, value);
	                    return result;
	                }
	            }
	        });
	    }
	
	    var Tp = Type.prototype;
	
	    // Throughout this file we use Object.defineProperty to prevent
	    // redefinition of exported properties.
	    exports.Type = Type;
	
	    // Like .check, except that failure triggers an AssertionError.
	    Tp.assert = function (value, deep) {
	        if (!this.check(value, deep)) {
	            var str = shallowStringify(value);
	            throw new Error(str + " does not match type " + this);
	        }
	        return true;
	    };
	
	    function shallowStringify(value) {
	        if (isObject.check(value))
	            return "{" + Object.keys(value).map(function (key) {
	                  return key + ": " + value[key];
	              }).join(", ") + "}";
	
	        if (isArray.check(value))
	            return "[" + value.map(shallowStringify).join(", ") + "]";
	
	        return JSON.stringify(value);
	    }
	
	    Tp.toString = function () {
	        var name = this.name;
	
	        if (isString.check(name))
	            return name;
	
	        if (isFunction.check(name))
	            return name.call(this) + "";
	
	        return name + " type";
	    };
	
	    var builtInCtorFns = [];
	    var builtInCtorTypes = [];
	    var builtInTypes = {};
	    exports.builtInTypes = builtInTypes;
	
	    function defBuiltInType(example, name) {
	        var objStr = objToStr.call(example);
	
	        var type = new Type(function (value) {
	            return objToStr.call(value) === objStr;
	        }, name);
	
	        builtInTypes[name] = type;
	
	        if (example && typeof example.constructor === "function") {
	            builtInCtorFns.push(example.constructor);
	            builtInCtorTypes.push(type);
	        }
	
	        return type;
	    }
	
	    // These types check the underlying [[Class]] attribute of the given
	    // value, rather than using the problematic typeof operator. Note however
	    // that no subtyping is considered; so, for instance, isObject.check
	    // returns false for [], /./, new Date, and null.
	    var isString = defBuiltInType("truthy", "string");
	    var isFunction = defBuiltInType(function () {}, "function");
	    var isArray = defBuiltInType([], "array");
	    var isObject = defBuiltInType({}, "object");
	    var isRegExp = defBuiltInType(/./, "RegExp");
	    var isDate = defBuiltInType(new Date, "Date");
	    var isNumber = defBuiltInType(3, "number");
	    var isBoolean = defBuiltInType(true, "boolean");
	    var isNull = defBuiltInType(null, "null");
	    var isUndefined = defBuiltInType(void 0, "undefined");
	
	    // There are a number of idiomatic ways of expressing types, so this
	    // function serves to coerce them all to actual Type objects. Note that
	    // providing the name argument is not necessary in most cases.
	    function toType(from, name) {
	        // The toType function should of course be idempotent.
	        if (from instanceof Type)
	            return from;
	
	        // The Def type is used as a helper for constructing compound
	        // interface types for AST nodes.
	        if (from instanceof Def)
	            return from.type;
	
	        // Support [ElemType] syntax.
	        if (isArray.check(from))
	            return Type.fromArray(from);
	
	        // Support { someField: FieldType, ... } syntax.
	        if (isObject.check(from))
	            return Type.fromObject(from);
	
	        if (isFunction.check(from)) {
	            var bicfIndex = builtInCtorFns.indexOf(from);
	            if (bicfIndex >= 0) {
	                return builtInCtorTypes[bicfIndex];
	            }
	
	            // If isFunction.check(from), and from is not a built-in
	            // constructor, assume from is a binary predicate function we can
	            // use to define the type.
	            return new Type(from, name);
	        }
	
	        // As a last resort, toType returns a type that matches any value that
	        // is === from. This is primarily useful for literal values like
	        // toType(null), but it has the additional advantage of allowing
	        // toType to be a total function.
	        return new Type(function (value) {
	            return value === from;
	        }, isUndefined.check(name) ? function () {
	            return from + "";
	        } : name);
	    }
	
	    // Returns a type that matches the given value iff any of type1, type2,
	    // etc. match the value.
	    Type.or = function (/* type1, type2, ... */) {
	        var types = [];
	        var len = arguments.length;
	        for (var i = 0; i < len; ++i)
	            types.push(toType(arguments[i]));
	
	        return new Type(function (value, deep) {
	            for (var i = 0; i < len; ++i)
	                if (types[i].check(value, deep))
	                    return true;
	            return false;
	        }, function () {
	            return types.join(" | ");
	        });
	    };
	
	    Type.fromArray = function (arr) {
	        if (!isArray.check(arr)) {
	            throw new Error("");
	        }
	        if (arr.length !== 1) {
	            throw new Error("only one element type is permitted for typed arrays");
	        }
	        return toType(arr[0]).arrayOf();
	    };
	
	    Tp.arrayOf = function () {
	        var elemType = this;
	        return new Type(function (value, deep) {
	            return isArray.check(value) && value.every(function (elem) {
	                  return elemType.check(elem, deep);
	              });
	        }, function () {
	            return "[" + elemType + "]";
	        });
	    };
	
	    Type.fromObject = function (obj) {
	        var fields = Object.keys(obj).map(function (name) {
	            return new Field(name, obj[name]);
	        });
	
	        return new Type(function (value, deep) {
	            return isObject.check(value) && fields.every(function (field) {
	                  return field.type.check(value[field.name], deep);
	              });
	        }, function () {
	            return "{ " + fields.join(", ") + " }";
	        });
	    };
	
	    function Field(name, type, defaultFn, hidden) {
	        var self = this;
	
	        if (!(self instanceof Field)) {
	            throw new Error("Field constructor cannot be invoked without 'new'");
	        }
	        isString.assert(name);
	
	        type = toType(type);
	
	        var properties = {
	            name: {value: name},
	            type: {value: type},
	            hidden: {value: !!hidden}
	        };
	
	        if (isFunction.check(defaultFn)) {
	            properties.defaultFn = {value: defaultFn};
	        }
	
	        Object.defineProperties(self, properties);
	    }
	
	    var Fp = Field.prototype;
	
	    Fp.toString = function () {
	        return JSON.stringify(this.name) + ": " + this.type;
	    };
	
	    Fp.getValue = function (obj) {
	        var value = obj[this.name];
	
	        if (!isUndefined.check(value))
	            return value;
	
	        if (this.defaultFn)
	            value = this.defaultFn.call(obj);
	
	        return value;
	    };
	
	    // Define a type whose name is registered in a namespace (the defCache) so
	    // that future definitions will return the same type given the same name.
	    // In particular, this system allows for circular and forward definitions.
	    // The Def object d returned from Type.def may be used to configure the
	    // type d.type by calling methods such as d.bases, d.build, and d.field.
	    Type.def = function (typeName) {
	        isString.assert(typeName);
	        return hasOwn.call(defCache, typeName)
	          ? defCache[typeName]
	          : defCache[typeName] = new Def(typeName);
	    };
	
	    // In order to return the same Def instance every time Type.def is called
	    // with a particular name, those instances need to be stored in a cache.
	    var defCache = Object.create(null);
	
	    function Def(typeName) {
	        var self = this;
	        if (!(self instanceof Def)) {
	            throw new Error("Def constructor cannot be invoked without 'new'");
	        }
	
	        Object.defineProperties(self, {
	            typeName: {value: typeName},
	            baseNames: {value: []},
	            ownFields: {value: Object.create(null)},
	
	            // These two are populated during finalization.
	            allSupertypes: {value: Object.create(null)}, // Includes own typeName.
	            supertypeList: {value: []}, // Linear inheritance hierarchy.
	            allFields: {value: Object.create(null)}, // Includes inherited fields.
	            fieldNames: {value: []}, // Non-hidden keys of allFields.
	
	            type: {
	                value: new Type(function (value, deep) {
	                    return self.check(value, deep);
	                }, typeName)
	            }
	        });
	    }
	
	    Def.fromValue = function (value) {
	        if (value && typeof value === "object") {
	            var type = value.type;
	            if (typeof type === "string" &&
	              hasOwn.call(defCache, type)) {
	                var d = defCache[type];
	                if (d.finalized) {
	                    return d;
	                }
	            }
	        }
	
	        return null;
	    };
	
	    var Dp = Def.prototype;
	
	    Dp.isSupertypeOf = function (that) {
	        if (that instanceof Def) {
	            if (this.finalized !== true ||
	              that.finalized !== true) {
	                throw new Error("");
	            }
	            return hasOwn.call(that.allSupertypes, this.typeName);
	        } else {
	            throw new Error(that + " is not a Def");
	        }
	    };
	
	    // Note that the list returned by this function is a copy of the internal
	    // supertypeList, *without* the typeName itself as the first element.
	    exports.getSupertypeNames = function (typeName) {
	        if (!hasOwn.call(defCache, typeName)) {
	            throw new Error("");
	        }
	        var d = defCache[typeName];
	        if (d.finalized !== true) {
	            throw new Error("");
	        }
	        return d.supertypeList.slice(1);
	    };
	
	    // Returns an object mapping from every known type in the defCache to the
	    // most specific supertype whose name is an own property of the candidates
	    // object.
	    exports.computeSupertypeLookupTable = function (candidates) {
	        var table = {};
	        var typeNames = Object.keys(defCache);
	        var typeNameCount = typeNames.length;
	
	        for (var i = 0; i < typeNameCount; ++i) {
	            var typeName = typeNames[i];
	            var d = defCache[typeName];
	            if (d.finalized !== true) {
	                throw new Error("" + typeName);
	            }
	            for (var j = 0; j < d.supertypeList.length; ++j) {
	                var superTypeName = d.supertypeList[j];
	                if (hasOwn.call(candidates, superTypeName)) {
	                    table[typeName] = superTypeName;
	                    break;
	                }
	            }
	        }
	
	        return table;
	    };
	
	    Dp.checkAllFields = function (value, deep) {
	        var allFields = this.allFields;
	        if (this.finalized !== true) {
	            throw new Error("" + this.typeName);
	        }
	
	        function checkFieldByName(name) {
	            var field = allFields[name];
	            var type = field.type;
	            var child = field.getValue(value);
	            return type.check(child, deep);
	        }
	
	        return isObject.check(value)
	          && Object.keys(allFields).every(checkFieldByName);
	    };
	
	    Dp.check = function (value, deep) {
	        if (this.finalized !== true) {
	            throw new Error(
	              "prematurely checking unfinalized type " + this.typeName
	            );
	        }
	
	        // A Def type can only match an object value.
	        if (!isObject.check(value))
	            return false;
	
	        var vDef = Def.fromValue(value);
	        if (!vDef) {
	            // If we couldn't infer the Def associated with the given value,
	            // and we expected it to be a SourceLocation or a Position, it was
	            // probably just missing a "type" field (because Esprima does not
	            // assign a type property to such nodes). Be optimistic and let
	            // this.checkAllFields make the final decision.
	            if (this.typeName === "SourceLocation" ||
	              this.typeName === "Position") {
	                return this.checkAllFields(value, deep);
	            }
	
	            // Calling this.checkAllFields for any other type of node is both
	            // bad for performance and way too forgiving.
	            return false;
	        }
	
	        // If checking deeply and vDef === this, then we only need to call
	        // checkAllFields once. Calling checkAllFields is too strict when deep
	        // is false, because then we only care about this.isSupertypeOf(vDef).
	        if (deep && vDef === this)
	            return this.checkAllFields(value, deep);
	
	        // In most cases we rely exclusively on isSupertypeOf to make O(1)
	        // subtyping determinations. This suffices in most situations outside
	        // of unit tests, since interface conformance is checked whenever new
	        // instances are created using builder functions.
	        if (!this.isSupertypeOf(vDef))
	            return false;
	
	        // The exception is when deep is true; then, we recursively check all
	        // fields.
	        if (!deep)
	            return true;
	
	        // Use the more specific Def (vDef) to perform the deep check, but
	        // shallow-check fields defined by the less specific Def (this).
	        return vDef.checkAllFields(value, deep)
	          && this.checkAllFields(value, false);
	    };
	
	    Dp.bases = function () {
	        var args = slice.call(arguments);
	        var bases = this.baseNames;
	
	        if (this.finalized) {
	            if (args.length !== bases.length) {
	                throw new Error("");
	            }
	            for (var i = 0; i < args.length; i++) {
	                if (args[i] !== bases[i]) {
	                    throw new Error("");
	                }
	            }
	            return this;
	        }
	
	        args.forEach(function (baseName) {
	            isString.assert(baseName);
	
	            // This indexOf lookup may be O(n), but the typical number of base
	            // names is very small, and indexOf is a native Array method.
	            if (bases.indexOf(baseName) < 0)
	                bases.push(baseName);
	        });
	
	        return this; // For chaining.
	    };
	
	    // False by default until .build(...) is called on an instance.
	    Object.defineProperty(Dp, "buildable", {value: false});
	
	    var builders = {};
	    exports.builders = builders;
	
	    // This object is used as prototype for any node created by a builder.
	    var nodePrototype = {};
	
	    // Call this function to define a new method to be shared by all AST
	     // nodes. The replaced method (if any) is returned for easy wrapping.
	    exports.defineMethod = function (name, func) {
	        var old = nodePrototype[name];
	
	        // Pass undefined as func to delete nodePrototype[name].
	        if (isUndefined.check(func)) {
	            delete nodePrototype[name];
	
	        } else {
	            isFunction.assert(func);
	
	            Object.defineProperty(nodePrototype, name, {
	                enumerable: true, // For discoverability.
	                configurable: true, // For delete proto[name].
	                value: func
	            });
	        }
	
	        return old;
	    };
	
	    var isArrayOfString = isString.arrayOf();
	
	    // Calling the .build method of a Def simultaneously marks the type as
	    // buildable (by defining builders[getBuilderName(typeName)]) and
	    // specifies the order of arguments that should be passed to the builder
	    // function to create an instance of the type.
	    Dp.build = function (/* param1, param2, ... */) {
	        var self = this;
	
	        var newBuildParams = slice.call(arguments);
	        isArrayOfString.assert(newBuildParams);
	
	        // Calling Def.prototype.build multiple times has the effect of merely
	        // redefining this property.
	        Object.defineProperty(self, "buildParams", {
	            value: newBuildParams,
	            writable: false,
	            enumerable: false,
	            configurable: true
	        });
	
	        if (self.buildable) {
	            // If this Def is already buildable, update self.buildParams and
	            // continue using the old builder function.
	            return self;
	        }
	
	        // Every buildable type will have its "type" field filled in
	        // automatically. This includes types that are not subtypes of Node,
	        // like SourceLocation, but that seems harmless (TODO?).
	        self.field("type", String, function () { return self.typeName });
	
	        // Override Dp.buildable for this Def instance.
	        Object.defineProperty(self, "buildable", {value: true});
	
	        Object.defineProperty(builders, getBuilderName(self.typeName), {
	            enumerable: true,
	
	            value: function () {
	                var args = arguments;
	                var argc = args.length;
	                var built = Object.create(nodePrototype);
	
	                if (!self.finalized) {
	                    throw new Error(
	                      "attempting to instantiate unfinalized type " +
	                      self.typeName
	                    );
	                }
	
	                function add(param, i) {
	                    if (hasOwn.call(built, param))
	                        return;
	
	                    var all = self.allFields;
	                    if (!hasOwn.call(all, param)) {
	                        throw new Error("" + param);
	                    }
	
	                    var field = all[param];
	                    var type = field.type;
	                    var value;
	
	                    if (isNumber.check(i) && i < argc) {
	                        value = args[i];
	                    } else if (field.defaultFn) {
	                        // Expose the partially-built object to the default
	                        // function as its `this` object.
	                        value = field.defaultFn.call(built);
	                    } else {
	                        var message = "no value or default function given for field " +
	                          JSON.stringify(param) + " of " + self.typeName + "(" +
	                          self.buildParams.map(function (name) {
	                              return all[name];
	                          }).join(", ") + ")";
	                        throw new Error(message);
	                    }
	
	                    if (!type.check(value)) {
	                        throw new Error(
	                          shallowStringify(value) +
	                          " does not match field " + field +
	                          " of type " + self.typeName
	                        );
	                    }
	
	                    // TODO Could attach getters and setters here to enforce
	                    // dynamic type safety.
	                    built[param] = value;
	                }
	
	                self.buildParams.forEach(function (param, i) {
	                    add(param, i);
	                });
	
	                Object.keys(self.allFields).forEach(function (param) {
	                    add(param); // Use the default value.
	                });
	
	                // Make sure that the "type" field was filled automatically.
	                if (built.type !== self.typeName) {
	                    throw new Error("");
	                }
	
	                return built;
	            }
	        });
	
	        return self; // For chaining.
	    };
	
	    function getBuilderName(typeName) {
	        return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {
	            var len = upperCasePrefix.length;
	            switch (len) {
	                case 0: return "";
	                // If there's only one initial capital letter, just lower-case it.
	                case 1: return upperCasePrefix.toLowerCase();
	                default:
	                    // If there's more than one initial capital letter, lower-case
	                    // all but the last one, so that XMLDefaultDeclaration (for
	                    // example) becomes xmlDefaultDeclaration.
	                    return upperCasePrefix.slice(
	                        0, len - 1).toLowerCase() +
	                      upperCasePrefix.charAt(len - 1);
	            }
	        });
	    }
	    exports.getBuilderName = getBuilderName;
	
	    function getStatementBuilderName(typeName) {
	        typeName = getBuilderName(typeName);
	        return typeName.replace(/(Expression)?$/, "Statement");
	    }
	    exports.getStatementBuilderName = getStatementBuilderName;
	
	    // The reason fields are specified using .field(...) instead of an object
	    // literal syntax is somewhat subtle: the object literal syntax would
	    // support only one key and one value, but with .field(...) we can pass
	    // any number of arguments to specify the field.
	    Dp.field = function (name, type, defaultFn, hidden) {
	        if (this.finalized) {
	            console.error("Ignoring attempt to redefine field " +
	              JSON.stringify(name) + " of finalized type " +
	              JSON.stringify(this.typeName));
	            return this;
	        }
	        this.ownFields[name] = new Field(name, type, defaultFn, hidden);
	        return this; // For chaining.
	    };
	
	    var namedTypes = {};
	    exports.namedTypes = namedTypes;
	
	    // Like Object.keys, but aware of what fields each AST type should have.
	    function getFieldNames(object) {
	        var d = Def.fromValue(object);
	        if (d) {
	            return d.fieldNames.slice(0);
	        }
	
	        if ("type" in object) {
	            throw new Error(
	              "did not recognize object of type " +
	              JSON.stringify(object.type)
	            );
	        }
	
	        return Object.keys(object);
	    }
	    exports.getFieldNames = getFieldNames;
	
	    // Get the value of an object property, taking object.type and default
	    // functions into account.
	    function getFieldValue(object, fieldName) {
	        var d = Def.fromValue(object);
	        if (d) {
	            var field = d.allFields[fieldName];
	            if (field) {
	                return field.getValue(object);
	            }
	        }
	
	        return object && object[fieldName];
	    }
	    exports.getFieldValue = getFieldValue;
	
	    // Iterate over all defined fields of an object, including those missing
	    // or undefined, passing each field name and effective value (as returned
	    // by getFieldValue) to the callback. If the object has no corresponding
	    // Def, the callback will never be called.
	    exports.eachField = function (object, callback, context) {
	        getFieldNames(object).forEach(function (name) {
	            callback.call(this, name, getFieldValue(object, name));
	        }, context);
	    };
	
	    // Similar to eachField, except that iteration stops as soon as the
	    // callback returns a truthy value. Like Array.prototype.some, the final
	    // result is either true or false to indicates whether the callback
	    // returned true for any element or not.
	    exports.someField = function (object, callback, context) {
	        return getFieldNames(object).some(function (name) {
	            return callback.call(this, name, getFieldValue(object, name));
	        }, context);
	    };
	
	    // This property will be overridden as true by individual Def instances
	    // when they are finalized.
	    Object.defineProperty(Dp, "finalized", {value: false});
	
	    Dp.finalize = function () {
	        var self = this;
	
	        // It's not an error to finalize a type more than once, but only the
	        // first call to .finalize does anything.
	        if (!self.finalized) {
	            var allFields = self.allFields;
	            var allSupertypes = self.allSupertypes;
	
	            self.baseNames.forEach(function (name) {
	                var def = defCache[name];
	                if (def instanceof Def) {
	                    def.finalize();
	                    extend(allFields, def.allFields);
	                    extend(allSupertypes, def.allSupertypes);
	                } else {
	                    var message = "unknown supertype name " +
	                      JSON.stringify(name) +
	                      " for subtype " +
	                      JSON.stringify(self.typeName);
	                    throw new Error(message);
	                }
	            });
	
	            // TODO Warn if fields are overridden with incompatible types.
	            extend(allFields, self.ownFields);
	            allSupertypes[self.typeName] = self;
	
	            self.fieldNames.length = 0;
	            for (var fieldName in allFields) {
	                if (hasOwn.call(allFields, fieldName) &&
	                    !allFields[fieldName].hidden) {
	                        self.fieldNames.push(fieldName);
	                }
	            }
	
	            // Types are exported only once they have been finalized.
	            Object.defineProperty(namedTypes, self.typeName, {
	                enumerable: true,
	                value: self.type
	            });
	
	            Object.defineProperty(self, "finalized", {value: true});
	
	            // A linearization of the inheritance hierarchy.
	            populateSupertypeList(self.typeName, self.supertypeList);
	
	            if (self.buildable && self.supertypeList.lastIndexOf("Expression") >= 0) {
	                wrapExpressionBuilderWithStatement(self.typeName);
	            }
	        }
	    };
	
	    // Adds an additional builder for Expression subtypes
	    // that wraps the built Expression in an ExpressionStatements.
	    function wrapExpressionBuilderWithStatement(typeName) {
	        var wrapperName = getStatementBuilderName(typeName);
	
	        // skip if the builder already exists
	        if (builders[wrapperName]) return;
	
	        // the builder function to wrap with builders.ExpressionStatement
	        var wrapped = builders[getBuilderName(typeName)];
	
	        // skip if there is nothing to wrap
	        if (!wrapped) return;
	
	        builders[wrapperName] = function () {
	            return builders.expressionStatement(wrapped.apply(builders, arguments));
	        };
	    }
	
	    function populateSupertypeList(typeName, list) {
	        list.length = 0;
	        list.push(typeName);
	
	        var lastSeen = Object.create(null);
	
	        for (var pos = 0; pos < list.length; ++pos) {
	            typeName = list[pos];
	            var d = defCache[typeName];
	            if (d.finalized !== true) {
	                throw new Error("");
	            }
	
	            // If we saw typeName earlier in the breadth-first traversal,
	            // delete the last-seen occurrence.
	            if (hasOwn.call(lastSeen, typeName)) {
	                delete list[lastSeen[typeName]];
	            }
	
	            // Record the new index of the last-seen occurrence of typeName.
	            lastSeen[typeName] = pos;
	
	            // Enqueue the base names of this type.
	            list.push.apply(list, d.baseNames);
	        }
	
	        // Compaction loop to remove array holes.
	        for (var to = 0, from = to, len = list.length; from < len; ++from) {
	            if (hasOwn.call(list, from)) {
	                list[to++] = list[from];
	            }
	        }
	
	        list.length = to;
	    }
	
	    function extend(into, from) {
	        Object.keys(from).forEach(function (name) {
	            into[name] = from[name];
	        });
	
	        return into;
	    };
	
	    exports.finalize = function () {
	        Object.keys(defCache).forEach(function (name) {
	            defCache[name].finalize();
	        });
	    };
	
	    return exports;
	};


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    var types = fork.use(__webpack_require__(295));
	    var getFieldNames = types.getFieldNames;
	    var getFieldValue = types.getFieldValue;
	    var isArray = types.builtInTypes.array;
	    var isObject = types.builtInTypes.object;
	    var isDate = types.builtInTypes.Date;
	    var isRegExp = types.builtInTypes.RegExp;
	    var hasOwn = Object.prototype.hasOwnProperty;
	
	    function astNodesAreEquivalent(a, b, problemPath) {
	        if (isArray.check(problemPath)) {
	            problemPath.length = 0;
	        } else {
	            problemPath = null;
	        }
	
	        return areEquivalent(a, b, problemPath);
	    }
	
	    astNodesAreEquivalent.assert = function (a, b) {
	        var problemPath = [];
	        if (!astNodesAreEquivalent(a, b, problemPath)) {
	            if (problemPath.length === 0) {
	                if (a !== b) {
	                    throw new Error("Nodes must be equal");
	                }
	            } else {
	                throw new Error(
	                  "Nodes differ in the following path: " +
	                  problemPath.map(subscriptForProperty).join("")
	                );
	            }
	        }
	    };
	
	    function subscriptForProperty(property) {
	        if (/[_$a-z][_$a-z0-9]*/i.test(property)) {
	            return "." + property;
	        }
	        return "[" + JSON.stringify(property) + "]";
	    }
	
	    function areEquivalent(a, b, problemPath) {
	        if (a === b) {
	            return true;
	        }
	
	        if (isArray.check(a)) {
	            return arraysAreEquivalent(a, b, problemPath);
	        }
	
	        if (isObject.check(a)) {
	            return objectsAreEquivalent(a, b, problemPath);
	        }
	
	        if (isDate.check(a)) {
	            return isDate.check(b) && (+a === +b);
	        }
	
	        if (isRegExp.check(a)) {
	            return isRegExp.check(b) && (
	                a.source === b.source &&
	                a.global === b.global &&
	                a.multiline === b.multiline &&
	                a.ignoreCase === b.ignoreCase
	              );
	        }
	
	        return a == b;
	    }
	
	    function arraysAreEquivalent(a, b, problemPath) {
	        isArray.assert(a);
	        var aLength = a.length;
	
	        if (!isArray.check(b) || b.length !== aLength) {
	            if (problemPath) {
	                problemPath.push("length");
	            }
	            return false;
	        }
	
	        for (var i = 0; i < aLength; ++i) {
	            if (problemPath) {
	                problemPath.push(i);
	            }
	
	            if (i in a !== i in b) {
	                return false;
	            }
	
	            if (!areEquivalent(a[i], b[i], problemPath)) {
	                return false;
	            }
	
	            if (problemPath) {
	                var problemPathTail = problemPath.pop();
	                if (problemPathTail !== i) {
	                    throw new Error("" + problemPathTail);
	                }
	            }
	        }
	
	        return true;
	    }
	
	    function objectsAreEquivalent(a, b, problemPath) {
	        isObject.assert(a);
	        if (!isObject.check(b)) {
	            return false;
	        }
	
	        // Fast path for a common property of AST nodes.
	        if (a.type !== b.type) {
	            if (problemPath) {
	                problemPath.push("type");
	            }
	            return false;
	        }
	
	        var aNames = getFieldNames(a);
	        var aNameCount = aNames.length;
	
	        var bNames = getFieldNames(b);
	        var bNameCount = bNames.length;
	
	        if (aNameCount === bNameCount) {
	            for (var i = 0; i < aNameCount; ++i) {
	                var name = aNames[i];
	                var aChild = getFieldValue(a, name);
	                var bChild = getFieldValue(b, name);
	
	                if (problemPath) {
	                    problemPath.push(name);
	                }
	
	                if (!areEquivalent(aChild, bChild, problemPath)) {
	                    return false;
	                }
	
	                if (problemPath) {
	                    var problemPathTail = problemPath.pop();
	                    if (problemPathTail !== name) {
	                        throw new Error("" + problemPathTail);
	                    }
	                }
	            }
	
	            return true;
	        }
	
	        if (!problemPath) {
	            return false;
	        }
	
	        // Since aNameCount !== bNameCount, we need to find some name that's
	        // missing in aNames but present in bNames, or vice-versa.
	
	        var seenNames = Object.create(null);
	
	        for (i = 0; i < aNameCount; ++i) {
	            seenNames[aNames[i]] = true;
	        }
	
	        for (i = 0; i < bNameCount; ++i) {
	            name = bNames[i];
	
	            if (!hasOwn.call(seenNames, name)) {
	                problemPath.push(name);
	                return false;
	            }
	
	            delete seenNames[name];
	        }
	
	        for (name in seenNames) {
	            problemPath.push(name);
	            break;
	        }
	
	        return false;
	    }
	    
	    return astNodesAreEquivalent;
	};


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	var Ap = Array.prototype;
	var slice = Ap.slice;
	var map = Ap.map;
	var Op = Object.prototype;
	var hasOwn = Op.hasOwnProperty;
	
	module.exports = function (fork) {
	    var types = fork.use(__webpack_require__(295));
	    var isArray = types.builtInTypes.array;
	    var isNumber = types.builtInTypes.number;
	
	    function Path(value, parentPath, name) {
	        if (!(this instanceof Path)) {
	            throw new Error("Path constructor cannot be invoked without 'new'");
	        }
	
	        if (parentPath) {
	            if (!(parentPath instanceof Path)) {
	                throw new Error("");
	            }
	        } else {
	            parentPath = null;
	            name = null;
	        }
	
	        // The value encapsulated by this Path, generally equal to
	        // parentPath.value[name] if we have a parentPath.
	        this.value = value;
	
	        // The immediate parent Path of this Path.
	        this.parentPath = parentPath;
	
	        // The name of the property of parentPath.value through which this
	        // Path's value was reached.
	        this.name = name;
	
	        // Calling path.get("child") multiple times always returns the same
	        // child Path object, for both performance and consistency reasons.
	        this.__childCache = null;
	    }
	
	    var Pp = Path.prototype;
	
	    function getChildCache(path) {
	        // Lazily create the child cache. This also cheapens cache
	        // invalidation, since you can just reset path.__childCache to null.
	        return path.__childCache || (path.__childCache = Object.create(null));
	    }
	
	    function getChildPath(path, name) {
	        var cache = getChildCache(path);
	        var actualChildValue = path.getValueProperty(name);
	        var childPath = cache[name];
	        if (!hasOwn.call(cache, name) ||
	          // Ensure consistency between cache and reality.
	          childPath.value !== actualChildValue) {
	            childPath = cache[name] = new path.constructor(
	              actualChildValue, path, name
	            );
	        }
	        return childPath;
	    }
	
	// This method is designed to be overridden by subclasses that need to
	// handle missing properties, etc.
	    Pp.getValueProperty = function getValueProperty(name) {
	        return this.value[name];
	    };
	
	    Pp.get = function get(name) {
	        var path = this;
	        var names = arguments;
	        var count = names.length;
	
	        for (var i = 0; i < count; ++i) {
	            path = getChildPath(path, names[i]);
	        }
	
	        return path;
	    };
	
	    Pp.each = function each(callback, context) {
	        var childPaths = [];
	        var len = this.value.length;
	        var i = 0;
	
	        // Collect all the original child paths before invoking the callback.
	        for (var i = 0; i < len; ++i) {
	            if (hasOwn.call(this.value, i)) {
	                childPaths[i] = this.get(i);
	            }
	        }
	
	        // Invoke the callback on just the original child paths, regardless of
	        // any modifications made to the array by the callback. I chose these
	        // semantics over cleverly invoking the callback on new elements because
	        // this way is much easier to reason about.
	        context = context || this;
	        for (i = 0; i < len; ++i) {
	            if (hasOwn.call(childPaths, i)) {
	                callback.call(context, childPaths[i]);
	            }
	        }
	    };
	
	    Pp.map = function map(callback, context) {
	        var result = [];
	
	        this.each(function (childPath) {
	            result.push(callback.call(this, childPath));
	        }, context);
	
	        return result;
	    };
	
	    Pp.filter = function filter(callback, context) {
	        var result = [];
	
	        this.each(function (childPath) {
	            if (callback.call(this, childPath)) {
	                result.push(childPath);
	            }
	        }, context);
	
	        return result;
	    };
	
	    function emptyMoves() {}
	    function getMoves(path, offset, start, end) {
	        isArray.assert(path.value);
	
	        if (offset === 0) {
	            return emptyMoves;
	        }
	
	        var length = path.value.length;
	        if (length < 1) {
	            return emptyMoves;
	        }
	
	        var argc = arguments.length;
	        if (argc === 2) {
	            start = 0;
	            end = length;
	        } else if (argc === 3) {
	            start = Math.max(start, 0);
	            end = length;
	        } else {
	            start = Math.max(start, 0);
	            end = Math.min(end, length);
	        }
	
	        isNumber.assert(start);
	        isNumber.assert(end);
	
	        var moves = Object.create(null);
	        var cache = getChildCache(path);
	
	        for (var i = start; i < end; ++i) {
	            if (hasOwn.call(path.value, i)) {
	                var childPath = path.get(i);
	                if (childPath.name !== i) {
	                    throw new Error("");
	                }
	                var newIndex = i + offset;
	                childPath.name = newIndex;
	                moves[newIndex] = childPath;
	                delete cache[i];
	            }
	        }
	
	        delete cache.length;
	
	        return function () {
	            for (var newIndex in moves) {
	                var childPath = moves[newIndex];
	                if (childPath.name !== +newIndex) {
	                    throw new Error("");
	                }
	                cache[newIndex] = childPath;
	                path.value[newIndex] = childPath.value;
	            }
	        };
	    }
	
	    Pp.shift = function shift() {
	        var move = getMoves(this, -1);
	        var result = this.value.shift();
	        move();
	        return result;
	    };
	
	    Pp.unshift = function unshift(node) {
	        var move = getMoves(this, arguments.length);
	        var result = this.value.unshift.apply(this.value, arguments);
	        move();
	        return result;
	    };
	
	    Pp.push = function push(node) {
	        isArray.assert(this.value);
	        delete getChildCache(this).length
	        return this.value.push.apply(this.value, arguments);
	    };
	
	    Pp.pop = function pop() {
	        isArray.assert(this.value);
	        var cache = getChildCache(this);
	        delete cache[this.value.length - 1];
	        delete cache.length;
	        return this.value.pop();
	    };
	
	    Pp.insertAt = function insertAt(index, node) {
	        var argc = arguments.length;
	        var move = getMoves(this, argc - 1, index);
	        if (move === emptyMoves) {
	            return this;
	        }
	
	        index = Math.max(index, 0);
	
	        for (var i = 1; i < argc; ++i) {
	            this.value[index + i - 1] = arguments[i];
	        }
	
	        move();
	
	        return this;
	    };
	
	    Pp.insertBefore = function insertBefore(node) {
	        var pp = this.parentPath;
	        var argc = arguments.length;
	        var insertAtArgs = [this.name];
	        for (var i = 0; i < argc; ++i) {
	            insertAtArgs.push(arguments[i]);
	        }
	        return pp.insertAt.apply(pp, insertAtArgs);
	    };
	
	    Pp.insertAfter = function insertAfter(node) {
	        var pp = this.parentPath;
	        var argc = arguments.length;
	        var insertAtArgs = [this.name + 1];
	        for (var i = 0; i < argc; ++i) {
	            insertAtArgs.push(arguments[i]);
	        }
	        return pp.insertAt.apply(pp, insertAtArgs);
	    };
	
	    function repairRelationshipWithParent(path) {
	        if (!(path instanceof Path)) {
	            throw new Error("");
	        }
	
	        var pp = path.parentPath;
	        if (!pp) {
	            // Orphan paths have no relationship to repair.
	            return path;
	        }
	
	        var parentValue = pp.value;
	        var parentCache = getChildCache(pp);
	
	        // Make sure parentCache[path.name] is populated.
	        if (parentValue[path.name] === path.value) {
	            parentCache[path.name] = path;
	        } else if (isArray.check(parentValue)) {
	            // Something caused path.name to become out of date, so attempt to
	            // recover by searching for path.value in parentValue.
	            var i = parentValue.indexOf(path.value);
	            if (i >= 0) {
	                parentCache[path.name = i] = path;
	            }
	        } else {
	            // If path.value disagrees with parentValue[path.name], and
	            // path.name is not an array index, let path.value become the new
	            // parentValue[path.name] and update parentCache accordingly.
	            parentValue[path.name] = path.value;
	            parentCache[path.name] = path;
	        }
	
	        if (parentValue[path.name] !== path.value) {
	            throw new Error("");
	        }
	        if (path.parentPath.get(path.name) !== path) {
	            throw new Error("");
	        }
	
	        return path;
	    }
	
	    Pp.replace = function replace(replacement) {
	        var results = [];
	        var parentValue = this.parentPath.value;
	        var parentCache = getChildCache(this.parentPath);
	        var count = arguments.length;
	
	        repairRelationshipWithParent(this);
	
	        if (isArray.check(parentValue)) {
	            var originalLength = parentValue.length;
	            var move = getMoves(this.parentPath, count - 1, this.name + 1);
	
	            var spliceArgs = [this.name, 1];
	            for (var i = 0; i < count; ++i) {
	                spliceArgs.push(arguments[i]);
	            }
	
	            var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);
	
	            if (splicedOut[0] !== this.value) {
	                throw new Error("");
	            }
	            if (parentValue.length !== (originalLength - 1 + count)) {
	                throw new Error("");
	            }
	
	            move();
	
	            if (count === 0) {
	                delete this.value;
	                delete parentCache[this.name];
	                this.__childCache = null;
	
	            } else {
	                if (parentValue[this.name] !== replacement) {
	                    throw new Error("");
	                }
	
	                if (this.value !== replacement) {
	                    this.value = replacement;
	                    this.__childCache = null;
	                }
	
	                for (i = 0; i < count; ++i) {
	                    results.push(this.parentPath.get(this.name + i));
	                }
	
	                if (results[0] !== this) {
	                    throw new Error("");
	                }
	            }
	
	        } else if (count === 1) {
	            if (this.value !== replacement) {
	                this.__childCache = null;
	            }
	            this.value = parentValue[this.name] = replacement;
	            results.push(this);
	
	        } else if (count === 0) {
	            delete parentValue[this.name];
	            delete this.value;
	            this.__childCache = null;
	
	            // Leave this path cached as parentCache[this.name], even though
	            // it no longer has a value defined.
	
	        } else {
	            throw new Error("Could not replace path");
	        }
	
	        return results;
	    };
	
	    return Path;
	};


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    var types = fork.use(__webpack_require__(295));
	    var n = types.namedTypes;
	    var b = types.builders;
	    var isNumber = types.builtInTypes.number;
	    var isArray = types.builtInTypes.array;
	    var Path = fork.use(__webpack_require__(297));
	    var Scope = fork.use(__webpack_require__(299));
	
	    function NodePath(value, parentPath, name) {
	        if (!(this instanceof NodePath)) {
	            throw new Error("NodePath constructor cannot be invoked without 'new'");
	        }
	        Path.call(this, value, parentPath, name);
	    }
	
	    var NPp = NodePath.prototype = Object.create(Path.prototype, {
	        constructor: {
	            value: NodePath,
	            enumerable: false,
	            writable: true,
	            configurable: true
	        }
	    });
	
	    Object.defineProperties(NPp, {
	        node: {
	            get: function () {
	                Object.defineProperty(this, "node", {
	                    configurable: true, // Enable deletion.
	                    value: this._computeNode()
	                });
	
	                return this.node;
	            }
	        },
	
	        parent: {
	            get: function () {
	                Object.defineProperty(this, "parent", {
	                    configurable: true, // Enable deletion.
	                    value: this._computeParent()
	                });
	
	                return this.parent;
	            }
	        },
	
	        scope: {
	            get: function () {
	                Object.defineProperty(this, "scope", {
	                    configurable: true, // Enable deletion.
	                    value: this._computeScope()
	                });
	
	                return this.scope;
	            }
	        }
	    });
	
	    NPp.replace = function () {
	        delete this.node;
	        delete this.parent;
	        delete this.scope;
	        return Path.prototype.replace.apply(this, arguments);
	    };
	
	    NPp.prune = function () {
	        var remainingNodePath = this.parent;
	
	        this.replace();
	
	        return cleanUpNodesAfterPrune(remainingNodePath);
	    };
	
	    // The value of the first ancestor Path whose value is a Node.
	    NPp._computeNode = function () {
	        var value = this.value;
	        if (n.Node.check(value)) {
	            return value;
	        }
	
	        var pp = this.parentPath;
	        return pp && pp.node || null;
	    };
	
	    // The first ancestor Path whose value is a Node distinct from this.node.
	    NPp._computeParent = function () {
	        var value = this.value;
	        var pp = this.parentPath;
	
	        if (!n.Node.check(value)) {
	            while (pp && !n.Node.check(pp.value)) {
	                pp = pp.parentPath;
	            }
	
	            if (pp) {
	                pp = pp.parentPath;
	            }
	        }
	
	        while (pp && !n.Node.check(pp.value)) {
	            pp = pp.parentPath;
	        }
	
	        return pp || null;
	    };
	
	    // The closest enclosing scope that governs this node.
	    NPp._computeScope = function () {
	        var value = this.value;
	        var pp = this.parentPath;
	        var scope = pp && pp.scope;
	
	        if (n.Node.check(value) &&
	          Scope.isEstablishedBy(value)) {
	            scope = new Scope(this, scope);
	        }
	
	        return scope || null;
	    };
	
	    NPp.getValueProperty = function (name) {
	        return types.getFieldValue(this.value, name);
	    };
	
	    /**
	     * Determine whether this.node needs to be wrapped in parentheses in order
	     * for a parser to reproduce the same local AST structure.
	     *
	     * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression
	     * whose operator is "+" needs parentheses, because `1 + 2 * 3` would
	     * parse differently.
	     *
	     * If assumeExpressionContext === true, we don't worry about edge cases
	     * like an anonymous FunctionExpression appearing lexically first in its
	     * enclosing statement and thus needing parentheses to avoid being parsed
	     * as a FunctionDeclaration with a missing name.
	     */
	    NPp.needsParens = function (assumeExpressionContext) {
	        var pp = this.parentPath;
	        if (!pp) {
	            return false;
	        }
	
	        var node = this.value;
	
	        // Only expressions need parentheses.
	        if (!n.Expression.check(node)) {
	            return false;
	        }
	
	        // Identifiers never need parentheses.
	        if (node.type === "Identifier") {
	            return false;
	        }
	
	        while (!n.Node.check(pp.value)) {
	            pp = pp.parentPath;
	            if (!pp) {
	                return false;
	            }
	        }
	
	        var parent = pp.value;
	
	        switch (node.type) {
	            case "UnaryExpression":
	            case "SpreadElement":
	            case "SpreadProperty":
	                return parent.type === "MemberExpression"
	                  && this.name === "object"
	                  && parent.object === node;
	
	            case "BinaryExpression":
	            case "LogicalExpression":
	                switch (parent.type) {
	                    case "CallExpression":
	                        return this.name === "callee"
	                          && parent.callee === node;
	
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                        return true;
	
	                    case "MemberExpression":
	                        return this.name === "object"
	                          && parent.object === node;
	
	                    case "BinaryExpression":
	                    case "LogicalExpression":
	                        var po = parent.operator;
	                        var pp = PRECEDENCE[po];
	                        var no = node.operator;
	                        var np = PRECEDENCE[no];
	
	                        if (pp > np) {
	                            return true;
	                        }
	
	                        if (pp === np && this.name === "right") {
	                            if (parent.right !== node) {
	                                throw new Error("Nodes must be equal");
	                            }
	                            return true;
	                        }
	
	                    default:
	                        return false;
	                }
	
	            case "SequenceExpression":
	                switch (parent.type) {
	                    case "ForStatement":
	                        // Although parentheses wouldn't hurt around sequence
	                        // expressions in the head of for loops, traditional style
	                        // dictates that e.g. i++, j++ should not be wrapped with
	                        // parentheses.
	                        return false;
	
	                    case "ExpressionStatement":
	                        return this.name !== "expression";
	
	                    default:
	                        // Otherwise err on the side of overparenthesization, adding
	                        // explicit exceptions above if this proves overzealous.
	                        return true;
	                }
	
	            case "YieldExpression":
	                switch (parent.type) {
	                    case "BinaryExpression":
	                    case "LogicalExpression":
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                    case "CallExpression":
	                    case "MemberExpression":
	                    case "NewExpression":
	                    case "ConditionalExpression":
	                    case "YieldExpression":
	                        return true;
	
	                    default:
	                        return false;
	                }
	
	            case "Literal":
	                return parent.type === "MemberExpression"
	                  && isNumber.check(node.value)
	                  && this.name === "object"
	                  && parent.object === node;
	
	            case "AssignmentExpression":
	            case "ConditionalExpression":
	                switch (parent.type) {
	                    case "UnaryExpression":
	                    case "SpreadElement":
	                    case "SpreadProperty":
	                    case "BinaryExpression":
	                    case "LogicalExpression":
	                        return true;
	
	                    case "CallExpression":
	                        return this.name === "callee"
	                          && parent.callee === node;
	
	                    case "ConditionalExpression":
	                        return this.name === "test"
	                          && parent.test === node;
	
	                    case "MemberExpression":
	                        return this.name === "object"
	                          && parent.object === node;
	
	                    default:
	                        return false;
	                }
	
	            default:
	                if (parent.type === "NewExpression" &&
	                  this.name === "callee" &&
	                  parent.callee === node) {
	                    return containsCallExpression(node);
	                }
	        }
	
	        if (assumeExpressionContext !== true &&
	          !this.canBeFirstInStatement() &&
	          this.firstInStatement())
	            return true;
	
	        return false;
	    };
	
	    function isBinary(node) {
	        return n.BinaryExpression.check(node)
	          || n.LogicalExpression.check(node);
	    }
	
	    function isUnaryLike(node) {
	        return n.UnaryExpression.check(node)
	          // I considered making SpreadElement and SpreadProperty subtypes
	          // of UnaryExpression, but they're not really Expression nodes.
	          || (n.SpreadElement && n.SpreadElement.check(node))
	          || (n.SpreadProperty && n.SpreadProperty.check(node));
	    }
	
	    var PRECEDENCE = {};
	    [["||"],
	        ["&&"],
	        ["|"],
	        ["^"],
	        ["&"],
	        ["==", "===", "!=", "!=="],
	        ["<", ">", "<=", ">=", "in", "instanceof"],
	        [">>", "<<", ">>>"],
	        ["+", "-"],
	        ["*", "/", "%"]
	    ].forEach(function (tier, i) {
	        tier.forEach(function (op) {
	            PRECEDENCE[op] = i;
	        });
	    });
	
	    function containsCallExpression(node) {
	        if (n.CallExpression.check(node)) {
	            return true;
	        }
	
	        if (isArray.check(node)) {
	            return node.some(containsCallExpression);
	        }
	
	        if (n.Node.check(node)) {
	            return types.someField(node, function (name, child) {
	                return containsCallExpression(child);
	            });
	        }
	
	        return false;
	    }
	
	    NPp.canBeFirstInStatement = function () {
	        var node = this.node;
	        return !n.FunctionExpression.check(node)
	          && !n.ObjectExpression.check(node);
	    };
	
	    NPp.firstInStatement = function () {
	        return firstInStatement(this);
	    };
	
	    function firstInStatement(path) {
	        for (var node, parent; path.parent; path = path.parent) {
	            node = path.node;
	            parent = path.parent.node;
	
	            if (n.BlockStatement.check(parent) &&
	              path.parent.name === "body" &&
	              path.name === 0) {
	                if (parent.body[0] !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                return true;
	            }
	
	            if (n.ExpressionStatement.check(parent) &&
	              path.name === "expression") {
	                if (parent.expression !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                return true;
	            }
	
	            if (n.SequenceExpression.check(parent) &&
	              path.parent.name === "expressions" &&
	              path.name === 0) {
	                if (parent.expressions[0] !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	
	            if (n.CallExpression.check(parent) &&
	              path.name === "callee") {
	                if (parent.callee !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	
	            if (n.MemberExpression.check(parent) &&
	              path.name === "object") {
	                if (parent.object !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	
	            if (n.ConditionalExpression.check(parent) &&
	              path.name === "test") {
	                if (parent.test !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	
	            if (isBinary(parent) &&
	              path.name === "left") {
	                if (parent.left !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	
	            if (n.UnaryExpression.check(parent) &&
	              !parent.prefix &&
	              path.name === "argument") {
	                if (parent.argument !== node) {
	                    throw new Error("Nodes must be equal");
	                }
	                continue;
	            }
	
	            return false;
	        }
	
	        return true;
	    }
	
	    /**
	     * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.
	     */
	    function cleanUpNodesAfterPrune(remainingNodePath) {
	        if (n.VariableDeclaration.check(remainingNodePath.node)) {
	            var declarations = remainingNodePath.get('declarations').value;
	            if (!declarations || declarations.length === 0) {
	                return remainingNodePath.prune();
	            }
	        } else if (n.ExpressionStatement.check(remainingNodePath.node)) {
	            if (!remainingNodePath.get('expression').value) {
	                return remainingNodePath.prune();
	            }
	        } else if (n.IfStatement.check(remainingNodePath.node)) {
	            cleanUpIfStatementAfterPrune(remainingNodePath);
	        }
	
	        return remainingNodePath;
	    }
	
	    function cleanUpIfStatementAfterPrune(ifStatement) {
	        var testExpression = ifStatement.get('test').value;
	        var alternate = ifStatement.get('alternate').value;
	        var consequent = ifStatement.get('consequent').value;
	
	        if (!consequent && !alternate) {
	            var testExpressionStatement = b.expressionStatement(testExpression);
	
	            ifStatement.replace(testExpressionStatement);
	        } else if (!consequent && alternate) {
	            var negatedTestExpression = b.unaryExpression('!', testExpression, true);
	
	            if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {
	                negatedTestExpression = testExpression.argument;
	            }
	
	            ifStatement.get("test").replace(negatedTestExpression);
	            ifStatement.get("consequent").replace(alternate);
	            ifStatement.get("alternate").replace();
	        }
	    }
	
	    return NodePath;
	};


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = Object.prototype.hasOwnProperty;
	
	module.exports = function (fork) {
	    var types = fork.use(__webpack_require__(295));
	    var Type = types.Type;
	    var namedTypes = types.namedTypes;
	    var Node = namedTypes.Node;
	    var Expression = namedTypes.Expression;
	    var isArray = types.builtInTypes.array;
	    var b = types.builders;
	
	    function Scope(path, parentScope) {
	        if (!(this instanceof Scope)) {
	            throw new Error("Scope constructor cannot be invoked without 'new'");
	        }
	        if (!(path instanceof fork.use(__webpack_require__(298)))) {
	            throw new Error("");
	        }
	        ScopeType.assert(path.value);
	
	        var depth;
	
	        if (parentScope) {
	            if (!(parentScope instanceof Scope)) {
	                throw new Error("");
	            }
	            depth = parentScope.depth + 1;
	        } else {
	            parentScope = null;
	            depth = 0;
	        }
	
	        Object.defineProperties(this, {
	            path: { value: path },
	            node: { value: path.value },
	            isGlobal: { value: !parentScope, enumerable: true },
	            depth: { value: depth },
	            parent: { value: parentScope },
	            bindings: { value: {} },
	            types: { value: {} },
	        });
	    }
	
	    var scopeTypes = [
	        // Program nodes introduce global scopes.
	        namedTypes.Program,
	
	        // Function is the supertype of FunctionExpression,
	        // FunctionDeclaration, ArrowExpression, etc.
	        namedTypes.Function,
	
	        // In case you didn't know, the caught parameter shadows any variable
	        // of the same name in an outer scope.
	        namedTypes.CatchClause
	    ];
	
	    var ScopeType = Type.or.apply(Type, scopeTypes);
	
	    Scope.isEstablishedBy = function(node) {
	        return ScopeType.check(node);
	    };
	
	    var Sp = Scope.prototype;
	
	// Will be overridden after an instance lazily calls scanScope.
	    Sp.didScan = false;
	
	    Sp.declares = function(name) {
	        this.scan();
	        return hasOwn.call(this.bindings, name);
	    };
	
	    Sp.declaresType = function(name) {
	        this.scan();
	        return hasOwn.call(this.types, name);
	    };
	
	    Sp.declareTemporary = function(prefix) {
	        if (prefix) {
	            if (!/^[a-z$_]/i.test(prefix)) {
	                throw new Error("");
	            }
	        } else {
	            prefix = "t$";
	        }
	
	        // Include this.depth in the name to make sure the name does not
	        // collide with any variables in nested/enclosing scopes.
	        prefix += this.depth.toString(36) + "$";
	
	        this.scan();
	
	        var index = 0;
	        while (this.declares(prefix + index)) {
	            ++index;
	        }
	
	        var name = prefix + index;
	        return this.bindings[name] = types.builders.identifier(name);
	    };
	
	    Sp.injectTemporary = function(identifier, init) {
	        identifier || (identifier = this.declareTemporary());
	
	        var bodyPath = this.path.get("body");
	        if (namedTypes.BlockStatement.check(bodyPath.value)) {
	            bodyPath = bodyPath.get("body");
	        }
	
	        bodyPath.unshift(
	          b.variableDeclaration(
	            "var",
	            [b.variableDeclarator(identifier, init || null)]
	          )
	        );
	
	        return identifier;
	    };
	
	    Sp.scan = function(force) {
	        if (force || !this.didScan) {
	            for (var name in this.bindings) {
	                // Empty out this.bindings, just in cases.
	                delete this.bindings[name];
	            }
	            scanScope(this.path, this.bindings, this.types);
	            this.didScan = true;
	        }
	    };
	
	    Sp.getBindings = function () {
	        this.scan();
	        return this.bindings;
	    };
	
	    Sp.getTypes = function () {
	        this.scan();
	        return this.types;
	    };
	
	    function scanScope(path, bindings, scopeTypes) {
	        var node = path.value;
	        ScopeType.assert(node);
	
	        if (namedTypes.CatchClause.check(node)) {
	            // A catch clause establishes a new scope but the only variable
	            // bound in that scope is the catch parameter. Any other
	            // declarations create bindings in the outer scope.
	            addPattern(path.get("param"), bindings);
	
	        } else {
	            recursiveScanScope(path, bindings, scopeTypes);
	        }
	    }
	
	    function recursiveScanScope(path, bindings, scopeTypes) {
	        var node = path.value;
	
	        if (path.parent &&
	          namedTypes.FunctionExpression.check(path.parent.node) &&
	          path.parent.node.id) {
	            addPattern(path.parent.get("id"), bindings);
	        }
	
	        if (!node) {
	            // None of the remaining cases matter if node is falsy.
	
	        } else if (isArray.check(node)) {
	            path.each(function(childPath) {
	                recursiveScanChild(childPath, bindings, scopeTypes);
	            });
	
	        } else if (namedTypes.Function.check(node)) {
	            path.get("params").each(function(paramPath) {
	                addPattern(paramPath, bindings);
	            });
	
	            recursiveScanChild(path.get("body"), bindings, scopeTypes);
	
	        } else if (namedTypes.TypeAlias && namedTypes.TypeAlias.check(node)) {
	            addTypePattern(path.get("id"), scopeTypes);
	
	        } else if (namedTypes.VariableDeclarator.check(node)) {
	            addPattern(path.get("id"), bindings);
	            recursiveScanChild(path.get("init"), bindings, scopeTypes);
	
	        } else if (node.type === "ImportSpecifier" ||
	          node.type === "ImportNamespaceSpecifier" ||
	          node.type === "ImportDefaultSpecifier") {
	            addPattern(
	              // Esprima used to use the .name field to refer to the local
	              // binding identifier for ImportSpecifier nodes, but .id for
	              // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.
	              // ESTree/Acorn/ESpree use .local for all three node types.
	              path.get(node.local ? "local" :
	                node.name ? "name" : "id"),
	              bindings
	            );
	
	        } else if (Node.check(node) && !Expression.check(node)) {
	            types.eachField(node, function(name, child) {
	                var childPath = path.get(name);
	                if (!pathHasValue(childPath, child)) {
	                    throw new Error("");
	                }
	                recursiveScanChild(childPath, bindings, scopeTypes);
	            });
	        }
	    }
	
	    function pathHasValue(path, value) {
	        if (path.value === value) {
	            return true;
	        }
	
	        // Empty arrays are probably produced by defaults.emptyArray, in which
	        // case is makes sense to regard them as equivalent, if not ===.
	        if (Array.isArray(path.value) &&
	          path.value.length === 0 &&
	          Array.isArray(value) &&
	          value.length === 0) {
	            return true;
	        }
	
	        return false;
	    }
	
	    function recursiveScanChild(path, bindings, scopeTypes) {
	        var node = path.value;
	
	        if (!node || Expression.check(node)) {
	            // Ignore falsy values and Expressions.
	
	        } else if (namedTypes.FunctionDeclaration.check(node) &&
	                   node.id !== null) {
	            addPattern(path.get("id"), bindings);
	
	        } else if (namedTypes.ClassDeclaration &&
	          namedTypes.ClassDeclaration.check(node)) {
	            addPattern(path.get("id"), bindings);
	
	        } else if (ScopeType.check(node)) {
	            if (namedTypes.CatchClause.check(node)) {
	                var catchParamName = node.param.name;
	                var hadBinding = hasOwn.call(bindings, catchParamName);
	
	                // Any declarations that occur inside the catch body that do
	                // not have the same name as the catch parameter should count
	                // as bindings in the outer scope.
	                recursiveScanScope(path.get("body"), bindings, scopeTypes);
	
	                // If a new binding matching the catch parameter name was
	                // created while scanning the catch body, ignore it because it
	                // actually refers to the catch parameter and not the outer
	                // scope that we're currently scanning.
	                if (!hadBinding) {
	                    delete bindings[catchParamName];
	                }
	            }
	
	        } else {
	            recursiveScanScope(path, bindings, scopeTypes);
	        }
	    }
	
	    function addPattern(patternPath, bindings) {
	        var pattern = patternPath.value;
	        namedTypes.Pattern.assert(pattern);
	
	        if (namedTypes.Identifier.check(pattern)) {
	            if (hasOwn.call(bindings, pattern.name)) {
	                bindings[pattern.name].push(patternPath);
	            } else {
	                bindings[pattern.name] = [patternPath];
	            }
	
	        } else if (namedTypes.ObjectPattern &&
	          namedTypes.ObjectPattern.check(pattern)) {
	            patternPath.get('properties').each(function(propertyPath) {
	                var property = propertyPath.value;
	                if (namedTypes.Pattern.check(property)) {
	                    addPattern(propertyPath, bindings);
	                } else  if (namedTypes.Property.check(property)) {
	                    addPattern(propertyPath.get('value'), bindings);
	                } else if (namedTypes.SpreadProperty &&
	                  namedTypes.SpreadProperty.check(property)) {
	                    addPattern(propertyPath.get('argument'), bindings);
	                }
	            });
	
	        } else if (namedTypes.ArrayPattern &&
	          namedTypes.ArrayPattern.check(pattern)) {
	            patternPath.get('elements').each(function(elementPath) {
	                var element = elementPath.value;
	                if (namedTypes.Pattern.check(element)) {
	                    addPattern(elementPath, bindings);
	                } else if (namedTypes.SpreadElement &&
	                  namedTypes.SpreadElement.check(element)) {
	                    addPattern(elementPath.get("argument"), bindings);
	                }
	            });
	
	        } else if (namedTypes.PropertyPattern &&
	          namedTypes.PropertyPattern.check(pattern)) {
	            addPattern(patternPath.get('pattern'), bindings);
	
	        } else if ((namedTypes.SpreadElementPattern &&
	          namedTypes.SpreadElementPattern.check(pattern)) ||
	          (namedTypes.SpreadPropertyPattern &&
	          namedTypes.SpreadPropertyPattern.check(pattern))) {
	            addPattern(patternPath.get('argument'), bindings);
	        }
	    }
	
	    function addTypePattern(patternPath, types) {
	        var pattern = patternPath.value;
	        namedTypes.Pattern.assert(pattern);
	
	        if (namedTypes.Identifier.check(pattern)) {
	            if (hasOwn.call(types, pattern.name)) {
	                types[pattern.name].push(patternPath);
	            } else {
	                types[pattern.name] = [patternPath];
	            }
	
	        }
	    }
	
	    Sp.lookup = function(name) {
	        for (var scope = this; scope; scope = scope.parent)
	            if (scope.declares(name))
	                break;
	        return scope;
	    };
	
	    Sp.lookupType = function(name) {
	        for (var scope = this; scope; scope = scope.parent)
	            if (scope.declaresType(name))
	                break;
	        return scope;
	    };
	
	    Sp.getGlobalScope = function() {
	        var scope = this;
	        while (!scope.isGlobal)
	            scope = scope.parent;
	        return scope;
	    };
	
	    return Scope;
	};


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = Object.prototype.hasOwnProperty;
	
	module.exports = function (fork) {
	    var types = fork.use(__webpack_require__(295));
	    var NodePath = fork.use(__webpack_require__(298));
	    var Printable = types.namedTypes.Printable;
	    var isArray = types.builtInTypes.array;
	    var isObject = types.builtInTypes.object;
	    var isFunction = types.builtInTypes.function;
	    var undefined;
	
	    function PathVisitor() {
	        if (!(this instanceof PathVisitor)) {
	            throw new Error(
	              "PathVisitor constructor cannot be invoked without 'new'"
	            );
	        }
	
	        // Permanent state.
	        this._reusableContextStack = [];
	
	        this._methodNameTable = computeMethodNameTable(this);
	        this._shouldVisitComments =
	          hasOwn.call(this._methodNameTable, "Block") ||
	          hasOwn.call(this._methodNameTable, "Line");
	
	        this.Context = makeContextConstructor(this);
	
	        // State reset every time PathVisitor.prototype.visit is called.
	        this._visiting = false;
	        this._changeReported = false;
	    }
	
	    function computeMethodNameTable(visitor) {
	        var typeNames = Object.create(null);
	
	        for (var methodName in visitor) {
	            if (/^visit[A-Z]/.test(methodName)) {
	                typeNames[methodName.slice("visit".length)] = true;
	            }
	        }
	
	        var supertypeTable = types.computeSupertypeLookupTable(typeNames);
	        var methodNameTable = Object.create(null);
	
	        var typeNames = Object.keys(supertypeTable);
	        var typeNameCount = typeNames.length;
	        for (var i = 0; i < typeNameCount; ++i) {
	            var typeName = typeNames[i];
	            methodName = "visit" + supertypeTable[typeName];
	            if (isFunction.check(visitor[methodName])) {
	                methodNameTable[typeName] = methodName;
	            }
	        }
	
	        return methodNameTable;
	    }
	
	    PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {
	        if (methods instanceof PathVisitor) {
	            return methods;
	        }
	
	        if (!isObject.check(methods)) {
	            // An empty visitor?
	            return new PathVisitor;
	        }
	
	        function Visitor() {
	            if (!(this instanceof Visitor)) {
	                throw new Error(
	                  "Visitor constructor cannot be invoked without 'new'"
	                );
	            }
	            PathVisitor.call(this);
	        }
	
	        var Vp = Visitor.prototype = Object.create(PVp);
	        Vp.constructor = Visitor;
	
	        extend(Vp, methods);
	        extend(Visitor, PathVisitor);
	
	        isFunction.assert(Visitor.fromMethodsObject);
	        isFunction.assert(Visitor.visit);
	
	        return new Visitor;
	    };
	
	    function extend(target, source) {
	        for (var property in source) {
	            if (hasOwn.call(source, property)) {
	                target[property] = source[property];
	            }
	        }
	
	        return target;
	    }
	
	    PathVisitor.visit = function visit(node, methods) {
	        return PathVisitor.fromMethodsObject(methods).visit(node);
	    };
	
	    var PVp = PathVisitor.prototype;
	
	    PVp.visit = function () {
	        if (this._visiting) {
	            throw new Error(
	              "Recursively calling visitor.visit(path) resets visitor state. " +
	              "Try this.visit(path) or this.traverse(path) instead."
	            );
	        }
	
	        // Private state that needs to be reset before every traversal.
	        this._visiting = true;
	        this._changeReported = false;
	        this._abortRequested = false;
	
	        var argc = arguments.length;
	        var args = new Array(argc)
	        for (var i = 0; i < argc; ++i) {
	            args[i] = arguments[i];
	        }
	
	        if (!(args[0] instanceof NodePath)) {
	            args[0] = new NodePath({root: args[0]}).get("root");
	        }
	
	        // Called with the same arguments as .visit.
	        this.reset.apply(this, args);
	
	        try {
	            var root = this.visitWithoutReset(args[0]);
	            var didNotThrow = true;
	        } finally {
	            this._visiting = false;
	
	            if (!didNotThrow && this._abortRequested) {
	                // If this.visitWithoutReset threw an exception and
	                // this._abortRequested was set to true, return the root of
	                // the AST instead of letting the exception propagate, so that
	                // client code does not have to provide a try-catch block to
	                // intercept the AbortRequest exception.  Other kinds of
	                // exceptions will propagate without being intercepted and
	                // rethrown by a catch block, so their stacks will accurately
	                // reflect the original throwing context.
	                return args[0].value;
	            }
	        }
	
	        return root;
	    };
	
	    PVp.AbortRequest = function AbortRequest() {};
	    PVp.abort = function () {
	        var visitor = this;
	        visitor._abortRequested = true;
	        var request = new visitor.AbortRequest();
	
	        // If you decide to catch this exception and stop it from propagating,
	        // make sure to call its cancel method to avoid silencing other
	        // exceptions that might be thrown later in the traversal.
	        request.cancel = function () {
	            visitor._abortRequested = false;
	        };
	
	        throw request;
	    };
	
	    PVp.reset = function (path/*, additional arguments */) {
	        // Empty stub; may be reassigned or overridden by subclasses.
	    };
	
	    PVp.visitWithoutReset = function (path) {
	        if (this instanceof this.Context) {
	            // Since this.Context.prototype === this, there's a chance we
	            // might accidentally call context.visitWithoutReset. If that
	            // happens, re-invoke the method against context.visitor.
	            return this.visitor.visitWithoutReset(path);
	        }
	
	        if (!(path instanceof NodePath)) {
	            throw new Error("");
	        }
	
	        var value = path.value;
	
	        var methodName = value &&
	          typeof value === "object" &&
	          typeof value.type === "string" &&
	          this._methodNameTable[value.type];
	
	        if (methodName) {
	            var context = this.acquireContext(path);
	            try {
	                return context.invokeVisitorMethod(methodName);
	            } finally {
	                this.releaseContext(context);
	            }
	
	        } else {
	            // If there was no visitor method to call, visit the children of
	            // this node generically.
	            return visitChildren(path, this);
	        }
	    };
	
	    function visitChildren(path, visitor) {
	        if (!(path instanceof NodePath)) {
	            throw new Error("");
	        }
	        if (!(visitor instanceof PathVisitor)) {
	            throw new Error("");
	        }
	
	        var value = path.value;
	
	        if (isArray.check(value)) {
	            path.each(visitor.visitWithoutReset, visitor);
	        } else if (!isObject.check(value)) {
	            // No children to visit.
	        } else {
	            var childNames = types.getFieldNames(value);
	
	            // The .comments field of the Node type is hidden, so we only
	            // visit it if the visitor defines visitBlock or visitLine, and
	            // value.comments is defined.
	            if (visitor._shouldVisitComments &&
	              value.comments &&
	              childNames.indexOf("comments") < 0) {
	                childNames.push("comments");
	            }
	
	            var childCount = childNames.length;
	            var childPaths = [];
	
	            for (var i = 0; i < childCount; ++i) {
	                var childName = childNames[i];
	                if (!hasOwn.call(value, childName)) {
	                    value[childName] = types.getFieldValue(value, childName);
	                }
	                childPaths.push(path.get(childName));
	            }
	
	            for (var i = 0; i < childCount; ++i) {
	                visitor.visitWithoutReset(childPaths[i]);
	            }
	        }
	
	        return path.value;
	    }
	
	    PVp.acquireContext = function (path) {
	        if (this._reusableContextStack.length === 0) {
	            return new this.Context(path);
	        }
	        return this._reusableContextStack.pop().reset(path);
	    };
	
	    PVp.releaseContext = function (context) {
	        if (!(context instanceof this.Context)) {
	            throw new Error("");
	        }
	        this._reusableContextStack.push(context);
	        context.currentPath = null;
	    };
	
	    PVp.reportChanged = function () {
	        this._changeReported = true;
	    };
	
	    PVp.wasChangeReported = function () {
	        return this._changeReported;
	    };
	
	    function makeContextConstructor(visitor) {
	        function Context(path) {
	            if (!(this instanceof Context)) {
	                throw new Error("");
	            }
	            if (!(this instanceof PathVisitor)) {
	                throw new Error("");
	            }
	            if (!(path instanceof NodePath)) {
	                throw new Error("");
	            }
	
	            Object.defineProperty(this, "visitor", {
	                value: visitor,
	                writable: false,
	                enumerable: true,
	                configurable: false
	            });
	
	            this.currentPath = path;
	            this.needToCallTraverse = true;
	
	            Object.seal(this);
	        }
	
	        if (!(visitor instanceof PathVisitor)) {
	            throw new Error("");
	        }
	
	        // Note that the visitor object is the prototype of Context.prototype,
	        // so all visitor methods are inherited by context objects.
	        var Cp = Context.prototype = Object.create(visitor);
	
	        Cp.constructor = Context;
	        extend(Cp, sharedContextProtoMethods);
	
	        return Context;
	    }
	
	// Every PathVisitor has a different this.Context constructor and
	// this.Context.prototype object, but those prototypes can all use the
	// same reset, invokeVisitorMethod, and traverse function objects.
	    var sharedContextProtoMethods = Object.create(null);
	
	    sharedContextProtoMethods.reset =
	      function reset(path) {
	          if (!(this instanceof this.Context)) {
	              throw new Error("");
	          }
	          if (!(path instanceof NodePath)) {
	              throw new Error("");
	          }
	
	          this.currentPath = path;
	          this.needToCallTraverse = true;
	
	          return this;
	      };
	
	    sharedContextProtoMethods.invokeVisitorMethod =
	      function invokeVisitorMethod(methodName) {
	          if (!(this instanceof this.Context)) {
	              throw new Error("");
	          }
	          if (!(this.currentPath instanceof NodePath)) {
	              throw new Error("");
	          }
	
	          var result = this.visitor[methodName].call(this, this.currentPath);
	
	          if (result === false) {
	              // Visitor methods return false to indicate that they have handled
	              // their own traversal needs, and we should not complain if
	              // this.needToCallTraverse is still true.
	              this.needToCallTraverse = false;
	
	          } else if (result !== undefined) {
	              // Any other non-undefined value returned from the visitor method
	              // is interpreted as a replacement value.
	              this.currentPath = this.currentPath.replace(result)[0];
	
	              if (this.needToCallTraverse) {
	                  // If this.traverse still hasn't been called, visit the
	                  // children of the replacement node.
	                  this.traverse(this.currentPath);
	              }
	          }
	
	          if (this.needToCallTraverse !== false) {
	              throw new Error(
	                "Must either call this.traverse or return false in " + methodName
	              );
	          }
	
	          var path = this.currentPath;
	          return path && path.value;
	      };
	
	    sharedContextProtoMethods.traverse =
	      function traverse(path, newVisitor) {
	          if (!(this instanceof this.Context)) {
	              throw new Error("");
	          }
	          if (!(path instanceof NodePath)) {
	              throw new Error("");
	          }
	          if (!(this.currentPath instanceof NodePath)) {
	              throw new Error("");
	          }
	
	          this.needToCallTraverse = false;
	
	          return visitChildren(path, PathVisitor.fromMethodsObject(
	            newVisitor || this.visitor
	          ));
	      };
	
	    sharedContextProtoMethods.visit =
	      function visit(path, newVisitor) {
	          if (!(this instanceof this.Context)) {
	              throw new Error("");
	          }
	          if (!(path instanceof NodePath)) {
	              throw new Error("");
	          }
	          if (!(this.currentPath instanceof NodePath)) {
	              throw new Error("");
	          }
	
	          this.needToCallTraverse = false;
	
	          return PathVisitor.fromMethodsObject(
	            newVisitor || this.visitor
	          ).visitWithoutReset(path);
	      };
	
	    sharedContextProtoMethods.reportChanged = function reportChanged() {
	        this.visitor.reportChanged();
	    };
	
	    sharedContextProtoMethods.abort = function abort() {
	        this.needToCallTraverse = false;
	        this.visitor.abort();
	    };
	
	    return PathVisitor;
	};


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    var types = fork.use(__webpack_require__(295));
	    var Type = types.Type;
	    var def = Type.def;
	    var or = Type.or;
	    var shared = fork.use(__webpack_require__(302));
	    var defaults = shared.defaults;
	    var geq = shared.geq;
	
	    // Abstract supertype of all syntactic entities that are allowed to have a
	    // .loc field.
	    def("Printable")
	        .field("loc", or(
	            def("SourceLocation"),
	            null
	        ), defaults["null"], true);
	
	    def("Node")
	        .bases("Printable")
	        .field("type", String)
	        .field("comments", or(
	            [def("Comment")],
	            null
	        ), defaults["null"], true);
	
	    def("SourceLocation")
	        .build("start", "end", "source")
	        .field("start", def("Position"))
	        .field("end", def("Position"))
	        .field("source", or(String, null), defaults["null"]);
	
	    def("Position")
	        .build("line", "column")
	        .field("line", geq(1))
	        .field("column", geq(0));
	
	    def("File")
	        .bases("Node")
	        .build("program")
	        .field("program", def("Program"));
	
	    def("Program")
	        .bases("Node")
	        .build("body")
	        .field("body", [def("Statement")]);
	
	    def("Function")
	        .bases("Node")
	        .field("id", or(def("Identifier"), null), defaults["null"])
	        .field("params", [def("Pattern")])
	        .field("body", def("BlockStatement"));
	
	    def("Statement").bases("Node");
	
	// The empty .build() here means that an EmptyStatement can be constructed
	// (i.e. it's not abstract) but that it needs no arguments.
	    def("EmptyStatement").bases("Statement").build();
	
	    def("BlockStatement")
	        .bases("Statement")
	        .build("body")
	        .field("body", [def("Statement")]);
	
	    // TODO Figure out how to silently coerce Expressions to
	    // ExpressionStatements where a Statement was expected.
	    def("ExpressionStatement")
	        .bases("Statement")
	        .build("expression")
	        .field("expression", def("Expression"));
	
	    def("IfStatement")
	        .bases("Statement")
	        .build("test", "consequent", "alternate")
	        .field("test", def("Expression"))
	        .field("consequent", def("Statement"))
	        .field("alternate", or(def("Statement"), null), defaults["null"]);
	
	    def("LabeledStatement")
	        .bases("Statement")
	        .build("label", "body")
	        .field("label", def("Identifier"))
	        .field("body", def("Statement"));
	
	    def("BreakStatement")
	        .bases("Statement")
	        .build("label")
	        .field("label", or(def("Identifier"), null), defaults["null"]);
	
	    def("ContinueStatement")
	        .bases("Statement")
	        .build("label")
	        .field("label", or(def("Identifier"), null), defaults["null"]);
	
	    def("WithStatement")
	        .bases("Statement")
	        .build("object", "body")
	        .field("object", def("Expression"))
	        .field("body", def("Statement"));
	
	    def("SwitchStatement")
	        .bases("Statement")
	        .build("discriminant", "cases", "lexical")
	        .field("discriminant", def("Expression"))
	        .field("cases", [def("SwitchCase")])
	        .field("lexical", Boolean, defaults["false"]);
	
	    def("ReturnStatement")
	        .bases("Statement")
	        .build("argument")
	        .field("argument", or(def("Expression"), null));
	
	    def("ThrowStatement")
	        .bases("Statement")
	        .build("argument")
	        .field("argument", def("Expression"));
	
	    def("TryStatement")
	        .bases("Statement")
	        .build("block", "handler", "finalizer")
	        .field("block", def("BlockStatement"))
	        .field("handler", or(def("CatchClause"), null), function () {
	            return this.handlers && this.handlers[0] || null;
	        })
	        .field("handlers", [def("CatchClause")], function () {
	            return this.handler ? [this.handler] : [];
	        }, true) // Indicates this field is hidden from eachField iteration.
	        .field("guardedHandlers", [def("CatchClause")], defaults.emptyArray)
	        .field("finalizer", or(def("BlockStatement"), null), defaults["null"]);
	
	    def("CatchClause")
	        .bases("Node")
	        .build("param", "guard", "body")
	        .field("param", def("Pattern"))
	        .field("guard", or(def("Expression"), null), defaults["null"])
	        .field("body", def("BlockStatement"));
	
	    def("WhileStatement")
	        .bases("Statement")
	        .build("test", "body")
	        .field("test", def("Expression"))
	        .field("body", def("Statement"));
	
	    def("DoWhileStatement")
	        .bases("Statement")
	        .build("body", "test")
	        .field("body", def("Statement"))
	        .field("test", def("Expression"));
	
	    def("ForStatement")
	        .bases("Statement")
	        .build("init", "test", "update", "body")
	        .field("init", or(
	            def("VariableDeclaration"),
	            def("Expression"),
	            null))
	        .field("test", or(def("Expression"), null))
	        .field("update", or(def("Expression"), null))
	        .field("body", def("Statement"));
	
	    def("ForInStatement")
	        .bases("Statement")
	        .build("left", "right", "body")
	        .field("left", or(
	            def("VariableDeclaration"),
	            def("Expression")))
	        .field("right", def("Expression"))
	        .field("body", def("Statement"));
	
	    def("DebuggerStatement").bases("Statement").build();
	
	    def("Declaration").bases("Statement");
	
	    def("FunctionDeclaration")
	        .bases("Function", "Declaration")
	        .build("id", "params", "body")
	        .field("id", def("Identifier"));
	
	    def("FunctionExpression")
	        .bases("Function", "Expression")
	        .build("id", "params", "body");
	
	    def("VariableDeclaration")
	        .bases("Declaration")
	        .build("kind", "declarations")
	        .field("kind", or("var", "let", "const"))
	        .field("declarations", [def("VariableDeclarator")]);
	
	    def("VariableDeclarator")
	        .bases("Node")
	        .build("id", "init")
	        .field("id", def("Pattern"))
	        .field("init", or(def("Expression"), null));
	
	    // TODO Are all Expressions really Patterns?
	    def("Expression").bases("Node", "Pattern");
	
	    def("ThisExpression").bases("Expression").build();
	
	    def("ArrayExpression")
	        .bases("Expression")
	        .build("elements")
	        .field("elements", [or(def("Expression"), null)]);
	
	    def("ObjectExpression")
	        .bases("Expression")
	        .build("properties")
	        .field("properties", [def("Property")]);
	
	    // TODO Not in the Mozilla Parser API, but used by Esprima.
	    def("Property")
	        .bases("Node") // Want to be able to visit Property Nodes.
	        .build("kind", "key", "value")
	        .field("kind", or("init", "get", "set"))
	        .field("key", or(def("Literal"), def("Identifier")))
	        .field("value", def("Expression"));
	
	    def("SequenceExpression")
	        .bases("Expression")
	        .build("expressions")
	        .field("expressions", [def("Expression")]);
	
	    var UnaryOperator = or(
	        "-", "+", "!", "~",
	        "typeof", "void", "delete");
	
	    def("UnaryExpression")
	        .bases("Expression")
	        .build("operator", "argument", "prefix")
	        .field("operator", UnaryOperator)
	        .field("argument", def("Expression"))
	        // Esprima doesn't bother with this field, presumably because it's
	        // always true for unary operators.
	        .field("prefix", Boolean, defaults["true"]);
	
	    var BinaryOperator = or(
	        "==", "!=", "===", "!==",
	        "<", "<=", ">", ">=",
	        "<<", ">>", ">>>",
	        "+", "-", "*", "/", "%",
	        "&", // TODO Missing from the Parser API.
	        "|", "^", "in",
	        "instanceof", "..");
	
	    def("BinaryExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", BinaryOperator)
	        .field("left", def("Expression"))
	        .field("right", def("Expression"));
	
	    var AssignmentOperator = or(
	        "=", "+=", "-=", "*=", "/=", "%=",
	        "<<=", ">>=", ">>>=",
	        "|=", "^=", "&=");
	
	    def("AssignmentExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", AssignmentOperator)
	        .field("left", def("Pattern"))
	        .field("right", def("Expression"));
	
	    var UpdateOperator = or("++", "--");
	
	    def("UpdateExpression")
	        .bases("Expression")
	        .build("operator", "argument", "prefix")
	        .field("operator", UpdateOperator)
	        .field("argument", def("Expression"))
	        .field("prefix", Boolean);
	
	    var LogicalOperator = or("||", "&&");
	
	    def("LogicalExpression")
	        .bases("Expression")
	        .build("operator", "left", "right")
	        .field("operator", LogicalOperator)
	        .field("left", def("Expression"))
	        .field("right", def("Expression"));
	
	    def("ConditionalExpression")
	        .bases("Expression")
	        .build("test", "consequent", "alternate")
	        .field("test", def("Expression"))
	        .field("consequent", def("Expression"))
	        .field("alternate", def("Expression"));
	
	    def("NewExpression")
	        .bases("Expression")
	        .build("callee", "arguments")
	        .field("callee", def("Expression"))
	        // The Mozilla Parser API gives this type as [or(def("Expression"),
	        // null)], but null values don't really make sense at the call site.
	        // TODO Report this nonsense.
	        .field("arguments", [def("Expression")]);
	
	    def("CallExpression")
	        .bases("Expression")
	        .build("callee", "arguments")
	        .field("callee", def("Expression"))
	        // See comment for NewExpression above.
	        .field("arguments", [def("Expression")]);
	
	    def("MemberExpression")
	        .bases("Expression")
	        .build("object", "property", "computed")
	        .field("object", def("Expression"))
	        .field("property", or(def("Identifier"), def("Expression")))
	        .field("computed", Boolean, function () {
	            var type = this.property.type;
	            if (type === 'Literal' ||
	                type === 'MemberExpression' ||
	                type === 'BinaryExpression') {
	                return true;
	            }
	            return false;
	        });
	
	    def("Pattern").bases("Node");
	
	    def("SwitchCase")
	        .bases("Node")
	        .build("test", "consequent")
	        .field("test", or(def("Expression"), null))
	        .field("consequent", [def("Statement")]);
	
	    def("Identifier")
	        // But aren't Expressions and Patterns already Nodes? TODO Report this.
	        .bases("Node", "Expression", "Pattern")
	        .build("name")
	        .field("name", String);
	
	    def("Literal")
	        // But aren't Expressions already Nodes? TODO Report this.
	        .bases("Node", "Expression")
	        .build("value")
	        .field("value", or(String, Boolean, null, Number, RegExp))
	        .field("regex", or({
	            pattern: String,
	            flags: String
	        }, null), function () {
	            if (this.value instanceof RegExp) {
	                var flags = "";
	
	                if (this.value.ignoreCase) flags += "i";
	                if (this.value.multiline) flags += "m";
	                if (this.value.global) flags += "g";
	
	                return {
	                    pattern: this.value.source,
	                    flags: flags
	                };
	            }
	
	            return null;
	        });
	
	    // Abstract (non-buildable) comment supertype. Not a Node.
	    def("Comment")
	        .bases("Printable")
	        .field("value", String)
	        // A .leading comment comes before the node, whereas a .trailing
	        // comment comes after it. These two fields should not both be true,
	        // but they might both be false when the comment falls inside a node
	        // and the node has no children for the comment to lead or trail,
	        // e.g. { /*dangling*/ }.
	        .field("leading", Boolean, defaults["true"])
	        .field("trailing", Boolean, defaults["false"]);
	};

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    var exports = {};
	    var types = fork.use(__webpack_require__(295));
	    var Type = types.Type;
	    var builtin = types.builtInTypes;
	    var isNumber = builtin.number;
	
	    // An example of constructing a new type with arbitrary constraints from
	    // an existing type.
	    exports.geq = function (than) {
	        return new Type(function (value) {
	            return isNumber.check(value) && value >= than;
	        }, isNumber + " >= " + than);
	    };
	
	    // Default value-returning functions that may optionally be passed as a
	    // third argument to Def.prototype.field.
	    exports.defaults = {
	        // Functions were used because (among other reasons) that's the most
	        // elegant way to allow for the emptyArray one always to give a new
	        // array instance.
	        "null": function () { return null },
	        "emptyArray": function () { return [] },
	        "false": function () { return false },
	        "true": function () { return true },
	        "undefined": function () {}
	    };
	
	    var naiveIsPrimitive = Type.or(
	      builtin.string,
	      builtin.number,
	      builtin.boolean,
	      builtin.null,
	      builtin.undefined
	    );
	
	    exports.isPrimitive = new Type(function (value) {
	        if (value === null)
	            return true;
	        var type = typeof value;
	        return !(type === "object" ||
	        type === "function");
	    }, naiveIsPrimitive.toString());
	
	    return exports;
	};

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(301));
	    var types = fork.use(__webpack_require__(295));
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(__webpack_require__(302)).defaults;
	
	    def("Function")
	      .field("generator", Boolean, defaults["false"])
	      .field("expression", Boolean, defaults["false"])
	      .field("defaults", [or(def("Expression"), null)], defaults.emptyArray)
	      // TODO This could be represented as a RestElement in .params.
	      .field("rest", or(def("Identifier"), null), defaults["null"]);
	
	    // The ESTree way of representing a ...rest parameter.
	    def("RestElement")
	      .bases("Pattern")
	      .build("argument")
	      .field("argument", def("Pattern"));
	
	    def("SpreadElementPattern")
	      .bases("Pattern")
	      .build("argument")
	      .field("argument", def("Pattern"));
	
	    def("FunctionDeclaration")
	      .build("id", "params", "body", "generator", "expression");
	
	    def("FunctionExpression")
	      .build("id", "params", "body", "generator", "expression");
	
	    // The Parser API calls this ArrowExpression, but Esprima and all other
	    // actual parsers use ArrowFunctionExpression.
	    def("ArrowFunctionExpression")
	      .bases("Function", "Expression")
	      .build("params", "body", "expression")
	      // The forced null value here is compatible with the overridden
	      // definition of the "id" field in the Function interface.
	      .field("id", null, defaults["null"])
	      // Arrow function bodies are allowed to be expressions.
	      .field("body", or(def("BlockStatement"), def("Expression")))
	      // The current spec forbids arrow generators, so I have taken the
	      // liberty of enforcing that. TODO Report this.
	      .field("generator", false, defaults["false"]);
	
	    def("YieldExpression")
	      .bases("Expression")
	      .build("argument", "delegate")
	      .field("argument", or(def("Expression"), null))
	      .field("delegate", Boolean, defaults["false"]);
	
	    def("GeneratorExpression")
	      .bases("Expression")
	      .build("body", "blocks", "filter")
	      .field("body", def("Expression"))
	      .field("blocks", [def("ComprehensionBlock")])
	      .field("filter", or(def("Expression"), null));
	
	    def("ComprehensionExpression")
	      .bases("Expression")
	      .build("body", "blocks", "filter")
	      .field("body", def("Expression"))
	      .field("blocks", [def("ComprehensionBlock")])
	      .field("filter", or(def("Expression"), null));
	
	    def("ComprehensionBlock")
	      .bases("Node")
	      .build("left", "right", "each")
	      .field("left", def("Pattern"))
	      .field("right", def("Expression"))
	      .field("each", Boolean);
	
	    def("Property")
	      .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	      .field("value", or(def("Expression"), def("Pattern")))
	      .field("method", Boolean, defaults["false"])
	      .field("shorthand", Boolean, defaults["false"])
	      .field("computed", Boolean, defaults["false"]);
	
	    def("PropertyPattern")
	      .bases("Pattern")
	      .build("key", "pattern")
	      .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	      .field("pattern", def("Pattern"))
	      .field("computed", Boolean, defaults["false"]);
	
	    def("ObjectPattern")
	      .bases("Pattern")
	      .build("properties")
	      .field("properties", [or(def("PropertyPattern"), def("Property"))]);
	
	    def("ArrayPattern")
	      .bases("Pattern")
	      .build("elements")
	      .field("elements", [or(def("Pattern"), null)]);
	
	    def("MethodDefinition")
	      .bases("Declaration")
	      .build("kind", "key", "value", "static")
	      .field("kind", or("constructor", "method", "get", "set"))
	      .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	      .field("value", def("Function"))
	      .field("computed", Boolean, defaults["false"])
	      .field("static", Boolean, defaults["false"]);
	
	    def("SpreadElement")
	      .bases("Node")
	      .build("argument")
	      .field("argument", def("Expression"));
	
	    def("ArrayExpression")
	      .field("elements", [or(
	        def("Expression"),
	        def("SpreadElement"),
	        def("RestElement"),
	        null
	      )]);
	
	    def("NewExpression")
	      .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
	
	    def("CallExpression")
	      .field("arguments", [or(def("Expression"), def("SpreadElement"))]);
	
	    // Note: this node type is *not* an AssignmentExpression with a Pattern on
	    // the left-hand side! The existing AssignmentExpression type already
	    // supports destructuring assignments. AssignmentPattern nodes may appear
	    // wherever a Pattern is allowed, and the right-hand side represents a
	    // default value to be destructured against the left-hand side, if no
	    // value is otherwise provided. For example: default parameter values.
	    def("AssignmentPattern")
	      .bases("Pattern")
	      .build("left", "right")
	      .field("left", def("Pattern"))
	      .field("right", def("Expression"));
	
	    var ClassBodyElement = or(
	      def("MethodDefinition"),
	      def("VariableDeclarator"),
	      def("ClassPropertyDefinition"),
	      def("ClassProperty")
	    );
	
	    def("ClassProperty")
	      .bases("Declaration")
	      .build("key")
	      .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	      .field("computed", Boolean, defaults["false"]);
	
	    def("ClassPropertyDefinition") // static property
	      .bases("Declaration")
	      .build("definition")
	      // Yes, Virginia, circular definitions are permitted.
	      .field("definition", ClassBodyElement);
	
	    def("ClassBody")
	      .bases("Declaration")
	      .build("body")
	      .field("body", [ClassBodyElement]);
	
	    def("ClassDeclaration")
	      .bases("Declaration")
	      .build("id", "body", "superClass")
	      .field("id", or(def("Identifier"), null))
	      .field("body", def("ClassBody"))
	      .field("superClass", or(def("Expression"), null), defaults["null"]);
	
	    def("ClassExpression")
	      .bases("Expression")
	      .build("id", "body", "superClass")
	      .field("id", or(def("Identifier"), null), defaults["null"])
	      .field("body", def("ClassBody"))
	      .field("superClass", or(def("Expression"), null), defaults["null"])
	      .field("implements", [def("ClassImplements")], defaults.emptyArray);
	
	    def("ClassImplements")
	      .bases("Node")
	      .build("id")
	      .field("id", def("Identifier"))
	      .field("superClass", or(def("Expression"), null), defaults["null"]);
	
	    // Specifier and ModuleSpecifier are abstract non-standard types
	    // introduced for definitional convenience.
	    def("Specifier").bases("Node");
	
	    // This supertype is shared/abused by both def/babel.js and
	    // def/esprima.js. In the future, it will be possible to load only one set
	    // of definitions appropriate for a given parser, but until then we must
	    // rely on default functions to reconcile the conflicting AST formats.
	    def("ModuleSpecifier")
	      .bases("Specifier")
	      // This local field is used by Babel/Acorn. It should not technically
	      // be optional in the Babel/Acorn AST format, but it must be optional
	      // in the Esprima AST format.
	      .field("local", or(def("Identifier"), null), defaults["null"])
	      // The id and name fields are used by Esprima. The id field should not
	      // technically be optional in the Esprima AST format, but it must be
	      // optional in the Babel/Acorn AST format.
	      .field("id", or(def("Identifier"), null), defaults["null"])
	      .field("name", or(def("Identifier"), null), defaults["null"]);
	
	    def("TaggedTemplateExpression")
	      .bases("Expression")
	      .build("tag", "quasi")
	      .field("tag", def("Expression"))
	      .field("quasi", def("TemplateLiteral"));
	
	    def("TemplateLiteral")
	      .bases("Expression")
	      .build("quasis", "expressions")
	      .field("quasis", [def("TemplateElement")])
	      .field("expressions", [def("Expression")]);
	
	    def("TemplateElement")
	      .bases("Node")
	      .build("value", "tail")
	      .field("value", {"cooked": String, "raw": String})
	      .field("tail", Boolean);
	};


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(303));
	
	    var types = fork.use(__webpack_require__(295));
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var builtin = types.builtInTypes;
	    var defaults = fork.use(__webpack_require__(302)).defaults;
	
	    def("Function")
	      .field("async", Boolean, defaults["false"]);
	
	    def("SpreadProperty")
	      .bases("Node")
	      .build("argument")
	      .field("argument", def("Expression"));
	
	    def("ObjectExpression")
	      .field("properties", [or(def("Property"), def("SpreadProperty"))]);
	
	    def("SpreadPropertyPattern")
	      .bases("Pattern")
	      .build("argument")
	      .field("argument", def("Pattern"));
	
	    def("ObjectPattern")
	      .field("properties", [or(
	        def("Property"),
	        def("PropertyPattern"),
	        def("SpreadPropertyPattern")
	      )]);
	
	    def("AwaitExpression")
	      .bases("Expression")
	      .build("argument", "all")
	      .field("argument", or(def("Expression"), null))
	      .field("all", Boolean, defaults["false"]);
	};

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(301));
	    var types = fork.use(__webpack_require__(295));
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var shared = fork.use(__webpack_require__(302));
	    var geq = shared.geq;
	    var defaults = shared.defaults;
	
	    def("Function")
	        // SpiderMonkey allows expression closures: function(x) x+1
	        .field("body", or(def("BlockStatement"), def("Expression")));
	
	    def("ForInStatement")
	        .build("left", "right", "body", "each")
	        .field("each", Boolean, defaults["false"]);
	
	    def("ForOfStatement")
	        .bases("Statement")
	        .build("left", "right", "body")
	        .field("left", or(
	            def("VariableDeclaration"),
	            def("Expression")))
	        .field("right", def("Expression"))
	        .field("body", def("Statement"));
	
	    def("LetStatement")
	        .bases("Statement")
	        .build("head", "body")
	        // TODO Deviating from the spec by reusing VariableDeclarator here.
	        .field("head", [def("VariableDeclarator")])
	        .field("body", def("Statement"));
	
	    def("LetExpression")
	        .bases("Expression")
	        .build("head", "body")
	        // TODO Deviating from the spec by reusing VariableDeclarator here.
	        .field("head", [def("VariableDeclarator")])
	        .field("body", def("Expression"));
	
	    def("GraphExpression")
	        .bases("Expression")
	        .build("index", "expression")
	        .field("index", geq(0))
	        .field("expression", def("Literal"));
	
	    def("GraphIndexExpression")
	        .bases("Expression")
	        .build("index")
	        .field("index", geq(0));
	};

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(301));
	    var types = fork.use(__webpack_require__(295));
	    var def = types.Type.def;
	    var or = types.Type.or;
	
	    // Note that none of these types are buildable because the Mozilla Parser
	    // API doesn't specify any builder functions, and nobody uses E4X anymore.
	
	    def("XMLDefaultDeclaration")
	        .bases("Declaration")
	        .field("namespace", def("Expression"));
	
	    def("XMLAnyName").bases("Expression");
	
	    def("XMLQualifiedIdentifier")
	        .bases("Expression")
	        .field("left", or(def("Identifier"), def("XMLAnyName")))
	        .field("right", or(def("Identifier"), def("Expression")))
	        .field("computed", Boolean);
	
	    def("XMLFunctionQualifiedIdentifier")
	        .bases("Expression")
	        .field("right", or(def("Identifier"), def("Expression")))
	        .field("computed", Boolean);
	
	    def("XMLAttributeSelector")
	        .bases("Expression")
	        .field("attribute", def("Expression"));
	
	    def("XMLFilterExpression")
	        .bases("Expression")
	        .field("left", def("Expression"))
	        .field("right", def("Expression"));
	
	    def("XMLElement")
	        .bases("XML", "Expression")
	        .field("contents", [def("XML")]);
	
	    def("XMLList")
	        .bases("XML", "Expression")
	        .field("contents", [def("XML")]);
	
	    def("XML").bases("Node");
	
	    def("XMLEscape")
	        .bases("XML")
	        .field("expression", def("Expression"));
	
	    def("XMLText")
	        .bases("XML")
	        .field("text", String);
	
	    def("XMLStartTag")
	        .bases("XML")
	        .field("contents", [def("XML")]);
	
	    def("XMLEndTag")
	        .bases("XML")
	        .field("contents", [def("XML")]);
	
	    def("XMLPointTag")
	        .bases("XML")
	        .field("contents", [def("XML")]);
	
	    def("XMLName")
	        .bases("XML")
	        .field("contents", or(String, [def("XML")]));
	
	    def("XMLAttribute")
	        .bases("XML")
	        .field("value", String);
	
	    def("XMLCdata")
	        .bases("XML")
	        .field("contents", String);
	
	    def("XMLComment")
	        .bases("XML")
	        .field("contents", String);
	
	    def("XMLProcessingInstruction")
	        .bases("XML")
	        .field("target", String)
	        .field("contents", or(String, null));
	};

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(304));
	
	    var types = fork.use(__webpack_require__(295));
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(__webpack_require__(302)).defaults;
	
	    def("JSXAttribute")
	      .bases("Node")
	      .build("name", "value")
	      .field("name", or(def("JSXIdentifier"), def("JSXNamespacedName")))
	      .field("value", or(
	        def("Literal"), // attr="value"
	        def("JSXExpressionContainer"), // attr={value}
	        null // attr= or just attr
	      ), defaults["null"]);
	
	    def("JSXIdentifier")
	      .bases("Identifier")
	      .build("name")
	      .field("name", String);
	
	    def("JSXNamespacedName")
	      .bases("Node")
	      .build("namespace", "name")
	      .field("namespace", def("JSXIdentifier"))
	      .field("name", def("JSXIdentifier"));
	
	    def("JSXMemberExpression")
	      .bases("MemberExpression")
	      .build("object", "property")
	      .field("object", or(def("JSXIdentifier"), def("JSXMemberExpression")))
	      .field("property", def("JSXIdentifier"))
	      .field("computed", Boolean, defaults.false);
	
	    var JSXElementName = or(
	      def("JSXIdentifier"),
	      def("JSXNamespacedName"),
	      def("JSXMemberExpression")
	    );
	
	    def("JSXSpreadAttribute")
	      .bases("Node")
	      .build("argument")
	      .field("argument", def("Expression"));
	
	    var JSXAttributes = [or(
	      def("JSXAttribute"),
	      def("JSXSpreadAttribute")
	    )];
	
	    def("JSXExpressionContainer")
	      .bases("Expression")
	      .build("expression")
	      .field("expression", def("Expression"));
	
	    def("JSXElement")
	      .bases("Expression")
	      .build("openingElement", "closingElement", "children")
	      .field("openingElement", def("JSXOpeningElement"))
	      .field("closingElement", or(def("JSXClosingElement"), null), defaults["null"])
	      .field("children", [or(
	        def("JSXElement"),
	        def("JSXExpressionContainer"),
	        def("JSXText"),
	        def("Literal") // TODO Esprima should return JSXText instead.
	      )], defaults.emptyArray)
	      .field("name", JSXElementName, function () {
	          // Little-known fact: the `this` object inside a default function
	          // is none other than the partially-built object itself, and any
	          // fields initialized directly from builder function arguments
	          // (like openingElement, closingElement, and children) are
	          // guaranteed to be available.
	          return this.openingElement.name;
	      }, true) // hidden from traversal
	      .field("selfClosing", Boolean, function () {
	          return this.openingElement.selfClosing;
	      }, true) // hidden from traversal
	      .field("attributes", JSXAttributes, function () {
	          return this.openingElement.attributes;
	      }, true); // hidden from traversal
	
	    def("JSXOpeningElement")
	      .bases("Node") // TODO Does this make sense? Can't really be an JSXElement.
	      .build("name", "attributes", "selfClosing")
	      .field("name", JSXElementName)
	      .field("attributes", JSXAttributes, defaults.emptyArray)
	      .field("selfClosing", Boolean, defaults["false"]);
	
	    def("JSXClosingElement")
	      .bases("Node") // TODO Same concern.
	      .build("name")
	      .field("name", JSXElementName);
	
	    def("JSXText")
	      .bases("Literal")
	      .build("value")
	      .field("value", String);
	
	    def("JSXEmptyExpression").bases("Expression").build();
	
	};

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(304));
	
	    var types = fork.use(__webpack_require__(295));
	    var def = types.Type.def;
	    var or = types.Type.or;
	    var defaults = fork.use(__webpack_require__(302)).defaults;
	
	    // Type Annotations
	    def("Type").bases("Node");
	
	    def("AnyTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("EmptyTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("MixedTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("VoidTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("NumberTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("NumberLiteralTypeAnnotation")
	      .bases("Type")
	      .build("value", "raw")
	      .field("value", Number)
	      .field("raw", String);
	
	    def("StringTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("StringLiteralTypeAnnotation")
	      .bases("Type")
	      .build("value", "raw")
	      .field("value", String)
	      .field("raw", String);
	
	    def("BooleanTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("BooleanLiteralTypeAnnotation")
	      .bases("Type")
	      .build("value", "raw")
	      .field("value", Boolean)
	      .field("raw", String);
	
	    def("TypeAnnotation")
	      .bases("Node")
	      .build("typeAnnotation")
	      .field("typeAnnotation", def("Type"));
	
	    def("NullableTypeAnnotation")
	      .bases("Type")
	      .build("typeAnnotation")
	      .field("typeAnnotation", def("Type"));
	
	    def("NullLiteralTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("NullTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("ThisTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("ExistsTypeAnnotation")
	      .bases("Type")
	      .build();
	
	    def("ExistentialTypeParam")
	      .bases("Type")
	      .build();
	
	    def("FunctionTypeAnnotation")
	      .bases("Type")
	      .build("params", "returnType", "rest", "typeParameters")
	      .field("params", [def("FunctionTypeParam")])
	      .field("returnType", def("Type"))
	      .field("rest", or(def("FunctionTypeParam"), null))
	      .field("typeParameters", or(def("TypeParameterDeclaration"), null));
	
	    def("FunctionTypeParam")
	      .bases("Node")
	      .build("name", "typeAnnotation", "optional")
	      .field("name", def("Identifier"))
	      .field("typeAnnotation", def("Type"))
	      .field("optional", Boolean);
	
	    def("ArrayTypeAnnotation")
	      .bases("Type")
	      .build("elementType")
	      .field("elementType", def("Type"));
	
	    def("ObjectTypeAnnotation")
	      .bases("Type")
	      .build("properties", "indexers", "callProperties")
	      .field("properties", [def("ObjectTypeProperty")])
	      .field("indexers", [def("ObjectTypeIndexer")], defaults.emptyArray)
	      .field("callProperties",
	        [def("ObjectTypeCallProperty")],
	        defaults.emptyArray)
	      .field("exact", Boolean, defaults["false"]);
	
	    def("ObjectTypeProperty")
	      .bases("Node")
	      .build("key", "value", "optional")
	      .field("key", or(def("Literal"), def("Identifier")))
	      .field("value", def("Type"))
	      .field("optional", Boolean)
	      .field("variance",
	        or("plus", "minus", null),
	        defaults["null"]);
	
	    def("ObjectTypeIndexer")
	      .bases("Node")
	      .build("id", "key", "value")
	      .field("id", def("Identifier"))
	      .field("key", def("Type"))
	      .field("value", def("Type"))
	      .field("variance",
	        or("plus", "minus", null),
	        defaults["null"]);
	
	    def("ObjectTypeCallProperty")
	      .bases("Node")
	      .build("value")
	      .field("value", def("FunctionTypeAnnotation"))
	      .field("static", Boolean, defaults["false"]);
	
	    def("QualifiedTypeIdentifier")
	      .bases("Node")
	      .build("qualification", "id")
	      .field("qualification",
	        or(def("Identifier"),
	          def("QualifiedTypeIdentifier")))
	      .field("id", def("Identifier"));
	
	    def("GenericTypeAnnotation")
	      .bases("Type")
	      .build("id", "typeParameters")
	      .field("id", or(def("Identifier"), def("QualifiedTypeIdentifier")))
	      .field("typeParameters", or(def("TypeParameterInstantiation"), null));
	
	    def("MemberTypeAnnotation")
	      .bases("Type")
	      .build("object", "property")
	      .field("object", def("Identifier"))
	      .field("property",
	        or(def("MemberTypeAnnotation"),
	          def("GenericTypeAnnotation")));
	
	    def("UnionTypeAnnotation")
	      .bases("Type")
	      .build("types")
	      .field("types", [def("Type")]);
	
	    def("IntersectionTypeAnnotation")
	      .bases("Type")
	      .build("types")
	      .field("types", [def("Type")]);
	
	    def("TypeofTypeAnnotation")
	      .bases("Type")
	      .build("argument")
	      .field("argument", def("Type"));
	
	    def("Identifier")
	      .field("typeAnnotation", or(def("TypeAnnotation"), null), defaults["null"]);
	
	    def("TypeParameterDeclaration")
	      .bases("Node")
	      .build("params")
	      .field("params", [def("TypeParameter")]);
	
	    def("TypeParameterInstantiation")
	      .bases("Node")
	      .build("params")
	      .field("params", [def("Type")]);
	
	    def("TypeParameter")
	      .bases("Type")
	      .build("name", "variance", "bound")
	      .field("name", String)
	      .field("variance",
	        or("plus", "minus", null),
	        defaults["null"])
	      .field("bound",
	        or(def("TypeAnnotation"), null),
	        defaults["null"]);
	
	    def("Function")
	      .field("returnType",
	        or(def("TypeAnnotation"), null),
	        defaults["null"])
	      .field("typeParameters",
	        or(def("TypeParameterDeclaration"), null),
	        defaults["null"]);
	
	    def("ClassProperty")
	      .build("key", "value", "typeAnnotation", "static")
	      .field("value", or(def("Expression"), null))
	      .field("typeAnnotation", or(def("TypeAnnotation"), null))
	      .field("static", Boolean, defaults["false"])
	      .field("variance",
	        or("plus", "minus", null),
	        defaults["null"]);
	
	    def("ClassImplements")
	      .field("typeParameters",
	        or(def("TypeParameterInstantiation"), null),
	        defaults["null"]);
	
	    def("InterfaceDeclaration")
	      .bases("Declaration")
	      .build("id", "body", "extends")
	      .field("id", def("Identifier"))
	      .field("typeParameters",
	        or(def("TypeParameterDeclaration"), null),
	        defaults["null"])
	      .field("body", def("ObjectTypeAnnotation"))
	      .field("extends", [def("InterfaceExtends")]);
	
	    def("DeclareInterface")
	      .bases("InterfaceDeclaration")
	      .build("id", "body", "extends");
	
	    def("InterfaceExtends")
	      .bases("Node")
	      .build("id")
	      .field("id", def("Identifier"))
	      .field("typeParameters", or(def("TypeParameterInstantiation"), null));
	
	    def("TypeAlias")
	      .bases("Declaration")
	      .build("id", "typeParameters", "right")
	      .field("id", def("Identifier"))
	      .field("typeParameters", or(def("TypeParameterDeclaration"), null))
	      .field("right", def("Type"));
	
	    def("DeclareTypeAlias")
	      .bases("TypeAlias")
	      .build("id", "typeParameters", "right");
	
	    def("TypeCastExpression")
	      .bases("Expression")
	      .build("expression", "typeAnnotation")
	      .field("expression", def("Expression"))
	      .field("typeAnnotation", def("TypeAnnotation"));
	
	    def("TupleTypeAnnotation")
	      .bases("Type")
	      .build("types")
	      .field("types", [def("Type")]);
	
	    def("DeclareVariable")
	      .bases("Statement")
	      .build("id")
	      .field("id", def("Identifier"));
	
	    def("DeclareFunction")
	      .bases("Statement")
	      .build("id")
	      .field("id", def("Identifier"));
	
	    def("DeclareClass")
	      .bases("InterfaceDeclaration")
	      .build("id");
	
	    def("DeclareModule")
	      .bases("Statement")
	      .build("id", "body")
	      .field("id", or(def("Identifier"), def("Literal")))
	      .field("body", def("BlockStatement"));
	
	    def("DeclareModuleExports")
	      .bases("Statement")
	      .build("typeAnnotation")
	      .field("typeAnnotation", def("Type"));
	
	    def("DeclareExportDeclaration")
	      .bases("Declaration")
	      .build("default", "declaration", "specifiers", "source")
	      .field("default", Boolean)
	      .field("declaration", or(
	        def("DeclareVariable"),
	        def("DeclareFunction"),
	        def("DeclareClass"),
	        def("Type"), // Implies default.
	        null
	      ))
	      .field("specifiers", [or(
	        def("ExportSpecifier"),
	        def("ExportBatchSpecifier")
	      )], defaults.emptyArray)
	      .field("source", or(
	        def("Literal"),
	        null
	      ), defaults["null"]);
	};


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(304));
	
	    var types = fork.use(__webpack_require__(295));
	    var defaults = fork.use(__webpack_require__(302)).defaults;
	    var def = types.Type.def;
	    var or = types.Type.or;
	
	    def("VariableDeclaration")
	      .field("declarations", [or(
	        def("VariableDeclarator"),
	        def("Identifier") // Esprima deviation.
	      )]);
	
	    def("Property")
	      .field("value", or(
	        def("Expression"),
	        def("Pattern") // Esprima deviation.
	      ));
	
	    def("ArrayPattern")
	      .field("elements", [or(
	        def("Pattern"),
	        def("SpreadElement"),
	        null
	      )]);
	
	    def("ObjectPattern")
	      .field("properties", [or(
	        def("Property"),
	        def("PropertyPattern"),
	        def("SpreadPropertyPattern"),
	        def("SpreadProperty") // Used by Esprima.
	      )]);
	
	// Like ModuleSpecifier, except type:"ExportSpecifier" and buildable.
	// export {<id [as name]>} [from ...];
	    def("ExportSpecifier")
	      .bases("ModuleSpecifier")
	      .build("id", "name");
	
	// export <*> from ...;
	    def("ExportBatchSpecifier")
	      .bases("Specifier")
	      .build();
	
	// Like ModuleSpecifier, except type:"ImportSpecifier" and buildable.
	// import {<id [as name]>} from ...;
	    def("ImportSpecifier")
	      .bases("ModuleSpecifier")
	      .build("id", "name");
	
	// import <* as id> from ...;
	    def("ImportNamespaceSpecifier")
	      .bases("ModuleSpecifier")
	      .build("id");
	
	// import <id> from ...;
	    def("ImportDefaultSpecifier")
	      .bases("ModuleSpecifier")
	      .build("id");
	
	    def("ExportDeclaration")
	      .bases("Declaration")
	      .build("default", "declaration", "specifiers", "source")
	      .field("default", Boolean)
	      .field("declaration", or(
	        def("Declaration"),
	        def("Expression"), // Implies default.
	        null
	      ))
	      .field("specifiers", [or(
	        def("ExportSpecifier"),
	        def("ExportBatchSpecifier")
	      )], defaults.emptyArray)
	      .field("source", or(
	        def("Literal"),
	        null
	      ), defaults["null"]);
	
	    def("ImportDeclaration")
	      .bases("Declaration")
	      .build("specifiers", "source")
	      .field("specifiers", [or(
	        def("ImportSpecifier"),
	        def("ImportNamespaceSpecifier"),
	        def("ImportDefaultSpecifier")
	      )], defaults.emptyArray)
	      .field("source", def("Literal"));
	
	    def("Block")
	      .bases("Comment")
	      .build("value", /*optional:*/ "leading", "trailing");
	
	    def("Line")
	      .bases("Comment")
	      .build("value", /*optional:*/ "leading", "trailing");
	};

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(304));
	
	    var types = fork.use(__webpack_require__(295));
	    var defaults = fork.use(__webpack_require__(302)).defaults;
	    var def = types.Type.def;
	    var or = types.Type.or;
	
	    def("Noop")
	        .bases("Node")
	        .build();
	
	    def("DoExpression")
	        .bases("Expression")
	        .build("body")
	        .field("body", [def("Statement")]);
	
	    def("Super")
	        .bases("Expression")
	        .build();
	
	    def("BindExpression")
	        .bases("Expression")
	        .build("object", "callee")
	        .field("object", or(def("Expression"), null))
	        .field("callee", def("Expression"));
	
	    def("Decorator")
	        .bases("Node")
	        .build("expression")
	        .field("expression", def("Expression"));
	
	    def("Property")
	        .field("decorators",
	            or([def("Decorator")], null),
	            defaults["null"]);
	
	    def("MethodDefinition")
	        .field("decorators",
	            or([def("Decorator")], null),
	            defaults["null"]);
	
	    def("MetaProperty")
	        .bases("Expression")
	        .build("meta", "property")
	        .field("meta", def("Identifier"))
	        .field("property", def("Identifier"));
	
	    def("ParenthesizedExpression")
	        .bases("Expression")
	        .build("expression")
	        .field("expression", def("Expression"));
	
	    def("ImportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("imported", "local")
	        .field("imported", def("Identifier"));
	
	    def("ImportDefaultSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local");
	
	    def("ImportNamespaceSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local");
	
	    def("ExportDefaultDeclaration")
	        .bases("Declaration")
	        .build("declaration")
	        .field("declaration", or(def("Declaration"), def("Expression")));
	
	    def("ExportNamedDeclaration")
	        .bases("Declaration")
	        .build("declaration", "specifiers", "source")
	        .field("declaration", or(def("Declaration"), null))
	        .field("specifiers", [def("ExportSpecifier")], defaults.emptyArray)
	        .field("source", or(def("Literal"), null), defaults["null"]);
	
	    def("ExportSpecifier")
	        .bases("ModuleSpecifier")
	        .build("local", "exported")
	        .field("exported", def("Identifier"));
	
	    def("ExportNamespaceSpecifier")
	        .bases("Specifier")
	        .build("exported")
	        .field("exported", def("Identifier"));
	
	    def("ExportDefaultSpecifier")
	        .bases("Specifier")
	        .build("exported")
	        .field("exported", def("Identifier"));
	
	    def("ExportAllDeclaration")
	        .bases("Declaration")
	        .build("exported", "source")
	        .field("exported", or(def("Identifier"), null))
	        .field("source", def("Literal"));
	
	    def("CommentBlock")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	
	    def("CommentLine")
	        .bases("Comment")
	        .build("value", /*optional:*/ "leading", "trailing");
	};

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (fork) {
	    fork.use(__webpack_require__(310));
	    fork.use(__webpack_require__(308));
	
	    // var types = fork.types;
	    var types = fork.use(__webpack_require__(295));
	    // var defaults = fork.shared.defaults;
	    var defaults = fork.use(__webpack_require__(302)).defaults;
	    var def = types.Type.def;
	    var or = types.Type.or;
	
	    def("Directive")
	        .bases("Node")
	        .build("value")
	        .field("value", def("DirectiveLiteral"));
	
	    def("DirectiveLiteral")
	        .bases("Node", "Expression")
	        .build("value")
	        .field("value", String, defaults["use strict"]);
	
	    def("BlockStatement")
	        .bases("Statement")
	        .build("body")
	        .field("body", [def("Statement")])
	        .field("directives", [def("Directive")], defaults.emptyArray);
	
	    def("Program")
	        .bases("Node")
	        .build("body")
	        .field("body", [def("Statement")])
	        .field("directives", [def("Directive")], defaults.emptyArray);
	
	    // Split Literal
	    def("StringLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", String);
	
	    def("NumericLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", Number);
	
	    def("NullLiteral")
	        .bases("Literal")
	        .build();
	
	    def("BooleanLiteral")
	        .bases("Literal")
	        .build("value")
	        .field("value", Boolean);
	
	    def("RegExpLiteral")
	        .bases("Literal")
	        .build("pattern", "flags")
	        .field("pattern", String)
	        .field("flags", String);
	
	    var ObjectExpressionProperty = or(
	      def("Property"),
	      def("ObjectMethod"),
	      def("ObjectProperty"),
	      def("SpreadProperty")
	    );
	
	    // Split Property -> ObjectProperty and ObjectMethod
	    def("ObjectExpression")
	        .bases("Expression")
	        .build("properties")
	        .field("properties", [ObjectExpressionProperty]);
	
	    // ObjectMethod hoist .value properties to own properties
	    def("ObjectMethod")
	        .bases("Node", "Function")
	        .build("kind", "key", "params", "body", "computed")
	        .field("kind", or("method", "get", "set"))
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("params", [def("Pattern")])
	        .field("body", def("BlockStatement"))
	        .field("computed", Boolean, defaults["false"])
	        .field("generator", Boolean, defaults["false"])
	        .field("async", Boolean, defaults["false"])
	        .field("decorators",
	            or([def("Decorator")], null),
	            defaults["null"]);
	
	    def("ObjectProperty")
	        .bases("Node")
	        .build("key", "value")
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("value", or(def("Expression"), def("Pattern")))
	        .field("computed", Boolean, defaults["false"]);
	
	    var ClassBodyElement = or(
	      def("MethodDefinition"),
	      def("VariableDeclarator"),
	      def("ClassPropertyDefinition"),
	      def("ClassProperty"),
	      def("ClassMethod")
	    );
	
	    // MethodDefinition -> ClassMethod
	    def("ClassBody")
	        .bases("Declaration")
	        .build("body")
	        .field("body", [ClassBodyElement]);
	
	    def("ClassMethod")
	        .bases("Declaration", "Function")
	        .build("kind", "key", "params", "body", "computed", "static")
	        .field("kind", or("get", "set", "method", "constructor"))
	        .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	        .field("params", [def("Pattern")])
	        .field("body", def("BlockStatement"))
	        .field("computed", Boolean, defaults["false"])
	        .field("static", Boolean, defaults["false"])
	        .field("generator", Boolean, defaults["false"])
	        .field("async", Boolean, defaults["false"])
	        .field("decorators",
	            or([def("Decorator")], null),
	            defaults["null"]);
	
	    var ObjectPatternProperty = or(
	        def("Property"),
	        def("PropertyPattern"),
	        def("SpreadPropertyPattern"),
	        def("SpreadProperty"), // Used by Esprima
	        def("ObjectProperty"), // Babel 6
	        def("RestProperty") // Babel 6
	    );
	
	    // Split into RestProperty and SpreadProperty
	    def("ObjectPattern")
	        .bases("Pattern")
	        .build("properties")
	        .field("properties", [ObjectPatternProperty])
	        .field("decorators",
	               or([def("Decorator")], null),
	               defaults["null"]);
	
	    def("SpreadProperty")
	      .bases("Node")
	      .build("argument")
	      .field("argument", def("Expression"));
	
	    def("RestProperty")
	      .bases("Node")
	      .build("argument")
	      .field("argument", def("Expression"));
	
	    def("ForAwaitStatement")
	      .bases("Statement")
	      .build("left", "right", "body")
	      .field("left", or(
	          def("VariableDeclaration"),
	          def("Expression")))
	      .field("right", def("Expression"))
	      .field("body", def("Statement"));
	};


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(313);
	var types = __webpack_require__(292);
	var n = types.namedTypes;
	var b = types.builders;
	var isObject = types.builtInTypes.object;
	var isArray = types.builtInTypes.array;
	var isFunction = types.builtInTypes.function;
	var Patcher = __webpack_require__(317).Patcher;
	var normalizeOptions = __webpack_require__(330).normalize;
	var fromString = __webpack_require__(318).fromString;
	var attachComments = __webpack_require__(337).attach;
	var util = __webpack_require__(334);
	
	exports.parse = function parse(source, options) {
	    options = normalizeOptions(options);
	
	    var lines = fromString(source, options);
	
	    var sourceWithoutTabs = lines.toString({
	        tabWidth: options.tabWidth,
	        reuseWhitespace: false,
	        useTabs: false
	    });
	
	    var comments = [];
	    var program = options.parser.parse(sourceWithoutTabs, {
	        jsx: true,
	        loc: true,
	        locations: true,
	        range: options.range,
	        comment: true,
	        onComment: comments,
	        tolerant: options.tolerant,
	        ecmaVersion: 6,
	        sourceType: 'module'
	    });
	
	    // If the source was empty, some parsers give loc.{start,end}.line
	    // values of 0, instead of the minimum of 1.
	    util.fixFaultyLocations(program, lines);
	
	    program.loc = program.loc || {
	        start: lines.firstPos(),
	        end: lines.lastPos()
	    };
	
	    program.loc.lines = lines;
	    program.loc.indent = 0;
	
	    // Expand the Program node's .loc to include all comments, since
	    // typically its .loc.start and .loc.end will coincide with those of
	    // the first and last statements, respectively, excluding any comments
	    // that fall outside that region.
	    var trueProgramLoc = util.getTrueLoc(program, lines);
	    program.loc.start = trueProgramLoc.start;
	    program.loc.end = trueProgramLoc.end;
	
	    if (program.comments) {
	        comments = program.comments;
	        delete program.comments;
	    }
	
	    // In order to ensure we reprint leading and trailing program
	    // comments, wrap the original Program node with a File node.
	    var file = program;
	    if (file.type === "Program") {
	        var file = b.file(program);
	        file.loc = {
	            lines: lines,
	            indent: 0,
	            start: lines.firstPos(),
	            end: lines.lastPos()
	        };
	    } else if (file.type === "File") {
	      program = file.program;
	    }
	
	    // Passing file.program here instead of just file means that initial
	    // comments will be attached to program.body[0] instead of program.
	    attachComments(
	        comments,
	        program.body.length ? file.program : file,
	        lines
	    );
	
	    // Return a copy of the original AST so that any changes made may be
	    // compared to the original.
	    return new TreeCopier(lines).copy(file);
	};
	
	function TreeCopier(lines) {
	    assert.ok(this instanceof TreeCopier);
	    this.lines = lines;
	    this.indent = 0;
	}
	
	var TCp = TreeCopier.prototype;
	
	TCp.copy = function(node) {
	    if (isArray.check(node)) {
	        return node.map(this.copy, this);
	    }
	
	    if (!isObject.check(node)) {
	        return node;
	    }
	
	    util.fixFaultyLocations(node, this.lines);
	
	    var copy = Object.create(Object.getPrototypeOf(node), {
	        original: { // Provide a link from the copy to the original.
	            value: node,
	            configurable: false,
	            enumerable: false,
	            writable: true
	        }
	    });
	
	    var loc = node.loc;
	    var oldIndent = this.indent;
	    var newIndent = oldIndent;
	
	    if (loc) {
	        // When node is a comment, we set node.loc.indent to
	        // node.loc.start.column so that, when/if we print the comment by
	        // itself, we can strip that much whitespace from the left margin
	        // of the comment. This only really matters for multiline Block
	        // comments, but it doesn't hurt for Line comments.
	        if (node.type === "Block" || node.type === "Line" ||
	            node.type === "CommentBlock" || node.type === "CommentLine" ||
	            this.lines.isPrecededOnlyByWhitespace(loc.start)) {
	            newIndent = this.indent = loc.start.column;
	        }
	
	        loc.lines = this.lines;
	        loc.indent = newIndent;
	    }
	
	    var keys = Object.keys(node);
	    var keyCount = keys.length;
	    for (var i = 0; i < keyCount; ++i) {
	        var key = keys[i];
	        if (key === "loc") {
	            copy[key] = node[key];
	        } else {
	            copy[key] = this.copy(node[key]);
	        }
	    }
	
	    this.indent = oldIndent;
	
	    return copy;
	};


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:
	
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }
	
	  var x = a.length;
	  var y = b.length;
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }
	
	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}
	
	// based on node assert, original notice:
	
	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var util = __webpack_require__(314);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.
	
	var assert = module.exports = ok;
	
	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })
	
	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;
	
	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }
	
	      this.stack = out;
	    }
	  }
	};
	
	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);
	
	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}
	
	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.
	
	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.
	
	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}
	
	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;
	
	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.
	
	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;
	
	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	
	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};
	
	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	
	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};
	
	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	
	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};
	
	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};
	
	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;
	
	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();
	
	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;
	
	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;
	
	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;
	
	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};
	
	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }
	
	    memos.actual.push(actual);
	    memos.expected.push(expected);
	
	    return objEquiv(actual, expected, strict, memos);
	  }
	}
	
	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}
	
	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}
	
	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	
	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};
	
	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}
	
	
	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	
	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};
	
	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	
	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};
	
	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }
	
	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }
	
	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }
	
	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }
	
	  return expected.call({}, actual) === true;
	}
	
	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}
	
	function _throws(shouldThrow, block, expected, message) {
	  var actual;
	
	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }
	
	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }
	
	  actual = _tryBlock(block);
	
	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');
	
	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }
	
	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;
	
	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }
	
	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}
	
	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	
	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};
	
	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};
	
	assert.ifError = function(err) { if (err) throw err; };
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = ({"NODE_ENV":"standalone"}).NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(315);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(316);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(291)))

/***/ },
/* 315 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 316 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(313);
	var linesModule = __webpack_require__(318);
	var types = __webpack_require__(292);
	var getFieldValue = types.getFieldValue;
	var Printable = types.namedTypes.Printable;
	var Expression = types.namedTypes.Expression;
	var SourceLocation = types.namedTypes.SourceLocation;
	var util = __webpack_require__(334);
	var comparePos = util.comparePos;
	var FastPath = __webpack_require__(336);
	var isObject = types.builtInTypes.object;
	var isArray = types.builtInTypes.array;
	var isString = types.builtInTypes.string;
	var riskyAdjoiningCharExp = /[0-9a-z_$]/i;
	
	function Patcher(lines) {
	    assert.ok(this instanceof Patcher);
	    assert.ok(lines instanceof linesModule.Lines);
	
	    var self = this,
	        replacements = [];
	
	    self.replace = function(loc, lines) {
	        if (isString.check(lines))
	            lines = linesModule.fromString(lines);
	
	        replacements.push({
	            lines: lines,
	            start: loc.start,
	            end: loc.end
	        });
	    };
	
	    self.get = function(loc) {
	        // If no location is provided, return the complete Lines object.
	        loc = loc || {
	            start: { line: 1, column: 0 },
	            end: { line: lines.length,
	                   column: lines.getLineLength(lines.length) }
	        };
	
	        var sliceFrom = loc.start,
	            toConcat = [];
	
	        function pushSlice(from, to) {
	            assert.ok(comparePos(from, to) <= 0);
	            toConcat.push(lines.slice(from, to));
	        }
	
	        replacements.sort(function(a, b) {
	            return comparePos(a.start, b.start);
	        }).forEach(function(rep) {
	            if (comparePos(sliceFrom, rep.start) > 0) {
	                // Ignore nested replacement ranges.
	            } else {
	                pushSlice(sliceFrom, rep.start);
	                toConcat.push(rep.lines);
	                sliceFrom = rep.end;
	            }
	        });
	
	        pushSlice(sliceFrom, loc.end);
	
	        return linesModule.concat(toConcat);
	    };
	}
	exports.Patcher = Patcher;
	
	var Pp = Patcher.prototype;
	
	Pp.tryToReprintComments = function(newNode, oldNode, print) {
	    var patcher = this;
	
	    if (!newNode.comments &&
	        !oldNode.comments) {
	        // We were (vacuously) able to reprint all the comments!
	        return true;
	    }
	
	    var newPath = FastPath.from(newNode);
	    var oldPath = FastPath.from(oldNode);
	
	    newPath.stack.push("comments", getSurroundingComments(newNode));
	    oldPath.stack.push("comments", getSurroundingComments(oldNode));
	
	    var reprints = [];
	    var ableToReprintComments =
	        findArrayReprints(newPath, oldPath, reprints);
	
	    // No need to pop anything from newPath.stack or oldPath.stack, since
	    // newPath and oldPath are fresh local variables.
	
	    if (ableToReprintComments && reprints.length > 0) {
	        reprints.forEach(function(reprint) {
	            var oldComment = reprint.oldPath.getValue();
	            assert.ok(oldComment.leading || oldComment.trailing);
	            patcher.replace(
	                oldComment.loc,
	                // Comments can't have .comments, so it doesn't matter
	                // whether we print with comments or without.
	                print(reprint.newPath).indentTail(oldComment.loc.indent)
	            );
	        });
	    }
	
	    return ableToReprintComments;
	};
	
	// Get all comments that are either leading or trailing, ignoring any
	// comments that occur inside node.loc. Returns an empty array for nodes
	// with no leading or trailing comments.
	function getSurroundingComments(node) {
	    var result = [];
	    if (node.comments &&
	        node.comments.length > 0) {
	        node.comments.forEach(function(comment) {
	            if (comment.leading || comment.trailing) {
	                result.push(comment);
	            }
	        });
	    }
	    return result;
	}
	
	Pp.deleteComments = function(node) {
	    if (!node.comments) {
	        return;
	    }
	
	    var patcher = this;
	
	    node.comments.forEach(function(comment) {
	        if (comment.leading) {
	            // Delete leading comments along with any trailing whitespace
	            // they might have.
	            patcher.replace({
	                start: comment.loc.start,
	                end: node.loc.lines.skipSpaces(
	                    comment.loc.end, false, false)
	            }, "");
	
	        } else if (comment.trailing) {
	            // Delete trailing comments along with any leading whitespace
	            // they might have.
	            patcher.replace({
	                start: node.loc.lines.skipSpaces(
	                    comment.loc.start, true, false),
	                end: comment.loc.end
	            }, "");
	        }
	    });
	};
	
	exports.getReprinter = function(path) {
	    assert.ok(path instanceof FastPath);
	
	    // Make sure that this path refers specifically to a Node, rather than
	    // some non-Node subproperty of a Node.
	    var node = path.getValue();
	    if (!Printable.check(node))
	        return;
	
	    var orig = node.original;
	    var origLoc = orig && orig.loc;
	    var lines = origLoc && origLoc.lines;
	    var reprints = [];
	
	    if (!lines || !findReprints(path, reprints))
	        return;
	
	    return function(print) {
	        var patcher = new Patcher(lines);
	
	        reprints.forEach(function(reprint) {
	            var newNode = reprint.newPath.getValue();
	            var oldNode = reprint.oldPath.getValue();
	
	            SourceLocation.assert(oldNode.loc, true);
	
	            var needToPrintNewPathWithComments =
	                !patcher.tryToReprintComments(newNode, oldNode, print)
	
	            if (needToPrintNewPathWithComments) {
	                // Since we were not able to preserve all leading/trailing
	                // comments, we delete oldNode's comments, print newPath
	                // with comments, and then patch the resulting lines where
	                // oldNode used to be.
	                patcher.deleteComments(oldNode);
	            }
	
	            var newLines = print(
	                reprint.newPath,
	                needToPrintNewPathWithComments
	            ).indentTail(oldNode.loc.indent);
	
	            var nls = needsLeadingSpace(lines, oldNode.loc, newLines);
	            var nts = needsTrailingSpace(lines, oldNode.loc, newLines);
	
	            // If we try to replace the argument of a ReturnStatement like
	            // return"asdf" with e.g. a literal null expression, we run
	            // the risk of ending up with returnnull, so we need to add an
	            // extra leading space in situations where that might
	            // happen. Likewise for "asdf"in obj. See #170.
	            if (nls || nts) {
	                var newParts = [];
	                nls && newParts.push(" ");
	                newParts.push(newLines);
	                nts && newParts.push(" ");
	                newLines = linesModule.concat(newParts);
	            }
	
	            patcher.replace(oldNode.loc, newLines);
	        });
	
	        // Recall that origLoc is the .loc of an ancestor node that is
	        // guaranteed to contain all the reprinted nodes and comments.
	        return patcher.get(origLoc).indentTail(-orig.loc.indent);
	    };
	};
	
	// If the last character before oldLoc and the first character of newLines
	// are both identifier characters, they must be separated by a space,
	// otherwise they will most likely get fused together into a single token.
	function needsLeadingSpace(oldLines, oldLoc, newLines) {
	    var posBeforeOldLoc = util.copyPos(oldLoc.start);
	
	    // The character just before the location occupied by oldNode.
	    var charBeforeOldLoc =
	        oldLines.prevPos(posBeforeOldLoc) &&
	        oldLines.charAt(posBeforeOldLoc);
	
	    // First character of the reprinted node.
	    var newFirstChar = newLines.charAt(newLines.firstPos());
	
	    return charBeforeOldLoc &&
	        riskyAdjoiningCharExp.test(charBeforeOldLoc) &&
	        newFirstChar &&
	        riskyAdjoiningCharExp.test(newFirstChar);
	}
	
	// If the last character of newLines and the first character after oldLoc
	// are both identifier characters, they must be separated by a space,
	// otherwise they will most likely get fused together into a single token.
	function needsTrailingSpace(oldLines, oldLoc, newLines) {
	    // The character just after the location occupied by oldNode.
	    var charAfterOldLoc = oldLines.charAt(oldLoc.end);
	
	    var newLastPos = newLines.lastPos();
	
	    // Last character of the reprinted node.
	    var newLastChar = newLines.prevPos(newLastPos) &&
	        newLines.charAt(newLastPos);
	
	    return newLastChar &&
	        riskyAdjoiningCharExp.test(newLastChar) &&
	        charAfterOldLoc &&
	        riskyAdjoiningCharExp.test(charAfterOldLoc);
	}
	
	function findReprints(newPath, reprints) {
	    var newNode = newPath.getValue();
	    Printable.assert(newNode);
	
	    var oldNode = newNode.original;
	    Printable.assert(oldNode);
	
	    assert.deepEqual(reprints, []);
	
	    if (newNode.type !== oldNode.type) {
	        return false;
	    }
	
	    var oldPath = new FastPath(oldNode);
	    var canReprint = findChildReprints(newPath, oldPath, reprints);
	
	    if (!canReprint) {
	        // Make absolutely sure the calling code does not attempt to reprint
	        // any nodes.
	        reprints.length = 0;
	    }
	
	    return canReprint;
	}
	
	function findAnyReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	
	    if (newNode === oldNode)
	        return true;
	
	    if (isArray.check(newNode))
	        return findArrayReprints(newPath, oldPath, reprints);
	
	    if (isObject.check(newNode))
	        return findObjectReprints(newPath, oldPath, reprints);
	
	    return false;
	}
	
	function findArrayReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	    isArray.assert(newNode);
	    var len = newNode.length;
	
	    if (!(isArray.check(oldNode) &&
	          oldNode.length === len))
	        return false;
	
	    for (var i = 0; i < len; ++i) {
	        newPath.stack.push(i, newNode[i]);
	        oldPath.stack.push(i, oldNode[i]);
	        var canReprint = findAnyReprints(newPath, oldPath, reprints);
	        newPath.stack.length -= 2;
	        oldPath.stack.length -= 2;
	        if (!canReprint) {
	            return false;
	        }
	    }
	
	    return true;
	}
	
	function findObjectReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    isObject.assert(newNode);
	
	    if (newNode.original === null) {
	        // If newNode.original node was set to null, reprint the node.
	        return false;
	    }
	
	    var oldNode = oldPath.getValue();
	    if (!isObject.check(oldNode))
	        return false;
	
	    if (Printable.check(newNode)) {
	        if (!Printable.check(oldNode)) {
	            return false;
	        }
	
	        // Here we need to decide whether the reprinted code for newNode
	        // is appropriate for patching into the location of oldNode.
	
	        if (newNode.type === oldNode.type) {
	            var childReprints = [];
	
	            if (findChildReprints(newPath, oldPath, childReprints)) {
	                reprints.push.apply(reprints, childReprints);
	            } else if (oldNode.loc) {
	                // If we have no .loc information for oldNode, then we
	                // won't be able to reprint it.
	                reprints.push({
	                    oldPath: oldPath.copy(),
	                    newPath: newPath.copy()
	                });
	            } else {
	                return false;
	            }
	
	            return true;
	        }
	
	        if (Expression.check(newNode) &&
	            Expression.check(oldNode) &&
	            // If we have no .loc information for oldNode, then we won't
	            // be able to reprint it.
	            oldNode.loc) {
	
	            // If both nodes are subtypes of Expression, then we should be
	            // able to fill the location occupied by the old node with
	            // code printed for the new node with no ill consequences.
	            reprints.push({
	                oldPath: oldPath.copy(),
	                newPath: newPath.copy()
	            });
	
	            return true;
	        }
	
	        // The nodes have different types, and at least one of the types
	        // is not a subtype of the Expression type, so we cannot safely
	        // assume the nodes are syntactically interchangeable.
	        return false;
	    }
	
	    return findChildReprints(newPath, oldPath, reprints);
	}
	
	// This object is reused in hasOpeningParen and hasClosingParen to avoid
	// having to allocate a temporary object.
	var reusablePos = { line: 1, column: 0 };
	var nonSpaceExp = /\S/;
	
	function hasOpeningParen(oldPath) {
	    var oldNode = oldPath.getValue();
	    var loc = oldNode.loc;
	    var lines = loc && loc.lines;
	
	    if (lines) {
	        var pos = reusablePos;
	        pos.line = loc.start.line;
	        pos.column = loc.start.column;
	
	        while (lines.prevPos(pos)) {
	            var ch = lines.charAt(pos);
	
	            if (ch === "(") {
	                // If we found an opening parenthesis but it occurred before
	                // the start of the original subtree for this reprinting, then
	                // we must not return true for hasOpeningParen(oldPath).
	                return comparePos(oldPath.getRootValue().loc.start, pos) <= 0;
	            }
	
	            if (nonSpaceExp.test(ch)) {
	                return false;
	            }
	        }
	    }
	
	    return false;
	}
	
	function hasClosingParen(oldPath) {
	    var oldNode = oldPath.getValue();
	    var loc = oldNode.loc;
	    var lines = loc && loc.lines;
	
	    if (lines) {
	        var pos = reusablePos;
	        pos.line = loc.end.line;
	        pos.column = loc.end.column;
	
	        do {
	            var ch = lines.charAt(pos);
	
	            if (ch === ")") {
	                // If we found a closing parenthesis but it occurred after the
	                // end of the original subtree for this reprinting, then we
	                // must not return true for hasClosingParen(oldPath).
	                return comparePos(pos, oldPath.getRootValue().loc.end) <= 0;
	            }
	
	            if (nonSpaceExp.test(ch)) {
	                return false;
	            }
	
	        } while (lines.nextPos(pos));
	    }
	
	    return false;
	}
	
	function hasParens(oldPath) {
	    // This logic can technically be fooled if the node has parentheses
	    // but there are comments intervening between the parentheses and the
	    // node. In such cases the node will be harmlessly wrapped in an
	    // additional layer of parentheses.
	    return hasOpeningParen(oldPath) && hasClosingParen(oldPath);
	}
	
	function findChildReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	
	    isObject.assert(newNode);
	    isObject.assert(oldNode);
	
	    if (newNode.original === null) {
	        // If newNode.original node was set to null, reprint the node.
	        return false;
	    }
	
	    // If this type of node cannot come lexically first in its enclosing
	    // statement (e.g. a function expression or object literal), and it
	    // seems to be doing so, then the only way we can ignore this problem
	    // and save ourselves from falling back to the pretty printer is if an
	    // opening parenthesis happens to precede the node.  For example,
	    // (function(){ ... }()); does not need to be reprinted, even though
	    // the FunctionExpression comes lexically first in the enclosing
	    // ExpressionStatement and fails the hasParens test, because the
	    // parent CallExpression passes the hasParens test. If we relied on
	    // the path.needsParens() && !hasParens(oldNode) check below, the
	    // absence of a closing parenthesis after the FunctionExpression would
	    // trigger pretty-printing unnecessarily.
	    if (!newPath.canBeFirstInStatement() &&
	        newPath.firstInStatement() &&
	        !hasOpeningParen(oldPath))
	        return false;
	
	    // If this node needs parentheses and will not be wrapped with
	    // parentheses when reprinted, then return false to skip reprinting
	    // and let it be printed generically.
	    if (newPath.needsParens(true) && !hasParens(oldPath)) {
	        return false;
	    }
	
	    for (var k in util.getUnionOfKeys(newNode, oldNode)) {
	        if (k === "loc")
	            continue;
	
	        newPath.stack.push(k, types.getFieldValue(newNode, k));
	        oldPath.stack.push(k, types.getFieldValue(oldNode, k));
	        var canReprint = findAnyReprints(newPath, oldPath, reprints);
	        newPath.stack.length -= 2;
	        oldPath.stack.length -= 2;
	
	        if (!canReprint) {
	            return false;
	        }
	    }
	
	    return true;
	}


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(313);
	var sourceMap = __webpack_require__(319);
	var normalizeOptions = __webpack_require__(330).normalize;
	var secretKey = __webpack_require__(333).makeUniqueKey();
	var types = __webpack_require__(292);
	var isString = types.builtInTypes.string;
	var comparePos = __webpack_require__(334).comparePos;
	var Mapping = __webpack_require__(335);
	
	// Goals:
	// 1. Minimize new string creation.
	// 2. Keep (de)identation O(lines) time.
	// 3. Permit negative indentations.
	// 4. Enforce immutability.
	// 5. No newline characters.
	
	function getSecret(lines) {
	    return lines[secretKey];
	}
	
	function Lines(infos, sourceFileName) {
	    assert.ok(this instanceof Lines);
	    assert.ok(infos.length > 0);
	
	    if (sourceFileName) {
	        isString.assert(sourceFileName);
	    } else {
	        sourceFileName = null;
	    }
	
	    Object.defineProperty(this, secretKey, {
	        value: {
	            infos: infos,
	            mappings: [],
	            name: sourceFileName,
	            cachedSourceMap: null
	        }
	    });
	
	    if (sourceFileName) {
	        getSecret(this).mappings.push(new Mapping(this, {
	            start: this.firstPos(),
	            end: this.lastPos()
	        }));
	    }
	}
	
	// Exposed for instanceof checks. The fromString function should be used
	// to create new Lines objects.
	exports.Lines = Lines;
	var Lp = Lines.prototype;
	
	// These properties used to be assigned to each new object in the Lines
	// constructor, but we can more efficiently stuff them into the secret and
	// let these lazy accessors compute their values on-the-fly.
	Object.defineProperties(Lp, {
	    length: {
	        get: function() {
	            return getSecret(this).infos.length;
	        }
	    },
	
	    name: {
	        get: function() {
	            return getSecret(this).name;
	        }
	    }
	});
	
	function copyLineInfo(info) {
	    return {
	        line: info.line,
	        indent: info.indent,
	        locked: info.locked,
	        sliceStart: info.sliceStart,
	        sliceEnd: info.sliceEnd
	    };
	}
	
	var fromStringCache = {};
	var hasOwn = fromStringCache.hasOwnProperty;
	var maxCacheKeyLen = 10;
	
	function countSpaces(spaces, tabWidth) {
	    var count = 0;
	    var len = spaces.length;
	
	    for (var i = 0; i < len; ++i) {
	        switch (spaces.charCodeAt(i)) {
	        case 9: // '\t'
	            assert.strictEqual(typeof tabWidth, "number");
	            assert.ok(tabWidth > 0);
	
	            var next = Math.ceil(count / tabWidth) * tabWidth;
	            if (next === count) {
	                count += tabWidth;
	            } else {
	                count = next;
	            }
	
	            break;
	
	        case 11: // '\v'
	        case 12: // '\f'
	        case 13: // '\r'
	        case 0xfeff: // zero-width non-breaking space
	            // These characters contribute nothing to indentation.
	            break;
	
	        case 32: // ' '
	        default: // Treat all other whitespace like ' '.
	            count += 1;
	            break;
	        }
	    }
	
	    return count;
	}
	exports.countSpaces = countSpaces;
	
	var leadingSpaceExp = /^\s*/;
	
	// As specified here: http://www.ecma-international.org/ecma-262/6.0/#sec-line-terminators
	var lineTerminatorSeqExp =
	    /\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;
	
	/**
	 * @param {Object} options - Options object that configures printing.
	 */
	function fromString(string, options) {
	    if (string instanceof Lines)
	        return string;
	
	    string += "";
	
	    var tabWidth = options && options.tabWidth;
	    var tabless = string.indexOf("\t") < 0;
	    var locked = !! (options && options.locked);
	    var cacheable = !options && tabless && (string.length <= maxCacheKeyLen);
	
	    assert.ok(tabWidth || tabless, "No tab width specified but encountered tabs in string\n" + string);
	
	    if (cacheable && hasOwn.call(fromStringCache, string))
	        return fromStringCache[string];
	
	    var lines = new Lines(string.split(lineTerminatorSeqExp).map(function(line) {
	        var spaces = leadingSpaceExp.exec(line)[0];
	        return {
	            line: line,
	            indent: countSpaces(spaces, tabWidth),
	            // Boolean indicating whether this line can be reindented.
	            locked: locked,
	            sliceStart: spaces.length,
	            sliceEnd: line.length
	        };
	    }), normalizeOptions(options).sourceFileName);
	
	    if (cacheable)
	        fromStringCache[string] = lines;
	
	    return lines;
	}
	exports.fromString = fromString;
	
	function isOnlyWhitespace(string) {
	    return !/\S/.test(string);
	}
	
	Lp.toString = function(options) {
	    return this.sliceString(this.firstPos(), this.lastPos(), options);
	};
	
	Lp.getSourceMap = function(sourceMapName, sourceRoot) {
	    if (!sourceMapName) {
	        // Although we could make up a name or generate an anonymous
	        // source map, instead we assume that any consumer who does not
	        // provide a name does not actually want a source map.
	        return null;
	    }
	
	    var targetLines = this;
	
	    function updateJSON(json) {
	        json = json || {};
	
	        isString.assert(sourceMapName);
	        json.file = sourceMapName;
	
	        if (sourceRoot) {
	            isString.assert(sourceRoot);
	            json.sourceRoot = sourceRoot;
	        }
	
	        return json;
	    }
	
	    var secret = getSecret(targetLines);
	    if (secret.cachedSourceMap) {
	        // Since Lines objects are immutable, we can reuse any source map
	        // that was previously generated. Nevertheless, we return a new
	        // JSON object here to protect the cached source map from outside
	        // modification.
	        return updateJSON(secret.cachedSourceMap.toJSON());
	    }
	
	    var smg = new sourceMap.SourceMapGenerator(updateJSON());
	    var sourcesToContents = {};
	
	    secret.mappings.forEach(function(mapping) {
	        var sourceCursor = mapping.sourceLines.skipSpaces(
	            mapping.sourceLoc.start
	        ) || mapping.sourceLines.lastPos();
	
	        var targetCursor = targetLines.skipSpaces(
	            mapping.targetLoc.start
	        ) || targetLines.lastPos();
	
	        while (comparePos(sourceCursor, mapping.sourceLoc.end) < 0 &&
	               comparePos(targetCursor, mapping.targetLoc.end) < 0) {
	
	            var sourceChar = mapping.sourceLines.charAt(sourceCursor);
	            var targetChar = targetLines.charAt(targetCursor);
	            assert.strictEqual(sourceChar, targetChar);
	
	            var sourceName = mapping.sourceLines.name;
	
	            // Add mappings one character at a time for maximum resolution.
	            smg.addMapping({
	                source: sourceName,
	                original: { line: sourceCursor.line,
	                            column: sourceCursor.column },
	                generated: { line: targetCursor.line,
	                             column: targetCursor.column }
	            });
	
	            if (!hasOwn.call(sourcesToContents, sourceName)) {
	                var sourceContent = mapping.sourceLines.toString();
	                smg.setSourceContent(sourceName, sourceContent);
	                sourcesToContents[sourceName] = sourceContent;
	            }
	
	            targetLines.nextPos(targetCursor, true);
	            mapping.sourceLines.nextPos(sourceCursor, true);
	        }
	    });
	
	    secret.cachedSourceMap = smg;
	
	    return smg.toJSON();
	};
	
	Lp.bootstrapCharAt = function(pos) {
	    assert.strictEqual(typeof pos, "object");
	    assert.strictEqual(typeof pos.line, "number");
	    assert.strictEqual(typeof pos.column, "number");
	
	    var line = pos.line,
	        column = pos.column,
	        strings = this.toString().split(lineTerminatorSeqExp),
	        string = strings[line - 1];
	
	    if (typeof string === "undefined")
	        return "";
	
	    if (column === string.length &&
	        line < strings.length)
	        return "\n";
	
	    if (column >= string.length)
	        return "";
	
	    return string.charAt(column);
	};
	
	Lp.charAt = function(pos) {
	    assert.strictEqual(typeof pos, "object");
	    assert.strictEqual(typeof pos.line, "number");
	    assert.strictEqual(typeof pos.column, "number");
	
	    var line = pos.line,
	        column = pos.column,
	        secret = getSecret(this),
	        infos = secret.infos,
	        info = infos[line - 1],
	        c = column;
	
	    if (typeof info === "undefined" || c < 0)
	        return "";
	
	    var indent = this.getIndentAt(line);
	    if (c < indent)
	        return " ";
	
	    c += info.sliceStart - indent;
	
	    if (c === info.sliceEnd &&
	        line < this.length)
	        return "\n";
	
	    if (c >= info.sliceEnd)
	        return "";
	
	    return info.line.charAt(c);
	};
	
	Lp.stripMargin = function(width, skipFirstLine) {
	    if (width === 0)
	        return this;
	
	    assert.ok(width > 0, "negative margin: " + width);
	
	    if (skipFirstLine && this.length === 1)
	        return this;
	
	    var secret = getSecret(this);
	
	    var lines = new Lines(secret.infos.map(function(info, i) {
	        if (info.line && (i > 0 || !skipFirstLine)) {
	            info = copyLineInfo(info);
	            info.indent = Math.max(0, info.indent - width);
	        }
	        return info;
	    }));
	
	    if (secret.mappings.length > 0) {
	        var newMappings = getSecret(lines).mappings;
	        assert.strictEqual(newMappings.length, 0);
	        secret.mappings.forEach(function(mapping) {
	            newMappings.push(mapping.indent(width, skipFirstLine, true));
	        });
	    }
	
	    return lines;
	};
	
	Lp.indent = function(by) {
	    if (by === 0)
	        return this;
	
	    var secret = getSecret(this);
	
	    var lines = new Lines(secret.infos.map(function(info) {
	        if (info.line && ! info.locked) {
	            info = copyLineInfo(info);
	            info.indent += by;
	        }
	        return info
	    }));
	
	    if (secret.mappings.length > 0) {
	        var newMappings = getSecret(lines).mappings;
	        assert.strictEqual(newMappings.length, 0);
	        secret.mappings.forEach(function(mapping) {
	            newMappings.push(mapping.indent(by));
	        });
	    }
	
	    return lines;
	};
	
	Lp.indentTail = function(by) {
	    if (by === 0)
	        return this;
	
	    if (this.length < 2)
	        return this;
	
	    var secret = getSecret(this);
	
	    var lines = new Lines(secret.infos.map(function(info, i) {
	        if (i > 0 && info.line && ! info.locked) {
	            info = copyLineInfo(info);
	            info.indent += by;
	        }
	
	        return info;
	    }));
	
	    if (secret.mappings.length > 0) {
	        var newMappings = getSecret(lines).mappings;
	        assert.strictEqual(newMappings.length, 0);
	        secret.mappings.forEach(function(mapping) {
	            newMappings.push(mapping.indent(by, true));
	        });
	    }
	
	    return lines;
	};
	
	Lp.lockIndentTail = function () {
	    if (this.length < 2) {
	        return this;
	    }
	
	    var infos = getSecret(this).infos;
	
	    return new Lines(infos.map(function (info, i) {
	        info = copyLineInfo(info);
	        info.locked = i > 0;
	        return info;
	    }));
	};
	
	Lp.getIndentAt = function(line) {
	    assert.ok(line >= 1, "no line " + line + " (line numbers start from 1)");
	    var secret = getSecret(this),
	        info = secret.infos[line - 1];
	    return Math.max(info.indent, 0);
	};
	
	Lp.guessTabWidth = function() {
	    var secret = getSecret(this);
	    if (hasOwn.call(secret, "cachedTabWidth")) {
	        return secret.cachedTabWidth;
	    }
	
	    var counts = []; // Sparse array.
	    var lastIndent = 0;
	
	    for (var line = 1, last = this.length; line <= last; ++line) {
	        var info = secret.infos[line - 1];
	        var sliced = info.line.slice(info.sliceStart, info.sliceEnd);
	
	        // Whitespace-only lines don't tell us much about the likely tab
	        // width of this code.
	        if (isOnlyWhitespace(sliced)) {
	            continue;
	        }
	
	        var diff = Math.abs(info.indent - lastIndent);
	        counts[diff] = ~~counts[diff] + 1;
	        lastIndent = info.indent;
	    }
	
	    var maxCount = -1;
	    var result = 2;
	
	    for (var tabWidth = 1;
	         tabWidth < counts.length;
	         tabWidth += 1) {
	        if (hasOwn.call(counts, tabWidth) &&
	            counts[tabWidth] > maxCount) {
	            maxCount = counts[tabWidth];
	            result = tabWidth;
	        }
	    }
	
	    return secret.cachedTabWidth = result;
	};
	
	Lp.isOnlyWhitespace = function() {
	    return isOnlyWhitespace(this.toString());
	};
	
	Lp.isPrecededOnlyByWhitespace = function(pos) {
	    var secret = getSecret(this);
	    var info = secret.infos[pos.line - 1];
	    var indent = Math.max(info.indent, 0);
	
	    var diff = pos.column - indent;
	    if (diff <= 0) {
	        // If pos.column does not exceed the indentation amount, then
	        // there must be only whitespace before it.
	        return true;
	    }
	
	    var start = info.sliceStart;
	    var end = Math.min(start + diff, info.sliceEnd);
	    var prefix = info.line.slice(start, end);
	
	    return isOnlyWhitespace(prefix);
	};
	
	Lp.getLineLength = function(line) {
	    var secret = getSecret(this),
	        info = secret.infos[line - 1];
	    return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;
	};
	
	Lp.nextPos = function(pos, skipSpaces) {
	    var l = Math.max(pos.line, 0),
	        c = Math.max(pos.column, 0);
	
	    if (c < this.getLineLength(l)) {
	        pos.column += 1;
	
	        return skipSpaces
	            ? !!this.skipSpaces(pos, false, true)
	            : true;
	    }
	
	    if (l < this.length) {
	        pos.line += 1;
	        pos.column = 0;
	
	        return skipSpaces
	            ? !!this.skipSpaces(pos, false, true)
	            : true;
	    }
	
	    return false;
	};
	
	Lp.prevPos = function(pos, skipSpaces) {
	    var l = pos.line,
	        c = pos.column;
	
	    if (c < 1) {
	        l -= 1;
	
	        if (l < 1)
	            return false;
	
	        c = this.getLineLength(l);
	
	    } else {
	        c = Math.min(c - 1, this.getLineLength(l));
	    }
	
	    pos.line = l;
	    pos.column = c;
	
	    return skipSpaces
	        ? !!this.skipSpaces(pos, true, true)
	        : true;
	};
	
	Lp.firstPos = function() {
	    // Trivial, but provided for completeness.
	    return { line: 1, column: 0 };
	};
	
	Lp.lastPos = function() {
	    return {
	        line: this.length,
	        column: this.getLineLength(this.length)
	    };
	};
	
	Lp.skipSpaces = function(pos, backward, modifyInPlace) {
	    if (pos) {
	        pos = modifyInPlace ? pos : {
	            line: pos.line,
	            column: pos.column
	        };
	    } else if (backward) {
	        pos = this.lastPos();
	    } else {
	        pos = this.firstPos();
	    }
	
	    if (backward) {
	        while (this.prevPos(pos)) {
	            if (!isOnlyWhitespace(this.charAt(pos)) &&
	                this.nextPos(pos)) {
	                return pos;
	            }
	        }
	
	        return null;
	
	    } else {
	        while (isOnlyWhitespace(this.charAt(pos))) {
	            if (!this.nextPos(pos)) {
	                return null;
	            }
	        }
	
	        return pos;
	    }
	};
	
	Lp.trimLeft = function() {
	    var pos = this.skipSpaces(this.firstPos(), false, true);
	    return pos ? this.slice(pos) : emptyLines;
	};
	
	Lp.trimRight = function() {
	    var pos = this.skipSpaces(this.lastPos(), true, true);
	    return pos ? this.slice(this.firstPos(), pos) : emptyLines;
	};
	
	Lp.trim = function() {
	    var start = this.skipSpaces(this.firstPos(), false, true);
	    if (start === null)
	        return emptyLines;
	
	    var end = this.skipSpaces(this.lastPos(), true, true);
	    assert.notStrictEqual(end, null);
	
	    return this.slice(start, end);
	};
	
	Lp.eachPos = function(callback, startPos, skipSpaces) {
	    var pos = this.firstPos();
	
	    if (startPos) {
	        pos.line = startPos.line,
	        pos.column = startPos.column
	    }
	
	    if (skipSpaces && !this.skipSpaces(pos, false, true)) {
	        return; // Encountered nothing but spaces.
	    }
	
	    do callback.call(this, pos);
	    while (this.nextPos(pos, skipSpaces));
	};
	
	Lp.bootstrapSlice = function(start, end) {
	    var strings = this.toString().split(
	        lineTerminatorSeqExp
	    ).slice(
	        start.line - 1,
	        end.line
	    );
	
	    strings.push(strings.pop().slice(0, end.column));
	    strings[0] = strings[0].slice(start.column);
	
	    return fromString(strings.join("\n"));
	};
	
	Lp.slice = function(start, end) {
	    if (!end) {
	        if (!start) {
	            // The client seems to want a copy of this Lines object, but
	            // Lines objects are immutable, so it's perfectly adequate to
	            // return the same object.
	            return this;
	        }
	
	        // Slice to the end if no end position was provided.
	        end = this.lastPos();
	    }
	
	    var secret = getSecret(this);
	    var sliced = secret.infos.slice(start.line - 1, end.line);
	
	    if (start.line === end.line) {
	        sliced[0] = sliceInfo(sliced[0], start.column, end.column);
	    } else {
	        assert.ok(start.line < end.line);
	        sliced[0] = sliceInfo(sliced[0], start.column);
	        sliced.push(sliceInfo(sliced.pop(), 0, end.column));
	    }
	
	    var lines = new Lines(sliced);
	
	    if (secret.mappings.length > 0) {
	        var newMappings = getSecret(lines).mappings;
	        assert.strictEqual(newMappings.length, 0);
	        secret.mappings.forEach(function(mapping) {
	            var sliced = mapping.slice(this, start, end);
	            if (sliced) {
	                newMappings.push(sliced);
	            }
	        }, this);
	    }
	
	    return lines;
	};
	
	function sliceInfo(info, startCol, endCol) {
	    var sliceStart = info.sliceStart;
	    var sliceEnd = info.sliceEnd;
	    var indent = Math.max(info.indent, 0);
	    var lineLength = indent + sliceEnd - sliceStart;
	
	    if (typeof endCol === "undefined") {
	        endCol = lineLength;
	    }
	
	    startCol = Math.max(startCol, 0);
	    endCol = Math.min(endCol, lineLength);
	    endCol = Math.max(endCol, startCol);
	
	    if (endCol < indent) {
	        indent = endCol;
	        sliceEnd = sliceStart;
	    } else {
	        sliceEnd -= lineLength - endCol;
	    }
	
	    lineLength = endCol;
	    lineLength -= startCol;
	
	    if (startCol < indent) {
	        indent -= startCol;
	    } else {
	        startCol -= indent;
	        indent = 0;
	        sliceStart += startCol;
	    }
	
	    assert.ok(indent >= 0);
	    assert.ok(sliceStart <= sliceEnd);
	    assert.strictEqual(lineLength, indent + sliceEnd - sliceStart);
	
	    if (info.indent === indent &&
	        info.sliceStart === sliceStart &&
	        info.sliceEnd === sliceEnd) {
	        return info;
	    }
	
	    return {
	        line: info.line,
	        indent: indent,
	        // A destructive slice always unlocks indentation.
	        locked: false,
	        sliceStart: sliceStart,
	        sliceEnd: sliceEnd
	    };
	}
	
	Lp.bootstrapSliceString = function(start, end, options) {
	    return this.slice(start, end).toString(options);
	};
	
	Lp.sliceString = function(start, end, options) {
	    if (!end) {
	        if (!start) {
	            // The client seems to want a copy of this Lines object, but
	            // Lines objects are immutable, so it's perfectly adequate to
	            // return the same object.
	            return this;
	        }
	
	        // Slice to the end if no end position was provided.
	        end = this.lastPos();
	    }
	
	    options = normalizeOptions(options);
	
	    var infos = getSecret(this).infos;
	    var parts = [];
	    var tabWidth = options.tabWidth;
	
	    for (var line = start.line; line <= end.line; ++line) {
	        var info = infos[line - 1];
	
	        if (line === start.line) {
	            if (line === end.line) {
	                info = sliceInfo(info, start.column, end.column);
	            } else {
	                info = sliceInfo(info, start.column);
	            }
	        } else if (line === end.line) {
	            info = sliceInfo(info, 0, end.column);
	        }
	
	        var indent = Math.max(info.indent, 0);
	
	        var before = info.line.slice(0, info.sliceStart);
	        if (options.reuseWhitespace &&
	            isOnlyWhitespace(before) &&
	            countSpaces(before, options.tabWidth) === indent) {
	            // Reuse original spaces if the indentation is correct.
	            parts.push(info.line.slice(0, info.sliceEnd));
	            continue;
	        }
	
	        var tabs = 0;
	        var spaces = indent;
	
	        if (options.useTabs) {
	            tabs = Math.floor(indent / tabWidth);
	            spaces -= tabs * tabWidth;
	        }
	
	        var result = "";
	
	        if (tabs > 0) {
	            result += new Array(tabs + 1).join("\t");
	        }
	
	        if (spaces > 0) {
	            result += new Array(spaces + 1).join(" ");
	        }
	
	        result += info.line.slice(info.sliceStart, info.sliceEnd);
	
	        parts.push(result);
	    }
	
	    return parts.join(options.lineTerminator);
	};
	
	Lp.isEmpty = function() {
	    return this.length < 2 && this.getLineLength(1) < 1;
	};
	
	Lp.join = function(elements) {
	    var separator = this;
	    var separatorSecret = getSecret(separator);
	    var infos = [];
	    var mappings = [];
	    var prevInfo;
	
	    function appendSecret(secret) {
	        if (secret === null)
	            return;
	
	        if (prevInfo) {
	            var info = secret.infos[0];
	            var indent = new Array(info.indent + 1).join(" ");
	            var prevLine = infos.length;
	            var prevColumn = Math.max(prevInfo.indent, 0) +
	                prevInfo.sliceEnd - prevInfo.sliceStart;
	
	            prevInfo.line = prevInfo.line.slice(
	                0, prevInfo.sliceEnd) + indent + info.line.slice(
	                    info.sliceStart, info.sliceEnd);
	
	            // If any part of a line is indentation-locked, the whole line
	            // will be indentation-locked.
	            prevInfo.locked = prevInfo.locked || info.locked;
	
	            prevInfo.sliceEnd = prevInfo.line.length;
	
	            if (secret.mappings.length > 0) {
	                secret.mappings.forEach(function(mapping) {
	                    mappings.push(mapping.add(prevLine, prevColumn));
	                });
	            }
	
	        } else if (secret.mappings.length > 0) {
	            mappings.push.apply(mappings, secret.mappings);
	        }
	
	        secret.infos.forEach(function(info, i) {
	            if (!prevInfo || i > 0) {
	                prevInfo = copyLineInfo(info);
	                infos.push(prevInfo);
	            }
	        });
	    }
	
	    function appendWithSeparator(secret, i) {
	        if (i > 0)
	            appendSecret(separatorSecret);
	        appendSecret(secret);
	    }
	
	    elements.map(function(elem) {
	        var lines = fromString(elem);
	        if (lines.isEmpty())
	            return null;
	        return getSecret(lines);
	    }).forEach(separator.isEmpty()
	               ? appendSecret
	               : appendWithSeparator);
	
	    if (infos.length < 1)
	        return emptyLines;
	
	    var lines = new Lines(infos);
	
	    getSecret(lines).mappings = mappings;
	
	    return lines;
	};
	
	exports.concat = function(elements) {
	    return emptyLines.join(elements);
	};
	
	Lp.concat = function(other) {
	    var args = arguments,
	        list = [this];
	    list.push.apply(list, args);
	    assert.strictEqual(list.length, args.length + 1);
	    return emptyLines.join(list);
	};
	
	// The emptyLines object needs to be created all the way down here so that
	// Lines.prototype will be fully populated.
	var emptyLines = fromString("");


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(320).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(326).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(329).SourceNode;


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var base64VLQ = __webpack_require__(321);
	var util = __webpack_require__(323);
	var ArraySet = __webpack_require__(324).ArraySet;
	var MappingList = __webpack_require__(325).MappingList;
	
	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util.getArg(aArgs, 'file', null);
	  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	  this._mappings = new MappingList();
	  this._sourcesContents = null;
	}
	
	SourceMapGenerator.prototype._version = 3;
	
	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };
	
	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util.relative(sourceRoot, newMapping.source);
	        }
	
	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };
	
	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }
	
	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };
	
	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util.getArg(aArgs, 'generated');
	    var original = util.getArg(aArgs, 'original', null);
	    var source = util.getArg(aArgs, 'source', null);
	    var name = util.getArg(aArgs, 'name', null);
	
	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }
	
	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }
	
	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }
	
	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };
	
	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util.relative(this._sourceRoot, source);
	    }
	
	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };
	
	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet();
	    var newNames = new ArraySet();
	
	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util.join(aSourceMapPath, mapping.source)
	          }
	          if (sourceRoot != null) {
	            mapping.source = util.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }
	
	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }
	
	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }
	
	    }, this);
	    this._sources = newSources;
	    this._names = newNames;
	
	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };
	
	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };
	
	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;
	
	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = ''
	
	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }
	
	      next += base64VLQ.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;
	
	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;
	
	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;
	
	        next += base64VLQ.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;
	
	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }
	
	      result += next;
	    }
	
	    return result;
	  };
	
	SourceMapGenerator.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util.relative(aSourceRoot, source);
	      }
	      var key = util.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };
	
	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }
	
	    return map;
	  };
	
	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };
	
	exports.SourceMapGenerator = SourceMapGenerator;


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	var base64 = __webpack_require__(322);
	
	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011
	
	var VLQ_BASE_SHIFT = 5;
	
	// binary: 100000
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	
	// binary: 011111
	var VLQ_BASE_MASK = VLQ_BASE - 1;
	
	// binary: 100000
	var VLQ_CONTINUATION_BIT = VLQ_BASE;
	
	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}
	
	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}
	
	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	exports.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;
	
	  var vlq = toVLQSigned(aValue);
	
	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);
	
	  return encoded;
	};
	
	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;
	
	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }
	
	    digit = base64.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }
	
	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);
	
	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aIndex;
	};


/***/ },
/* 322 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
	
	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	exports.encode = function (number) {
	  if (0 <= number && number < intToCharMap.length) {
	    return intToCharMap[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};
	
	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	exports.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'
	
	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'
	
	  var zero = 48;     // '0'
	  var nine = 57;     // '9'
	
	  var plus = 43;     // '+'
	  var slash = 47;    // '/'
	
	  var littleOffset = 26;
	  var numberOffset = 52;
	
	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }
	
	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }
	
	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }
	
	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }
	
	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }
	
	  // Invalid base64 digit.
	  return -1;
	};


/***/ },
/* 323 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;
	
	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;
	
	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;
	
	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;
	
	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);
	
	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');
	
	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }
	
	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;
	
	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }
	
	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }
	
	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }
	
	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }
	
	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
	
	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;
	
	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	};
	
	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	
	  aRoot = aRoot.replace(/\/$/, '');
	
	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }
	
	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }
	
	    ++level;
	  }
	
	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;
	
	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());
	
	function identity (s) {
	  return s;
	}
	
	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }
	
	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;
	
	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }
	
	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;
	
	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }
	
	  var length = s.length;
	
	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }
	
	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }
	
	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return mappingA.name - mappingB.name;
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;
	
	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }
	
	  cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return mappingA.name - mappingB.name;
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
	
	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }
	
	  if (aStr1 > aStr2) {
	    return 1;
	  }
	
	  return -1;
	}
	
	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(323);
	var has = Object.prototype.hasOwnProperty;
	
	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet() {
	  this._array = [];
	  this._set = Object.create(null);
	}
	
	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};
	
	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet.prototype.size = function ArraySet_size() {
	  return Object.getOwnPropertyNames(this._set).length;
	};
	
	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = util.toSetString(aStr);
	  var isDuplicate = has.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    this._set[sStr] = idx;
	  }
	};
	
	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.has = function ArraySet_has(aStr) {
	  var sStr = util.toSetString(aStr);
	  return has.call(this._set, sStr);
	};
	
	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  var sStr = util.toSetString(aStr);
	  if (has.call(this._set, sStr)) {
	    return this._set[sStr];
	  }
	  throw new Error('"' + aStr + '" is not in the set.');
	};
	
	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};
	
	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};
	
	exports.ArraySet = ArraySet;


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(323);
	
	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}
	
	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}
	
	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };
	
	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};
	
	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};
	
	exports.MappingList = MappingList;


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(323);
	var binarySearch = __webpack_require__(327);
	var ArraySet = __webpack_require__(324).ArraySet;
	var base64VLQ = __webpack_require__(321);
	var quickSort = __webpack_require__(328).quickSort;
	
	function SourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer(sourceMap)
	    : new BasicSourceMapConsumer(sourceMap);
	}
	
	SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	}
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer.prototype._version = 3;
	
	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.
	
	SourceMapConsumer.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }
	
	    return this.__generatedMappings;
	  }
	});
	
	SourceMapConsumer.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }
	
	    return this.__originalMappings;
	  }
	});
	
	SourceMapConsumer.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };
	
	SourceMapConsumer.GENERATED_ORDER = 1;
	SourceMapConsumer.ORIGINAL_ORDER = 2;
	
	SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer.LEAST_UPPER_BOUND = 2;
	
	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
	
	    var mappings;
	    switch (order) {
	    case SourceMapConsumer.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }
	
	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      if (source != null && sourceRoot != null) {
	        source = util.join(sourceRoot, source);
	      }
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };
	
	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: Optional. the column number in the original source.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	SourceMapConsumer.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util.getArg(aArgs, 'line');
	
	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util.getArg(aArgs, 'column', 0)
	    };
	
	    if (this.sourceRoot != null) {
	      needle.source = util.relative(this.sourceRoot, needle.source);
	    }
	    if (!this._sources.has(needle.source)) {
	      return [];
	    }
	    needle.source = this._sources.indexOf(needle.source);
	
	    var mappings = [];
	
	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util.compareByOriginalPositions,
	                                  binarySearch.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];
	
	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;
	
	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	
	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;
	
	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	
	          mapping = this._originalMappings[++index];
	        }
	      }
	    }
	
	    return mappings;
	  };
	
	exports.SourceMapConsumer = SourceMapConsumer;
	
	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The only parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  var version = util.getArg(sourceMap, 'version');
	  var sources = util.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util.getArg(sourceMap, 'names', []);
	  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util.getArg(sourceMap, 'mappings');
	  var file = util.getArg(sourceMap, 'file', null);
	
	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }
	
	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
	        ? util.relative(sourceRoot, source)
	        : source;
	    });
	
	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet.fromArray(names.map(String), true);
	  this._sources = ArraySet.fromArray(sources, true);
	
	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this.file = file;
	}
	
	BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
	
	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap) {
	    var smc = Object.create(BasicSourceMapConsumer.prototype);
	
	    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;
	
	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.
	
	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];
	
	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;
	
	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;
	
	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }
	
	        destOriginalMappings.push(destMapping);
	      }
	
	      destGeneratedMappings.push(destMapping);
	    }
	
	    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
	
	    return smc;
	  };
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer.prototype._version = 3;
	
	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    return this._sources.toArray().map(function (s) {
	      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	    }, this);
	  }
	});
	
	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	BasicSourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var cachedSegments = {};
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, str, segment, end, value;
	
	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping();
	        mapping.generatedLine = generatedLine;
	
	        // Because each offset is encoded relative to the previous one,
	        // many segments often have the same encoding. We can exploit this
	        // fact by caching the parsed variable length fields of each segment,
	        // allowing us to avoid a second parse if we encounter the same
	        // segment again.
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        str = aStr.slice(index, end);
	
	        segment = cachedSegments[str];
	        if (segment) {
	          index += str.length;
	        } else {
	          segment = [];
	          while (index < end) {
	            base64VLQ.decode(aStr, index, temp);
	            value = temp.value;
	            index = temp.rest;
	            segment.push(value);
	          }
	
	          if (segment.length === 2) {
	            throw new Error('Found a source, but no line and column');
	          }
	
	          if (segment.length === 3) {
	            throw new Error('Found a source and line, but no column');
	          }
	
	          cachedSegments[str] = segment;
	        }
	
	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;
	
	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];
	
	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;
	
	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;
	
	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }
	
	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          originalMappings.push(mapping);
	        }
	      }
	    }
	
	    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = generatedMappings;
	
	    quickSort(originalMappings, util.compareByOriginalPositions);
	    this.__originalMappings = originalMappings;
	  };
	
	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.
	
	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }
	
	    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	  };
	
	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];
	
	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];
	
	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }
	
	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };
	
	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };
	
	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util.compareByGeneratedPositionsDeflated,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );
	
	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];
	
	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          if (this.sourceRoot != null) {
	            source = util.join(this.sourceRoot, source);
	          }
	        }
	        var name = util.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util.getArg(mapping, 'originalLine', null),
	          column: util.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }
	
	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };
	
	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };
	
	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }
	
	    if (this.sourceRoot != null) {
	      aSource = util.relative(this.sourceRoot, aSource);
	    }
	
	    if (this._sources.has(aSource)) {
	      return this.sourcesContent[this._sources.indexOf(aSource)];
	    }
	
	    var url;
	    if (this.sourceRoot != null
	        && (url = util.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }
	
	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + aSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	      }
	    }
	
	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };
	
	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	BasicSourceMapConsumer.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util.getArg(aArgs, 'source');
	    if (this.sourceRoot != null) {
	      source = util.relative(this.sourceRoot, source);
	    }
	    if (!this._sources.has(source)) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }
	    source = this._sources.indexOf(source);
	
	    var needle = {
	      source: source,
	      originalLine: util.getArg(aArgs, 'line'),
	      originalColumn: util.getArg(aArgs, 'column')
	    };
	
	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util.compareByOriginalPositions,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );
	
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];
	
	      if (mapping.source === needle.source) {
	        return {
	          line: util.getArg(mapping, 'generatedLine', null),
	          column: util.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }
	
	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };
	
	exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
	
	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The only parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  var version = util.getArg(sourceMap, 'version');
	  var sections = util.getArg(sourceMap, 'sections');
	
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }
	
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	
	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util.getArg(s, 'offset');
	    var offsetLine = util.getArg(offset, 'line');
	    var offsetColumn = util.getArg(offset, 'column');
	
	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;
	
	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	    }
	  });
	}
	
	IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer.prototype._version = 3;
	
	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});
	
	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };
	
	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }
	
	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];
	
	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }
	
	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };
	
	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };
	
	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	
	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };
	
	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	IndexedSourceMapConsumer.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	
	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }
	
	    return {
	      line: null,
	      column: null
	    };
	  };
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];
	
	        var source = section.consumer._sources.at(mapping.source);
	        if (section.consumer.sourceRoot !== null) {
	          source = util.join(section.consumer.sourceRoot, source);
	        }
	        this._sources.add(source);
	        source = this._sources.indexOf(source);
	
	        var name = section.consumer._names.at(mapping.name);
	        this._names.add(name);
	        name = this._names.indexOf(name);
	
	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };
	
	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }
	
	    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	    quickSort(this.__originalMappings, util.compareByOriginalPositions);
	  };
	
	exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ },
/* 327 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;
	
	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }
	
	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }
	
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}
	
	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }
	
	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }
	
	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }
	
	  return index;
	};


/***/ },
/* 328 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.
	
	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}
	
	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}
	
	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.
	
	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.
	
	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange(p, r);
	    var i = p - 1;
	
	    swap(ary, pivotIndex, r);
	    var pivot = ary[r];
	
	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot) <= 0) {
	        i += 1;
	        swap(ary, i, j);
	      }
	    }
	
	    swap(ary, i + 1, j);
	    var q = i + 1;
	
	    // (2) Recurse on each half.
	
	    doQuickSort(ary, comparator, p, q - 1);
	    doQuickSort(ary, comparator, q + 1, r);
	  }
	}
	
	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */
	exports.quickSort = function (ary, comparator) {
	  doQuickSort(ary, comparator, 0, ary.length - 1);
	};


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var SourceMapGenerator = __webpack_require__(320).SourceMapGenerator;
	var util = __webpack_require__(323);
	
	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE = /(\r?\n)/;
	
	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE = 10;
	
	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode = "$$$isSourceNode$$$";
	
	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode] = true;
	  if (aChunks != null) this.add(aChunks);
	}
	
	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode();
	
	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are removed from this array, by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	    var shiftNextLine = function() {
	      var lineContents = remainingLines.shift();
	      // The last line of a file might not have a newline.
	      var newLine = remainingLines.shift() || "";
	      return lineContents + newLine;
	    };
	
	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;
	
	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;
	
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[0];
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[0];
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLines.length > 0) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.join(""));
	    }
	
	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });
	
	    return node;
	
	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };
	
	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};
	
	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};
	
	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};
	
	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};
	
	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};
	
	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	  };
	
	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }
	
	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };
	
	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};
	
	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });
	
	  return { code: generated.code, map: map };
	};
	
	exports.SourceNode = SourceNode;


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	var defaults = {
	    // If you want to use a different branch of esprima, or any other
	    // module that supports a .parse function, pass that module object to
	    // recast.parse as options.parser (legacy synonym: options.esprima).
	    parser: __webpack_require__(331),
	
	    // Number of spaces the pretty-printer should use per tab for
	    // indentation. If you do not pass this option explicitly, it will be
	    // (quite reliably!) inferred from the original code.
	    tabWidth: 4,
	
	    // If you really want the pretty-printer to use tabs instead of
	    // spaces, make this option true.
	    useTabs: false,
	
	    // The reprinting code leaves leading whitespace untouched unless it
	    // has to reindent a line, or you pass false for this option.
	    reuseWhitespace: true,
	
	    // Override this option to use a different line terminator, e.g. \r\n.
	    lineTerminator: __webpack_require__(332).EOL,
	
	    // Some of the pretty-printer code (such as that for printing function
	    // parameter lists) makes a valiant attempt to prevent really long
	    // lines. You can adjust the limit by changing this option; however,
	    // there is no guarantee that line length will fit inside this limit.
	    wrapColumn: 74, // Aspirational for now.
	
	    // Pass a string as options.sourceFileName to recast.parse to tell the
	    // reprinter to keep track of reused code so that it can construct a
	    // source map automatically.
	    sourceFileName: null,
	
	    // Pass a string as options.sourceMapName to recast.print, and
	    // (provided you passed options.sourceFileName earlier) the
	    // PrintResult of recast.print will have a .map property for the
	    // generated source map.
	    sourceMapName: null,
	
	    // If provided, this option will be passed along to the source map
	    // generator as a root directory for relative source file paths.
	    sourceRoot: null,
	
	    // If you provide a source map that was generated from a previous call
	    // to recast.print as options.inputSourceMap, the old source map will
	    // be composed with the new source map.
	    inputSourceMap: null,
	
	    // If you want esprima to generate .range information (recast only
	    // uses .loc internally), pass true for this option.
	    range: false,
	
	    // If you want esprima not to throw exceptions when it encounters
	    // non-fatal errors, keep this option true.
	    tolerant: true,
	
	    // If you want to override the quotes used in string literals, specify
	    // either "single", "double", or "auto" here ("auto" will select the one
	    // which results in the shorter literal)
	    // Otherwise, double quotes are used.
	    quote: null,
	
	    // Controls the printing of trailing commas in object literals,
	    // array expressions and function parameters.
	    //
	    // This option could either be:
	    // * Boolean - enable/disable in all contexts (objects, arrays and function params).
	    // * Object - enable/disable per context.
	    //
	    // Example:
	    // trailingComma: {
	    //   objects: true,
	    //   arrays: true,
	    //   parameters: false,
	    // }
	    trailingComma: false,
	
	    // Controls the printing of spaces inside array brackets.
	    // See: http://eslint.org/docs/rules/array-bracket-spacing
	    arrayBracketSpacing: false,
	
	    // Controls the printing of spaces inside object literals,
	    // destructuring assignments, and import/export specifiers.
	    // See: http://eslint.org/docs/rules/object-curly-spacing
	    objectCurlySpacing: true,
	
	    // If you want parenthesis to wrap single-argument arrow function parameter
	    // lists, pass true for this option.
	    arrowParensAlways: false,
	
	    // There are 2 supported syntaxes (`,` and `;`) in Flow Object Types;
	    // The use of commas is in line with the more popular style and matches
	    // how objects are defined in JS, making it a bit more natural to write.
	    flowObjectCommas: true,
	}, hasOwn = defaults.hasOwnProperty;
	
	// Copy options and fill in default values.
	exports.normalize = function(options) {
	    options = options || defaults;
	
	    function get(key) {
	        return hasOwn.call(options, key)
	            ? options[key]
	            : defaults[key];
	    }
	
	    return {
	        tabWidth: +get("tabWidth"),
	        useTabs: !!get("useTabs"),
	        reuseWhitespace: !!get("reuseWhitespace"),
	        lineTerminator: get("lineTerminator"),
	        wrapColumn: Math.max(get("wrapColumn"), 0),
	        sourceFileName: get("sourceFileName"),
	        sourceMapName: get("sourceMapName"),
	        sourceRoot: get("sourceRoot"),
	        inputSourceMap: get("inputSourceMap"),
	        parser: get("esprima") || get("parser"),
	        range: get("range"),
	        tolerant: get("tolerant"),
	        quote: get("quote"),
	        trailingComma: get("trailingComma"),
	        arrayBracketSpacing: get("arrayBracketSpacing"),
	        objectCurlySpacing: get("objectCurlySpacing"),
	        arrowParensAlways: get("arrowParensAlways"),
	        flowObjectCommas: get("flowObjectCommas"),
	    };
	};


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
	/* istanbul ignore next */
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
	/* istanbul ignore next */
		else if(typeof exports === 'object')
			exports["esprima"] = factory();
		else
			root["esprima"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	
	/******/ 		// Check if module is in cache
	/* istanbul ignore if */
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	
	
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		/*
		  Copyright JS Foundation and other contributors, https://js.foundation/
	
		  Redistribution and use in source and binary forms, with or without
		  modification, are permitted provided that the following conditions are met:
	
		    * Redistributions of source code must retain the above copyright
		      notice, this list of conditions and the following disclaimer.
		    * Redistributions in binary form must reproduce the above copyright
		      notice, this list of conditions and the following disclaimer in the
		      documentation and/or other materials provided with the distribution.
	
		  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
		  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
		  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
		  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
		  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
		  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
		  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
		  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
		  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*/
		"use strict";
		var comment_handler_1 = __webpack_require__(1);
		var parser_1 = __webpack_require__(3);
		var jsx_parser_1 = __webpack_require__(11);
		var tokenizer_1 = __webpack_require__(15);
		function parse(code, options, delegate) {
		    var commentHandler = null;
		    var proxyDelegate = function (node, metadata) {
		        if (delegate) {
		            delegate(node, metadata);
		        }
		        if (commentHandler) {
		            commentHandler.visit(node, metadata);
		        }
		    };
		    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
		    var collectComment = false;
		    if (options) {
		        collectComment = (typeof options.comment === 'boolean' && options.comment);
		        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
		        if (collectComment || attachComment) {
		            commentHandler = new comment_handler_1.CommentHandler();
		            commentHandler.attach = attachComment;
		            options.comment = true;
		            parserDelegate = proxyDelegate;
		        }
		    }
		    var parser;
		    if (options && typeof options.jsx === 'boolean' && options.jsx) {
		        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
		    }
		    else {
		        parser = new parser_1.Parser(code, options, parserDelegate);
		    }
		    var ast = (parser.parseProgram());
		    if (collectComment) {
		        ast.comments = commentHandler.comments;
		    }
		    if (parser.config.tokens) {
		        ast.tokens = parser.tokens;
		    }
		    if (parser.config.tolerant) {
		        ast.errors = parser.errorHandler.errors;
		    }
		    return ast;
		}
		exports.parse = parse;
		function tokenize(code, options, delegate) {
		    var tokenizer = new tokenizer_1.Tokenizer(code, options);
		    var tokens;
		    tokens = [];
		    try {
		        while (true) {
		            var token = tokenizer.getNextToken();
		            if (!token) {
		                break;
		            }
		            if (delegate) {
		                token = delegate(token);
		            }
		            tokens.push(token);
		        }
		    }
		    catch (e) {
		        tokenizer.errorHandler.tolerate(e);
		    }
		    if (tokenizer.errorHandler.tolerant) {
		        tokens.errors = tokenizer.errors();
		    }
		    return tokens;
		}
		exports.tokenize = tokenize;
		var syntax_1 = __webpack_require__(2);
		exports.Syntax = syntax_1.Syntax;
		// Sync with *.json manifests.
		exports.version = '3.1.2';
	
	
	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var syntax_1 = __webpack_require__(2);
		var CommentHandler = (function () {
		    function CommentHandler() {
		        this.attach = false;
		        this.comments = [];
		        this.stack = [];
		        this.leading = [];
		        this.trailing = [];
		    }
		    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
		        //  innnerComments for properties empty block
		        //  `function a() {/** comments **\/}`
		        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
		            var innerComments = [];
		            for (var i = this.leading.length - 1; i >= 0; --i) {
		                var entry = this.leading[i];
		                if (metadata.end.offset >= entry.start) {
		                    innerComments.unshift(entry.comment);
		                    this.leading.splice(i, 1);
		                    this.trailing.splice(i, 1);
		                }
		            }
		            if (innerComments.length) {
		                node.innerComments = innerComments;
		            }
		        }
		    };
		    CommentHandler.prototype.findTrailingComments = function (node, metadata) {
		        var trailingComments = [];
		        if (this.trailing.length > 0) {
		            for (var i = this.trailing.length - 1; i >= 0; --i) {
		                var entry_1 = this.trailing[i];
		                if (entry_1.start >= metadata.end.offset) {
		                    trailingComments.unshift(entry_1.comment);
		                }
		            }
		            this.trailing.length = 0;
		            return trailingComments;
		        }
		        var entry = this.stack[this.stack.length - 1];
		        if (entry && entry.node.trailingComments) {
		            var firstComment = entry.node.trailingComments[0];
		            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
		                trailingComments = entry.node.trailingComments;
		                delete entry.node.trailingComments;
		            }
		        }
		        return trailingComments;
		    };
		    CommentHandler.prototype.findLeadingComments = function (node, metadata) {
		        var leadingComments = [];
		        var target;
		        while (this.stack.length > 0) {
		            var entry = this.stack[this.stack.length - 1];
		            if (entry && entry.start >= metadata.start.offset) {
		                target = this.stack.pop().node;
		            }
		            else {
		                break;
		            }
		        }
		        if (target) {
		            var count = target.leadingComments ? target.leadingComments.length : 0;
		            for (var i = count - 1; i >= 0; --i) {
		                var comment = target.leadingComments[i];
		                if (comment.range[1] <= metadata.start.offset) {
		                    leadingComments.unshift(comment);
		                    target.leadingComments.splice(i, 1);
		                }
		            }
		            if (target.leadingComments && target.leadingComments.length === 0) {
		                delete target.leadingComments;
		            }
		            return leadingComments;
		        }
		        for (var i = this.leading.length - 1; i >= 0; --i) {
		            var entry = this.leading[i];
		            if (entry.start <= metadata.start.offset) {
		                leadingComments.unshift(entry.comment);
		                this.leading.splice(i, 1);
		            }
		        }
		        return leadingComments;
		    };
		    CommentHandler.prototype.visitNode = function (node, metadata) {
		        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
		            return;
		        }
		        this.insertInnerComments(node, metadata);
		        var trailingComments = this.findTrailingComments(node, metadata);
		        var leadingComments = this.findLeadingComments(node, metadata);
		        if (leadingComments.length > 0) {
		            node.leadingComments = leadingComments;
		        }
		        if (trailingComments.length > 0) {
		            node.trailingComments = trailingComments;
		        }
		        this.stack.push({
		            node: node,
		            start: metadata.start.offset
		        });
		    };
		    CommentHandler.prototype.visitComment = function (node, metadata) {
		        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
		        var comment = {
		            type: type,
		            value: node.value
		        };
		        if (node.range) {
		            comment.range = node.range;
		        }
		        if (node.loc) {
		            comment.loc = node.loc;
		        }
		        this.comments.push(comment);
		        if (this.attach) {
		            var entry = {
		                comment: {
		                    type: type,
		                    value: node.value,
		                    range: [metadata.start.offset, metadata.end.offset]
		                },
		                start: metadata.start.offset
		            };
		            if (node.loc) {
		                entry.comment.loc = node.loc;
		            }
		            node.type = type;
		            this.leading.push(entry);
		            this.trailing.push(entry);
		        }
		    };
		    CommentHandler.prototype.visit = function (node, metadata) {
		        if (node.type === 'LineComment') {
		            this.visitComment(node, metadata);
		        }
		        else if (node.type === 'BlockComment') {
		            this.visitComment(node, metadata);
		        }
		        else if (this.attach) {
		            this.visitNode(node, metadata);
		        }
		    };
		    return CommentHandler;
		}());
		exports.CommentHandler = CommentHandler;
	
	
	/***/ },
	/* 2 */
	/***/ function(module, exports) {
	
		"use strict";
		exports.Syntax = {
		    AssignmentExpression: 'AssignmentExpression',
		    AssignmentPattern: 'AssignmentPattern',
		    ArrayExpression: 'ArrayExpression',
		    ArrayPattern: 'ArrayPattern',
		    ArrowFunctionExpression: 'ArrowFunctionExpression',
		    BlockStatement: 'BlockStatement',
		    BinaryExpression: 'BinaryExpression',
		    BreakStatement: 'BreakStatement',
		    CallExpression: 'CallExpression',
		    CatchClause: 'CatchClause',
		    ClassBody: 'ClassBody',
		    ClassDeclaration: 'ClassDeclaration',
		    ClassExpression: 'ClassExpression',
		    ConditionalExpression: 'ConditionalExpression',
		    ContinueStatement: 'ContinueStatement',
		    DoWhileStatement: 'DoWhileStatement',
		    DebuggerStatement: 'DebuggerStatement',
		    EmptyStatement: 'EmptyStatement',
		    ExportAllDeclaration: 'ExportAllDeclaration',
		    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
		    ExportNamedDeclaration: 'ExportNamedDeclaration',
		    ExportSpecifier: 'ExportSpecifier',
		    ExpressionStatement: 'ExpressionStatement',
		    ForStatement: 'ForStatement',
		    ForOfStatement: 'ForOfStatement',
		    ForInStatement: 'ForInStatement',
		    FunctionDeclaration: 'FunctionDeclaration',
		    FunctionExpression: 'FunctionExpression',
		    Identifier: 'Identifier',
		    IfStatement: 'IfStatement',
		    ImportDeclaration: 'ImportDeclaration',
		    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
		    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
		    ImportSpecifier: 'ImportSpecifier',
		    Literal: 'Literal',
		    LabeledStatement: 'LabeledStatement',
		    LogicalExpression: 'LogicalExpression',
		    MemberExpression: 'MemberExpression',
		    MetaProperty: 'MetaProperty',
		    MethodDefinition: 'MethodDefinition',
		    NewExpression: 'NewExpression',
		    ObjectExpression: 'ObjectExpression',
		    ObjectPattern: 'ObjectPattern',
		    Program: 'Program',
		    Property: 'Property',
		    RestElement: 'RestElement',
		    ReturnStatement: 'ReturnStatement',
		    SequenceExpression: 'SequenceExpression',
		    SpreadElement: 'SpreadElement',
		    Super: 'Super',
		    SwitchCase: 'SwitchCase',
		    SwitchStatement: 'SwitchStatement',
		    TaggedTemplateExpression: 'TaggedTemplateExpression',
		    TemplateElement: 'TemplateElement',
		    TemplateLiteral: 'TemplateLiteral',
		    ThisExpression: 'ThisExpression',
		    ThrowStatement: 'ThrowStatement',
		    TryStatement: 'TryStatement',
		    UnaryExpression: 'UnaryExpression',
		    UpdateExpression: 'UpdateExpression',
		    VariableDeclaration: 'VariableDeclaration',
		    VariableDeclarator: 'VariableDeclarator',
		    WhileStatement: 'WhileStatement',
		    WithStatement: 'WithStatement',
		    YieldExpression: 'YieldExpression'
		};
	
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var assert_1 = __webpack_require__(4);
		var messages_1 = __webpack_require__(5);
		var error_handler_1 = __webpack_require__(6);
		var token_1 = __webpack_require__(7);
		var scanner_1 = __webpack_require__(8);
		var syntax_1 = __webpack_require__(2);
		var Node = __webpack_require__(10);
		var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
		var Parser = (function () {
		    function Parser(code, options, delegate) {
		        if (options === void 0) { options = {}; }
		        this.config = {
		            range: (typeof options.range === 'boolean') && options.range,
		            loc: (typeof options.loc === 'boolean') && options.loc,
		            source: null,
		            tokens: (typeof options.tokens === 'boolean') && options.tokens,
		            comment: (typeof options.comment === 'boolean') && options.comment,
		            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
		        };
		        if (this.config.loc && options.source && options.source !== null) {
		            this.config.source = String(options.source);
		        }
		        this.delegate = delegate;
		        this.errorHandler = new error_handler_1.ErrorHandler();
		        this.errorHandler.tolerant = this.config.tolerant;
		        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
		        this.scanner.trackComment = this.config.comment;
		        this.operatorPrecedence = {
		            ')': 0,
		            ';': 0,
		            ',': 0,
		            '=': 0,
		            ']': 0,
		            '||': 1,
		            '&&': 2,
		            '|': 3,
		            '^': 4,
		            '&': 5,
		            '==': 6,
		            '!=': 6,
		            '===': 6,
		            '!==': 6,
		            '<': 7,
		            '>': 7,
		            '<=': 7,
		            '>=': 7,
		            '<<': 8,
		            '>>': 8,
		            '>>>': 8,
		            '+': 9,
		            '-': 9,
		            '*': 11,
		            '/': 11,
		            '%': 11
		        };
		        this.sourceType = (options && options.sourceType === 'module') ? 'module' : 'script';
		        this.lookahead = null;
		        this.hasLineTerminator = false;
		        this.context = {
		            allowIn: true,
		            allowYield: true,
		            firstCoverInitializedNameError: null,
		            isAssignmentTarget: false,
		            isBindingElement: false,
		            inFunctionBody: false,
		            inIteration: false,
		            inSwitch: false,
		            labelSet: {},
		            strict: (this.sourceType === 'module')
		        };
		        this.tokens = [];
		        this.startMarker = {
		            index: 0,
		            lineNumber: this.scanner.lineNumber,
		            lineStart: 0
		        };
		        this.lastMarker = {
		            index: 0,
		            lineNumber: this.scanner.lineNumber,
		            lineStart: 0
		        };
		        this.nextToken();
		        this.lastMarker = {
		            index: this.scanner.index,
		            lineNumber: this.scanner.lineNumber,
		            lineStart: this.scanner.lineStart
		        };
		    }
		    Parser.prototype.throwError = function (messageFormat) {
		        var values = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            values[_i - 1] = arguments[_i];
		        }
		        var args = Array.prototype.slice.call(arguments, 1);
		        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
		            assert_1.assert(idx < args.length, 'Message reference must be in range');
		            return args[idx];
		        });
		        var index = this.lastMarker.index;
		        var line = this.lastMarker.lineNumber;
		        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;
		        throw this.errorHandler.createError(index, line, column, msg);
		    };
		    Parser.prototype.tolerateError = function (messageFormat) {
		        var values = [];
		        for (var _i = 1; _i < arguments.length; _i++) {
		            values[_i - 1] = arguments[_i];
		        }
		        var args = Array.prototype.slice.call(arguments, 1);
		        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
		            assert_1.assert(idx < args.length, 'Message reference must be in range');
		            return args[idx];
		        });
		        var index = this.lastMarker.index;
		        var line = this.scanner.lineNumber;
		        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;
		        this.errorHandler.tolerateError(index, line, column, msg);
		    };
		    // Throw an exception because of the token.
		    Parser.prototype.unexpectedTokenError = function (token, message) {
		        var msg = message || messages_1.Messages.UnexpectedToken;
		        var value;
		        if (token) {
		            if (!message) {
		                msg = (token.type === token_1.Token.EOF) ? messages_1.Messages.UnexpectedEOS :
		                    (token.type === token_1.Token.Identifier) ? messages_1.Messages.UnexpectedIdentifier :
		                        (token.type === token_1.Token.NumericLiteral) ? messages_1.Messages.UnexpectedNumber :
		                            (token.type === token_1.Token.StringLiteral) ? messages_1.Messages.UnexpectedString :
		                                (token.type === token_1.Token.Template) ? messages_1.Messages.UnexpectedTemplate :
		                                    messages_1.Messages.UnexpectedToken;
		                if (token.type === token_1.Token.Keyword) {
		                    if (this.scanner.isFutureReservedWord(token.value)) {
		                        msg = messages_1.Messages.UnexpectedReserved;
		                    }
		                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
		                        msg = messages_1.Messages.StrictReservedWord;
		                    }
		                }
		            }
		            value = (token.type === token_1.Token.Template) ? token.value.raw : token.value;
		        }
		        else {
		            value = 'ILLEGAL';
		        }
		        msg = msg.replace('%0', value);
		        if (token && typeof token.lineNumber === 'number') {
		            var index = token.start;
		            var line = token.lineNumber;
		            var column = token.start - this.lastMarker.lineStart + 1;
		            return this.errorHandler.createError(index, line, column, msg);
		        }
		        else {
		            var index = this.lastMarker.index;
		            var line = this.lastMarker.lineNumber;
		            var column = index - this.lastMarker.lineStart + 1;
		            return this.errorHandler.createError(index, line, column, msg);
		        }
		    };
		    Parser.prototype.throwUnexpectedToken = function (token, message) {
		        throw this.unexpectedTokenError(token, message);
		    };
		    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
		        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
		    };
		    Parser.prototype.collectComments = function () {
		        if (!this.config.comment) {
		            this.scanner.scanComments();
		        }
		        else {
		            var comments = this.scanner.scanComments();
		            if (comments.length > 0 && this.delegate) {
		                for (var i = 0; i < comments.length; ++i) {
		                    var e = comments[i];
		                    var node = void 0;
		                    node = {
		                        type: e.multiLine ? 'BlockComment' : 'LineComment',
		                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
		                    };
		                    if (this.config.range) {
		                        node.range = e.range;
		                    }
		                    if (this.config.loc) {
		                        node.loc = e.loc;
		                    }
		                    var metadata = {
		                        start: {
		                            line: e.loc.start.line,
		                            column: e.loc.start.column,
		                            offset: e.range[0]
		                        },
		                        end: {
		                            line: e.loc.end.line,
		                            column: e.loc.end.column,
		                            offset: e.range[1]
		                        }
		                    };
		                    this.delegate(node, metadata);
		                }
		            }
		        }
		    };
		    // From internal representation to an external structure
		    Parser.prototype.getTokenRaw = function (token) {
		        return this.scanner.source.slice(token.start, token.end);
		    };
		    Parser.prototype.convertToken = function (token) {
		        var t;
		        t = {
		            type: token_1.TokenName[token.type],
		            value: this.getTokenRaw(token)
		        };
		        if (this.config.range) {
		            t.range = [token.start, token.end];
		        }
		        if (this.config.loc) {
		            t.loc = {
		                start: {
		                    line: this.startMarker.lineNumber,
		                    column: this.startMarker.index - this.startMarker.lineStart
		                },
		                end: {
		                    line: this.scanner.lineNumber,
		                    column: this.scanner.index - this.scanner.lineStart
		                }
		            };
		        }
		        if (token.regex) {
		            t.regex = token.regex;
		        }
		        return t;
		    };
		    Parser.prototype.nextToken = function () {
		        var token = this.lookahead;
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.lineNumber = this.scanner.lineNumber;
		        this.lastMarker.lineStart = this.scanner.lineStart;
		        this.collectComments();
		        this.startMarker.index = this.scanner.index;
		        this.startMarker.lineNumber = this.scanner.lineNumber;
		        this.startMarker.lineStart = this.scanner.lineStart;
		        var next;
		        next = this.scanner.lex();
		        this.hasLineTerminator = (token && next) ? (token.lineNumber !== next.lineNumber) : false;
		        if (next && this.context.strict && next.type === token_1.Token.Identifier) {
		            if (this.scanner.isStrictModeReservedWord(next.value)) {
		                next.type = token_1.Token.Keyword;
		            }
		        }
		        this.lookahead = next;
		        if (this.config.tokens && next.type !== token_1.Token.EOF) {
		            this.tokens.push(this.convertToken(next));
		        }
		        return token;
		    };
		    Parser.prototype.nextRegexToken = function () {
		        this.collectComments();
		        var token = this.scanner.scanRegExp();
		        if (this.config.tokens) {
		            // Pop the previous token, '/' or '/='
		            // This is added from the lookahead token.
		            this.tokens.pop();
		            this.tokens.push(this.convertToken(token));
		        }
		        // Prime the next lookahead.
		        this.lookahead = token;
		        this.nextToken();
		        return token;
		    };
		    Parser.prototype.createNode = function () {
		        return {
		            index: this.startMarker.index,
		            line: this.startMarker.lineNumber,
		            column: this.startMarker.index - this.startMarker.lineStart
		        };
		    };
		    Parser.prototype.startNode = function (token) {
		        return {
		            index: token.start,
		            line: token.lineNumber,
		            column: token.start - token.lineStart
		        };
		    };
		    Parser.prototype.finalize = function (meta, node) {
		        if (this.config.range) {
		            node.range = [meta.index, this.lastMarker.index];
		        }
		        if (this.config.loc) {
		            node.loc = {
		                start: {
		                    line: meta.line,
		                    column: meta.column
		                },
		                end: {
		                    line: this.lastMarker.lineNumber,
		                    column: this.lastMarker.index - this.lastMarker.lineStart
		                }
		            };
		            if (this.config.source) {
		                node.loc.source = this.config.source;
		            }
		        }
		        if (this.delegate) {
		            var metadata = {
		                start: {
		                    line: meta.line,
		                    column: meta.column,
		                    offset: meta.index
		                },
		                end: {
		                    line: this.lastMarker.lineNumber,
		                    column: this.lastMarker.index - this.lastMarker.lineStart,
		                    offset: this.lastMarker.index
		                }
		            };
		            this.delegate(node, metadata);
		        }
		        return node;
		    };
		    // Expect the next token to match the specified punctuator.
		    // If not, an exception will be thrown.
		    Parser.prototype.expect = function (value) {
		        var token = this.nextToken();
		        if (token.type !== token_1.Token.Punctuator || token.value !== value) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
		    Parser.prototype.expectCommaSeparator = function () {
		        if (this.config.tolerant) {
		            var token = this.lookahead;
		            if (token.type === token_1.Token.Punctuator && token.value === ',') {
		                this.nextToken();
		            }
		            else if (token.type === token_1.Token.Punctuator && token.value === ';') {
		                this.nextToken();
		                this.tolerateUnexpectedToken(token);
		            }
		            else {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
		            }
		        }
		        else {
		            this.expect(',');
		        }
		    };
		    // Expect the next token to match the specified keyword.
		    // If not, an exception will be thrown.
		    Parser.prototype.expectKeyword = function (keyword) {
		        var token = this.nextToken();
		        if (token.type !== token_1.Token.Keyword || token.value !== keyword) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Return true if the next token matches the specified punctuator.
		    Parser.prototype.match = function (value) {
		        return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;
		    };
		    // Return true if the next token matches the specified keyword
		    Parser.prototype.matchKeyword = function (keyword) {
		        return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;
		    };
		    // Return true if the next token matches the specified contextual keyword
		    // (where an identifier is sometimes a keyword depending on the context)
		    Parser.prototype.matchContextualKeyword = function (keyword) {
		        return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;
		    };
		    // Return true if the next token is an assignment operator
		    Parser.prototype.matchAssign = function () {
		        if (this.lookahead.type !== token_1.Token.Punctuator) {
		            return false;
		        }
		        var op = this.lookahead.value;
		        return op === '=' ||
		            op === '*=' ||
		            op === '**=' ||
		            op === '/=' ||
		            op === '%=' ||
		            op === '+=' ||
		            op === '-=' ||
		            op === '<<=' ||
		            op === '>>=' ||
		            op === '>>>=' ||
		            op === '&=' ||
		            op === '^=' ||
		            op === '|=';
		    };
		    // Cover grammar support.
		    //
		    // When an assignment expression position starts with an left parenthesis, the determination of the type
		    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
		    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
		    //
		    // There are three productions that can be parsed in a parentheses pair that needs to be determined
		    // after the outermost pair is closed. They are:
		    //
		    //   1. AssignmentExpression
		    //   2. BindingElements
		    //   3. AssignmentTargets
		    //
		    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
		    // binding element or assignment target.
		    //
		    // The three productions have the relationship:
		    //
		    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
		    //
		    // with a single exception that CoverInitializedName when used directly in an Expression, generates
		    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
		    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
		    //
		    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
		    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
		    // the CoverInitializedName check is conducted.
		    //
		    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
		    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
		    // pattern. The CoverInitializedName check is deferred.
		    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
		        var previousIsBindingElement = this.context.isBindingElement;
		        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
		        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
		        this.context.isBindingElement = true;
		        this.context.isAssignmentTarget = true;
		        this.context.firstCoverInitializedNameError = null;
		        var result = parseFunction.call(this);
		        if (this.context.firstCoverInitializedNameError !== null) {
		            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
		        }
		        this.context.isBindingElement = previousIsBindingElement;
		        this.context.isAssignmentTarget = previousIsAssignmentTarget;
		        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
		        return result;
		    };
		    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
		        var previousIsBindingElement = this.context.isBindingElement;
		        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
		        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
		        this.context.isBindingElement = true;
		        this.context.isAssignmentTarget = true;
		        this.context.firstCoverInitializedNameError = null;
		        var result = parseFunction.call(this);
		        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
		        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
		        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
		        return result;
		    };
		    Parser.prototype.consumeSemicolon = function () {
		        if (this.match(';')) {
		            this.nextToken();
		        }
		        else if (!this.hasLineTerminator) {
		            if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		            this.lastMarker.index = this.startMarker.index;
		            this.lastMarker.lineNumber = this.startMarker.lineNumber;
		            this.lastMarker.lineStart = this.startMarker.lineStart;
		        }
		    };
		    // ECMA-262 12.2 Primary Expressions
		    Parser.prototype.parsePrimaryExpression = function () {
		        var node = this.createNode();
		        var expr;
		        var value, token, raw;
		        switch (this.lookahead.type) {
		            case token_1.Token.Identifier:
		                if (this.sourceType === 'module' && this.lookahead.value === 'await') {
		                    this.tolerateUnexpectedToken(this.lookahead);
		                }
		                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
		                break;
		            case token_1.Token.NumericLiteral:
		            case token_1.Token.StringLiteral:
		                if (this.context.strict && this.lookahead.octal) {
		                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
		                }
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(token.value, raw));
		                break;
		            case token_1.Token.BooleanLiteral:
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                token.value = (token.value === 'true');
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(token.value, raw));
		                break;
		            case token_1.Token.NullLiteral:
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                token = this.nextToken();
		                token.value = null;
		                raw = this.getTokenRaw(token);
		                expr = this.finalize(node, new Node.Literal(token.value, raw));
		                break;
		            case token_1.Token.Template:
		                expr = this.parseTemplateLiteral();
		                break;
		            case token_1.Token.Punctuator:
		                value = this.lookahead.value;
		                switch (value) {
		                    case '(':
		                        this.context.isBindingElement = false;
		                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
		                        break;
		                    case '[':
		                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
		                        break;
		                    case '{':
		                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
		                        break;
		                    case '/':
		                    case '/=':
		                        this.context.isAssignmentTarget = false;
		                        this.context.isBindingElement = false;
		                        this.scanner.index = this.startMarker.index;
		                        token = this.nextRegexToken();
		                        raw = this.getTokenRaw(token);
		                        expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));
		                        break;
		                    default:
		                        this.throwUnexpectedToken(this.nextToken());
		                }
		                break;
		            case token_1.Token.Keyword:
		                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
		                    expr = this.parseIdentifierName();
		                }
		                else if (!this.context.strict && this.matchKeyword('let')) {
		                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
		                }
		                else {
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    if (this.matchKeyword('function')) {
		                        expr = this.parseFunctionExpression();
		                    }
		                    else if (this.matchKeyword('this')) {
		                        this.nextToken();
		                        expr = this.finalize(node, new Node.ThisExpression());
		                    }
		                    else if (this.matchKeyword('class')) {
		                        expr = this.parseClassExpression();
		                    }
		                    else {
		                        this.throwUnexpectedToken(this.nextToken());
		                    }
		                }
		                break;
		            default:
		                this.throwUnexpectedToken(this.nextToken());
		        }
		        return expr;
		    };
		    // ECMA-262 12.2.5 Array Initializer
		    Parser.prototype.parseSpreadElement = function () {
		        var node = this.createNode();
		        this.expect('...');
		        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
		        return this.finalize(node, new Node.SpreadElement(arg));
		    };
		    Parser.prototype.parseArrayInitializer = function () {
		        var node = this.createNode();
		        var elements = [];
		        this.expect('[');
		        while (!this.match(']')) {
		            if (this.match(',')) {
		                this.nextToken();
		                elements.push(null);
		            }
		            else if (this.match('...')) {
		                var element = this.parseSpreadElement();
		                if (!this.match(']')) {
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    this.expect(',');
		                }
		                elements.push(element);
		            }
		            else {
		                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
		                if (!this.match(']')) {
		                    this.expect(',');
		                }
		            }
		        }
		        this.expect(']');
		        return this.finalize(node, new Node.ArrayExpression(elements));
		    };
		    // ECMA-262 12.2.6 Object Initializer
		    Parser.prototype.parsePropertyMethod = function (params) {
		        this.context.isAssignmentTarget = false;
		        this.context.isBindingElement = false;
		        var previousStrict = this.context.strict;
		        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
		        if (this.context.strict && params.firstRestricted) {
		            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
		        }
		        if (this.context.strict && params.stricted) {
		            this.tolerateUnexpectedToken(params.stricted, params.message);
		        }
		        this.context.strict = previousStrict;
		        return body;
		    };
		    Parser.prototype.parsePropertyMethodFunction = function () {
		        var isGenerator = false;
		        var node = this.createNode();
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = false;
		        var params = this.parseFormalParameters();
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
		    };
		    Parser.prototype.parseObjectPropertyKey = function () {
		        var node = this.createNode();
		        var token = this.nextToken();
		        var key = null;
		        switch (token.type) {
		            case token_1.Token.StringLiteral:
		            case token_1.Token.NumericLiteral:
		                if (this.context.strict && token.octal) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
		                }
		                var raw = this.getTokenRaw(token);
		                key = this.finalize(node, new Node.Literal(token.value, raw));
		                break;
		            case token_1.Token.Identifier:
		            case token_1.Token.BooleanLiteral:
		            case token_1.Token.NullLiteral:
		            case token_1.Token.Keyword:
		                key = this.finalize(node, new Node.Identifier(token.value));
		                break;
		            case token_1.Token.Punctuator:
		                if (token.value === '[') {
		                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    this.expect(']');
		                }
		                else {
		                    this.throwUnexpectedToken(token);
		                }
		                break;
		            default:
		                this.throwUnexpectedToken(token);
		        }
		        return key;
		    };
		    Parser.prototype.isPropertyKey = function (key, value) {
		        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
		            (key.type === syntax_1.Syntax.Literal && key.value === value);
		    };
		    Parser.prototype.parseObjectProperty = function (hasProto) {
		        var node = this.createNode();
		        var token = this.lookahead;
		        var kind;
		        var key;
		        var value;
		        var computed = false;
		        var method = false;
		        var shorthand = false;
		        if (token.type === token_1.Token.Identifier) {
		            this.nextToken();
		            key = this.finalize(node, new Node.Identifier(token.value));
		        }
		        else if (this.match('*')) {
		            this.nextToken();
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		        }
		        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
		        if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {
		            kind = 'get';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            this.context.allowYield = false;
		            value = this.parseGetterMethod();
		        }
		        else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {
		            kind = 'set';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseSetterMethod();
		        }
		        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {
		            kind = 'init';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseGeneratorMethod();
		            method = true;
		        }
		        else {
		            if (!key) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		            kind = 'init';
		            if (this.match(':')) {
		                if (!computed && this.isPropertyKey(key, '__proto__')) {
		                    if (hasProto.value) {
		                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
		                    }
		                    hasProto.value = true;
		                }
		                this.nextToken();
		                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
		            }
		            else if (this.match('(')) {
		                value = this.parsePropertyMethodFunction();
		                method = true;
		            }
		            else if (token.type === token_1.Token.Identifier) {
		                var id = this.finalize(node, new Node.Identifier(token.value));
		                if (this.match('=')) {
		                    this.context.firstCoverInitializedNameError = this.lookahead;
		                    this.nextToken();
		                    shorthand = true;
		                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
		                }
		                else {
		                    shorthand = true;
		                    value = id;
		                }
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		        }
		        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
		    };
		    Parser.prototype.parseObjectInitializer = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var properties = [];
		        var hasProto = { value: false };
		        while (!this.match('}')) {
		            properties.push(this.parseObjectProperty(hasProto));
		            if (!this.match('}')) {
		                this.expectCommaSeparator();
		            }
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.ObjectExpression(properties));
		    };
		    // ECMA-262 12.2.9 Template Literals
		    Parser.prototype.parseTemplateHead = function () {
		        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
		        var node = this.createNode();
		        var token = this.nextToken();
		        var value = {
		            raw: token.value.raw,
		            cooked: token.value.cooked
		        };
		        return this.finalize(node, new Node.TemplateElement(value, token.tail));
		    };
		    Parser.prototype.parseTemplateElement = function () {
		        if (this.lookahead.type !== token_1.Token.Template) {
		            this.throwUnexpectedToken();
		        }
		        var node = this.createNode();
		        var token = this.nextToken();
		        var value = {
		            raw: token.value.raw,
		            cooked: token.value.cooked
		        };
		        return this.finalize(node, new Node.TemplateElement(value, token.tail));
		    };
		    Parser.prototype.parseTemplateLiteral = function () {
		        var node = this.createNode();
		        var expressions = [];
		        var quasis = [];
		        var quasi = this.parseTemplateHead();
		        quasis.push(quasi);
		        while (!quasi.tail) {
		            expressions.push(this.parseExpression());
		            quasi = this.parseTemplateElement();
		            quasis.push(quasi);
		        }
		        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
		    };
		    // ECMA-262 12.2.10 The Grouping Operator
		    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
		        switch (expr.type) {
		            case syntax_1.Syntax.Identifier:
		            case syntax_1.Syntax.MemberExpression:
		            case syntax_1.Syntax.RestElement:
		            case syntax_1.Syntax.AssignmentPattern:
		                break;
		            case syntax_1.Syntax.SpreadElement:
		                expr.type = syntax_1.Syntax.RestElement;
		                this.reinterpretExpressionAsPattern(expr.argument);
		                break;
		            case syntax_1.Syntax.ArrayExpression:
		                expr.type = syntax_1.Syntax.ArrayPattern;
		                for (var i = 0; i < expr.elements.length; i++) {
		                    if (expr.elements[i] !== null) {
		                        this.reinterpretExpressionAsPattern(expr.elements[i]);
		                    }
		                }
		                break;
		            case syntax_1.Syntax.ObjectExpression:
		                expr.type = syntax_1.Syntax.ObjectPattern;
		                for (var i = 0; i < expr.properties.length; i++) {
		                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
		                }
		                break;
		            case syntax_1.Syntax.AssignmentExpression:
		                expr.type = syntax_1.Syntax.AssignmentPattern;
		                delete expr.operator;
		                this.reinterpretExpressionAsPattern(expr.left);
		                break;
		            default:
		                // Allow other node type for tolerant parsing.
		                break;
		        }
		    };
		    Parser.prototype.parseGroupExpression = function () {
		        var expr;
		        this.expect('(');
		        if (this.match(')')) {
		            this.nextToken();
		            if (!this.match('=>')) {
		                this.expect('=>');
		            }
		            expr = {
		                type: ArrowParameterPlaceHolder,
		                params: []
		            };
		        }
		        else {
		            var startToken = this.lookahead;
		            var params = [];
		            if (this.match('...')) {
		                expr = this.parseRestElement(params);
		                this.expect(')');
		                if (!this.match('=>')) {
		                    this.expect('=>');
		                }
		                expr = {
		                    type: ArrowParameterPlaceHolder,
		                    params: [expr]
		                };
		            }
		            else {
		                var arrow = false;
		                this.context.isBindingElement = true;
		                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
		                if (this.match(',')) {
		                    var expressions = [];
		                    this.context.isAssignmentTarget = false;
		                    expressions.push(expr);
		                    while (this.startMarker.index < this.scanner.length) {
		                        if (!this.match(',')) {
		                            break;
		                        }
		                        this.nextToken();
		                        if (this.match('...')) {
		                            if (!this.context.isBindingElement) {
		                                this.throwUnexpectedToken(this.lookahead);
		                            }
		                            expressions.push(this.parseRestElement(params));
		                            this.expect(')');
		                            if (!this.match('=>')) {
		                                this.expect('=>');
		                            }
		                            this.context.isBindingElement = false;
		                            for (var i = 0; i < expressions.length; i++) {
		                                this.reinterpretExpressionAsPattern(expressions[i]);
		                            }
		                            arrow = true;
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: expressions
		                            };
		                        }
		                        else {
		                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
		                        }
		                        if (arrow) {
		                            break;
		                        }
		                    }
		                    if (!arrow) {
		                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
		                    }
		                }
		                if (!arrow) {
		                    this.expect(')');
		                    if (this.match('=>')) {
		                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
		                            arrow = true;
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: [expr]
		                            };
		                        }
		                        if (!arrow) {
		                            if (!this.context.isBindingElement) {
		                                this.throwUnexpectedToken(this.lookahead);
		                            }
		                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
		                                for (var i = 0; i < expr.expressions.length; i++) {
		                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
		                                }
		                            }
		                            else {
		                                this.reinterpretExpressionAsPattern(expr);
		                            }
		                            var params_1 = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
		                            expr = {
		                                type: ArrowParameterPlaceHolder,
		                                params: params_1
		                            };
		                        }
		                    }
		                    this.context.isBindingElement = false;
		                }
		            }
		        }
		        return expr;
		    };
		    // ECMA-262 12.3 Left-Hand-Side Expressions
		    Parser.prototype.parseArguments = function () {
		        this.expect('(');
		        var args = [];
		        if (!this.match(')')) {
		            while (true) {
		                var expr = this.match('...') ? this.parseSpreadElement() :
		                    this.isolateCoverGrammar(this.parseAssignmentExpression);
		                args.push(expr);
		                if (this.match(')')) {
		                    break;
		                }
		                this.expectCommaSeparator();
		            }
		        }
		        this.expect(')');
		        return args;
		    };
		    Parser.prototype.isIdentifierName = function (token) {
		        return token.type === token_1.Token.Identifier ||
		            token.type === token_1.Token.Keyword ||
		            token.type === token_1.Token.BooleanLiteral ||
		            token.type === token_1.Token.NullLiteral;
		    };
		    Parser.prototype.parseIdentifierName = function () {
		        var node = this.createNode();
		        var token = this.nextToken();
		        if (!this.isIdentifierName(token)) {
		            this.throwUnexpectedToken(token);
		        }
		        return this.finalize(node, new Node.Identifier(token.value));
		    };
		    Parser.prototype.parseNewExpression = function () {
		        var node = this.createNode();
		        var id = this.parseIdentifierName();
		        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
		        var expr;
		        if (this.match('.')) {
		            this.nextToken();
		            if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {
		                var property = this.parseIdentifierName();
		                expr = new Node.MetaProperty(id, property);
		            }
		            else {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		        }
		        else {
		            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
		            var args = this.match('(') ? this.parseArguments() : [];
		            expr = new Node.NewExpression(callee, args);
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        return this.finalize(node, expr);
		    };
		    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
		        var startToken = this.lookahead;
		        var previousAllowIn = this.context.allowIn;
		        this.context.allowIn = true;
		        var expr;
		        if (this.matchKeyword('super') && this.context.inFunctionBody) {
		            expr = this.createNode();
		            this.nextToken();
		            expr = this.finalize(expr, new Node.Super());
		            if (!this.match('(') && !this.match('.') && !this.match('[')) {
		                this.throwUnexpectedToken(this.lookahead);
		            }
		        }
		        else {
		            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
		        }
		        while (true) {
		            if (this.match('.')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('.');
		                var property = this.parseIdentifierName();
		                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
		            }
		            else if (this.match('(')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = false;
		                var args = this.parseArguments();
		                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
		            }
		            else if (this.match('[')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('[');
		                var property = this.isolateCoverGrammar(this.parseExpression);
		                this.expect(']');
		                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
		            }
		            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {
		                var quasi = this.parseTemplateLiteral();
		                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
		            }
		            else {
		                break;
		            }
		        }
		        this.context.allowIn = previousAllowIn;
		        return expr;
		    };
		    Parser.prototype.parseSuper = function () {
		        var node = this.createNode();
		        this.expectKeyword('super');
		        if (!this.match('[') && !this.match('.')) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        return this.finalize(node, new Node.Super());
		    };
		    Parser.prototype.parseLeftHandSideExpression = function () {
		        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
		        var node = this.startNode(this.lookahead);
		        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
		            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
		        while (true) {
		            if (this.match('[')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('[');
		                var property = this.isolateCoverGrammar(this.parseExpression);
		                this.expect(']');
		                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
		            }
		            else if (this.match('.')) {
		                this.context.isBindingElement = false;
		                this.context.isAssignmentTarget = true;
		                this.expect('.');
		                var property = this.parseIdentifierName();
		                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
		            }
		            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {
		                var quasi = this.parseTemplateLiteral();
		                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
		            }
		            else {
		                break;
		            }
		        }
		        return expr;
		    };
		    // ECMA-262 12.4 Update Expressions
		    Parser.prototype.parseUpdateExpression = function () {
		        var expr;
		        var startToken = this.lookahead;
		        if (this.match('++') || this.match('--')) {
		            var node = this.startNode(startToken);
		            var token = this.nextToken();
		            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
		                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
		            }
		            if (!this.context.isAssignmentTarget) {
		                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		            }
		            var prefix = true;
		            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        else {
		            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		            if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {
		                if (this.match('++') || this.match('--')) {
		                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
		                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
		                    }
		                    if (!this.context.isAssignmentTarget) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		                    }
		                    this.context.isAssignmentTarget = false;
		                    this.context.isBindingElement = false;
		                    var operator = this.nextToken().value;
		                    var prefix = false;
		                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
		                }
		            }
		        }
		        return expr;
		    };
		    // ECMA-262 12.5 Unary Operators
		    Parser.prototype.parseUnaryExpression = function () {
		        var expr;
		        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
		            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
		            var node = this.startNode(this.lookahead);
		            var token = this.nextToken();
		            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
		            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
		                this.tolerateError(messages_1.Messages.StrictDelete);
		            }
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        else {
		            expr = this.parseUpdateExpression();
		        }
		        return expr;
		    };
		    Parser.prototype.parseExponentiationExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
		        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
		            this.nextToken();
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		            var left = expr;
		            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
		            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
		        }
		        return expr;
		    };
		    // ECMA-262 12.6 Exponentiation Operators
		    // ECMA-262 12.7 Multiplicative Operators
		    // ECMA-262 12.8 Additive Operators
		    // ECMA-262 12.9 Bitwise Shift Operators
		    // ECMA-262 12.10 Relational Operators
		    // ECMA-262 12.11 Equality Operators
		    // ECMA-262 12.12 Binary Bitwise Operators
		    // ECMA-262 12.13 Binary Logical Operators
		    Parser.prototype.binaryPrecedence = function (token) {
		        var op = token.value;
		        var precedence;
		        if (token.type === token_1.Token.Punctuator) {
		            precedence = this.operatorPrecedence[op] || 0;
		        }
		        else if (token.type === token_1.Token.Keyword) {
		            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
		        }
		        else {
		            precedence = 0;
		        }
		        return precedence;
		    };
		    Parser.prototype.parseBinaryExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
		        var token = this.lookahead;
		        var prec = this.binaryPrecedence(token);
		        if (prec > 0) {
		            this.nextToken();
		            token.prec = prec;
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		            var markers = [startToken, this.lookahead];
		            var left = expr;
		            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
		            var stack = [left, token, right];
		            while (true) {
		                prec = this.binaryPrecedence(this.lookahead);
		                if (prec <= 0) {
		                    break;
		                }
		                // Reduce: make a binary expression from the three topmost entries.
		                while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
		                    right = stack.pop();
		                    var operator = stack.pop().value;
		                    left = stack.pop();
		                    markers.pop();
		                    var node = this.startNode(markers[markers.length - 1]);
		                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
		                }
		                // Shift.
		                token = this.nextToken();
		                token.prec = prec;
		                stack.push(token);
		                markers.push(this.lookahead);
		                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
		            }
		            // Final reduce to clean-up the stack.
		            var i = stack.length - 1;
		            expr = stack[i];
		            markers.pop();
		            while (i > 1) {
		                var node = this.startNode(markers.pop());
		                expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));
		                i -= 2;
		            }
		        }
		        return expr;
		    };
		    // ECMA-262 12.14 Conditional Operator
		    Parser.prototype.parseConditionalExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
		        if (this.match('?')) {
		            this.nextToken();
		            var previousAllowIn = this.context.allowIn;
		            this.context.allowIn = true;
		            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            this.context.allowIn = previousAllowIn;
		            this.expect(':');
		            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
		            this.context.isAssignmentTarget = false;
		            this.context.isBindingElement = false;
		        }
		        return expr;
		    };
		    // ECMA-262 12.15 Assignment Operators
		    Parser.prototype.checkPatternParam = function (options, param) {
		        switch (param.type) {
		            case syntax_1.Syntax.Identifier:
		                this.validateParam(options, param, param.name);
		                break;
		            case syntax_1.Syntax.RestElement:
		                this.checkPatternParam(options, param.argument);
		                break;
		            case syntax_1.Syntax.AssignmentPattern:
		                this.checkPatternParam(options, param.left);
		                break;
		            case syntax_1.Syntax.ArrayPattern:
		                for (var i = 0; i < param.elements.length; i++) {
		                    if (param.elements[i] !== null) {
		                        this.checkPatternParam(options, param.elements[i]);
		                    }
		                }
		                break;
		            case syntax_1.Syntax.YieldExpression:
		                break;
		            default:
		                assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');
		                for (var i = 0; i < param.properties.length; i++) {
		                    this.checkPatternParam(options, param.properties[i].value);
		                }
		                break;
		        }
		    };
		    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
		        var params = [expr];
		        var options;
		        switch (expr.type) {
		            case syntax_1.Syntax.Identifier:
		                break;
		            case ArrowParameterPlaceHolder:
		                params = expr.params;
		                break;
		            default:
		                return null;
		        }
		        options = {
		            paramSet: {}
		        };
		        for (var i = 0; i < params.length; ++i) {
		            var param = params[i];
		            if (param.type === syntax_1.Syntax.AssignmentPattern) {
		                if (param.right.type === syntax_1.Syntax.YieldExpression) {
		                    if (param.right.argument) {
		                        this.throwUnexpectedToken(this.lookahead);
		                    }
		                    param.right.type = syntax_1.Syntax.Identifier;
		                    param.right.name = 'yield';
		                    delete param.right.argument;
		                    delete param.right.delegate;
		                }
		            }
		            this.checkPatternParam(options, param);
		            params[i] = param;
		        }
		        if (this.context.strict || !this.context.allowYield) {
		            for (var i = 0; i < params.length; ++i) {
		                var param = params[i];
		                if (param.type === syntax_1.Syntax.YieldExpression) {
		                    this.throwUnexpectedToken(this.lookahead);
		                }
		            }
		        }
		        if (options.message === messages_1.Messages.StrictParamDupe) {
		            var token = this.context.strict ? options.stricted : options.firstRestricted;
		            this.throwUnexpectedToken(token, options.message);
		        }
		        return {
		            params: params,
		            stricted: options.stricted,
		            firstRestricted: options.firstRestricted,
		            message: options.message
		        };
		    };
		    Parser.prototype.parseAssignmentExpression = function () {
		        var expr;
		        if (!this.context.allowYield && this.matchKeyword('yield')) {
		            expr = this.parseYieldExpression();
		        }
		        else {
		            var startToken = this.lookahead;
		            var token = startToken;
		            expr = this.parseConditionalExpression();
		            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
		                // ECMA-262 14.2 Arrow Function Definitions
		                this.context.isAssignmentTarget = false;
		                this.context.isBindingElement = false;
		                var list = this.reinterpretAsCoverFormalsList(expr);
		                if (list) {
		                    if (this.hasLineTerminator) {
		                        this.tolerateUnexpectedToken(this.lookahead);
		                    }
		                    this.context.firstCoverInitializedNameError = null;
		                    var previousStrict = this.context.strict;
		                    var previousAllowYield = this.context.allowYield;
		                    this.context.allowYield = true;
		                    var node = this.startNode(startToken);
		                    this.expect('=>');
		                    var body = this.match('{') ? this.parseFunctionSourceElements() :
		                        this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
		                    if (this.context.strict && list.firstRestricted) {
		                        this.throwUnexpectedToken(list.firstRestricted, list.message);
		                    }
		                    if (this.context.strict && list.stricted) {
		                        this.tolerateUnexpectedToken(list.stricted, list.message);
		                    }
		                    expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
		                    this.context.strict = previousStrict;
		                    this.context.allowYield = previousAllowYield;
		                }
		            }
		            else {
		                if (this.matchAssign()) {
		                    if (!this.context.isAssignmentTarget) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
		                    }
		                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
		                        var id = (expr);
		                        if (this.scanner.isRestrictedWord(id.name)) {
		                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
		                        }
		                        if (this.scanner.isStrictModeReservedWord(id.name)) {
		                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		                        }
		                    }
		                    if (!this.match('=')) {
		                        this.context.isAssignmentTarget = false;
		                        this.context.isBindingElement = false;
		                    }
		                    else {
		                        this.reinterpretExpressionAsPattern(expr);
		                    }
		                    token = this.nextToken();
		                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
		                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));
		                    this.context.firstCoverInitializedNameError = null;
		                }
		            }
		        }
		        return expr;
		    };
		    // ECMA-262 12.16 Comma Operator
		    Parser.prototype.parseExpression = function () {
		        var startToken = this.lookahead;
		        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        if (this.match(',')) {
		            var expressions = [];
		            expressions.push(expr);
		            while (this.startMarker.index < this.scanner.length) {
		                if (!this.match(',')) {
		                    break;
		                }
		                this.nextToken();
		                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
		            }
		            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
		        }
		        return expr;
		    };
		    // ECMA-262 13.2 Block
		    Parser.prototype.parseStatementListItem = function () {
		        var statement = null;
		        this.context.isAssignmentTarget = true;
		        this.context.isBindingElement = true;
		        if (this.lookahead.type === token_1.Token.Keyword) {
		            switch (this.lookahead.value) {
		                case 'export':
		                    if (this.sourceType !== 'module') {
		                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
		                    }
		                    statement = this.parseExportDeclaration();
		                    break;
		                case 'import':
		                    if (this.sourceType !== 'module') {
		                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
		                    }
		                    statement = this.parseImportDeclaration();
		                    break;
		                case 'const':
		                    statement = this.parseLexicalDeclaration({ inFor: false });
		                    break;
		                case 'function':
		                    statement = this.parseFunctionDeclaration();
		                    break;
		                case 'class':
		                    statement = this.parseClassDeclaration();
		                    break;
		                case 'let':
		                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
		                    break;
		                default:
		                    statement = this.parseStatement();
		                    break;
		            }
		        }
		        else {
		            statement = this.parseStatement();
		        }
		        return statement;
		    };
		    Parser.prototype.parseBlock = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var block = [];
		        while (true) {
		            if (this.match('}')) {
		                break;
		            }
		            block.push(this.parseStatementListItem());
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.BlockStatement(block));
		    };
		    // ECMA-262 13.3.1 Let and Const Declarations
		    Parser.prototype.parseLexicalBinding = function (kind, options) {
		        var node = this.createNode();
		        var params = [];
		        var id = this.parsePattern(params, kind);
		        // ECMA-262 12.2.1
		        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord((id).name)) {
		                this.tolerateError(messages_1.Messages.StrictVarName);
		            }
		        }
		        var init = null;
		        if (kind === 'const') {
		            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
		                this.expect('=');
		                init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            }
		        }
		        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
		            this.expect('=');
		            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        }
		        return this.finalize(node, new Node.VariableDeclarator(id, init));
		    };
		    Parser.prototype.parseBindingList = function (kind, options) {
		        var list = [this.parseLexicalBinding(kind, options)];
		        while (this.match(',')) {
		            this.nextToken();
		            list.push(this.parseLexicalBinding(kind, options));
		        }
		        return list;
		    };
		    Parser.prototype.isLexicalDeclaration = function () {
		        var previousIndex = this.scanner.index;
		        var previousLineNumber = this.scanner.lineNumber;
		        var previousLineStart = this.scanner.lineStart;
		        this.collectComments();
		        var next = this.scanner.lex();
		        this.scanner.index = previousIndex;
		        this.scanner.lineNumber = previousLineNumber;
		        this.scanner.lineStart = previousLineStart;
		        return (next.type === token_1.Token.Identifier) ||
		            (next.type === token_1.Token.Punctuator && next.value === '[') ||
		            (next.type === token_1.Token.Punctuator && next.value === '{') ||
		            (next.type === token_1.Token.Keyword && next.value === 'let') ||
		            (next.type === token_1.Token.Keyword && next.value === 'yield');
		    };
		    Parser.prototype.parseLexicalDeclaration = function (options) {
		        var node = this.createNode();
		        var kind = this.nextToken().value;
		        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
		        var declarations = this.parseBindingList(kind, options);
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
		    };
		    // ECMA-262 13.3.3 Destructuring Binding Patterns
		    Parser.prototype.parseBindingRestElement = function (params, kind) {
		        var node = this.createNode();
		        this.expect('...');
		        params.push(this.lookahead);
		        var arg = this.parseVariableIdentifier(kind);
		        return this.finalize(node, new Node.RestElement(arg));
		    };
		    Parser.prototype.parseArrayPattern = function (params, kind) {
		        var node = this.createNode();
		        this.expect('[');
		        var elements = [];
		        while (!this.match(']')) {
		            if (this.match(',')) {
		                this.nextToken();
		                elements.push(null);
		            }
		            else {
		                if (this.match('...')) {
		                    elements.push(this.parseBindingRestElement(params, kind));
		                    break;
		                }
		                else {
		                    elements.push(this.parsePatternWithDefault(params, kind));
		                }
		                if (!this.match(']')) {
		                    this.expect(',');
		                }
		            }
		        }
		        this.expect(']');
		        return this.finalize(node, new Node.ArrayPattern(elements));
		    };
		    Parser.prototype.parsePropertyPattern = function (params, kind) {
		        var node = this.createNode();
		        var computed = false;
		        var shorthand = false;
		        var method = false;
		        var key;
		        var value;
		        if (this.lookahead.type === token_1.Token.Identifier) {
		            var keyToken = this.lookahead;
		            key = this.parseVariableIdentifier();
		            var init = this.finalize(node, new Node.Identifier(keyToken.value));
		            if (this.match('=')) {
		                params.push(keyToken);
		                shorthand = true;
		                this.nextToken();
		                var expr = this.parseAssignmentExpression();
		                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
		            }
		            else if (!this.match(':')) {
		                params.push(keyToken);
		                shorthand = true;
		                value = init;
		            }
		            else {
		                this.expect(':');
		                value = this.parsePatternWithDefault(params, kind);
		            }
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            this.expect(':');
		            value = this.parsePatternWithDefault(params, kind);
		        }
		        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
		    };
		    Parser.prototype.parseObjectPattern = function (params, kind) {
		        var node = this.createNode();
		        var properties = [];
		        this.expect('{');
		        while (!this.match('}')) {
		            properties.push(this.parsePropertyPattern(params, kind));
		            if (!this.match('}')) {
		                this.expect(',');
		            }
		        }
		        this.expect('}');
		        return this.finalize(node, new Node.ObjectPattern(properties));
		    };
		    Parser.prototype.parsePattern = function (params, kind) {
		        var pattern;
		        if (this.match('[')) {
		            pattern = this.parseArrayPattern(params, kind);
		        }
		        else if (this.match('{')) {
		            pattern = this.parseObjectPattern(params, kind);
		        }
		        else {
		            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
		                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);
		            }
		            params.push(this.lookahead);
		            pattern = this.parseVariableIdentifier(kind);
		        }
		        return pattern;
		    };
		    Parser.prototype.parsePatternWithDefault = function (params, kind) {
		        var startToken = this.lookahead;
		        var pattern = this.parsePattern(params, kind);
		        if (this.match('=')) {
		            this.nextToken();
		            var previousAllowYield = this.context.allowYield;
		            this.context.allowYield = true;
		            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
		            this.context.allowYield = previousAllowYield;
		            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
		        }
		        return pattern;
		    };
		    // ECMA-262 13.3.2 Variable Statement
		    Parser.prototype.parseVariableIdentifier = function (kind) {
		        var node = this.createNode();
		        var token = this.nextToken();
		        if (token.type === token_1.Token.Keyword && token.value === 'yield') {
		            if (this.context.strict) {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		            }
		            if (!this.context.allowYield) {
		                this.throwUnexpectedToken(token);
		            }
		        }
		        else if (token.type !== token_1.Token.Identifier) {
		            if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {
		                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
		            }
		            else {
		                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
		                    this.throwUnexpectedToken(token);
		                }
		            }
		        }
		        else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {
		            this.tolerateUnexpectedToken(token);
		        }
		        return this.finalize(node, new Node.Identifier(token.value));
		    };
		    Parser.prototype.parseVariableDeclaration = function (options) {
		        var node = this.createNode();
		        var params = [];
		        var id = this.parsePattern(params, 'var');
		        // ECMA-262 12.2.1
		        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord((id).name)) {
		                this.tolerateError(messages_1.Messages.StrictVarName);
		            }
		        }
		        var init = null;
		        if (this.match('=')) {
		            this.nextToken();
		            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
		        }
		        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
		            this.expect('=');
		        }
		        return this.finalize(node, new Node.VariableDeclarator(id, init));
		    };
		    Parser.prototype.parseVariableDeclarationList = function (options) {
		        var opt = { inFor: options.inFor };
		        var list = [];
		        list.push(this.parseVariableDeclaration(opt));
		        while (this.match(',')) {
		            this.nextToken();
		            list.push(this.parseVariableDeclaration(opt));
		        }
		        return list;
		    };
		    Parser.prototype.parseVariableStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('var');
		        var declarations = this.parseVariableDeclarationList({ inFor: false });
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
		    };
		    // ECMA-262 13.4 Empty Statement
		    Parser.prototype.parseEmptyStatement = function () {
		        var node = this.createNode();
		        this.expect(';');
		        return this.finalize(node, new Node.EmptyStatement());
		    };
		    // ECMA-262 13.5 Expression Statement
		    Parser.prototype.parseExpressionStatement = function () {
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ExpressionStatement(expr));
		    };
		    // ECMA-262 13.6 If statement
		    Parser.prototype.parseIfStatement = function () {
		        var node = this.createNode();
		        var consequent;
		        var alternate = null;
		        this.expectKeyword('if');
		        this.expect('(');
		        var test = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            consequent = this.parseStatement();
		            if (this.matchKeyword('else')) {
		                this.nextToken();
		                alternate = this.parseStatement();
		            }
		        }
		        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
		    };
		    // ECMA-262 13.7.2 The do-while Statement
		    Parser.prototype.parseDoWhileStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('do');
		        var previousInIteration = this.context.inIteration;
		        this.context.inIteration = true;
		        var body = this.parseStatement();
		        this.context.inIteration = previousInIteration;
		        this.expectKeyword('while');
		        this.expect('(');
		        var test = this.parseExpression();
		        this.expect(')');
		        if (this.match(';')) {
		            this.nextToken();
		        }
		        return this.finalize(node, new Node.DoWhileStatement(body, test));
		    };
		    // ECMA-262 13.7.3 The while Statement
		    Parser.prototype.parseWhileStatement = function () {
		        var node = this.createNode();
		        var body;
		        this.expectKeyword('while');
		        this.expect('(');
		        var test = this.parseExpression();
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            body = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            var previousInIteration = this.context.inIteration;
		            this.context.inIteration = true;
		            body = this.parseStatement();
		            this.context.inIteration = previousInIteration;
		        }
		        return this.finalize(node, new Node.WhileStatement(test, body));
		    };
		    // ECMA-262 13.7.4 The for Statement
		    // ECMA-262 13.7.5 The for-in and for-of Statements
		    Parser.prototype.parseForStatement = function () {
		        var init = null;
		        var test = null;
		        var update = null;
		        var forIn = true;
		        var left, right;
		        var node = this.createNode();
		        this.expectKeyword('for');
		        this.expect('(');
		        if (this.match(';')) {
		            this.nextToken();
		        }
		        else {
		            if (this.matchKeyword('var')) {
		                init = this.createNode();
		                this.nextToken();
		                var previousAllowIn = this.context.allowIn;
		                this.context.allowIn = false;
		                var declarations = this.parseVariableDeclarationList({ inFor: true });
		                this.context.allowIn = previousAllowIn;
		                if (declarations.length === 1 && this.matchKeyword('in')) {
		                    var decl = declarations[0];
		                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
		                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
		                    }
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseAssignmentExpression();
		                    init = null;
		                    forIn = false;
		                }
		                else {
		                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
		                    this.expect(';');
		                }
		            }
		            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
		                init = this.createNode();
		                var kind = this.nextToken().value;
		                if (!this.context.strict && this.lookahead.value === 'in') {
		                    init = this.finalize(init, new Node.Identifier(kind));
		                    this.nextToken();
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else {
		                    var previousAllowIn = this.context.allowIn;
		                    this.context.allowIn = false;
		                    var declarations = this.parseBindingList(kind, { inFor: true });
		                    this.context.allowIn = previousAllowIn;
		                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                        this.nextToken();
		                        left = init;
		                        right = this.parseExpression();
		                        init = null;
		                    }
		                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                        this.nextToken();
		                        left = init;
		                        right = this.parseAssignmentExpression();
		                        init = null;
		                        forIn = false;
		                    }
		                    else {
		                        this.consumeSemicolon();
		                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
		                    }
		                }
		            }
		            else {
		                var initStartToken = this.lookahead;
		                var previousAllowIn = this.context.allowIn;
		                this.context.allowIn = false;
		                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
		                this.context.allowIn = previousAllowIn;
		                if (this.matchKeyword('in')) {
		                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
		                    }
		                    this.nextToken();
		                    this.reinterpretExpressionAsPattern(init);
		                    left = init;
		                    right = this.parseExpression();
		                    init = null;
		                }
		                else if (this.matchContextualKeyword('of')) {
		                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
		                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
		                    }
		                    this.nextToken();
		                    this.reinterpretExpressionAsPattern(init);
		                    left = init;
		                    right = this.parseAssignmentExpression();
		                    init = null;
		                    forIn = false;
		                }
		                else {
		                    if (this.match(',')) {
		                        var initSeq = [init];
		                        while (this.match(',')) {
		                            this.nextToken();
		                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
		                        }
		                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
		                    }
		                    this.expect(';');
		                }
		            }
		        }
		        if (typeof left === 'undefined') {
		            if (!this.match(';')) {
		                test = this.parseExpression();
		            }
		            this.expect(';');
		            if (!this.match(')')) {
		                update = this.parseExpression();
		            }
		        }
		        var body;
		        if (!this.match(')') && this.config.tolerant) {
		            this.tolerateUnexpectedToken(this.nextToken());
		            body = this.finalize(this.createNode(), new Node.EmptyStatement());
		        }
		        else {
		            this.expect(')');
		            var previousInIteration = this.context.inIteration;
		            this.context.inIteration = true;
		            body = this.isolateCoverGrammar(this.parseStatement);
		            this.context.inIteration = previousInIteration;
		        }
		        return (typeof left === 'undefined') ?
		            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
		            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
		                this.finalize(node, new Node.ForOfStatement(left, right, body));
		    };
		    // ECMA-262 13.8 The continue statement
		    Parser.prototype.parseContinueStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('continue');
		        var label = null;
		        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {
		            label = this.parseVariableIdentifier();
		            var key = '$' + label.name;
		            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.UnknownLabel, label.name);
		            }
		        }
		        this.consumeSemicolon();
		        if (label === null && !this.context.inIteration) {
		            this.throwError(messages_1.Messages.IllegalContinue);
		        }
		        return this.finalize(node, new Node.ContinueStatement(label));
		    };
		    // ECMA-262 13.9 The break statement
		    Parser.prototype.parseBreakStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('break');
		        var label = null;
		        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {
		            label = this.parseVariableIdentifier();
		            var key = '$' + label.name;
		            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.UnknownLabel, label.name);
		            }
		        }
		        this.consumeSemicolon();
		        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
		            this.throwError(messages_1.Messages.IllegalBreak);
		        }
		        return this.finalize(node, new Node.BreakStatement(label));
		    };
		    // ECMA-262 13.10 The return statement
		    Parser.prototype.parseReturnStatement = function () {
		        if (!this.context.inFunctionBody) {
		            this.tolerateError(messages_1.Messages.IllegalReturn);
		        }
		        var node = this.createNode();
		        this.expectKeyword('return');
		        var hasArgument = !this.match(';') && !this.match('}') &&
		            !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;
		        var argument = hasArgument ? this.parseExpression() : null;
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ReturnStatement(argument));
		    };
		    // ECMA-262 13.11 The with statement
		    Parser.prototype.parseWithStatement = function () {
		        if (this.context.strict) {
		            this.tolerateError(messages_1.Messages.StrictModeWith);
		        }
		        var node = this.createNode();
		        this.expectKeyword('with');
		        this.expect('(');
		        var object = this.parseExpression();
		        this.expect(')');
		        var body = this.parseStatement();
		        return this.finalize(node, new Node.WithStatement(object, body));
		    };
		    // ECMA-262 13.12 The switch statement
		    Parser.prototype.parseSwitchCase = function () {
		        var node = this.createNode();
		        var test;
		        if (this.matchKeyword('default')) {
		            this.nextToken();
		            test = null;
		        }
		        else {
		            this.expectKeyword('case');
		            test = this.parseExpression();
		        }
		        this.expect(':');
		        var consequent = [];
		        while (true) {
		            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
		                break;
		            }
		            consequent.push(this.parseStatementListItem());
		        }
		        return this.finalize(node, new Node.SwitchCase(test, consequent));
		    };
		    Parser.prototype.parseSwitchStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('switch');
		        this.expect('(');
		        var discriminant = this.parseExpression();
		        this.expect(')');
		        var previousInSwitch = this.context.inSwitch;
		        this.context.inSwitch = true;
		        var cases = [];
		        var defaultFound = false;
		        this.expect('{');
		        while (true) {
		            if (this.match('}')) {
		                break;
		            }
		            var clause = this.parseSwitchCase();
		            if (clause.test === null) {
		                if (defaultFound) {
		                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
		                }
		                defaultFound = true;
		            }
		            cases.push(clause);
		        }
		        this.expect('}');
		        this.context.inSwitch = previousInSwitch;
		        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
		    };
		    // ECMA-262 13.13 Labelled Statements
		    Parser.prototype.parseLabelledStatement = function () {
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        var statement;
		        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
		            this.nextToken();
		            var id = (expr);
		            var key = '$' + id.name;
		            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
		                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
		            }
		            this.context.labelSet[key] = true;
		            var labeledBody = this.parseStatement();
		            delete this.context.labelSet[key];
		            statement = new Node.LabeledStatement(id, labeledBody);
		        }
		        else {
		            this.consumeSemicolon();
		            statement = new Node.ExpressionStatement(expr);
		        }
		        return this.finalize(node, statement);
		    };
		    // ECMA-262 13.14 The throw statement
		    Parser.prototype.parseThrowStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('throw');
		        if (this.hasLineTerminator) {
		            this.throwError(messages_1.Messages.NewlineAfterThrow);
		        }
		        var argument = this.parseExpression();
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ThrowStatement(argument));
		    };
		    // ECMA-262 13.15 The try statement
		    Parser.prototype.parseCatchClause = function () {
		        var node = this.createNode();
		        this.expectKeyword('catch');
		        this.expect('(');
		        if (this.match(')')) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        var params = [];
		        var param = this.parsePattern(params);
		        var paramMap = {};
		        for (var i = 0; i < params.length; i++) {
		            var key = '$' + params[i].value;
		            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
		                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
		            }
		            paramMap[key] = true;
		        }
		        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
		            if (this.scanner.isRestrictedWord((param).name)) {
		                this.tolerateError(messages_1.Messages.StrictCatchVariable);
		            }
		        }
		        this.expect(')');
		        var body = this.parseBlock();
		        return this.finalize(node, new Node.CatchClause(param, body));
		    };
		    Parser.prototype.parseFinallyClause = function () {
		        this.expectKeyword('finally');
		        return this.parseBlock();
		    };
		    Parser.prototype.parseTryStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('try');
		        var block = this.parseBlock();
		        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
		        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
		        if (!handler && !finalizer) {
		            this.throwError(messages_1.Messages.NoCatchOrFinally);
		        }
		        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
		    };
		    // ECMA-262 13.16 The debugger statement
		    Parser.prototype.parseDebuggerStatement = function () {
		        var node = this.createNode();
		        this.expectKeyword('debugger');
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.DebuggerStatement());
		    };
		    // ECMA-262 13 Statements
		    Parser.prototype.parseStatement = function () {
		        var statement = null;
		        switch (this.lookahead.type) {
		            case token_1.Token.BooleanLiteral:
		            case token_1.Token.NullLiteral:
		            case token_1.Token.NumericLiteral:
		            case token_1.Token.StringLiteral:
		            case token_1.Token.Template:
		            case token_1.Token.RegularExpression:
		                statement = this.parseExpressionStatement();
		                break;
		            case token_1.Token.Punctuator:
		                var value = this.lookahead.value;
		                if (value === '{') {
		                    statement = this.parseBlock();
		                }
		                else if (value === '(') {
		                    statement = this.parseExpressionStatement();
		                }
		                else if (value === ';') {
		                    statement = this.parseEmptyStatement();
		                }
		                else {
		                    statement = this.parseExpressionStatement();
		                }
		                break;
		            case token_1.Token.Identifier:
		                statement = this.parseLabelledStatement();
		                break;
		            case token_1.Token.Keyword:
		                switch (this.lookahead.value) {
		                    case 'break':
		                        statement = this.parseBreakStatement();
		                        break;
		                    case 'continue':
		                        statement = this.parseContinueStatement();
		                        break;
		                    case 'debugger':
		                        statement = this.parseDebuggerStatement();
		                        break;
		                    case 'do':
		                        statement = this.parseDoWhileStatement();
		                        break;
		                    case 'for':
		                        statement = this.parseForStatement();
		                        break;
		                    case 'function':
		                        statement = this.parseFunctionDeclaration();
		                        break;
		                    case 'if':
		                        statement = this.parseIfStatement();
		                        break;
		                    case 'return':
		                        statement = this.parseReturnStatement();
		                        break;
		                    case 'switch':
		                        statement = this.parseSwitchStatement();
		                        break;
		                    case 'throw':
		                        statement = this.parseThrowStatement();
		                        break;
		                    case 'try':
		                        statement = this.parseTryStatement();
		                        break;
		                    case 'var':
		                        statement = this.parseVariableStatement();
		                        break;
		                    case 'while':
		                        statement = this.parseWhileStatement();
		                        break;
		                    case 'with':
		                        statement = this.parseWithStatement();
		                        break;
		                    default:
		                        statement = this.parseExpressionStatement();
		                        break;
		                }
		                break;
		            default:
		                this.throwUnexpectedToken(this.lookahead);
		        }
		        return statement;
		    };
		    // ECMA-262 14.1 Function Definition
		    Parser.prototype.parseFunctionSourceElements = function () {
		        var node = this.createNode();
		        this.expect('{');
		        var body = this.parseDirectivePrologues();
		        var previousLabelSet = this.context.labelSet;
		        var previousInIteration = this.context.inIteration;
		        var previousInSwitch = this.context.inSwitch;
		        var previousInFunctionBody = this.context.inFunctionBody;
		        this.context.labelSet = {};
		        this.context.inIteration = false;
		        this.context.inSwitch = false;
		        this.context.inFunctionBody = true;
		        while (this.startMarker.index < this.scanner.length) {
		            if (this.match('}')) {
		                break;
		            }
		            body.push(this.parseStatementListItem());
		        }
		        this.expect('}');
		        this.context.labelSet = previousLabelSet;
		        this.context.inIteration = previousInIteration;
		        this.context.inSwitch = previousInSwitch;
		        this.context.inFunctionBody = previousInFunctionBody;
		        return this.finalize(node, new Node.BlockStatement(body));
		    };
		    Parser.prototype.validateParam = function (options, param, name) {
		        var key = '$' + name;
		        if (this.context.strict) {
		            if (this.scanner.isRestrictedWord(name)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamName;
		            }
		            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamDupe;
		            }
		        }
		        else if (!options.firstRestricted) {
		            if (this.scanner.isRestrictedWord(name)) {
		                options.firstRestricted = param;
		                options.message = messages_1.Messages.StrictParamName;
		            }
		            else if (this.scanner.isStrictModeReservedWord(name)) {
		                options.firstRestricted = param;
		                options.message = messages_1.Messages.StrictReservedWord;
		            }
		            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
		                options.stricted = param;
		                options.message = messages_1.Messages.StrictParamDupe;
		            }
		        }
		        /* istanbul ignore next */
		        if (typeof Object.defineProperty === 'function') {
		            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
		        }
		        else {
		            options.paramSet[key] = true;
		        }
		    };
		    Parser.prototype.parseRestElement = function (params) {
		        var node = this.createNode();
		        this.nextToken();
		        if (this.match('{')) {
		            this.throwError(messages_1.Messages.ObjectPatternAsRestParameter);
		        }
		        params.push(this.lookahead);
		        var param = this.parseVariableIdentifier();
		        if (this.match('=')) {
		            this.throwError(messages_1.Messages.DefaultRestParameter);
		        }
		        if (!this.match(')')) {
		            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
		        }
		        return this.finalize(node, new Node.RestElement(param));
		    };
		    Parser.prototype.parseFormalParameter = function (options) {
		        var param;
		        var params = [];
		        var token = this.lookahead;
		        if (token.value === '...') {
		            param = this.parseRestElement(params);
		            this.validateParam(options, param.argument, param.argument.name);
		            options.params.push(param);
		            return false;
		        }
		        param = this.parsePatternWithDefault(params);
		        for (var i = 0; i < params.length; i++) {
		            this.validateParam(options, params[i], params[i].value);
		        }
		        options.params.push(param);
		        return !this.match(')');
		    };
		    Parser.prototype.parseFormalParameters = function (firstRestricted) {
		        var options;
		        options = {
		            params: [],
		            firstRestricted: firstRestricted
		        };
		        this.expect('(');
		        if (!this.match(')')) {
		            options.paramSet = {};
		            while (this.startMarker.index < this.scanner.length) {
		                if (!this.parseFormalParameter(options)) {
		                    break;
		                }
		                this.expect(',');
		            }
		        }
		        this.expect(')');
		        return {
		            params: options.params,
		            stricted: options.stricted,
		            firstRestricted: options.firstRestricted,
		            message: options.message
		        };
		    };
		    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
		        var node = this.createNode();
		        this.expectKeyword('function');
		        var isGenerator = this.match('*');
		        if (isGenerator) {
		            this.nextToken();
		        }
		        var message;
		        var id = null;
		        var firstRestricted = null;
		        if (!identifierIsOptional || !this.match('(')) {
		            var token = this.lookahead;
		            id = this.parseVariableIdentifier();
		            if (this.context.strict) {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
		                }
		            }
		            else {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictFunctionName;
		                }
		                else if (this.scanner.isStrictModeReservedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictReservedWord;
		                }
		            }
		        }
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = !isGenerator;
		        var formalParameters = this.parseFormalParameters(firstRestricted);
		        var params = formalParameters.params;
		        var stricted = formalParameters.stricted;
		        firstRestricted = formalParameters.firstRestricted;
		        if (formalParameters.message) {
		            message = formalParameters.message;
		        }
		        var previousStrict = this.context.strict;
		        var body = this.parseFunctionSourceElements();
		        if (this.context.strict && firstRestricted) {
		            this.throwUnexpectedToken(firstRestricted, message);
		        }
		        if (this.context.strict && stricted) {
		            this.tolerateUnexpectedToken(stricted, message);
		        }
		        this.context.strict = previousStrict;
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
		    };
		    Parser.prototype.parseFunctionExpression = function () {
		        var node = this.createNode();
		        this.expectKeyword('function');
		        var isGenerator = this.match('*');
		        if (isGenerator) {
		            this.nextToken();
		        }
		        var message;
		        var id = null;
		        var firstRestricted;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = !isGenerator;
		        if (!this.match('(')) {
		            var token = this.lookahead;
		            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
		            if (this.context.strict) {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
		                }
		            }
		            else {
		                if (this.scanner.isRestrictedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictFunctionName;
		                }
		                else if (this.scanner.isStrictModeReservedWord(token.value)) {
		                    firstRestricted = token;
		                    message = messages_1.Messages.StrictReservedWord;
		                }
		            }
		        }
		        var formalParameters = this.parseFormalParameters(firstRestricted);
		        var params = formalParameters.params;
		        var stricted = formalParameters.stricted;
		        firstRestricted = formalParameters.firstRestricted;
		        if (formalParameters.message) {
		            message = formalParameters.message;
		        }
		        var previousStrict = this.context.strict;
		        var body = this.parseFunctionSourceElements();
		        if (this.context.strict && firstRestricted) {
		            this.throwUnexpectedToken(firstRestricted, message);
		        }
		        if (this.context.strict && stricted) {
		            this.tolerateUnexpectedToken(stricted, message);
		        }
		        this.context.strict = previousStrict;
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
		    };
		    // ECMA-262 14.1.1 Directive Prologues
		    Parser.prototype.parseDirective = function () {
		        var token = this.lookahead;
		        var directive = null;
		        var node = this.createNode();
		        var expr = this.parseExpression();
		        if (expr.type === syntax_1.Syntax.Literal) {
		            directive = this.getTokenRaw(token).slice(1, -1);
		        }
		        this.consumeSemicolon();
		        return this.finalize(node, directive ? new Node.Directive(expr, directive) :
		            new Node.ExpressionStatement(expr));
		    };
		    Parser.prototype.parseDirectivePrologues = function () {
		        var firstRestricted = null;
		        var body = [];
		        while (true) {
		            var token = this.lookahead;
		            if (token.type !== token_1.Token.StringLiteral) {
		                break;
		            }
		            var statement = this.parseDirective();
		            body.push(statement);
		            var directive = statement.directive;
		            if (typeof directive !== 'string') {
		                break;
		            }
		            if (directive === 'use strict') {
		                this.context.strict = true;
		                if (firstRestricted) {
		                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
		                }
		            }
		            else {
		                if (!firstRestricted && token.octal) {
		                    firstRestricted = token;
		                }
		            }
		        }
		        return body;
		    };
		    // ECMA-262 14.3 Method Definitions
		    Parser.prototype.qualifiedPropertyName = function (token) {
		        switch (token.type) {
		            case token_1.Token.Identifier:
		            case token_1.Token.StringLiteral:
		            case token_1.Token.BooleanLiteral:
		            case token_1.Token.NullLiteral:
		            case token_1.Token.NumericLiteral:
		            case token_1.Token.Keyword:
		                return true;
		            case token_1.Token.Punctuator:
		                return token.value === '[';
		        }
		        return false;
		    };
		    Parser.prototype.parseGetterMethod = function () {
		        var node = this.createNode();
		        this.expect('(');
		        this.expect(')');
		        var isGenerator = false;
		        var params = {
		            params: [],
		            stricted: null,
		            firstRestricted: null,
		            message: null
		        };
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = false;
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
		    };
		    Parser.prototype.parseSetterMethod = function () {
		        var node = this.createNode();
		        var options = {
		            params: [],
		            firstRestricted: null,
		            paramSet: {}
		        };
		        var isGenerator = false;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = false;
		        this.expect('(');
		        if (this.match(')')) {
		            this.tolerateUnexpectedToken(this.lookahead);
		        }
		        else {
		            this.parseFormalParameter(options);
		        }
		        this.expect(')');
		        var method = this.parsePropertyMethod(options);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));
		    };
		    Parser.prototype.parseGeneratorMethod = function () {
		        var node = this.createNode();
		        var isGenerator = true;
		        var previousAllowYield = this.context.allowYield;
		        this.context.allowYield = true;
		        var params = this.parseFormalParameters();
		        this.context.allowYield = false;
		        var method = this.parsePropertyMethod(params);
		        this.context.allowYield = previousAllowYield;
		        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
		    };
		    // ECMA-262 14.4 Generator Function Definitions
		    Parser.prototype.parseYieldExpression = function () {
		        var node = this.createNode();
		        this.expectKeyword('yield');
		        var argument = null;
		        var delegate = false;
		        if (!this.hasLineTerminator) {
		            var previousAllowYield = this.context.allowYield;
		            this.context.allowYield = false;
		            delegate = this.match('*');
		            if (delegate) {
		                this.nextToken();
		                argument = this.parseAssignmentExpression();
		            }
		            else {
		                if (!this.match(';') && !this.match('}') && !this.match(')') && this.lookahead.type !== token_1.Token.EOF) {
		                    argument = this.parseAssignmentExpression();
		                }
		            }
		            this.context.allowYield = previousAllowYield;
		        }
		        return this.finalize(node, new Node.YieldExpression(argument, delegate));
		    };
		    // ECMA-262 14.5 Class Definitions
		    Parser.prototype.parseClassElement = function (hasConstructor) {
		        var token = this.lookahead;
		        var node = this.createNode();
		        var kind;
		        var key;
		        var value;
		        var computed = false;
		        var method = false;
		        var isStatic = false;
		        if (this.match('*')) {
		            this.nextToken();
		        }
		        else {
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            var id = key;
		            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
		                token = this.lookahead;
		                isStatic = true;
		                computed = this.match('[');
		                if (this.match('*')) {
		                    this.nextToken();
		                }
		                else {
		                    key = this.parseObjectPropertyKey();
		                }
		            }
		        }
		        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
		        if (token.type === token_1.Token.Identifier) {
		            if (token.value === 'get' && lookaheadPropertyKey) {
		                kind = 'get';
		                computed = this.match('[');
		                key = this.parseObjectPropertyKey();
		                this.context.allowYield = false;
		                value = this.parseGetterMethod();
		            }
		            else if (token.value === 'set' && lookaheadPropertyKey) {
		                kind = 'set';
		                computed = this.match('[');
		                key = this.parseObjectPropertyKey();
		                value = this.parseSetterMethod();
		            }
		        }
		        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {
		            kind = 'init';
		            computed = this.match('[');
		            key = this.parseObjectPropertyKey();
		            value = this.parseGeneratorMethod();
		            method = true;
		        }
		        if (!kind && key && this.match('(')) {
		            kind = 'init';
		            value = this.parsePropertyMethodFunction();
		            method = true;
		        }
		        if (!kind) {
		            this.throwUnexpectedToken(this.lookahead);
		        }
		        if (kind === 'init') {
		            kind = 'method';
		        }
		        if (!computed) {
		            if (isStatic && this.isPropertyKey(key, 'prototype')) {
		                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
		            }
		            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
		                if (kind !== 'method' || !method || value.generator) {
		                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
		                }
		                if (hasConstructor.value) {
		                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
		                }
		                else {
		                    hasConstructor.value = true;
		                }
		                kind = 'constructor';
		            }
		        }
		        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
		    };
		    Parser.prototype.parseClassElementList = function () {
		        var body = [];
		        var hasConstructor = { value: false };
		        this.expect('{');
		        while (!this.match('}')) {
		            if (this.match(';')) {
		                this.nextToken();
		            }
		            else {
		                body.push(this.parseClassElement(hasConstructor));
		            }
		        }
		        this.expect('}');
		        return body;
		    };
		    Parser.prototype.parseClassBody = function () {
		        var node = this.createNode();
		        var elementList = this.parseClassElementList();
		        return this.finalize(node, new Node.ClassBody(elementList));
		    };
		    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
		        var node = this.createNode();
		        var previousStrict = this.context.strict;
		        this.context.strict = true;
		        this.expectKeyword('class');
		        var id = (identifierIsOptional && (this.lookahead.type !== token_1.Token.Identifier)) ? null : this.parseVariableIdentifier();
		        var superClass = null;
		        if (this.matchKeyword('extends')) {
		            this.nextToken();
		            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		        }
		        var classBody = this.parseClassBody();
		        this.context.strict = previousStrict;
		        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
		    };
		    Parser.prototype.parseClassExpression = function () {
		        var node = this.createNode();
		        var previousStrict = this.context.strict;
		        this.context.strict = true;
		        this.expectKeyword('class');
		        var id = (this.lookahead.type === token_1.Token.Identifier) ? this.parseVariableIdentifier() : null;
		        var superClass = null;
		        if (this.matchKeyword('extends')) {
		            this.nextToken();
		            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
		        }
		        var classBody = this.parseClassBody();
		        this.context.strict = previousStrict;
		        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
		    };
		    // ECMA-262 15.1 Scripts
		    // ECMA-262 15.2 Modules
		    Parser.prototype.parseProgram = function () {
		        var node = this.createNode();
		        var body = this.parseDirectivePrologues();
		        while (this.startMarker.index < this.scanner.length) {
		            body.push(this.parseStatementListItem());
		        }
		        return this.finalize(node, new Node.Program(body, this.sourceType));
		    };
		    // ECMA-262 15.2.2 Imports
		    Parser.prototype.parseModuleSpecifier = function () {
		        var node = this.createNode();
		        if (this.lookahead.type !== token_1.Token.StringLiteral) {
		            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
		        }
		        var token = this.nextToken();
		        var raw = this.getTokenRaw(token);
		        return this.finalize(node, new Node.Literal(token.value, raw));
		    };
		    // import {<foo as bar>} ...;
		    Parser.prototype.parseImportSpecifier = function () {
		        var node = this.createNode();
		        var imported;
		        var local;
		        if (this.lookahead.type === token_1.Token.Identifier) {
		            imported = this.parseVariableIdentifier();
		            local = imported;
		            if (this.matchContextualKeyword('as')) {
		                this.nextToken();
		                local = this.parseVariableIdentifier();
		            }
		        }
		        else {
		            imported = this.parseIdentifierName();
		            local = imported;
		            if (this.matchContextualKeyword('as')) {
		                this.nextToken();
		                local = this.parseVariableIdentifier();
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		        }
		        return this.finalize(node, new Node.ImportSpecifier(local, imported));
		    };
		    // {foo, bar as bas}
		    Parser.prototype.parseNamedImports = function () {
		        this.expect('{');
		        var specifiers = [];
		        while (!this.match('}')) {
		            specifiers.push(this.parseImportSpecifier());
		            if (!this.match('}')) {
		                this.expect(',');
		            }
		        }
		        this.expect('}');
		        return specifiers;
		    };
		    // import <foo> ...;
		    Parser.prototype.parseImportDefaultSpecifier = function () {
		        var node = this.createNode();
		        var local = this.parseIdentifierName();
		        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
		    };
		    // import <* as foo> ...;
		    Parser.prototype.parseImportNamespaceSpecifier = function () {
		        var node = this.createNode();
		        this.expect('*');
		        if (!this.matchContextualKeyword('as')) {
		            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
		        }
		        this.nextToken();
		        var local = this.parseIdentifierName();
		        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
		    };
		    Parser.prototype.parseImportDeclaration = function () {
		        if (this.context.inFunctionBody) {
		            this.throwError(messages_1.Messages.IllegalImportDeclaration);
		        }
		        var node = this.createNode();
		        this.expectKeyword('import');
		        var src;
		        var specifiers = [];
		        if (this.lookahead.type === token_1.Token.StringLiteral) {
		            // import 'foo';
		            src = this.parseModuleSpecifier();
		        }
		        else {
		            if (this.match('{')) {
		                // import {bar}
		                specifiers = specifiers.concat(this.parseNamedImports());
		            }
		            else if (this.match('*')) {
		                // import * as foo
		                specifiers.push(this.parseImportNamespaceSpecifier());
		            }
		            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
		                // import foo
		                specifiers.push(this.parseImportDefaultSpecifier());
		                if (this.match(',')) {
		                    this.nextToken();
		                    if (this.match('*')) {
		                        // import foo, * as foo
		                        specifiers.push(this.parseImportNamespaceSpecifier());
		                    }
		                    else if (this.match('{')) {
		                        // import foo, {bar}
		                        specifiers = specifiers.concat(this.parseNamedImports());
		                    }
		                    else {
		                        this.throwUnexpectedToken(this.lookahead);
		                    }
		                }
		            }
		            else {
		                this.throwUnexpectedToken(this.nextToken());
		            }
		            if (!this.matchContextualKeyword('from')) {
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            this.nextToken();
		            src = this.parseModuleSpecifier();
		        }
		        this.consumeSemicolon();
		        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
		    };
		    // ECMA-262 15.2.3 Exports
		    Parser.prototype.parseExportSpecifier = function () {
		        var node = this.createNode();
		        var local = this.parseIdentifierName();
		        var exported = local;
		        if (this.matchContextualKeyword('as')) {
		            this.nextToken();
		            exported = this.parseIdentifierName();
		        }
		        return this.finalize(node, new Node.ExportSpecifier(local, exported));
		    };
		    Parser.prototype.parseExportDeclaration = function () {
		        if (this.context.inFunctionBody) {
		            this.throwError(messages_1.Messages.IllegalExportDeclaration);
		        }
		        var node = this.createNode();
		        this.expectKeyword('export');
		        var exportDeclaration;
		        if (this.matchKeyword('default')) {
		            // export default ...
		            this.nextToken();
		            if (this.matchKeyword('function')) {
		                // export default function foo () {}
		                // export default function () {}
		                var declaration = this.parseFunctionDeclaration(true);
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		            else if (this.matchKeyword('class')) {
		                // export default class foo {}
		                var declaration = this.parseClassDeclaration(true);
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		            else {
		                if (this.matchContextualKeyword('from')) {
		                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
		                }
		                // export default {};
		                // export default [];
		                // export default (1 + 2);
		                var declaration = this.match('{') ? this.parseObjectInitializer() :
		                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
		                this.consumeSemicolon();
		                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
		            }
		        }
		        else if (this.match('*')) {
		            // export * from 'foo';
		            this.nextToken();
		            if (!this.matchContextualKeyword('from')) {
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            this.nextToken();
		            var src = this.parseModuleSpecifier();
		            this.consumeSemicolon();
		            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
		        }
		        else if (this.lookahead.type === token_1.Token.Keyword) {
		            // export var f = 1;
		            var declaration = void 0;
		            switch (this.lookahead.value) {
		                case 'let':
		                case 'const':
		                    declaration = this.parseLexicalDeclaration({ inFor: false });
		                    break;
		                case 'var':
		                case 'class':
		                case 'function':
		                    declaration = this.parseStatementListItem();
		                    break;
		                default:
		                    this.throwUnexpectedToken(this.lookahead);
		            }
		            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
		        }
		        else {
		            var specifiers = [];
		            var source = null;
		            var isExportFromIdentifier = false;
		            this.expect('{');
		            while (!this.match('}')) {
		                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
		                specifiers.push(this.parseExportSpecifier());
		                if (!this.match('}')) {
		                    this.expect(',');
		                }
		            }
		            this.expect('}');
		            if (this.matchContextualKeyword('from')) {
		                // export {default} from 'foo';
		                // export {foo} from 'foo';
		                this.nextToken();
		                source = this.parseModuleSpecifier();
		                this.consumeSemicolon();
		            }
		            else if (isExportFromIdentifier) {
		                // export {default}; // missing fromClause
		                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
		                this.throwError(message, this.lookahead.value);
		            }
		            else {
		                // export {foo};
		                this.consumeSemicolon();
		            }
		            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
		        }
		        return exportDeclaration;
		    };
		    return Parser;
		}());
		exports.Parser = Parser;
	
	
	/***/ },
	/* 4 */
	/***/ function(module, exports) {
	
		// Ensure the condition is true, otherwise throw an error.
		// This is only to have a better contract semantic, i.e. another safety net
		// to catch a logic error. The condition shall be fulfilled in normal case.
		// Do NOT use this to enforce a certain condition on any user input.
		"use strict";
		function assert(condition, message) {
		    /* istanbul ignore if */
		    if (!condition) {
		        throw new Error('ASSERT: ' + message);
		    }
		}
		exports.assert = assert;
	
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		"use strict";
		// Error messages should be identical to V8.
		exports.Messages = {
		    UnexpectedToken: 'Unexpected token %0',
		    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
		    UnexpectedNumber: 'Unexpected number',
		    UnexpectedString: 'Unexpected string',
		    UnexpectedIdentifier: 'Unexpected identifier',
		    UnexpectedReserved: 'Unexpected reserved word',
		    UnexpectedTemplate: 'Unexpected quasi %0',
		    UnexpectedEOS: 'Unexpected end of input',
		    NewlineAfterThrow: 'Illegal newline after throw',
		    InvalidRegExp: 'Invalid regular expression',
		    UnterminatedRegExp: 'Invalid regular expression: missing /',
		    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
		    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
		    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
		    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
		    NoCatchOrFinally: 'Missing catch or finally after try',
		    UnknownLabel: 'Undefined label \'%0\'',
		    Redeclaration: '%0 \'%1\' has already been declared',
		    IllegalContinue: 'Illegal continue statement',
		    IllegalBreak: 'Illegal break statement',
		    IllegalReturn: 'Illegal return statement',
		    StrictModeWith: 'Strict mode code may not include a with statement',
		    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
		    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
		    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
		    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
		    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
		    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
		    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
		    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
		    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
		    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
		    StrictReservedWord: 'Use of future reserved word in strict mode',
		    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
		    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
		    DefaultRestParameter: 'Unexpected token =',
		    ObjectPatternAsRestParameter: 'Unexpected token {',
		    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
		    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
		    DuplicateConstructor: 'A class may only have one constructor',
		    StaticPrototype: 'Classes may not have static property named prototype',
		    MissingFromClause: 'Unexpected token',
		    NoAsAfterImportNamespace: 'Unexpected token',
		    InvalidModuleSpecifier: 'Unexpected token',
		    IllegalImportDeclaration: 'Unexpected token',
		    IllegalExportDeclaration: 'Unexpected token',
		    DuplicateBinding: 'Duplicate binding %0',
		    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'
		};
	
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		"use strict";
		var ErrorHandler = (function () {
		    function ErrorHandler() {
		        this.errors = [];
		        this.tolerant = false;
		    }
		    ;
		    ErrorHandler.prototype.recordError = function (error) {
		        this.errors.push(error);
		    };
		    ;
		    ErrorHandler.prototype.tolerate = function (error) {
		        if (this.tolerant) {
		            this.recordError(error);
		        }
		        else {
		            throw error;
		        }
		    };
		    ;
		    ErrorHandler.prototype.constructError = function (msg, column) {
		        var error = new Error(msg);
		        try {
		            throw error;
		        }
		        catch (base) {
		            /* istanbul ignore else */
		            if (Object.create && Object.defineProperty) {
		                error = Object.create(base);
		                Object.defineProperty(error, 'column', { value: column });
		            }
		        }
		        finally {
		            return error;
		        }
		    };
		    ;
		    ErrorHandler.prototype.createError = function (index, line, col, description) {
		        var msg = 'Line ' + line + ': ' + description;
		        var error = this.constructError(msg, col);
		        error.index = index;
		        error.lineNumber = line;
		        error.description = description;
		        return error;
		    };
		    ;
		    ErrorHandler.prototype.throwError = function (index, line, col, description) {
		        throw this.createError(index, line, col, description);
		    };
		    ;
		    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
		        var error = this.createError(index, line, col, description);
		        if (this.tolerant) {
		            this.recordError(error);
		        }
		        else {
		            throw error;
		        }
		    };
		    ;
		    return ErrorHandler;
		}());
		exports.ErrorHandler = ErrorHandler;
	
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		"use strict";
		(function (Token) {
		    Token[Token["BooleanLiteral"] = 1] = "BooleanLiteral";
		    Token[Token["EOF"] = 2] = "EOF";
		    Token[Token["Identifier"] = 3] = "Identifier";
		    Token[Token["Keyword"] = 4] = "Keyword";
		    Token[Token["NullLiteral"] = 5] = "NullLiteral";
		    Token[Token["NumericLiteral"] = 6] = "NumericLiteral";
		    Token[Token["Punctuator"] = 7] = "Punctuator";
		    Token[Token["StringLiteral"] = 8] = "StringLiteral";
		    Token[Token["RegularExpression"] = 9] = "RegularExpression";
		    Token[Token["Template"] = 10] = "Template";
		})(exports.Token || (exports.Token = {}));
		var Token = exports.Token;
		;
		exports.TokenName = {};
		exports.TokenName[Token.BooleanLiteral] = 'Boolean';
		exports.TokenName[Token.EOF] = '<end>';
		exports.TokenName[Token.Identifier] = 'Identifier';
		exports.TokenName[Token.Keyword] = 'Keyword';
		exports.TokenName[Token.NullLiteral] = 'Null';
		exports.TokenName[Token.NumericLiteral] = 'Numeric';
		exports.TokenName[Token.Punctuator] = 'Punctuator';
		exports.TokenName[Token.StringLiteral] = 'String';
		exports.TokenName[Token.RegularExpression] = 'RegularExpression';
		exports.TokenName[Token.Template] = 'Template';
	
	
	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var assert_1 = __webpack_require__(4);
		var messages_1 = __webpack_require__(5);
		var character_1 = __webpack_require__(9);
		var token_1 = __webpack_require__(7);
		function hexValue(ch) {
		    return '0123456789abcdef'.indexOf(ch.toLowerCase());
		}
		function octalValue(ch) {
		    return '01234567'.indexOf(ch);
		}
		var Scanner = (function () {
		    function Scanner(code, handler) {
		        this.source = code;
		        this.errorHandler = handler;
		        this.trackComment = false;
		        this.length = code.length;
		        this.index = 0;
		        this.lineNumber = (code.length > 0) ? 1 : 0;
		        this.lineStart = 0;
		        this.curlyStack = [];
		    }
		    ;
		    Scanner.prototype.eof = function () {
		        return this.index >= this.length;
		    };
		    ;
		    Scanner.prototype.throwUnexpectedToken = function (message) {
		        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
		        this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
		    };
		    ;
		    Scanner.prototype.tolerateUnexpectedToken = function () {
		        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);
		    };
		    ;
		    // ECMA-262 11.4 Comments
		    Scanner.prototype.skipSingleLineComment = function (offset) {
		        var comments;
		        var start, loc;
		        if (this.trackComment) {
		            comments = [];
		            start = this.index - offset;
		            loc = {
		                start: {
		                    line: this.lineNumber,
		                    column: this.index - this.lineStart - offset
		                },
		                end: {}
		            };
		        }
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            ++this.index;
		            if (character_1.Character.isLineTerminator(ch)) {
		                if (this.trackComment) {
		                    loc.end = {
		                        line: this.lineNumber,
		                        column: this.index - this.lineStart - 1
		                    };
		                    var entry = {
		                        multiLine: false,
		                        slice: [start + offset, this.index - 1],
		                        range: [start, this.index - 1],
		                        loc: loc
		                    };
		                    comments.push(entry);
		                }
		                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                this.lineStart = this.index;
		                return comments;
		            }
		        }
		        if (this.trackComment) {
		            loc.end = {
		                line: this.lineNumber,
		                column: this.index - this.lineStart
		            };
		            var entry = {
		                multiLine: false,
		                slice: [start + offset, this.index],
		                range: [start, this.index],
		                loc: loc
		            };
		            comments.push(entry);
		        }
		        return comments;
		    };
		    ;
		    Scanner.prototype.skipMultiLineComment = function () {
		        var comments;
		        var start, loc;
		        if (this.trackComment) {
		            comments = [];
		            start = this.index - 2;
		            loc = {
		                start: {
		                    line: this.lineNumber,
		                    column: this.index - this.lineStart - 2
		                },
		                end: {}
		            };
		        }
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (character_1.Character.isLineTerminator(ch)) {
		                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                ++this.index;
		                this.lineStart = this.index;
		            }
		            else if (ch === 0x2A) {
		                // Block comment ends with '*/'.
		                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
		                    this.index += 2;
		                    if (this.trackComment) {
		                        loc.end = {
		                            line: this.lineNumber,
		                            column: this.index - this.lineStart
		                        };
		                        var entry = {
		                            multiLine: true,
		                            slice: [start + 2, this.index - 2],
		                            range: [start, this.index],
		                            loc: loc
		                        };
		                        comments.push(entry);
		                    }
		                    return comments;
		                }
		                ++this.index;
		            }
		            else {
		                ++this.index;
		            }
		        }
		        // Ran off the end of the file - the whole thing is a comment
		        if (this.trackComment) {
		            loc.end = {
		                line: this.lineNumber,
		                column: this.index - this.lineStart
		            };
		            var entry = {
		                multiLine: true,
		                slice: [start + 2, this.index],
		                range: [start, this.index],
		                loc: loc
		            };
		            comments.push(entry);
		        }
		        this.tolerateUnexpectedToken();
		        return comments;
		    };
		    ;
		    Scanner.prototype.scanComments = function () {
		        var comments;
		        if (this.trackComment) {
		            comments = [];
		        }
		        var start = (this.index === 0);
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (character_1.Character.isWhiteSpace(ch)) {
		                ++this.index;
		            }
		            else if (character_1.Character.isLineTerminator(ch)) {
		                ++this.index;
		                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
		                    ++this.index;
		                }
		                ++this.lineNumber;
		                this.lineStart = this.index;
		                start = true;
		            }
		            else if (ch === 0x2F) {
		                ch = this.source.charCodeAt(this.index + 1);
		                if (ch === 0x2F) {
		                    this.index += 2;
		                    var comment = this.skipSingleLineComment(2);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                    start = true;
		                }
		                else if (ch === 0x2A) {
		                    this.index += 2;
		                    var comment = this.skipMultiLineComment();
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else if (start && ch === 0x2D) {
		                // U+003E is '>'
		                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
		                    // '-->' is a single-line comment
		                    this.index += 3;
		                    var comment = this.skipSingleLineComment(3);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else if (ch === 0x3C) {
		                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
		                    this.index += 4; // `<!--`
		                    var comment = this.skipSingleLineComment(4);
		                    if (this.trackComment) {
		                        comments = comments.concat(comment);
		                    }
		                }
		                else {
		                    break;
		                }
		            }
		            else {
		                break;
		            }
		        }
		        return comments;
		    };
		    ;
		    // ECMA-262 11.6.2.2 Future Reserved Words
		    Scanner.prototype.isFutureReservedWord = function (id) {
		        switch (id) {
		            case 'enum':
		            case 'export':
		            case 'import':
		            case 'super':
		                return true;
		            default:
		                return false;
		        }
		    };
		    ;
		    Scanner.prototype.isStrictModeReservedWord = function (id) {
		        switch (id) {
		            case 'implements':
		            case 'interface':
		            case 'package':
		            case 'private':
		            case 'protected':
		            case 'public':
		            case 'static':
		            case 'yield':
		            case 'let':
		                return true;
		            default:
		                return false;
		        }
		    };
		    ;
		    Scanner.prototype.isRestrictedWord = function (id) {
		        return id === 'eval' || id === 'arguments';
		    };
		    ;
		    // ECMA-262 11.6.2.1 Keywords
		    Scanner.prototype.isKeyword = function (id) {
		        switch (id.length) {
		            case 2:
		                return (id === 'if') || (id === 'in') || (id === 'do');
		            case 3:
		                return (id === 'var') || (id === 'for') || (id === 'new') ||
		                    (id === 'try') || (id === 'let');
		            case 4:
		                return (id === 'this') || (id === 'else') || (id === 'case') ||
		                    (id === 'void') || (id === 'with') || (id === 'enum');
		            case 5:
		                return (id === 'while') || (id === 'break') || (id === 'catch') ||
		                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
		                    (id === 'class') || (id === 'super');
		            case 6:
		                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
		                    (id === 'switch') || (id === 'export') || (id === 'import');
		            case 7:
		                return (id === 'default') || (id === 'finally') || (id === 'extends');
		            case 8:
		                return (id === 'function') || (id === 'continue') || (id === 'debugger');
		            case 10:
		                return (id === 'instanceof');
		            default:
		                return false;
		        }
		    };
		    ;
		    Scanner.prototype.codePointAt = function (i) {
		        var cp = this.source.charCodeAt(i);
		        if (cp >= 0xD800 && cp <= 0xDBFF) {
		            var second = this.source.charCodeAt(i + 1);
		            if (second >= 0xDC00 && second <= 0xDFFF) {
		                var first = cp;
		                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
		            }
		        }
		        return cp;
		    };
		    ;
		    Scanner.prototype.scanHexEscape = function (prefix) {
		        var len = (prefix === 'u') ? 4 : 2;
		        var code = 0;
		        for (var i = 0; i < len; ++i) {
		            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
		                code = code * 16 + hexValue(this.source[this.index++]);
		            }
		            else {
		                return '';
		            }
		        }
		        return String.fromCharCode(code);
		    };
		    ;
		    Scanner.prototype.scanUnicodeCodePointEscape = function () {
		        var ch = this.source[this.index];
		        var code = 0;
		        // At least, one hex digit is required.
		        if (ch === '}') {
		            this.throwUnexpectedToken();
		        }
		        while (!this.eof()) {
		            ch = this.source[this.index++];
		            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
		                break;
		            }
		            code = code * 16 + hexValue(ch);
		        }
		        if (code > 0x10FFFF || ch !== '}') {
		            this.throwUnexpectedToken();
		        }
		        return character_1.Character.fromCodePoint(code);
		    };
		    ;
		    Scanner.prototype.getIdentifier = function () {
		        var start = this.index++;
		        while (!this.eof()) {
		            var ch = this.source.charCodeAt(this.index);
		            if (ch === 0x5C) {
		                // Blackslash (U+005C) marks Unicode escape sequence.
		                this.index = start;
		                return this.getComplexIdentifier();
		            }
		            else if (ch >= 0xD800 && ch < 0xDFFF) {
		                // Need to handle surrogate pairs.
		                this.index = start;
		                return this.getComplexIdentifier();
		            }
		            if (character_1.Character.isIdentifierPart(ch)) {
		                ++this.index;
		            }
		            else {
		                break;
		            }
		        }
		        return this.source.slice(start, this.index);
		    };
		    ;
		    Scanner.prototype.getComplexIdentifier = function () {
		        var cp = this.codePointAt(this.index);
		        var id = character_1.Character.fromCodePoint(cp);
		        this.index += id.length;
		        // '\u' (U+005C, U+0075) denotes an escaped character.
		        var ch;
		        if (cp === 0x5C) {
		            if (this.source.charCodeAt(this.index) !== 0x75) {
		                this.throwUnexpectedToken();
		            }
		            ++this.index;
		            if (this.source[this.index] === '{') {
		                ++this.index;
		                ch = this.scanUnicodeCodePointEscape();
		            }
		            else {
		                ch = this.scanHexEscape('u');
		                cp = ch.charCodeAt(0);
		                if (!ch || ch === '\\' || !character_1.Character.isIdentifierStart(cp)) {
		                    this.throwUnexpectedToken();
		                }
		            }
		            id = ch;
		        }
		        while (!this.eof()) {
		            cp = this.codePointAt(this.index);
		            if (!character_1.Character.isIdentifierPart(cp)) {
		                break;
		            }
		            ch = character_1.Character.fromCodePoint(cp);
		            id += ch;
		            this.index += ch.length;
		            // '\u' (U+005C, U+0075) denotes an escaped character.
		            if (cp === 0x5C) {
		                id = id.substr(0, id.length - 1);
		                if (this.source.charCodeAt(this.index) !== 0x75) {
		                    this.throwUnexpectedToken();
		                }
		                ++this.index;
		                if (this.source[this.index] === '{') {
		                    ++this.index;
		                    ch = this.scanUnicodeCodePointEscape();
		                }
		                else {
		                    ch = this.scanHexEscape('u');
		                    cp = ch.charCodeAt(0);
		                    if (!ch || ch === '\\' || !character_1.Character.isIdentifierPart(cp)) {
		                        this.throwUnexpectedToken();
		                    }
		                }
		                id += ch;
		            }
		        }
		        return id;
		    };
		    ;
		    Scanner.prototype.octalToDecimal = function (ch) {
		        // \0 is not octal escape sequence
		        var octal = (ch !== '0');
		        var code = octalValue(ch);
		        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		            octal = true;
		            code = code * 8 + octalValue(this.source[this.index++]);
		            // 3 digits are only allowed when string starts
		            // with 0, 1, 2, 3
		            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		                code = code * 8 + octalValue(this.source[this.index++]);
		            }
		        }
		        return {
		            code: code,
		            octal: octal
		        };
		    };
		    ;
		    // ECMA-262 11.6 Names and Keywords
		    Scanner.prototype.scanIdentifier = function () {
		        var type;
		        var start = this.index;
		        // Backslash (U+005C) starts an escaped character.
		        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
		        // There is no keyword or literal with only one character.
		        // Thus, it must be an identifier.
		        if (id.length === 1) {
		            type = token_1.Token.Identifier;
		        }
		        else if (this.isKeyword(id)) {
		            type = token_1.Token.Keyword;
		        }
		        else if (id === 'null') {
		            type = token_1.Token.NullLiteral;
		        }
		        else if (id === 'true' || id === 'false') {
		            type = token_1.Token.BooleanLiteral;
		        }
		        else {
		            type = token_1.Token.Identifier;
		        }
		        return {
		            type: type,
		            value: id,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    ;
		    // ECMA-262 11.7 Punctuators
		    Scanner.prototype.scanPunctuator = function () {
		        var token = {
		            type: token_1.Token.Punctuator,
		            value: '',
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: this.index,
		            end: this.index
		        };
		        // Check for most common single-character punctuators.
		        var str = this.source[this.index];
		        switch (str) {
		            case '(':
		            case '{':
		                if (str === '{') {
		                    this.curlyStack.push('{');
		                }
		                ++this.index;
		                break;
		            case '.':
		                ++this.index;
		                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
		                    // Spread operator: ...
		                    this.index += 2;
		                    str = '...';
		                }
		                break;
		            case '}':
		                ++this.index;
		                this.curlyStack.pop();
		                break;
		            case ')':
		            case ';':
		            case ',':
		            case '[':
		            case ']':
		            case ':':
		            case '?':
		            case '~':
		                ++this.index;
		                break;
		            default:
		                // 4-character punctuator.
		                str = this.source.substr(this.index, 4);
		                if (str === '>>>=') {
		                    this.index += 4;
		                }
		                else {
		                    // 3-character punctuators.
		                    str = str.substr(0, 3);
		                    if (str === '===' || str === '!==' || str === '>>>' ||
		                        str === '<<=' || str === '>>=' || str === '**=') {
		                        this.index += 3;
		                    }
		                    else {
		                        // 2-character punctuators.
		                        str = str.substr(0, 2);
		                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
		                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
		                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
		                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
		                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
		                            this.index += 2;
		                        }
		                        else {
		                            // 1-character punctuators.
		                            str = this.source[this.index];
		                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
		                                ++this.index;
		                            }
		                        }
		                    }
		                }
		        }
		        if (this.index === token.start) {
		            this.throwUnexpectedToken();
		        }
		        token.end = this.index;
		        token.value = str;
		        return token;
		    };
		    ;
		    // ECMA-262 11.8.3 Numeric Literals
		    Scanner.prototype.scanHexLiteral = function (start) {
		        var number = '';
		        while (!this.eof()) {
		            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
		                break;
		            }
		            number += this.source[this.index++];
		        }
		        if (number.length === 0) {
		            this.throwUnexpectedToken();
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: token_1.Token.NumericLiteral,
		            value: parseInt('0x' + number, 16),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    ;
		    Scanner.prototype.scanBinaryLiteral = function (start) {
		        var number = '';
		        var ch;
		        while (!this.eof()) {
		            ch = this.source[this.index];
		            if (ch !== '0' && ch !== '1') {
		                break;
		            }
		            number += this.source[this.index++];
		        }
		        if (number.length === 0) {
		            // only 0b or 0B
		            this.throwUnexpectedToken();
		        }
		        if (!this.eof()) {
		            ch = this.source.charCodeAt(this.index);
		            /* istanbul ignore else */
		            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
		                this.throwUnexpectedToken();
		            }
		        }
		        return {
		            type: token_1.Token.NumericLiteral,
		            value: parseInt(number, 2),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    ;
		    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
		        var number = '';
		        var octal = false;
		        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
		            octal = true;
		            number = '0' + this.source[this.index++];
		        }
		        else {
		            ++this.index;
		        }
		        while (!this.eof()) {
		            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
		                break;
		            }
		            number += this.source[this.index++];
		        }
		        if (!octal && number.length === 0) {
		            // only 0o or 0O
		            this.throwUnexpectedToken();
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: token_1.Token.NumericLiteral,
		            value: parseInt(number, 8),
		            octal: octal,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    ;
		    Scanner.prototype.isImplicitOctalLiteral = function () {
		        // Implicit octal, unless there is a non-octal digit.
		        // (Annex B.1.1 on Numeric Literals)
		        for (var i = this.index + 1; i < this.length; ++i) {
		            var ch = this.source[i];
		            if (ch === '8' || ch === '9') {
		                return false;
		            }
		            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                return true;
		            }
		        }
		        return true;
		    };
		    ;
		    Scanner.prototype.scanNumericLiteral = function () {
		        var start = this.index;
		        var ch = this.source[start];
		        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
		        var number = '';
		        if (ch !== '.') {
		            number = this.source[this.index++];
		            ch = this.source[this.index];
		            // Hex number starts with '0x'.
		            // Octal number starts with '0'.
		            // Octal number in ES6 starts with '0o'.
		            // Binary number in ES6 starts with '0b'.
		            if (number === '0') {
		                if (ch === 'x' || ch === 'X') {
		                    ++this.index;
		                    return this.scanHexLiteral(start);
		                }
		                if (ch === 'b' || ch === 'B') {
		                    ++this.index;
		                    return this.scanBinaryLiteral(start);
		                }
		                if (ch === 'o' || ch === 'O') {
		                    return this.scanOctalLiteral(ch, start);
		                }
		                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                    if (this.isImplicitOctalLiteral()) {
		                        return this.scanOctalLiteral(ch, start);
		                    }
		                }
		            }
		            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                number += this.source[this.index++];
		            }
		            ch = this.source[this.index];
		        }
		        if (ch === '.') {
		            number += this.source[this.index++];
		            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                number += this.source[this.index++];
		            }
		            ch = this.source[this.index];
		        }
		        if (ch === 'e' || ch === 'E') {
		            number += this.source[this.index++];
		            ch = this.source[this.index];
		            if (ch === '+' || ch === '-') {
		                number += this.source[this.index++];
		            }
		            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                    number += this.source[this.index++];
		                }
		            }
		            else {
		                this.throwUnexpectedToken();
		            }
		        }
		        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: token_1.Token.NumericLiteral,
		            value: parseFloat(number),
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    ;
		    // ECMA-262 11.8.4 String Literals
		    Scanner.prototype.scanStringLiteral = function () {
		        var start = this.index;
		        var quote = this.source[start];
		        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
		        ++this.index;
		        var octal = false;
		        var str = '';
		        while (!this.eof()) {
		            var ch = this.source[this.index++];
		            if (ch === quote) {
		                quote = '';
		                break;
		            }
		            else if (ch === '\\') {
		                ch = this.source[this.index++];
		                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    switch (ch) {
		                        case 'u':
		                        case 'x':
		                            if (this.source[this.index] === '{') {
		                                ++this.index;
		                                str += this.scanUnicodeCodePointEscape();
		                            }
		                            else {
		                                var unescaped = this.scanHexEscape(ch);
		                                if (!unescaped) {
		                                    this.throwUnexpectedToken();
		                                }
		                                str += unescaped;
		                            }
		                            break;
		                        case 'n':
		                            str += '\n';
		                            break;
		                        case 'r':
		                            str += '\r';
		                            break;
		                        case 't':
		                            str += '\t';
		                            break;
		                        case 'b':
		                            str += '\b';
		                            break;
		                        case 'f':
		                            str += '\f';
		                            break;
		                        case 'v':
		                            str += '\x0B';
		                            break;
		                        case '8':
		                        case '9':
		                            str += ch;
		                            this.tolerateUnexpectedToken();
		                            break;
		                        default:
		                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                                var octToDec = this.octalToDecimal(ch);
		                                octal = octToDec.octal || octal;
		                                str += String.fromCharCode(octToDec.code);
		                            }
		                            else {
		                                str += ch;
		                            }
		                            break;
		                    }
		                }
		                else {
		                    ++this.lineNumber;
		                    if (ch === '\r' && this.source[this.index] === '\n') {
		                        ++this.index;
		                    }
		                    this.lineStart = this.index;
		                }
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                break;
		            }
		            else {
		                str += ch;
		            }
		        }
		        if (quote !== '') {
		            this.index = start;
		            this.throwUnexpectedToken();
		        }
		        return {
		            type: token_1.Token.StringLiteral,
		            value: str,
		            octal: octal,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    ;
		    // ECMA-262 11.8.6 Template Literal Lexical Components
		    Scanner.prototype.scanTemplate = function () {
		        var cooked = '';
		        var terminated = false;
		        var start = this.index;
		        var head = (this.source[start] === '`');
		        var tail = false;
		        var rawOffset = 2;
		        ++this.index;
		        while (!this.eof()) {
		            var ch = this.source[this.index++];
		            if (ch === '`') {
		                rawOffset = 1;
		                tail = true;
		                terminated = true;
		                break;
		            }
		            else if (ch === '$') {
		                if (this.source[this.index] === '{') {
		                    this.curlyStack.push('${');
		                    ++this.index;
		                    terminated = true;
		                    break;
		                }
		                cooked += ch;
		            }
		            else if (ch === '\\') {
		                ch = this.source[this.index++];
		                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    switch (ch) {
		                        case 'n':
		                            cooked += '\n';
		                            break;
		                        case 'r':
		                            cooked += '\r';
		                            break;
		                        case 't':
		                            cooked += '\t';
		                            break;
		                        case 'u':
		                        case 'x':
		                            if (this.source[this.index] === '{') {
		                                ++this.index;
		                                cooked += this.scanUnicodeCodePointEscape();
		                            }
		                            else {
		                                var restore = this.index;
		                                var unescaped = this.scanHexEscape(ch);
		                                if (unescaped) {
		                                    cooked += unescaped;
		                                }
		                                else {
		                                    this.index = restore;
		                                    cooked += ch;
		                                }
		                            }
		                            break;
		                        case 'b':
		                            cooked += '\b';
		                            break;
		                        case 'f':
		                            cooked += '\f';
		                            break;
		                        case 'v':
		                            cooked += '\v';
		                            break;
		                        default:
		                            if (ch === '0') {
		                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
		                                    // Illegal: \01 \02 and so on
		                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
		                                }
		                                cooked += '\0';
		                            }
		                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
		                                // Illegal: \1 \2
		                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
		                            }
		                            else {
		                                cooked += ch;
		                            }
		                            break;
		                    }
		                }
		                else {
		                    ++this.lineNumber;
		                    if (ch === '\r' && this.source[this.index] === '\n') {
		                        ++this.index;
		                    }
		                    this.lineStart = this.index;
		                }
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                ++this.lineNumber;
		                if (ch === '\r' && this.source[this.index] === '\n') {
		                    ++this.index;
		                }
		                this.lineStart = this.index;
		                cooked += '\n';
		            }
		            else {
		                cooked += ch;
		            }
		        }
		        if (!terminated) {
		            this.throwUnexpectedToken();
		        }
		        if (!head) {
		            this.curlyStack.pop();
		        }
		        return {
		            type: token_1.Token.Template,
		            value: {
		                cooked: cooked,
		                raw: this.source.slice(start + 1, this.index - rawOffset)
		            },
		            head: head,
		            tail: tail,
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    ;
		    // ECMA-262 11.8.5 Regular Expression Literals
		    Scanner.prototype.testRegExp = function (pattern, flags) {
		        // The BMP character to use as a replacement for astral symbols when
		        // translating an ES6 "u"-flagged pattern to an ES5-compatible
		        // approximation.
		        // Note: replacing with '\uFFFF' enables false positives in unlikely
		        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
		        // pattern that would not be detected by this substitution.
		        var astralSubstitute = '\uFFFF';
		        var tmp = pattern;
		        var self = this;
		        if (flags.indexOf('u') >= 0) {
		            tmp = tmp
		                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
		                var codePoint = parseInt($1 || $2, 16);
		                if (codePoint > 0x10FFFF) {
		                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
		                }
		                if (codePoint <= 0xFFFF) {
		                    return String.fromCharCode(codePoint);
		                }
		                return astralSubstitute;
		            })
		                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
		        }
		        // First, detect invalid regular expressions.
		        try {
		            RegExp(tmp);
		        }
		        catch (e) {
		            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
		        }
		        // Return a regular expression object for this pattern-flag pair, or
		        // `null` in case the current environment doesn't support the flags it
		        // uses.
		        try {
		            return new RegExp(pattern, flags);
		        }
		        catch (exception) {
		            /* istanbul ignore next */
		            return null;
		        }
		    };
		    ;
		    Scanner.prototype.scanRegExpBody = function () {
		        var ch = this.source[this.index];
		        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
		        var str = this.source[this.index++];
		        var classMarker = false;
		        var terminated = false;
		        while (!this.eof()) {
		            ch = this.source[this.index++];
		            str += ch;
		            if (ch === '\\') {
		                ch = this.source[this.index++];
		                // ECMA-262 7.8.5
		                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		                }
		                str += ch;
		            }
		            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		            }
		            else if (classMarker) {
		                if (ch === ']') {
		                    classMarker = false;
		                }
		            }
		            else {
		                if (ch === '/') {
		                    terminated = true;
		                    break;
		                }
		                else if (ch === '[') {
		                    classMarker = true;
		                }
		            }
		        }
		        if (!terminated) {
		            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
		        }
		        // Exclude leading and trailing slash.
		        var body = str.substr(1, str.length - 2);
		        return {
		            value: body,
		            literal: str
		        };
		    };
		    ;
		    Scanner.prototype.scanRegExpFlags = function () {
		        var str = '';
		        var flags = '';
		        while (!this.eof()) {
		            var ch = this.source[this.index];
		            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
		                break;
		            }
		            ++this.index;
		            if (ch === '\\' && !this.eof()) {
		                ch = this.source[this.index];
		                if (ch === 'u') {
		                    ++this.index;
		                    var restore = this.index;
		                    ch = this.scanHexEscape('u');
		                    if (ch) {
		                        flags += ch;
		                        for (str += '\\u'; restore < this.index; ++restore) {
		                            str += this.source[restore];
		                        }
		                    }
		                    else {
		                        this.index = restore;
		                        flags += 'u';
		                        str += '\\u';
		                    }
		                    this.tolerateUnexpectedToken();
		                }
		                else {
		                    str += '\\';
		                    this.tolerateUnexpectedToken();
		                }
		            }
		            else {
		                flags += ch;
		                str += ch;
		            }
		        }
		        return {
		            value: flags,
		            literal: str
		        };
		    };
		    ;
		    Scanner.prototype.scanRegExp = function () {
		        var start = this.index;
		        var body = this.scanRegExpBody();
		        var flags = this.scanRegExpFlags();
		        var value = this.testRegExp(body.value, flags.value);
		        return {
		            type: token_1.Token.RegularExpression,
		            value: value,
		            literal: body.literal + flags.literal,
		            regex: {
		                pattern: body.value,
		                flags: flags.value
		            },
		            lineNumber: this.lineNumber,
		            lineStart: this.lineStart,
		            start: start,
		            end: this.index
		        };
		    };
		    ;
		    Scanner.prototype.lex = function () {
		        if (this.eof()) {
		            return {
		                type: token_1.Token.EOF,
		                lineNumber: this.lineNumber,
		                lineStart: this.lineStart,
		                start: this.index,
		                end: this.index
		            };
		        }
		        var cp = this.source.charCodeAt(this.index);
		        if (character_1.Character.isIdentifierStart(cp)) {
		            return this.scanIdentifier();
		        }
		        // Very common: ( and ) and ;
		        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
		            return this.scanPunctuator();
		        }
		        // String literal starts with single quote (U+0027) or double quote (U+0022).
		        if (cp === 0x27 || cp === 0x22) {
		            return this.scanStringLiteral();
		        }
		        // Dot (.) U+002E can also start a floating-point number, hence the need
		        // to check the next character.
		        if (cp === 0x2E) {
		            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
		                return this.scanNumericLiteral();
		            }
		            return this.scanPunctuator();
		        }
		        if (character_1.Character.isDecimalDigit(cp)) {
		            return this.scanNumericLiteral();
		        }
		        // Template literals start with ` (U+0060) for template head
		        // or } (U+007D) for template middle or template tail.
		        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
		            return this.scanTemplate();
		        }
		        // Possible identifier start in a surrogate pair.
		        if (cp >= 0xD800 && cp < 0xDFFF) {
		            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
		                return this.scanIdentifier();
		            }
		        }
		        return this.scanPunctuator();
		    };
		    ;
		    return Scanner;
		}());
		exports.Scanner = Scanner;
	
	
	/***/ },
	/* 9 */
	/***/ function(module, exports) {
	
		"use strict";
		// See also tools/generate-unicode-regex.js.
		var Regex = {
		    // Unicode v8.0.0 NonAsciiIdentifierStart:
		    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
		    // Unicode v8.0.0 NonAsciiIdentifierPart:
		    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
		};
		exports.Character = {
		    fromCodePoint: function (cp) {
		        return (cp < 0x10000) ? String.fromCharCode(cp) :
		            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
		                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
		    },
		    // ECMA-262 11.2 White Space
		    isWhiteSpace: function (cp) {
		        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
		            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
		    },
		    // ECMA-262 11.3 Line Terminators
		    isLineTerminator: function (cp) {
		        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
		    },
		    // ECMA-262 11.6 Identifier Names and Identifiers
		    isIdentifierStart: function (cp) {
		        return (cp === 0x24) || (cp === 0x5F) ||
		            (cp >= 0x41 && cp <= 0x5A) ||
		            (cp >= 0x61 && cp <= 0x7A) ||
		            (cp === 0x5C) ||
		            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
		    },
		    isIdentifierPart: function (cp) {
		        return (cp === 0x24) || (cp === 0x5F) ||
		            (cp >= 0x41 && cp <= 0x5A) ||
		            (cp >= 0x61 && cp <= 0x7A) ||
		            (cp >= 0x30 && cp <= 0x39) ||
		            (cp === 0x5C) ||
		            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
		    },
		    // ECMA-262 11.8.3 Numeric Literals
		    isDecimalDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x39); // 0..9
		    },
		    isHexDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x39) ||
		            (cp >= 0x41 && cp <= 0x46) ||
		            (cp >= 0x61 && cp <= 0x66); // a..f
		    },
		    isOctalDigit: function (cp) {
		        return (cp >= 0x30 && cp <= 0x37); // 0..7
		    }
		};
	
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var syntax_1 = __webpack_require__(2);
		var ArrayExpression = (function () {
		    function ArrayExpression(elements) {
		        this.type = syntax_1.Syntax.ArrayExpression;
		        this.elements = elements;
		    }
		    return ArrayExpression;
		}());
		exports.ArrayExpression = ArrayExpression;
		var ArrayPattern = (function () {
		    function ArrayPattern(elements) {
		        this.type = syntax_1.Syntax.ArrayPattern;
		        this.elements = elements;
		    }
		    return ArrayPattern;
		}());
		exports.ArrayPattern = ArrayPattern;
		var ArrowFunctionExpression = (function () {
		    function ArrowFunctionExpression(params, body, expression) {
		        this.type = syntax_1.Syntax.ArrowFunctionExpression;
		        this.id = null;
		        this.params = params;
		        this.body = body;
		        this.generator = false;
		        this.expression = expression;
		    }
		    return ArrowFunctionExpression;
		}());
		exports.ArrowFunctionExpression = ArrowFunctionExpression;
		var AssignmentExpression = (function () {
		    function AssignmentExpression(operator, left, right) {
		        this.type = syntax_1.Syntax.AssignmentExpression;
		        this.operator = operator;
		        this.left = left;
		        this.right = right;
		    }
		    return AssignmentExpression;
		}());
		exports.AssignmentExpression = AssignmentExpression;
		var AssignmentPattern = (function () {
		    function AssignmentPattern(left, right) {
		        this.type = syntax_1.Syntax.AssignmentPattern;
		        this.left = left;
		        this.right = right;
		    }
		    return AssignmentPattern;
		}());
		exports.AssignmentPattern = AssignmentPattern;
		var BinaryExpression = (function () {
		    function BinaryExpression(operator, left, right) {
		        var logical = (operator === '||' || operator === '&&');
		        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
		        this.operator = operator;
		        this.left = left;
		        this.right = right;
		    }
		    return BinaryExpression;
		}());
		exports.BinaryExpression = BinaryExpression;
		var BlockStatement = (function () {
		    function BlockStatement(body) {
		        this.type = syntax_1.Syntax.BlockStatement;
		        this.body = body;
		    }
		    return BlockStatement;
		}());
		exports.BlockStatement = BlockStatement;
		var BreakStatement = (function () {
		    function BreakStatement(label) {
		        this.type = syntax_1.Syntax.BreakStatement;
		        this.label = label;
		    }
		    return BreakStatement;
		}());
		exports.BreakStatement = BreakStatement;
		var CallExpression = (function () {
		    function CallExpression(callee, args) {
		        this.type = syntax_1.Syntax.CallExpression;
		        this.callee = callee;
		        this.arguments = args;
		    }
		    return CallExpression;
		}());
		exports.CallExpression = CallExpression;
		var CatchClause = (function () {
		    function CatchClause(param, body) {
		        this.type = syntax_1.Syntax.CatchClause;
		        this.param = param;
		        this.body = body;
		    }
		    return CatchClause;
		}());
		exports.CatchClause = CatchClause;
		var ClassBody = (function () {
		    function ClassBody(body) {
		        this.type = syntax_1.Syntax.ClassBody;
		        this.body = body;
		    }
		    return ClassBody;
		}());
		exports.ClassBody = ClassBody;
		var ClassDeclaration = (function () {
		    function ClassDeclaration(id, superClass, body) {
		        this.type = syntax_1.Syntax.ClassDeclaration;
		        this.id = id;
		        this.superClass = superClass;
		        this.body = body;
		    }
		    return ClassDeclaration;
		}());
		exports.ClassDeclaration = ClassDeclaration;
		var ClassExpression = (function () {
		    function ClassExpression(id, superClass, body) {
		        this.type = syntax_1.Syntax.ClassExpression;
		        this.id = id;
		        this.superClass = superClass;
		        this.body = body;
		    }
		    return ClassExpression;
		}());
		exports.ClassExpression = ClassExpression;
		var ComputedMemberExpression = (function () {
		    function ComputedMemberExpression(object, property) {
		        this.type = syntax_1.Syntax.MemberExpression;
		        this.computed = true;
		        this.object = object;
		        this.property = property;
		    }
		    return ComputedMemberExpression;
		}());
		exports.ComputedMemberExpression = ComputedMemberExpression;
		var ConditionalExpression = (function () {
		    function ConditionalExpression(test, consequent, alternate) {
		        this.type = syntax_1.Syntax.ConditionalExpression;
		        this.test = test;
		        this.consequent = consequent;
		        this.alternate = alternate;
		    }
		    return ConditionalExpression;
		}());
		exports.ConditionalExpression = ConditionalExpression;
		var ContinueStatement = (function () {
		    function ContinueStatement(label) {
		        this.type = syntax_1.Syntax.ContinueStatement;
		        this.label = label;
		    }
		    return ContinueStatement;
		}());
		exports.ContinueStatement = ContinueStatement;
		var DebuggerStatement = (function () {
		    function DebuggerStatement() {
		        this.type = syntax_1.Syntax.DebuggerStatement;
		    }
		    return DebuggerStatement;
		}());
		exports.DebuggerStatement = DebuggerStatement;
		var Directive = (function () {
		    function Directive(expression, directive) {
		        this.type = syntax_1.Syntax.ExpressionStatement;
		        this.expression = expression;
		        this.directive = directive;
		    }
		    return Directive;
		}());
		exports.Directive = Directive;
		var DoWhileStatement = (function () {
		    function DoWhileStatement(body, test) {
		        this.type = syntax_1.Syntax.DoWhileStatement;
		        this.body = body;
		        this.test = test;
		    }
		    return DoWhileStatement;
		}());
		exports.DoWhileStatement = DoWhileStatement;
		var EmptyStatement = (function () {
		    function EmptyStatement() {
		        this.type = syntax_1.Syntax.EmptyStatement;
		    }
		    return EmptyStatement;
		}());
		exports.EmptyStatement = EmptyStatement;
		var ExportAllDeclaration = (function () {
		    function ExportAllDeclaration(source) {
		        this.type = syntax_1.Syntax.ExportAllDeclaration;
		        this.source = source;
		    }
		    return ExportAllDeclaration;
		}());
		exports.ExportAllDeclaration = ExportAllDeclaration;
		var ExportDefaultDeclaration = (function () {
		    function ExportDefaultDeclaration(declaration) {
		        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
		        this.declaration = declaration;
		    }
		    return ExportDefaultDeclaration;
		}());
		exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
		var ExportNamedDeclaration = (function () {
		    function ExportNamedDeclaration(declaration, specifiers, source) {
		        this.type = syntax_1.Syntax.ExportNamedDeclaration;
		        this.declaration = declaration;
		        this.specifiers = specifiers;
		        this.source = source;
		    }
		    return ExportNamedDeclaration;
		}());
		exports.ExportNamedDeclaration = ExportNamedDeclaration;
		var ExportSpecifier = (function () {
		    function ExportSpecifier(local, exported) {
		        this.type = syntax_1.Syntax.ExportSpecifier;
		        this.exported = exported;
		        this.local = local;
		    }
		    return ExportSpecifier;
		}());
		exports.ExportSpecifier = ExportSpecifier;
		var ExpressionStatement = (function () {
		    function ExpressionStatement(expression) {
		        this.type = syntax_1.Syntax.ExpressionStatement;
		        this.expression = expression;
		    }
		    return ExpressionStatement;
		}());
		exports.ExpressionStatement = ExpressionStatement;
		var ForInStatement = (function () {
		    function ForInStatement(left, right, body) {
		        this.type = syntax_1.Syntax.ForInStatement;
		        this.left = left;
		        this.right = right;
		        this.body = body;
		        this.each = false;
		    }
		    return ForInStatement;
		}());
		exports.ForInStatement = ForInStatement;
		var ForOfStatement = (function () {
		    function ForOfStatement(left, right, body) {
		        this.type = syntax_1.Syntax.ForOfStatement;
		        this.left = left;
		        this.right = right;
		        this.body = body;
		    }
		    return ForOfStatement;
		}());
		exports.ForOfStatement = ForOfStatement;
		var ForStatement = (function () {
		    function ForStatement(init, test, update, body) {
		        this.type = syntax_1.Syntax.ForStatement;
		        this.init = init;
		        this.test = test;
		        this.update = update;
		        this.body = body;
		    }
		    return ForStatement;
		}());
		exports.ForStatement = ForStatement;
		var FunctionDeclaration = (function () {
		    function FunctionDeclaration(id, params, body, generator) {
		        this.type = syntax_1.Syntax.FunctionDeclaration;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = generator;
		        this.expression = false;
		    }
		    return FunctionDeclaration;
		}());
		exports.FunctionDeclaration = FunctionDeclaration;
		var FunctionExpression = (function () {
		    function FunctionExpression(id, params, body, generator) {
		        this.type = syntax_1.Syntax.FunctionExpression;
		        this.id = id;
		        this.params = params;
		        this.body = body;
		        this.generator = generator;
		        this.expression = false;
		    }
		    return FunctionExpression;
		}());
		exports.FunctionExpression = FunctionExpression;
		var Identifier = (function () {
		    function Identifier(name) {
		        this.type = syntax_1.Syntax.Identifier;
		        this.name = name;
		    }
		    return Identifier;
		}());
		exports.Identifier = Identifier;
		var IfStatement = (function () {
		    function IfStatement(test, consequent, alternate) {
		        this.type = syntax_1.Syntax.IfStatement;
		        this.test = test;
		        this.consequent = consequent;
		        this.alternate = alternate;
		    }
		    return IfStatement;
		}());
		exports.IfStatement = IfStatement;
		var ImportDeclaration = (function () {
		    function ImportDeclaration(specifiers, source) {
		        this.type = syntax_1.Syntax.ImportDeclaration;
		        this.specifiers = specifiers;
		        this.source = source;
		    }
		    return ImportDeclaration;
		}());
		exports.ImportDeclaration = ImportDeclaration;
		var ImportDefaultSpecifier = (function () {
		    function ImportDefaultSpecifier(local) {
		        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
		        this.local = local;
		    }
		    return ImportDefaultSpecifier;
		}());
		exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
		var ImportNamespaceSpecifier = (function () {
		    function ImportNamespaceSpecifier(local) {
		        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
		        this.local = local;
		    }
		    return ImportNamespaceSpecifier;
		}());
		exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
		var ImportSpecifier = (function () {
		    function ImportSpecifier(local, imported) {
		        this.type = syntax_1.Syntax.ImportSpecifier;
		        this.local = local;
		        this.imported = imported;
		    }
		    return ImportSpecifier;
		}());
		exports.ImportSpecifier = ImportSpecifier;
		var LabeledStatement = (function () {
		    function LabeledStatement(label, body) {
		        this.type = syntax_1.Syntax.LabeledStatement;
		        this.label = label;
		        this.body = body;
		    }
		    return LabeledStatement;
		}());
		exports.LabeledStatement = LabeledStatement;
		var Literal = (function () {
		    function Literal(value, raw) {
		        this.type = syntax_1.Syntax.Literal;
		        this.value = value;
		        this.raw = raw;
		    }
		    return Literal;
		}());
		exports.Literal = Literal;
		var MetaProperty = (function () {
		    function MetaProperty(meta, property) {
		        this.type = syntax_1.Syntax.MetaProperty;
		        this.meta = meta;
		        this.property = property;
		    }
		    return MetaProperty;
		}());
		exports.MetaProperty = MetaProperty;
		var MethodDefinition = (function () {
		    function MethodDefinition(key, computed, value, kind, isStatic) {
		        this.type = syntax_1.Syntax.MethodDefinition;
		        this.key = key;
		        this.computed = computed;
		        this.value = value;
		        this.kind = kind;
		        this.static = isStatic;
		    }
		    return MethodDefinition;
		}());
		exports.MethodDefinition = MethodDefinition;
		var NewExpression = (function () {
		    function NewExpression(callee, args) {
		        this.type = syntax_1.Syntax.NewExpression;
		        this.callee = callee;
		        this.arguments = args;
		    }
		    return NewExpression;
		}());
		exports.NewExpression = NewExpression;
		var ObjectExpression = (function () {
		    function ObjectExpression(properties) {
		        this.type = syntax_1.Syntax.ObjectExpression;
		        this.properties = properties;
		    }
		    return ObjectExpression;
		}());
		exports.ObjectExpression = ObjectExpression;
		var ObjectPattern = (function () {
		    function ObjectPattern(properties) {
		        this.type = syntax_1.Syntax.ObjectPattern;
		        this.properties = properties;
		    }
		    return ObjectPattern;
		}());
		exports.ObjectPattern = ObjectPattern;
		var Program = (function () {
		    function Program(body, sourceType) {
		        this.type = syntax_1.Syntax.Program;
		        this.body = body;
		        this.sourceType = sourceType;
		    }
		    return Program;
		}());
		exports.Program = Program;
		var Property = (function () {
		    function Property(kind, key, computed, value, method, shorthand) {
		        this.type = syntax_1.Syntax.Property;
		        this.key = key;
		        this.computed = computed;
		        this.value = value;
		        this.kind = kind;
		        this.method = method;
		        this.shorthand = shorthand;
		    }
		    return Property;
		}());
		exports.Property = Property;
		var RegexLiteral = (function () {
		    function RegexLiteral(value, raw, regex) {
		        this.type = syntax_1.Syntax.Literal;
		        this.value = value;
		        this.raw = raw;
		        this.regex = regex;
		    }
		    return RegexLiteral;
		}());
		exports.RegexLiteral = RegexLiteral;
		var RestElement = (function () {
		    function RestElement(argument) {
		        this.type = syntax_1.Syntax.RestElement;
		        this.argument = argument;
		    }
		    return RestElement;
		}());
		exports.RestElement = RestElement;
		var ReturnStatement = (function () {
		    function ReturnStatement(argument) {
		        this.type = syntax_1.Syntax.ReturnStatement;
		        this.argument = argument;
		    }
		    return ReturnStatement;
		}());
		exports.ReturnStatement = ReturnStatement;
		var SequenceExpression = (function () {
		    function SequenceExpression(expressions) {
		        this.type = syntax_1.Syntax.SequenceExpression;
		        this.expressions = expressions;
		    }
		    return SequenceExpression;
		}());
		exports.SequenceExpression = SequenceExpression;
		var SpreadElement = (function () {
		    function SpreadElement(argument) {
		        this.type = syntax_1.Syntax.SpreadElement;
		        this.argument = argument;
		    }
		    return SpreadElement;
		}());
		exports.SpreadElement = SpreadElement;
		var StaticMemberExpression = (function () {
		    function StaticMemberExpression(object, property) {
		        this.type = syntax_1.Syntax.MemberExpression;
		        this.computed = false;
		        this.object = object;
		        this.property = property;
		    }
		    return StaticMemberExpression;
		}());
		exports.StaticMemberExpression = StaticMemberExpression;
		var Super = (function () {
		    function Super() {
		        this.type = syntax_1.Syntax.Super;
		    }
		    return Super;
		}());
		exports.Super = Super;
		var SwitchCase = (function () {
		    function SwitchCase(test, consequent) {
		        this.type = syntax_1.Syntax.SwitchCase;
		        this.test = test;
		        this.consequent = consequent;
		    }
		    return SwitchCase;
		}());
		exports.SwitchCase = SwitchCase;
		var SwitchStatement = (function () {
		    function SwitchStatement(discriminant, cases) {
		        this.type = syntax_1.Syntax.SwitchStatement;
		        this.discriminant = discriminant;
		        this.cases = cases;
		    }
		    return SwitchStatement;
		}());
		exports.SwitchStatement = SwitchStatement;
		var TaggedTemplateExpression = (function () {
		    function TaggedTemplateExpression(tag, quasi) {
		        this.type = syntax_1.Syntax.TaggedTemplateExpression;
		        this.tag = tag;
		        this.quasi = quasi;
		    }
		    return TaggedTemplateExpression;
		}());
		exports.TaggedTemplateExpression = TaggedTemplateExpression;
		var TemplateElement = (function () {
		    function TemplateElement(value, tail) {
		        this.type = syntax_1.Syntax.TemplateElement;
		        this.value = value;
		        this.tail = tail;
		    }
		    return TemplateElement;
		}());
		exports.TemplateElement = TemplateElement;
		var TemplateLiteral = (function () {
		    function TemplateLiteral(quasis, expressions) {
		        this.type = syntax_1.Syntax.TemplateLiteral;
		        this.quasis = quasis;
		        this.expressions = expressions;
		    }
		    return TemplateLiteral;
		}());
		exports.TemplateLiteral = TemplateLiteral;
		var ThisExpression = (function () {
		    function ThisExpression() {
		        this.type = syntax_1.Syntax.ThisExpression;
		    }
		    return ThisExpression;
		}());
		exports.ThisExpression = ThisExpression;
		var ThrowStatement = (function () {
		    function ThrowStatement(argument) {
		        this.type = syntax_1.Syntax.ThrowStatement;
		        this.argument = argument;
		    }
		    return ThrowStatement;
		}());
		exports.ThrowStatement = ThrowStatement;
		var TryStatement = (function () {
		    function TryStatement(block, handler, finalizer) {
		        this.type = syntax_1.Syntax.TryStatement;
		        this.block = block;
		        this.handler = handler;
		        this.finalizer = finalizer;
		    }
		    return TryStatement;
		}());
		exports.TryStatement = TryStatement;
		var UnaryExpression = (function () {
		    function UnaryExpression(operator, argument) {
		        this.type = syntax_1.Syntax.UnaryExpression;
		        this.operator = operator;
		        this.argument = argument;
		        this.prefix = true;
		    }
		    return UnaryExpression;
		}());
		exports.UnaryExpression = UnaryExpression;
		var UpdateExpression = (function () {
		    function UpdateExpression(operator, argument, prefix) {
		        this.type = syntax_1.Syntax.UpdateExpression;
		        this.operator = operator;
		        this.argument = argument;
		        this.prefix = prefix;
		    }
		    return UpdateExpression;
		}());
		exports.UpdateExpression = UpdateExpression;
		var VariableDeclaration = (function () {
		    function VariableDeclaration(declarations, kind) {
		        this.type = syntax_1.Syntax.VariableDeclaration;
		        this.declarations = declarations;
		        this.kind = kind;
		    }
		    return VariableDeclaration;
		}());
		exports.VariableDeclaration = VariableDeclaration;
		var VariableDeclarator = (function () {
		    function VariableDeclarator(id, init) {
		        this.type = syntax_1.Syntax.VariableDeclarator;
		        this.id = id;
		        this.init = init;
		    }
		    return VariableDeclarator;
		}());
		exports.VariableDeclarator = VariableDeclarator;
		var WhileStatement = (function () {
		    function WhileStatement(test, body) {
		        this.type = syntax_1.Syntax.WhileStatement;
		        this.test = test;
		        this.body = body;
		    }
		    return WhileStatement;
		}());
		exports.WhileStatement = WhileStatement;
		var WithStatement = (function () {
		    function WithStatement(object, body) {
		        this.type = syntax_1.Syntax.WithStatement;
		        this.object = object;
		        this.body = body;
		    }
		    return WithStatement;
		}());
		exports.WithStatement = WithStatement;
		var YieldExpression = (function () {
		    function YieldExpression(argument, delegate) {
		        this.type = syntax_1.Syntax.YieldExpression;
		        this.argument = argument;
		        this.delegate = delegate;
		    }
		    return YieldExpression;
		}());
		exports.YieldExpression = YieldExpression;
	
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
	/* istanbul ignore next */
		var __extends = (this && this.__extends) || function (d, b) {
		    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
		    function __() { this.constructor = d; }
		    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
		};
		var character_1 = __webpack_require__(9);
		var token_1 = __webpack_require__(7);
		var parser_1 = __webpack_require__(3);
		var xhtml_entities_1 = __webpack_require__(12);
		var jsx_syntax_1 = __webpack_require__(13);
		var Node = __webpack_require__(10);
		var JSXNode = __webpack_require__(14);
		var JSXToken;
		(function (JSXToken) {
		    JSXToken[JSXToken["Identifier"] = 100] = "Identifier";
		    JSXToken[JSXToken["Text"] = 101] = "Text";
		})(JSXToken || (JSXToken = {}));
		token_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';
		token_1.TokenName[JSXToken.Text] = 'JSXText';
		// Fully qualified element name, e.g. <svg:path> returns "svg:path"
		function getQualifiedElementName(elementName) {
		    var qualifiedName;
		    switch (elementName.type) {
		        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
		            var id = (elementName);
		            qualifiedName = id.name;
		            break;
		        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
		            var ns = (elementName);
		            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
		                getQualifiedElementName(ns.name);
		            break;
		        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
		            var expr = (elementName);
		            qualifiedName = getQualifiedElementName(expr.object) + '.' +
		                getQualifiedElementName(expr.property);
		            break;
		    }
		    return qualifiedName;
		}
		var JSXParser = (function (_super) {
		    __extends(JSXParser, _super);
		    function JSXParser(code, options, delegate) {
		        _super.call(this, code, options, delegate);
		    }
		    JSXParser.prototype.parsePrimaryExpression = function () {
		        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
		    };
		    JSXParser.prototype.startJSX = function () {
		        // Unwind the scanner before the lookahead token.
		        this.scanner.index = this.startMarker.index;
		        this.scanner.lineNumber = this.startMarker.lineNumber;
		        this.scanner.lineStart = this.startMarker.lineStart;
		    };
		    JSXParser.prototype.finishJSX = function () {
		        // Prime the next lookahead.
		        this.nextToken();
		    };
		    JSXParser.prototype.reenterJSX = function () {
		        this.startJSX();
		        this.expectJSX('}');
		        // Pop the closing '}' added from the lookahead.
		        if (this.config.tokens) {
		            this.tokens.pop();
		        }
		    };
		    JSXParser.prototype.createJSXNode = function () {
		        this.collectComments();
		        return {
		            index: this.scanner.index,
		            line: this.scanner.lineNumber,
		            column: this.scanner.index - this.scanner.lineStart
		        };
		    };
		    JSXParser.prototype.createJSXChildNode = function () {
		        return {
		            index: this.scanner.index,
		            line: this.scanner.lineNumber,
		            column: this.scanner.index - this.scanner.lineStart
		        };
		    };
		    JSXParser.prototype.scanXHTMLEntity = function (quote) {
		        var result = '&';
		        var valid = true;
		        var terminated = false;
		        var numeric = false;
		        var hex = false;
		        while (!this.scanner.eof() && valid && !terminated) {
		            var ch = this.scanner.source[this.scanner.index];
		            if (ch === quote) {
		                break;
		            }
		            terminated = (ch === ';');
		            result += ch;
		            ++this.scanner.index;
		            if (!terminated) {
		                switch (result.length) {
		                    case 2:
		                        // e.g. '&#123;'
		                        numeric = (ch === '#');
		                        break;
		                    case 3:
		                        if (numeric) {
		                            // e.g. '&#x41;'
		                            hex = (ch === 'x');
		                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
		                            numeric = numeric && !hex;
		                        }
		                        break;
		                    default:
		                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
		                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
		                        break;
		                }
		            }
		        }
		        if (valid && terminated && result.length > 2) {
		            // e.g. '&#x41;' becomes just '#x41'
		            var str = result.substr(1, result.length - 2);
		            if (numeric && str.length > 1) {
		                result = String.fromCharCode(parseInt(str.substr(1), 10));
		            }
		            else if (hex && str.length > 2) {
		                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
		            }
		            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
		                result = xhtml_entities_1.XHTMLEntities[str];
		            }
		        }
		        return result;
		    };
		    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
		    JSXParser.prototype.lexJSX = function () {
		        var cp = this.scanner.source.charCodeAt(this.scanner.index);
		        // < > / : = { }
		        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
		            var value = this.scanner.source[this.scanner.index++];
		            return {
		                type: token_1.Token.Punctuator,
		                value: value,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: this.scanner.index - 1,
		                end: this.scanner.index
		            };
		        }
		        // " '
		        if (cp === 34 || cp === 39) {
		            var start = this.scanner.index;
		            var quote = this.scanner.source[this.scanner.index++];
		            var str = '';
		            while (!this.scanner.eof()) {
		                var ch = this.scanner.source[this.scanner.index++];
		                if (ch === quote) {
		                    break;
		                }
		                else if (ch === '&') {
		                    str += this.scanXHTMLEntity(quote);
		                }
		                else {
		                    str += ch;
		                }
		            }
		            return {
		                type: token_1.Token.StringLiteral,
		                value: str,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        // ... or .
		        if (cp === 46) {
		            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
		            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
		            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
		            var start = this.scanner.index;
		            this.scanner.index += value.length;
		            return {
		                type: token_1.Token.Punctuator,
		                value: value,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        // `
		        if (cp === 96) {
		            // Only placeholder, since it will be rescanned as a real assignment expression.
		            return {
		                type: token_1.Token.Template,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: this.scanner.index,
		                end: this.scanner.index
		            };
		        }
		        // Identifer can not contain backslash (char code 92).
		        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
		            var start = this.scanner.index;
		            ++this.scanner.index;
		            while (!this.scanner.eof()) {
		                var ch = this.scanner.source.charCodeAt(this.scanner.index);
		                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
		                    ++this.scanner.index;
		                }
		                else if (ch === 45) {
		                    // Hyphen (char code 45) can be part of an identifier.
		                    ++this.scanner.index;
		                }
		                else {
		                    break;
		                }
		            }
		            var id = this.scanner.source.slice(start, this.scanner.index);
		            return {
		                type: JSXToken.Identifier,
		                value: id,
		                lineNumber: this.scanner.lineNumber,
		                lineStart: this.scanner.lineStart,
		                start: start,
		                end: this.scanner.index
		            };
		        }
		        this.scanner.throwUnexpectedToken();
		    };
		    JSXParser.prototype.nextJSXToken = function () {
		        this.collectComments();
		        this.startMarker.index = this.scanner.index;
		        this.startMarker.lineNumber = this.scanner.lineNumber;
		        this.startMarker.lineStart = this.scanner.lineStart;
		        var token = this.lexJSX();
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.lineNumber = this.scanner.lineNumber;
		        this.lastMarker.lineStart = this.scanner.lineStart;
		        if (this.config.tokens) {
		            this.tokens.push(this.convertToken(token));
		        }
		        return token;
		    };
		    JSXParser.prototype.nextJSXText = function () {
		        this.startMarker.index = this.scanner.index;
		        this.startMarker.lineNumber = this.scanner.lineNumber;
		        this.startMarker.lineStart = this.scanner.lineStart;
		        var start = this.scanner.index;
		        var text = '';
		        while (!this.scanner.eof()) {
		            var ch = this.scanner.source[this.scanner.index];
		            if (ch === '{' || ch === '<') {
		                break;
		            }
		            ++this.scanner.index;
		            text += ch;
		            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
		                ++this.scanner.lineNumber;
		                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
		                    ++this.scanner.index;
		                }
		                this.scanner.lineStart = this.scanner.index;
		            }
		        }
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.lineNumber = this.scanner.lineNumber;
		        this.lastMarker.lineStart = this.scanner.lineStart;
		        var token = {
		            type: JSXToken.Text,
		            value: text,
		            lineNumber: this.scanner.lineNumber,
		            lineStart: this.scanner.lineStart,
		            start: start,
		            end: this.scanner.index
		        };
		        if ((text.length > 0) && this.config.tokens) {
		            this.tokens.push(this.convertToken(token));
		        }
		        return token;
		    };
		    JSXParser.prototype.peekJSXToken = function () {
		        var previousIndex = this.scanner.index;
		        var previousLineNumber = this.scanner.lineNumber;
		        var previousLineStart = this.scanner.lineStart;
		        this.scanner.scanComments();
		        var next = this.lexJSX();
		        this.scanner.index = previousIndex;
		        this.scanner.lineNumber = previousLineNumber;
		        this.scanner.lineStart = previousLineStart;
		        return next;
		    };
		    // Expect the next JSX token to match the specified punctuator.
		    // If not, an exception will be thrown.
		    JSXParser.prototype.expectJSX = function (value) {
		        var token = this.nextJSXToken();
		        if (token.type !== token_1.Token.Punctuator || token.value !== value) {
		            this.throwUnexpectedToken(token);
		        }
		    };
		    // Return true if the next JSX token matches the specified punctuator.
		    JSXParser.prototype.matchJSX = function (value) {
		        var next = this.peekJSXToken();
		        return next.type === token_1.Token.Punctuator && next.value === value;
		    };
		    JSXParser.prototype.parseJSXIdentifier = function () {
		        var node = this.createJSXNode();
		        var token = this.nextJSXToken();
		        if (token.type !== JSXToken.Identifier) {
		            this.throwUnexpectedToken(token);
		        }
		        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
		    };
		    JSXParser.prototype.parseJSXElementName = function () {
		        var node = this.createJSXNode();
		        var elementName = this.parseJSXIdentifier();
		        if (this.matchJSX(':')) {
		            var namespace = elementName;
		            this.expectJSX(':');
		            var name_1 = this.parseJSXIdentifier();
		            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
		        }
		        else if (this.matchJSX('.')) {
		            while (this.matchJSX('.')) {
		                var object = elementName;
		                this.expectJSX('.');
		                var property = this.parseJSXIdentifier();
		                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
		            }
		        }
		        return elementName;
		    };
		    JSXParser.prototype.parseJSXAttributeName = function () {
		        var node = this.createJSXNode();
		        var attributeName;
		        var identifier = this.parseJSXIdentifier();
		        if (this.matchJSX(':')) {
		            var namespace = identifier;
		            this.expectJSX(':');
		            var name_2 = this.parseJSXIdentifier();
		            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
		        }
		        else {
		            attributeName = identifier;
		        }
		        return attributeName;
		    };
		    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
		        var node = this.createJSXNode();
		        var token = this.nextJSXToken();
		        if (token.type !== token_1.Token.StringLiteral) {
		            this.throwUnexpectedToken(token);
		        }
		        var raw = this.getTokenRaw(token);
		        return this.finalize(node, new Node.Literal(token.value, raw));
		    };
		    JSXParser.prototype.parseJSXExpressionAttribute = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        this.finishJSX();
		        if (this.match('}')) {
		            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
		        }
		        var expression = this.parseAssignmentExpression();
		        this.reenterJSX();
		        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
		    };
		    JSXParser.prototype.parseJSXAttributeValue = function () {
		        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
		            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
		    };
		    JSXParser.prototype.parseJSXNameValueAttribute = function () {
		        var node = this.createJSXNode();
		        var name = this.parseJSXAttributeName();
		        var value = null;
		        if (this.matchJSX('=')) {
		            this.expectJSX('=');
		            value = this.parseJSXAttributeValue();
		        }
		        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
		    };
		    JSXParser.prototype.parseJSXSpreadAttribute = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        this.expectJSX('...');
		        this.finishJSX();
		        var argument = this.parseAssignmentExpression();
		        this.reenterJSX();
		        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
		    };
		    JSXParser.prototype.parseJSXAttributes = function () {
		        var attributes = [];
		        while (!this.matchJSX('/') && !this.matchJSX('>')) {
		            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
		                this.parseJSXNameValueAttribute();
		            attributes.push(attribute);
		        }
		        return attributes;
		    };
		    JSXParser.prototype.parseJSXOpeningElement = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('<');
		        var name = this.parseJSXElementName();
		        var attributes = this.parseJSXAttributes();
		        var selfClosing = this.matchJSX('/');
		        if (selfClosing) {
		            this.expectJSX('/');
		        }
		        this.expectJSX('>');
		        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
		    };
		    JSXParser.prototype.parseJSXBoundaryElement = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('<');
		        if (this.matchJSX('/')) {
		            this.expectJSX('/');
		            var name_3 = this.parseJSXElementName();
		            this.expectJSX('>');
		            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
		        }
		        var name = this.parseJSXElementName();
		        var attributes = this.parseJSXAttributes();
		        var selfClosing = this.matchJSX('/');
		        if (selfClosing) {
		            this.expectJSX('/');
		        }
		        this.expectJSX('>');
		        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
		    };
		    JSXParser.prototype.parseJSXEmptyExpression = function () {
		        var node = this.createJSXChildNode();
		        this.collectComments();
		        this.lastMarker.index = this.scanner.index;
		        this.lastMarker.lineNumber = this.scanner.lineNumber;
		        this.lastMarker.lineStart = this.scanner.lineStart;
		        return this.finalize(node, new JSXNode.JSXEmptyExpression());
		    };
		    JSXParser.prototype.parseJSXExpressionContainer = function () {
		        var node = this.createJSXNode();
		        this.expectJSX('{');
		        var expression;
		        if (this.matchJSX('}')) {
		            expression = this.parseJSXEmptyExpression();
		            this.expectJSX('}');
		        }
		        else {
		            this.finishJSX();
		            expression = this.parseAssignmentExpression();
		            this.reenterJSX();
		        }
		        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
		    };
		    JSXParser.prototype.parseJSXChildren = function () {
		        var children = [];
		        while (!this.scanner.eof()) {
		            var node = this.createJSXChildNode();
		            var token = this.nextJSXText();
		            if (token.start < token.end) {
		                var raw = this.getTokenRaw(token);
		                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
		                children.push(child);
		            }
		            if (this.scanner.source[this.scanner.index] === '{') {
		                var container = this.parseJSXExpressionContainer();
		                children.push(container);
		            }
		            else {
		                break;
		            }
		        }
		        return children;
		    };
		    JSXParser.prototype.parseComplexJSXElement = function (el) {
		        var stack = [];
		        while (!this.scanner.eof()) {
		            el.children = el.children.concat(this.parseJSXChildren());
		            var node = this.createJSXChildNode();
		            var element = this.parseJSXBoundaryElement();
		            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
		                var opening = (element);
		                if (opening.selfClosing) {
		                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
		                    el.children.push(child);
		                }
		                else {
		                    stack.push(el);
		                    el = { node: node, opening: opening, closing: null, children: [] };
		                }
		            }
		            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
		                el.closing = (element);
		                var open_1 = getQualifiedElementName(el.opening.name);
		                var close_1 = getQualifiedElementName(el.closing.name);
		                if (open_1 !== close_1) {
		                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
		                }
		                if (stack.length > 0) {
		                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
		                    el = stack.pop();
		                    el.children.push(child);
		                }
		                else {
		                    break;
		                }
		            }
		        }
		        return el;
		    };
		    JSXParser.prototype.parseJSXElement = function () {
		        var node = this.createJSXNode();
		        var opening = this.parseJSXOpeningElement();
		        var children = [];
		        var closing = null;
		        if (!opening.selfClosing) {
		            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
		            children = el.children;
		            closing = el.closing;
		        }
		        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
		    };
		    JSXParser.prototype.parseJSXRoot = function () {
		        // Pop the opening '<' added from the lookahead.
		        if (this.config.tokens) {
		            this.tokens.pop();
		        }
		        this.startJSX();
		        var element = this.parseJSXElement();
		        this.finishJSX();
		        return element;
		    };
		    return JSXParser;
		}(parser_1.Parser));
		exports.JSXParser = JSXParser;
	
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
		"use strict";
		exports.XHTMLEntities = {
		    quot: '\u0022',
		    amp: '\u0026',
		    apos: '\u0027',
		    gt: '\u003E',
		    nbsp: '\u00A0',
		    iexcl: '\u00A1',
		    cent: '\u00A2',
		    pound: '\u00A3',
		    curren: '\u00A4',
		    yen: '\u00A5',
		    brvbar: '\u00A6',
		    sect: '\u00A7',
		    uml: '\u00A8',
		    copy: '\u00A9',
		    ordf: '\u00AA',
		    laquo: '\u00AB',
		    not: '\u00AC',
		    shy: '\u00AD',
		    reg: '\u00AE',
		    macr: '\u00AF',
		    deg: '\u00B0',
		    plusmn: '\u00B1',
		    sup2: '\u00B2',
		    sup3: '\u00B3',
		    acute: '\u00B4',
		    micro: '\u00B5',
		    para: '\u00B6',
		    middot: '\u00B7',
		    cedil: '\u00B8',
		    sup1: '\u00B9',
		    ordm: '\u00BA',
		    raquo: '\u00BB',
		    frac14: '\u00BC',
		    frac12: '\u00BD',
		    frac34: '\u00BE',
		    iquest: '\u00BF',
		    Agrave: '\u00C0',
		    Aacute: '\u00C1',
		    Acirc: '\u00C2',
		    Atilde: '\u00C3',
		    Auml: '\u00C4',
		    Aring: '\u00C5',
		    AElig: '\u00C6',
		    Ccedil: '\u00C7',
		    Egrave: '\u00C8',
		    Eacute: '\u00C9',
		    Ecirc: '\u00CA',
		    Euml: '\u00CB',
		    Igrave: '\u00CC',
		    Iacute: '\u00CD',
		    Icirc: '\u00CE',
		    Iuml: '\u00CF',
		    ETH: '\u00D0',
		    Ntilde: '\u00D1',
		    Ograve: '\u00D2',
		    Oacute: '\u00D3',
		    Ocirc: '\u00D4',
		    Otilde: '\u00D5',
		    Ouml: '\u00D6',
		    times: '\u00D7',
		    Oslash: '\u00D8',
		    Ugrave: '\u00D9',
		    Uacute: '\u00DA',
		    Ucirc: '\u00DB',
		    Uuml: '\u00DC',
		    Yacute: '\u00DD',
		    THORN: '\u00DE',
		    szlig: '\u00DF',
		    agrave: '\u00E0',
		    aacute: '\u00E1',
		    acirc: '\u00E2',
		    atilde: '\u00E3',
		    auml: '\u00E4',
		    aring: '\u00E5',
		    aelig: '\u00E6',
		    ccedil: '\u00E7',
		    egrave: '\u00E8',
		    eacute: '\u00E9',
		    ecirc: '\u00EA',
		    euml: '\u00EB',
		    igrave: '\u00EC',
		    iacute: '\u00ED',
		    icirc: '\u00EE',
		    iuml: '\u00EF',
		    eth: '\u00F0',
		    ntilde: '\u00F1',
		    ograve: '\u00F2',
		    oacute: '\u00F3',
		    ocirc: '\u00F4',
		    otilde: '\u00F5',
		    ouml: '\u00F6',
		    divide: '\u00F7',
		    oslash: '\u00F8',
		    ugrave: '\u00F9',
		    uacute: '\u00FA',
		    ucirc: '\u00FB',
		    uuml: '\u00FC',
		    yacute: '\u00FD',
		    thorn: '\u00FE',
		    yuml: '\u00FF',
		    OElig: '\u0152',
		    oelig: '\u0153',
		    Scaron: '\u0160',
		    scaron: '\u0161',
		    Yuml: '\u0178',
		    fnof: '\u0192',
		    circ: '\u02C6',
		    tilde: '\u02DC',
		    Alpha: '\u0391',
		    Beta: '\u0392',
		    Gamma: '\u0393',
		    Delta: '\u0394',
		    Epsilon: '\u0395',
		    Zeta: '\u0396',
		    Eta: '\u0397',
		    Theta: '\u0398',
		    Iota: '\u0399',
		    Kappa: '\u039A',
		    Lambda: '\u039B',
		    Mu: '\u039C',
		    Nu: '\u039D',
		    Xi: '\u039E',
		    Omicron: '\u039F',
		    Pi: '\u03A0',
		    Rho: '\u03A1',
		    Sigma: '\u03A3',
		    Tau: '\u03A4',
		    Upsilon: '\u03A5',
		    Phi: '\u03A6',
		    Chi: '\u03A7',
		    Psi: '\u03A8',
		    Omega: '\u03A9',
		    alpha: '\u03B1',
		    beta: '\u03B2',
		    gamma: '\u03B3',
		    delta: '\u03B4',
		    epsilon: '\u03B5',
		    zeta: '\u03B6',
		    eta: '\u03B7',
		    theta: '\u03B8',
		    iota: '\u03B9',
		    kappa: '\u03BA',
		    lambda: '\u03BB',
		    mu: '\u03BC',
		    nu: '\u03BD',
		    xi: '\u03BE',
		    omicron: '\u03BF',
		    pi: '\u03C0',
		    rho: '\u03C1',
		    sigmaf: '\u03C2',
		    sigma: '\u03C3',
		    tau: '\u03C4',
		    upsilon: '\u03C5',
		    phi: '\u03C6',
		    chi: '\u03C7',
		    psi: '\u03C8',
		    omega: '\u03C9',
		    thetasym: '\u03D1',
		    upsih: '\u03D2',
		    piv: '\u03D6',
		    ensp: '\u2002',
		    emsp: '\u2003',
		    thinsp: '\u2009',
		    zwnj: '\u200C',
		    zwj: '\u200D',
		    lrm: '\u200E',
		    rlm: '\u200F',
		    ndash: '\u2013',
		    mdash: '\u2014',
		    lsquo: '\u2018',
		    rsquo: '\u2019',
		    sbquo: '\u201A',
		    ldquo: '\u201C',
		    rdquo: '\u201D',
		    bdquo: '\u201E',
		    dagger: '\u2020',
		    Dagger: '\u2021',
		    bull: '\u2022',
		    hellip: '\u2026',
		    permil: '\u2030',
		    prime: '\u2032',
		    Prime: '\u2033',
		    lsaquo: '\u2039',
		    rsaquo: '\u203A',
		    oline: '\u203E',
		    frasl: '\u2044',
		    euro: '\u20AC',
		    image: '\u2111',
		    weierp: '\u2118',
		    real: '\u211C',
		    trade: '\u2122',
		    alefsym: '\u2135',
		    larr: '\u2190',
		    uarr: '\u2191',
		    rarr: '\u2192',
		    darr: '\u2193',
		    harr: '\u2194',
		    crarr: '\u21B5',
		    lArr: '\u21D0',
		    uArr: '\u21D1',
		    rArr: '\u21D2',
		    dArr: '\u21D3',
		    hArr: '\u21D4',
		    forall: '\u2200',
		    part: '\u2202',
		    exist: '\u2203',
		    empty: '\u2205',
		    nabla: '\u2207',
		    isin: '\u2208',
		    notin: '\u2209',
		    ni: '\u220B',
		    prod: '\u220F',
		    sum: '\u2211',
		    minus: '\u2212',
		    lowast: '\u2217',
		    radic: '\u221A',
		    prop: '\u221D',
		    infin: '\u221E',
		    ang: '\u2220',
		    and: '\u2227',
		    or: '\u2228',
		    cap: '\u2229',
		    cup: '\u222A',
		    int: '\u222B',
		    there4: '\u2234',
		    sim: '\u223C',
		    cong: '\u2245',
		    asymp: '\u2248',
		    ne: '\u2260',
		    equiv: '\u2261',
		    le: '\u2264',
		    ge: '\u2265',
		    sub: '\u2282',
		    sup: '\u2283',
		    nsub: '\u2284',
		    sube: '\u2286',
		    supe: '\u2287',
		    oplus: '\u2295',
		    otimes: '\u2297',
		    perp: '\u22A5',
		    sdot: '\u22C5',
		    lceil: '\u2308',
		    rceil: '\u2309',
		    lfloor: '\u230A',
		    rfloor: '\u230B',
		    loz: '\u25CA',
		    spades: '\u2660',
		    clubs: '\u2663',
		    hearts: '\u2665',
		    diams: '\u2666',
		    lang: '\u27E8',
		    rang: '\u27E9'
		};
	
	
	/***/ },
	/* 13 */
	/***/ function(module, exports) {
	
		"use strict";
		exports.JSXSyntax = {
		    JSXAttribute: 'JSXAttribute',
		    JSXClosingElement: 'JSXClosingElement',
		    JSXElement: 'JSXElement',
		    JSXEmptyExpression: 'JSXEmptyExpression',
		    JSXExpressionContainer: 'JSXExpressionContainer',
		    JSXIdentifier: 'JSXIdentifier',
		    JSXMemberExpression: 'JSXMemberExpression',
		    JSXNamespacedName: 'JSXNamespacedName',
		    JSXOpeningElement: 'JSXOpeningElement',
		    JSXSpreadAttribute: 'JSXSpreadAttribute',
		    JSXText: 'JSXText'
		};
	
	
	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var jsx_syntax_1 = __webpack_require__(13);
		var JSXClosingElement = (function () {
		    function JSXClosingElement(name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
		        this.name = name;
		    }
		    return JSXClosingElement;
		}());
		exports.JSXClosingElement = JSXClosingElement;
		var JSXElement = (function () {
		    function JSXElement(openingElement, children, closingElement) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
		        this.openingElement = openingElement;
		        this.children = children;
		        this.closingElement = closingElement;
		    }
		    return JSXElement;
		}());
		exports.JSXElement = JSXElement;
		var JSXEmptyExpression = (function () {
		    function JSXEmptyExpression() {
		        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
		    }
		    return JSXEmptyExpression;
		}());
		exports.JSXEmptyExpression = JSXEmptyExpression;
		var JSXExpressionContainer = (function () {
		    function JSXExpressionContainer(expression) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
		        this.expression = expression;
		    }
		    return JSXExpressionContainer;
		}());
		exports.JSXExpressionContainer = JSXExpressionContainer;
		var JSXIdentifier = (function () {
		    function JSXIdentifier(name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
		        this.name = name;
		    }
		    return JSXIdentifier;
		}());
		exports.JSXIdentifier = JSXIdentifier;
		var JSXMemberExpression = (function () {
		    function JSXMemberExpression(object, property) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
		        this.object = object;
		        this.property = property;
		    }
		    return JSXMemberExpression;
		}());
		exports.JSXMemberExpression = JSXMemberExpression;
		var JSXAttribute = (function () {
		    function JSXAttribute(name, value) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
		        this.name = name;
		        this.value = value;
		    }
		    return JSXAttribute;
		}());
		exports.JSXAttribute = JSXAttribute;
		var JSXNamespacedName = (function () {
		    function JSXNamespacedName(namespace, name) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
		        this.namespace = namespace;
		        this.name = name;
		    }
		    return JSXNamespacedName;
		}());
		exports.JSXNamespacedName = JSXNamespacedName;
		var JSXOpeningElement = (function () {
		    function JSXOpeningElement(name, selfClosing, attributes) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
		        this.name = name;
		        this.selfClosing = selfClosing;
		        this.attributes = attributes;
		    }
		    return JSXOpeningElement;
		}());
		exports.JSXOpeningElement = JSXOpeningElement;
		var JSXSpreadAttribute = (function () {
		    function JSXSpreadAttribute(argument) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
		        this.argument = argument;
		    }
		    return JSXSpreadAttribute;
		}());
		exports.JSXSpreadAttribute = JSXSpreadAttribute;
		var JSXText = (function () {
		    function JSXText(value, raw) {
		        this.type = jsx_syntax_1.JSXSyntax.JSXText;
		        this.value = value;
		        this.raw = raw;
		    }
		    return JSXText;
		}());
		exports.JSXText = JSXText;
	
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var scanner_1 = __webpack_require__(8);
		var error_handler_1 = __webpack_require__(6);
		var token_1 = __webpack_require__(7);
		var Reader = (function () {
		    function Reader() {
		        this.values = [];
		        this.curly = this.paren = -1;
		    }
		    ;
		    // A function following one of those tokens is an expression.
		    Reader.prototype.beforeFunctionExpression = function (t) {
		        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
		            'return', 'case', 'delete', 'throw', 'void',
		            // assignment operators
		            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
		            '&=', '|=', '^=', ',',
		            // binary/unary operators
		            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
		            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
		            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
		    };
		    ;
		    // Determine if forward slash (/) is an operator or part of a regular expression
		    // https://github.com/mozilla/sweet.js/wiki/design
		    Reader.prototype.isRegexStart = function () {
		        var previous = this.values[this.values.length - 1];
		        var regex = (previous !== null);
		        switch (previous) {
		            case 'this':
		            case ']':
		                regex = false;
		                break;
		            case ')':
		                var check = this.values[this.paren - 1];
		                regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
		                break;
		            case '}':
		                // Dividing a function by anything makes little sense,
		                // but we have to check for that.
		                regex = false;
		                if (this.values[this.curly - 3] === 'function') {
		                    // Anonymous function, e.g. function(){} /42
		                    var check_1 = this.values[this.curly - 4];
		                    regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;
		                }
		                else if (this.values[this.curly - 4] === 'function') {
		                    // Named function, e.g. function f(){} /42/
		                    var check_2 = this.values[this.curly - 5];
		                    regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;
		                }
		        }
		        return regex;
		    };
		    ;
		    Reader.prototype.push = function (token) {
		        if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {
		            if (token.value === '{') {
		                this.curly = this.values.length;
		            }
		            else if (token.value === '(') {
		                this.paren = this.values.length;
		            }
		            this.values.push(token.value);
		        }
		        else {
		            this.values.push(null);
		        }
		    };
		    ;
		    return Reader;
		}());
		var Tokenizer = (function () {
		    function Tokenizer(code, config) {
		        this.errorHandler = new error_handler_1.ErrorHandler();
		        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
		        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
		        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
		        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
		        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
		        this.buffer = [];
		        this.reader = new Reader();
		    }
		    ;
		    Tokenizer.prototype.errors = function () {
		        return this.errorHandler.errors;
		    };
		    ;
		    Tokenizer.prototype.getNextToken = function () {
		        if (this.buffer.length === 0) {
		            var comments = this.scanner.scanComments();
		            if (this.scanner.trackComment) {
		                for (var i = 0; i < comments.length; ++i) {
		                    var e = comments[i];
		                    var comment = void 0;
		                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
		                    comment = {
		                        type: e.multiLine ? 'BlockComment' : 'LineComment',
		                        value: value
		                    };
		                    if (this.trackRange) {
		                        comment.range = e.range;
		                    }
		                    if (this.trackLoc) {
		                        comment.loc = e.loc;
		                    }
		                    this.buffer.push(comment);
		                }
		            }
		            if (!this.scanner.eof()) {
		                var loc = void 0;
		                if (this.trackLoc) {
		                    loc = {
		                        start: {
		                            line: this.scanner.lineNumber,
		                            column: this.scanner.index - this.scanner.lineStart
		                        },
		                        end: {}
		                    };
		                }
		                var token = void 0;
		                if (this.scanner.source[this.scanner.index] === '/') {
		                    token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();
		                }
		                else {
		                    token = this.scanner.lex();
		                }
		                this.reader.push(token);
		                var entry = void 0;
		                entry = {
		                    type: token_1.TokenName[token.type],
		                    value: this.scanner.source.slice(token.start, token.end)
		                };
		                if (this.trackRange) {
		                    entry.range = [token.start, token.end];
		                }
		                if (this.trackLoc) {
		                    loc.end = {
		                        line: this.scanner.lineNumber,
		                        column: this.scanner.index - this.scanner.lineStart
		                    };
		                    entry.loc = loc;
		                }
		                if (token.regex) {
		                    entry.regex = token.regex;
		                }
		                this.buffer.push(entry);
		            }
		        }
		        return this.buffer.shift();
		    };
		    ;
		    return Tokenizer;
		}());
		exports.Tokenizer = Tokenizer;
	
	
	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 332 */
/***/ function(module, exports) {

	exports.endianness = function () { return 'LE' };
	
	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname
	    }
	    else return '';
	};
	
	exports.loadavg = function () { return [] };
	
	exports.uptime = function () { return 0 };
	
	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};
	
	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};
	
	exports.cpus = function () { return [] };
	
	exports.type = function () { return 'Browser' };
	
	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};
	
	exports.networkInterfaces
	= exports.getNetworkInterfaces
	= function () { return {} };
	
	exports.arch = function () { return 'javascript' };
	
	exports.platform = function () { return 'browser' };
	
	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};
	
	exports.EOL = '\n';


/***/ },
/* 333 */
/***/ function(module, exports) {

	"use strict";
	
	var originalObject = Object;
	var originalDefProp = Object.defineProperty;
	var originalCreate = Object.create;
	
	function defProp(obj, name, value) {
	  if (originalDefProp) try {
	    originalDefProp.call(originalObject, obj, name, { value: value });
	  } catch (definePropertyIsBrokenInIE8) {
	    obj[name] = value;
	  } else {
	    obj[name] = value;
	  }
	}
	
	// For functions that will be invoked using .call or .apply, we need to
	// define those methods on the function objects themselves, rather than
	// inheriting them from Function.prototype, so that a malicious or clumsy
	// third party cannot interfere with the functionality of this module by
	// redefining Function.prototype.call or .apply.
	function makeSafeToCall(fun) {
	  if (fun) {
	    defProp(fun, "call", fun.call);
	    defProp(fun, "apply", fun.apply);
	  }
	  return fun;
	}
	
	makeSafeToCall(originalDefProp);
	makeSafeToCall(originalCreate);
	
	var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
	var numToStr = makeSafeToCall(Number.prototype.toString);
	var strSlice = makeSafeToCall(String.prototype.slice);
	
	var cloner = function(){};
	function create(prototype) {
	  if (originalCreate) {
	    return originalCreate.call(originalObject, prototype);
	  }
	  cloner.prototype = prototype || null;
	  return new cloner;
	}
	
	var rand = Math.random;
	var uniqueKeys = create(null);
	
	function makeUniqueKey() {
	  // Collisions are highly unlikely, but this module is in the business of
	  // making guarantees rather than safe bets.
	  do var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
	  while (hasOwn.call(uniqueKeys, uniqueKey));
	  return uniqueKeys[uniqueKey] = uniqueKey;
	}
	
	function internString(str) {
	  var obj = {};
	  obj[str] = true;
	  return Object.keys(obj)[0];
	}
	
	// External users might find this function useful, but it is not necessary
	// for the typical use of this module.
	defProp(exports, "makeUniqueKey", makeUniqueKey);
	
	// Object.getOwnPropertyNames is the only way to enumerate non-enumerable
	// properties, so if we wrap it to ignore our secret keys, there should be
	// no way (except guessing) to access those properties.
	var originalGetOPNs = Object.getOwnPropertyNames;
	Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
	  for (var names = originalGetOPNs(object),
	           src = 0,
	           dst = 0,
	           len = names.length;
	       src < len;
	       ++src) {
	    if (!hasOwn.call(uniqueKeys, names[src])) {
	      if (src > dst) {
	        names[dst] = names[src];
	      }
	      ++dst;
	    }
	  }
	  names.length = dst;
	  return names;
	};
	
	function defaultCreatorFn(object) {
	  return create(null);
	}
	
	function makeAccessor(secretCreatorFn) {
	  var brand = makeUniqueKey();
	  var passkey = create(null);
	
	  secretCreatorFn = secretCreatorFn || defaultCreatorFn;
	
	  function register(object) {
	    var secret; // Created lazily.
	
	    function vault(key, forget) {
	      // Only code that has access to the passkey can retrieve (or forget)
	      // the secret object.
	      if (key === passkey) {
	        return forget
	          ? secret = null
	          : secret || (secret = secretCreatorFn(object));
	      }
	    }
	
	    defProp(object, brand, vault);
	  }
	
	  function accessor(object) {
	    if (!hasOwn.call(object, brand))
	      register(object);
	    return object[brand](passkey);
	  }
	
	  accessor.forget = function(object) {
	    if (hasOwn.call(object, brand))
	      object[brand](passkey, true);
	  };
	
	  return accessor;
	}
	
	defProp(exports, "makeAccessor", makeAccessor);


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(313);
	var types = __webpack_require__(292);
	var getFieldValue = types.getFieldValue;
	var n = types.namedTypes;
	var sourceMap = __webpack_require__(319);
	var SourceMapConsumer = sourceMap.SourceMapConsumer;
	var SourceMapGenerator = sourceMap.SourceMapGenerator;
	var hasOwn = Object.prototype.hasOwnProperty;
	var util = exports;
	
	function getUnionOfKeys() {
	  var result = {};
	  var argc = arguments.length;
	  for (var i = 0; i < argc; ++i) {
	    var keys = Object.keys(arguments[i]);
	    var keyCount = keys.length;
	    for (var j = 0; j < keyCount; ++j) {
	      result[keys[j]] = true;
	    }
	  }
	  return result;
	}
	util.getUnionOfKeys = getUnionOfKeys;
	
	function comparePos(pos1, pos2) {
	  return (pos1.line - pos2.line) || (pos1.column - pos2.column);
	}
	util.comparePos = comparePos;
	
	function copyPos(pos) {
	  return {
	    line: pos.line,
	    column: pos.column
	  };
	}
	util.copyPos = copyPos;
	
	util.composeSourceMaps = function(formerMap, latterMap) {
	  if (formerMap) {
	    if (!latterMap) {
	      return formerMap;
	    }
	  } else {
	    return latterMap || null;
	  }
	
	  var smcFormer = new SourceMapConsumer(formerMap);
	  var smcLatter = new SourceMapConsumer(latterMap);
	  var smg = new SourceMapGenerator({
	    file: latterMap.file,
	    sourceRoot: latterMap.sourceRoot
	  });
	
	  var sourcesToContents = {};
	
	  smcLatter.eachMapping(function(mapping) {
	    var origPos = smcFormer.originalPositionFor({
	      line: mapping.originalLine,
	      column: mapping.originalColumn
	    });
	
	    var sourceName = origPos.source;
	    if (sourceName === null) {
	      return;
	    }
	
	    smg.addMapping({
	      source: sourceName,
	      original: copyPos(origPos),
	      generated: {
	        line: mapping.generatedLine,
	        column: mapping.generatedColumn
	      },
	      name: mapping.name
	    });
	
	    var sourceContent = smcFormer.sourceContentFor(sourceName);
	    if (sourceContent && !hasOwn.call(sourcesToContents, sourceName)) {
	      sourcesToContents[sourceName] = sourceContent;
	      smg.setSourceContent(sourceName, sourceContent);
	    }
	  });
	
	  return smg.toJSON();
	};
	
	util.getTrueLoc = function(node, lines) {
	  // It's possible that node is newly-created (not parsed by Esprima),
	  // in which case it probably won't have a .loc property (or an
	  // .original property for that matter). That's fine; we'll just
	  // pretty-print it as usual.
	  if (!node.loc) {
	    return null;
	  }
	
	  var result = {
	    start: node.loc.start,
	    end: node.loc.end
	  };
	
	  function include(node) {
	    expandLoc(result, node.loc);
	  }
	
	  // If the node has any comments, their locations might contribute to
	  // the true start/end positions of the node.
	  if (node.comments) {
	    node.comments.forEach(include);
	  }
	
	  // If the node is an export declaration and its .declaration has any
	  // decorators, their locations might contribute to the true start/end
	  // positions of the export declaration node.
	  if (node.declaration && util.isExportDeclaration(node) &&
	      node.declaration.decorators) {
	    node.declaration.decorators.forEach(include);
	  }
	
	  if (comparePos(result.start, result.end) < 0) {
	    // Trim leading whitespace.
	    result.start = copyPos(result.start);
	    lines.skipSpaces(result.start, false, true);
	
	    if (comparePos(result.start, result.end) < 0) {
	      // Trim trailing whitespace, if the end location is not already the
	      // same as the start location.
	      result.end = copyPos(result.end);
	      lines.skipSpaces(result.end, true, true);
	    }
	  }
	
	  return result;
	};
	
	function expandLoc(parentLoc, childLoc) {
	  if (parentLoc && childLoc) {
	    if (comparePos(childLoc.start, parentLoc.start) < 0) {
	      parentLoc.start = childLoc.start;
	    }
	
	    if (comparePos(parentLoc.end, childLoc.end) < 0) {
	      parentLoc.end = childLoc.end;
	    }
	  }
	}
	
	util.fixFaultyLocations = function(node, lines) {
	  var loc = node.loc;
	  if (loc) {
	    if (loc.start.line < 1) {
	      loc.start.line = 1;
	    }
	
	    if (loc.end.line < 1) {
	      loc.end.line = 1;
	    }
	  }
	
	  if (node.type === "TemplateLiteral") {
	    fixTemplateLiteral(node, lines);
	
	  } else if (loc && node.decorators) {
	    // Expand the .loc of the node responsible for printing the decorators
	    // (here, the decorated node) so that it includes node.decorators.
	    node.decorators.forEach(function (decorator) {
	      expandLoc(loc, decorator.loc);
	    });
	
	  } else if (node.declaration && util.isExportDeclaration(node)) {
	    // Nullify .loc information for the child declaration so that we never
	    // try to reprint it without also reprinting the export declaration.
	    node.declaration.loc = null;
	
	    // Expand the .loc of the node responsible for printing the decorators
	    // (here, the export declaration) so that it includes node.decorators.
	    var decorators = node.declaration.decorators;
	    if (decorators) {
	      decorators.forEach(function (decorator) {
	        expandLoc(loc, decorator.loc);
	      });
	    }
	
	  } else if ((n.MethodDefinition && n.MethodDefinition.check(node)) ||
	             (n.Property.check(node) && (node.method || node.shorthand))) {
	    // If the node is a MethodDefinition or a .method or .shorthand
	    // Property, then the location information stored in
	    // node.value.loc is very likely untrustworthy (just the {body}
	    // part of a method, or nothing in the case of shorthand
	    // properties), so we null out that information to prevent
	    // accidental reuse of bogus source code during reprinting.
	    node.value.loc = null;
	
	    if (n.FunctionExpression.check(node.value)) {
	      // FunctionExpression method values should be anonymous,
	      // because their .id fields are ignored anyway.
	      node.value.id = null;
	    }
	
	  } else if (node.type === "ObjectTypeProperty") {
	    var loc = node.loc;
	    var end = loc && loc.end;
	    if (end) {
	      end = copyPos(end);
	      if (lines.prevPos(end) &&
	          lines.charAt(end) === ",") {
	        // Some parsers accidentally include trailing commas in the
	        // .loc.end information for ObjectTypeProperty nodes.
	        if ((end = lines.skipSpaces(end, true, true))) {
	          loc.end = end;
	        }
	      }
	    }
	  }
	};
	
	function fixTemplateLiteral(node, lines) {
	  assert.strictEqual(node.type, "TemplateLiteral");
	
	  if (node.quasis.length === 0) {
	    // If there are no quasi elements, then there is nothing to fix.
	    return;
	  }
	
	  // First we need to exclude the opening ` from the .loc of the first
	  // quasi element, in case the parser accidentally decided to include it.
	  var afterLeftBackTickPos = copyPos(node.loc.start);
	  assert.strictEqual(lines.charAt(afterLeftBackTickPos), "`");
	  assert.ok(lines.nextPos(afterLeftBackTickPos));
	  var firstQuasi = node.quasis[0];
	  if (comparePos(firstQuasi.loc.start, afterLeftBackTickPos) < 0) {
	    firstQuasi.loc.start = afterLeftBackTickPos;
	  }
	
	  // Next we need to exclude the closing ` from the .loc of the last quasi
	  // element, in case the parser accidentally decided to include it.
	  var rightBackTickPos = copyPos(node.loc.end);
	  assert.ok(lines.prevPos(rightBackTickPos));
	  assert.strictEqual(lines.charAt(rightBackTickPos), "`");
	  var lastQuasi = node.quasis[node.quasis.length - 1];
	  if (comparePos(rightBackTickPos, lastQuasi.loc.end) < 0) {
	    lastQuasi.loc.end = rightBackTickPos;
	  }
	
	  // Now we need to exclude ${ and } characters from the .loc's of all
	  // quasi elements, since some parsers accidentally include them.
	  node.expressions.forEach(function (expr, i) {
	    // Rewind from expr.loc.start over any whitespace and the ${ that
	    // precedes the expression. The position of the $ should be the same
	    // as the .loc.end of the preceding quasi element, but some parsers
	    // accidentally include the ${ in the .loc of the quasi element.
	    var dollarCurlyPos = lines.skipSpaces(expr.loc.start, true, false);
	    if (lines.prevPos(dollarCurlyPos) &&
	        lines.charAt(dollarCurlyPos) === "{" &&
	        lines.prevPos(dollarCurlyPos) &&
	        lines.charAt(dollarCurlyPos) === "$") {
	      var quasiBefore = node.quasis[i];
	      if (comparePos(dollarCurlyPos, quasiBefore.loc.end) < 0) {
	        quasiBefore.loc.end = dollarCurlyPos;
	      }
	    }
	
	    // Likewise, some parsers accidentally include the } that follows
	    // the expression in the .loc of the following quasi element.
	    var rightCurlyPos = lines.skipSpaces(expr.loc.end, false, false);
	    if (lines.charAt(rightCurlyPos) === "}") {
	      assert.ok(lines.nextPos(rightCurlyPos));
	      // Now rightCurlyPos is technically the position just after the }.
	      var quasiAfter = node.quasis[i + 1];
	      if (comparePos(quasiAfter.loc.start, rightCurlyPos) < 0) {
	        quasiAfter.loc.start = rightCurlyPos;
	      }
	    }
	  });
	}
	
	util.isExportDeclaration = function (node) {
	  if (node) switch (node.type) {
	  case "ExportDeclaration":
	  case "ExportDefaultDeclaration":
	  case "ExportDefaultSpecifier":
	  case "DeclareExportDeclaration":
	  case "ExportNamedDeclaration":
	  case "ExportAllDeclaration":
	    return true;
	  }
	
	  return false;
	};
	
	util.getParentExportDeclaration = function (path) {
	  var parentNode = path.getParentNode();
	  if (path.getName() === "declaration" &&
	      util.isExportDeclaration(parentNode)) {
	    return parentNode;
	  }
	
	  return null;
	};
	
	util.isTrailingCommaEnabled = function(options, context) {
	  var trailingComma = options.trailingComma;
	  if (typeof trailingComma === "object") {
	    return !!trailingComma[context];
	  }
	  return !!trailingComma;
	};


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(313);
	var types = __webpack_require__(292);
	var isString = types.builtInTypes.string;
	var isNumber = types.builtInTypes.number;
	var SourceLocation = types.namedTypes.SourceLocation;
	var Position = types.namedTypes.Position;
	var linesModule = __webpack_require__(318);
	var comparePos = __webpack_require__(334).comparePos;
	
	function Mapping(sourceLines, sourceLoc, targetLoc) {
	    assert.ok(this instanceof Mapping);
	    assert.ok(sourceLines instanceof linesModule.Lines);
	    SourceLocation.assert(sourceLoc);
	
	    if (targetLoc) {
	        // In certain cases it's possible for targetLoc.{start,end}.column
	        // values to be negative, which technically makes them no longer
	        // valid SourceLocation nodes, so we need to be more forgiving.
	        assert.ok(
	            isNumber.check(targetLoc.start.line) &&
	            isNumber.check(targetLoc.start.column) &&
	            isNumber.check(targetLoc.end.line) &&
	            isNumber.check(targetLoc.end.column)
	        );
	    } else {
	        // Assume identity mapping if no targetLoc specified.
	        targetLoc = sourceLoc;
	    }
	
	    Object.defineProperties(this, {
	        sourceLines: { value: sourceLines },
	        sourceLoc: { value: sourceLoc },
	        targetLoc: { value: targetLoc }
	    });
	}
	
	var Mp = Mapping.prototype;
	module.exports = Mapping;
	
	Mp.slice = function(lines, start, end) {
	    assert.ok(lines instanceof linesModule.Lines);
	    Position.assert(start);
	
	    if (end) {
	        Position.assert(end);
	    } else {
	        end = lines.lastPos();
	    }
	
	    var sourceLines = this.sourceLines;
	    var sourceLoc = this.sourceLoc;
	    var targetLoc = this.targetLoc;
	
	    function skip(name) {
	        var sourceFromPos = sourceLoc[name];
	        var targetFromPos = targetLoc[name];
	        var targetToPos = start;
	
	        if (name === "end") {
	            targetToPos = end;
	        } else {
	            assert.strictEqual(name, "start");
	        }
	
	        return skipChars(
	            sourceLines, sourceFromPos,
	            lines, targetFromPos, targetToPos
	        );
	    }
	
	    if (comparePos(start, targetLoc.start) <= 0) {
	        if (comparePos(targetLoc.end, end) <= 0) {
	            targetLoc = {
	                start: subtractPos(targetLoc.start, start.line, start.column),
	                end: subtractPos(targetLoc.end, start.line, start.column)
	            };
	
	            // The sourceLoc can stay the same because the contents of the
	            // targetLoc have not changed.
	
	        } else if (comparePos(end, targetLoc.start) <= 0) {
	            return null;
	
	        } else {
	            sourceLoc = {
	                start: sourceLoc.start,
	                end: skip("end")
	            };
	
	            targetLoc = {
	                start: subtractPos(targetLoc.start, start.line, start.column),
	                end: subtractPos(end, start.line, start.column)
	            };
	        }
	
	    } else {
	        if (comparePos(targetLoc.end, start) <= 0) {
	            return null;
	        }
	
	        if (comparePos(targetLoc.end, end) <= 0) {
	            sourceLoc = {
	                start: skip("start"),
	                end: sourceLoc.end
	            };
	
	            targetLoc = {
	                // Same as subtractPos(start, start.line, start.column):
	                start: { line: 1, column: 0 },
	                end: subtractPos(targetLoc.end, start.line, start.column)
	            };
	
	        } else {
	            sourceLoc = {
	                start: skip("start"),
	                end: skip("end")
	            };
	
	            targetLoc = {
	                // Same as subtractPos(start, start.line, start.column):
	                start: { line: 1, column: 0 },
	                end: subtractPos(end, start.line, start.column)
	            };
	        }
	    }
	
	    return new Mapping(this.sourceLines, sourceLoc, targetLoc);
	};
	
	Mp.add = function(line, column) {
	    return new Mapping(this.sourceLines, this.sourceLoc, {
	        start: addPos(this.targetLoc.start, line, column),
	        end: addPos(this.targetLoc.end, line, column)
	    });
	};
	
	function addPos(toPos, line, column) {
	    return {
	        line: toPos.line + line - 1,
	        column: (toPos.line === 1)
	            ? toPos.column + column
	            : toPos.column
	    };
	}
	
	Mp.subtract = function(line, column) {
	    return new Mapping(this.sourceLines, this.sourceLoc, {
	        start: subtractPos(this.targetLoc.start, line, column),
	        end: subtractPos(this.targetLoc.end, line, column)
	    });
	};
	
	function subtractPos(fromPos, line, column) {
	    return {
	        line: fromPos.line - line + 1,
	        column: (fromPos.line === line)
	            ? fromPos.column - column
	            : fromPos.column
	    };
	}
	
	Mp.indent = function(by, skipFirstLine, noNegativeColumns) {
	    if (by === 0) {
	        return this;
	    }
	
	    var targetLoc = this.targetLoc;
	    var startLine = targetLoc.start.line;
	    var endLine = targetLoc.end.line;
	
	    if (skipFirstLine && startLine === 1 && endLine === 1) {
	        return this;
	    }
	
	    targetLoc = {
	        start: targetLoc.start,
	        end: targetLoc.end
	    };
	
	    if (!skipFirstLine || startLine > 1) {
	        var startColumn = targetLoc.start.column + by;
	        targetLoc.start = {
	            line: startLine,
	            column: noNegativeColumns
	                ? Math.max(0, startColumn)
	                : startColumn
	        };
	    }
	
	    if (!skipFirstLine || endLine > 1) {
	        var endColumn = targetLoc.end.column + by;
	        targetLoc.end = {
	            line: endLine,
	            column: noNegativeColumns
	                ? Math.max(0, endColumn)
	                : endColumn
	        };
	    }
	
	    return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);
	};
	
	function skipChars(
	    sourceLines, sourceFromPos,
	    targetLines, targetFromPos, targetToPos
	) {
	    assert.ok(sourceLines instanceof linesModule.Lines);
	    assert.ok(targetLines instanceof linesModule.Lines);
	    Position.assert(sourceFromPos);
	    Position.assert(targetFromPos);
	    Position.assert(targetToPos);
	
	    var targetComparison = comparePos(targetFromPos, targetToPos);
	    if (targetComparison === 0) {
	        // Trivial case: no characters to skip.
	        return sourceFromPos;
	    }
	
	    if (targetComparison < 0) {
	        // Skipping forward.
	
	        var sourceCursor = sourceLines.skipSpaces(sourceFromPos);
	        var targetCursor = targetLines.skipSpaces(targetFromPos);
	
	        var lineDiff = targetToPos.line - targetCursor.line;
	        sourceCursor.line += lineDiff;
	        targetCursor.line += lineDiff;
	
	        if (lineDiff > 0) {
	            // If jumping to later lines, reset columns to the beginnings
	            // of those lines.
	            sourceCursor.column = 0;
	            targetCursor.column = 0;
	        } else {
	            assert.strictEqual(lineDiff, 0);
	        }
	
	        while (comparePos(targetCursor, targetToPos) < 0 &&
	               targetLines.nextPos(targetCursor, true)) {
	            assert.ok(sourceLines.nextPos(sourceCursor, true));
	            assert.strictEqual(
	                sourceLines.charAt(sourceCursor),
	                targetLines.charAt(targetCursor)
	            );
	        }
	
	    } else {
	        // Skipping backward.
	
	        var sourceCursor = sourceLines.skipSpaces(sourceFromPos, true);
	        var targetCursor = targetLines.skipSpaces(targetFromPos, true);
	
	        var lineDiff = targetToPos.line - targetCursor.line;
	        sourceCursor.line += lineDiff;
	        targetCursor.line += lineDiff;
	
	        if (lineDiff < 0) {
	            // If jumping to earlier lines, reset columns to the ends of
	            // those lines.
	            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);
	            targetCursor.column = targetLines.getLineLength(targetCursor.line);
	        } else {
	            assert.strictEqual(lineDiff, 0);
	        }
	
	        while (comparePos(targetToPos, targetCursor) < 0 &&
	               targetLines.prevPos(targetCursor, true)) {
	            assert.ok(sourceLines.prevPos(sourceCursor, true));
	            assert.strictEqual(
	                sourceLines.charAt(sourceCursor),
	                targetLines.charAt(targetCursor)
	            );
	        }
	    }
	
	    return sourceCursor;
	}


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(313);
	var types = __webpack_require__(292);
	var n = types.namedTypes;
	var Node = n.Node;
	var isArray = types.builtInTypes.array;
	var isNumber = types.builtInTypes.number;
	
	function FastPath(value) {
	    assert.ok(this instanceof FastPath);
	    this.stack = [value];
	}
	
	var FPp = FastPath.prototype;
	module.exports = FastPath;
	
	// Static convenience function for coercing a value to a FastPath.
	FastPath.from = function(obj) {
	    if (obj instanceof FastPath) {
	        // Return a defensive copy of any existing FastPath instances.
	        return obj.copy();
	    }
	
	    if (obj instanceof types.NodePath) {
	        // For backwards compatibility, unroll NodePath instances into
	        // lightweight FastPath [..., name, value] stacks.
	        var copy = Object.create(FastPath.prototype);
	        var stack = [obj.value];
	        for (var pp; (pp = obj.parentPath); obj = pp)
	            stack.push(obj.name, pp.value);
	        copy.stack = stack.reverse();
	        return copy;
	    }
	
	    // Otherwise use obj as the value of the new FastPath instance.
	    return new FastPath(obj);
	};
	
	FPp.copy = function copy() {
	    var copy = Object.create(FastPath.prototype);
	    copy.stack = this.stack.slice(0);
	    return copy;
	};
	
	// The name of the current property is always the penultimate element of
	// this.stack, and always a String.
	FPp.getName = function getName() {
	    var s = this.stack;
	    var len = s.length;
	    if (len > 1) {
	        return s[len - 2];
	    }
	    // Since the name is always a string, null is a safe sentinel value to
	    // return if we do not know the name of the (root) value.
	    return null;
	};
	
	// The value of the current property is always the final element of
	// this.stack.
	FPp.getValue = function getValue() {
	    var s = this.stack;
	    return s[s.length - 1];
	};
	
	function getNodeHelper(path, count) {
	    var s = path.stack;
	
	    for (var i = s.length - 1; i >= 0; i -= 2) {
	        var value = s[i];
	        if (n.Node.check(value) && --count < 0) {
	            return value;
	        }
	    }
	
	    return null;
	}
	
	FPp.getNode = function getNode(count) {
	    return getNodeHelper(this, ~~count);
	};
	
	FPp.getParentNode = function getParentNode(count) {
	    return getNodeHelper(this, ~~count + 1);
	};
	
	// The length of the stack can be either even or odd, depending on whether
	// or not we have a name for the root value. The difference between the
	// index of the root value and the index of the final value is always
	// even, though, which allows us to return the root value in constant time
	// (i.e. without iterating backwards through the stack).
	FPp.getRootValue = function getRootValue() {
	    var s = this.stack;
	    if (s.length % 2 === 0) {
	        return s[1];
	    }
	    return s[0];
	};
	
	// Temporarily push properties named by string arguments given after the
	// callback function onto this.stack, then call the callback with a
	// reference to this (modified) FastPath object. Note that the stack will
	// be restored to its original state after the callback is finished, so it
	// is probably a mistake to retain a reference to the path.
	FPp.call = function call(callback/*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	    var result = callback(this);
	    s.length = origLen;
	    return result;
	};
	
	// Similar to FastPath.prototype.call, except that the value obtained by
	// accessing this.getValue()[name1][name2]... should be array-like. The
	// callback will be called with a reference to this path object for each
	// element of the array.
	FPp.each = function each(callback/*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	
	    for (var i = 0; i < value.length; ++i) {
	        if (i in value) {
	            s.push(i, value[i]);
	            // If the callback needs to know the value of i, call
	            // path.getName(), assuming path is the parameter name.
	            callback(this);
	            s.length -= 2;
	        }
	    }
	
	    s.length = origLen;
	};
	
	// Similar to FastPath.prototype.each, except that the results of the
	// callback function invocations are stored in an array and returned at
	// the end of the iteration.
	FPp.map = function map(callback/*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	
	    var result = new Array(value.length);
	
	    for (var i = 0; i < value.length; ++i) {
	        if (i in value) {
	            s.push(i, value[i]);
	            result[i] = callback(this, i);
	            s.length -= 2;
	        }
	    }
	
	    s.length = origLen;
	
	    return result;
	};
	
	// Inspired by require("ast-types").NodePath.prototype.needsParens, but
	// more efficient because we're iterating backwards through a stack.
	FPp.needsParens = function(assumeExpressionContext) {
	    var parent = this.getParentNode();
	    if (!parent) {
	        return false;
	    }
	
	    var name = this.getName();
	    var node = this.getNode();
	
	    // If the value of this path is some child of a Node and not a Node
	    // itself, then it doesn't need parentheses. Only Node objects (in
	    // fact, only Expression nodes) need parentheses.
	    if (this.getValue() !== node) {
	        return false;
	    }
	
	    // Only statements don't need parentheses.
	    if (n.Statement.check(node)) {
	        return false;
	    }
	
	    // Identifiers never need parentheses.
	    if (node.type === "Identifier") {
	        return false;
	    }
	
	    if (parent.type === "ParenthesizedExpression") {
	        return false;
	    }
	
	    switch (node.type) {
	    case "UnaryExpression":
	    case "SpreadElement":
	    case "SpreadProperty":
	        return parent.type === "MemberExpression"
	            && name === "object"
	            && parent.object === node;
	
	    case "BinaryExpression":
	    case "LogicalExpression":
	        switch (parent.type) {
	        case "CallExpression":
	            return name === "callee"
	                && parent.callee === node;
	
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	            return true;
	
	        case "MemberExpression":
	            return name === "object"
	                && parent.object === node;
	
	        case "BinaryExpression":
	        case "LogicalExpression":
	            var po = parent.operator;
	            var pp = PRECEDENCE[po];
	            var no = node.operator;
	            var np = PRECEDENCE[no];
	
	            if (pp > np) {
	                return true;
	            }
	
	            if (pp === np && name === "right") {
	                assert.strictEqual(parent.right, node);
	                return true;
	            }
	
	        default:
	            return false;
	        }
	
	    case "SequenceExpression":
	        switch (parent.type) {
	        case "ReturnStatement":
	            return false;
	
	        case "ForStatement":
	            // Although parentheses wouldn't hurt around sequence
	            // expressions in the head of for loops, traditional style
	            // dictates that e.g. i++, j++ should not be wrapped with
	            // parentheses.
	            return false;
	
	        case "ExpressionStatement":
	            return name !== "expression";
	
	        default:
	            // Otherwise err on the side of overparenthesization, adding
	            // explicit exceptions above if this proves overzealous.
	            return true;
	        }
	
	    case "YieldExpression":
	        switch (parent.type) {
	        case "BinaryExpression":
	        case "LogicalExpression":
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	        case "CallExpression":
	        case "MemberExpression":
	        case "NewExpression":
	        case "ConditionalExpression":
	        case "YieldExpression":
	            return true;
	
	        default:
	            return false;
	        }
	
	    case "IntersectionTypeAnnotation":
	    case "UnionTypeAnnotation":
	        return parent.type === "NullableTypeAnnotation";
	
	    case "Literal":
	        return parent.type === "MemberExpression"
	            && isNumber.check(node.value)
	            && name === "object"
	            && parent.object === node;
	
	    case "AssignmentExpression":
	    case "ConditionalExpression":
	        switch (parent.type) {
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	        case "BinaryExpression":
	        case "LogicalExpression":
	            return true;
	
	        case "CallExpression":
	            return name === "callee"
	                && parent.callee === node;
	
	        case "ConditionalExpression":
	            return name === "test"
	                && parent.test === node;
	
	        case "MemberExpression":
	            return name === "object"
	                && parent.object === node;
	
	        default:
	            return false;
	        }
	
	    case "ArrowFunctionExpression":
	        if(parent.type === 'CallExpression' && 
	           name === 'callee') {
	            return true;
	        };
	
	        return isBinary(parent);
	
	    case "ObjectExpression":
	        if (parent.type === "ArrowFunctionExpression" &&
	            name === "body") {
	            return true;
	        }
	
	    default:
	        if (parent.type === "NewExpression" &&
	            name === "callee" &&
	            parent.callee === node) {
	            return containsCallExpression(node);
	        }
	    }
	
	    if (assumeExpressionContext !== true &&
	        !this.canBeFirstInStatement() &&
	        this.firstInStatement())
	        return true;
	
	    return false;
	};
	
	function isBinary(node) {
	    return n.BinaryExpression.check(node)
	        || n.LogicalExpression.check(node);
	}
	
	function isUnaryLike(node) {
	    return n.UnaryExpression.check(node)
	        // I considered making SpreadElement and SpreadProperty subtypes
	        // of UnaryExpression, but they're not really Expression nodes.
	        || (n.SpreadElement && n.SpreadElement.check(node))
	        || (n.SpreadProperty && n.SpreadProperty.check(node));
	}
	
	var PRECEDENCE = {};
	[["||"],
	 ["&&"],
	 ["|"],
	 ["^"],
	 ["&"],
	 ["==", "===", "!=", "!=="],
	 ["<", ">", "<=", ">=", "in", "instanceof"],
	 [">>", "<<", ">>>"],
	 ["+", "-"],
	 ["*", "/", "%", "**"]
	].forEach(function(tier, i) {
	    tier.forEach(function(op) {
	        PRECEDENCE[op] = i;
	    });
	});
	
	function containsCallExpression(node) {
	    if (n.CallExpression.check(node)) {
	        return true;
	    }
	
	    if (isArray.check(node)) {
	        return node.some(containsCallExpression);
	    }
	
	    if (n.Node.check(node)) {
	        return types.someField(node, function(name, child) {
	            return containsCallExpression(child);
	        });
	    }
	
	    return false;
	}
	
	FPp.canBeFirstInStatement = function() {
	    var node = this.getNode();
	    return !n.FunctionExpression.check(node)
	        && !n.ObjectExpression.check(node);
	};
	
	FPp.firstInStatement = function() {
	    var s = this.stack;
	    var parentName, parent;
	    var childName, child;
	
	    for (var i = s.length - 1; i >= 0; i -= 2) {
	        if (n.Node.check(s[i])) {
	            childName = parentName;
	            child = parent;
	            parentName = s[i - 1];
	            parent = s[i];
	        }
	
	        if (!parent || !child) {
	            continue;
	        }
	
	        if (n.BlockStatement.check(parent) &&
	            parentName === "body" &&
	            childName === 0) {
	            assert.strictEqual(parent.body[0], child);
	            return true;
	        }
	
	        if (n.ExpressionStatement.check(parent) &&
	            childName === "expression") {
	            assert.strictEqual(parent.expression, child);
	            return true;
	        }
	
	        if (n.SequenceExpression.check(parent) &&
	            parentName === "expressions" &&
	            childName === 0) {
	            assert.strictEqual(parent.expressions[0], child);
	            continue;
	        }
	
	        if (n.CallExpression.check(parent) &&
	            childName === "callee") {
	            assert.strictEqual(parent.callee, child);
	            continue;
	        }
	
	        if (n.MemberExpression.check(parent) &&
	            childName === "object") {
	            assert.strictEqual(parent.object, child);
	            continue;
	        }
	
	        if (n.ConditionalExpression.check(parent) &&
	            childName === "test") {
	            assert.strictEqual(parent.test, child);
	            continue;
	        }
	
	        if (isBinary(parent) &&
	            childName === "left") {
	            assert.strictEqual(parent.left, child);
	            continue;
	        }
	
	        if (n.UnaryExpression.check(parent) &&
	            !parent.prefix &&
	            childName === "argument") {
	            assert.strictEqual(parent.argument, child);
	            continue;
	        }
	
	        return false;
	    }
	
	    return true;
	};


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(313);
	var types = __webpack_require__(292);
	var n = types.namedTypes;
	var isArray = types.builtInTypes.array;
	var isObject = types.builtInTypes.object;
	var linesModule = __webpack_require__(318);
	var fromString = linesModule.fromString;
	var Lines = linesModule.Lines;
	var concat = linesModule.concat;
	var util = __webpack_require__(334);
	var comparePos = util.comparePos;
	var childNodesCacheKey = __webpack_require__(333).makeUniqueKey();
	
	// TODO Move a non-caching implementation of this function into ast-types,
	// and implement a caching wrapper function here.
	function getSortedChildNodes(node, lines, resultArray) {
	    if (!node) {
	        return;
	    }
	
	    // The .loc checks below are sensitive to some of the problems that
	    // are fixed by this utility function. Specifically, if it decides to
	    // set node.loc to null, indicating that the node's .loc information
	    // is unreliable, then we don't want to add node to the resultArray.
	    util.fixFaultyLocations(node, lines);
	
	    if (resultArray) {
	        if (n.Node.check(node) &&
	            n.SourceLocation.check(node.loc)) {
	            // This reverse insertion sort almost always takes constant
	            // time because we almost always (maybe always?) append the
	            // nodes in order anyway.
	            for (var i = resultArray.length - 1; i >= 0; --i) {
	                if (comparePos(resultArray[i].loc.end,
	                               node.loc.start) <= 0) {
	                    break;
	                }
	            }
	            resultArray.splice(i + 1, 0, node);
	            return;
	        }
	    } else if (node[childNodesCacheKey]) {
	        return node[childNodesCacheKey];
	    }
	
	    var names;
	    if (isArray.check(node)) {
	        names = Object.keys(node);
	    } else if (isObject.check(node)) {
	        names = types.getFieldNames(node);
	    } else {
	        return;
	    }
	
	    if (!resultArray) {
	        Object.defineProperty(node, childNodesCacheKey, {
	            value: resultArray = [],
	            enumerable: false
	        });
	    }
	
	    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {
	        getSortedChildNodes(node[names[i]], lines, resultArray);
	    }
	
	    return resultArray;
	}
	
	// As efficiently as possible, decorate the comment object with
	// .precedingNode, .enclosingNode, and/or .followingNode properties, at
	// least one of which is guaranteed to be defined.
	function decorateComment(node, comment, lines) {
	    var childNodes = getSortedChildNodes(node, lines);
	
	    // Time to dust off the old binary search robes and wizard hat.
	    var left = 0, right = childNodes.length;
	    while (left < right) {
	        var middle = (left + right) >> 1;
	        var child = childNodes[middle];
	
	        if (comparePos(child.loc.start, comment.loc.start) <= 0 &&
	            comparePos(comment.loc.end, child.loc.end) <= 0) {
	            // The comment is completely contained by this child node.
	            decorateComment(comment.enclosingNode = child, comment, lines);
	            return; // Abandon the binary search at this level.
	        }
	
	        if (comparePos(child.loc.end, comment.loc.start) <= 0) {
	            // This child node falls completely before the comment.
	            // Because we will never consider this node or any nodes
	            // before it again, this node must be the closest preceding
	            // node we have encountered so far.
	            var precedingNode = child;
	            left = middle + 1;
	            continue;
	        }
	
	        if (comparePos(comment.loc.end, child.loc.start) <= 0) {
	            // This child node falls completely after the comment.
	            // Because we will never consider this node or any nodes after
	            // it again, this node must be the closest following node we
	            // have encountered so far.
	            var followingNode = child;
	            right = middle;
	            continue;
	        }
	
	        throw new Error("Comment location overlaps with node location");
	    }
	
	    if (precedingNode) {
	        comment.precedingNode = precedingNode;
	    }
	
	    if (followingNode) {
	        comment.followingNode = followingNode;
	    }
	}
	
	exports.attach = function(comments, ast, lines) {
	    if (!isArray.check(comments)) {
	        return;
	    }
	
	    var tiesToBreak = [];
	
	    comments.forEach(function(comment) {
	        comment.loc.lines = lines;
	        decorateComment(ast, comment, lines);
	
	        var pn = comment.precedingNode;
	        var en = comment.enclosingNode;
	        var fn = comment.followingNode;
	
	        if (pn && fn) {
	            var tieCount = tiesToBreak.length;
	            if (tieCount > 0) {
	                var lastTie = tiesToBreak[tieCount - 1];
	
	                assert.strictEqual(
	                    lastTie.precedingNode === comment.precedingNode,
	                    lastTie.followingNode === comment.followingNode
	                );
	
	                if (lastTie.followingNode !== comment.followingNode) {
	                    breakTies(tiesToBreak, lines);
	                }
	            }
	
	            tiesToBreak.push(comment);
	
	        } else if (pn) {
	            // No contest: we have a trailing comment.
	            breakTies(tiesToBreak, lines);
	            addTrailingComment(pn, comment);
	
	        } else if (fn) {
	            // No contest: we have a leading comment.
	            breakTies(tiesToBreak, lines);
	            addLeadingComment(fn, comment);
	
	        } else if (en) {
	            // The enclosing node has no child nodes at all, so what we
	            // have here is a dangling comment, e.g. [/* crickets */].
	            breakTies(tiesToBreak, lines);
	            addDanglingComment(en, comment);
	
	        } else {
	            throw new Error("AST contains no nodes at all?");
	        }
	    });
	
	    breakTies(tiesToBreak, lines);
	
	    comments.forEach(function(comment) {
	        // These node references were useful for breaking ties, but we
	        // don't need them anymore, and they create cycles in the AST that
	        // may lead to infinite recursion if we don't delete them here.
	        delete comment.precedingNode;
	        delete comment.enclosingNode;
	        delete comment.followingNode;
	    });
	};
	
	function breakTies(tiesToBreak, lines) {
	    var tieCount = tiesToBreak.length;
	    if (tieCount === 0) {
	        return;
	    }
	
	    var pn = tiesToBreak[0].precedingNode;
	    var fn = tiesToBreak[0].followingNode;
	    var gapEndPos = fn.loc.start;
	
	    // Iterate backwards through tiesToBreak, examining the gaps
	    // between the tied comments. In order to qualify as leading, a
	    // comment must be separated from fn by an unbroken series of
	    // whitespace-only gaps (or other comments).
	    for (var indexOfFirstLeadingComment = tieCount;
	         indexOfFirstLeadingComment > 0;
	         --indexOfFirstLeadingComment) {
	        var comment = tiesToBreak[indexOfFirstLeadingComment - 1];
	        assert.strictEqual(comment.precedingNode, pn);
	        assert.strictEqual(comment.followingNode, fn);
	
	        var gap = lines.sliceString(comment.loc.end, gapEndPos);
	        if (/\S/.test(gap)) {
	            // The gap string contained something other than whitespace.
	            break;
	        }
	
	        gapEndPos = comment.loc.start;
	    }
	
	    while (indexOfFirstLeadingComment <= tieCount &&
	           (comment = tiesToBreak[indexOfFirstLeadingComment]) &&
	           // If the comment is a //-style comment and indented more
	           // deeply than the node itself, reconsider it as trailing.
	           (comment.type === "Line" || comment.type === "CommentLine") &&
	           comment.loc.start.column > fn.loc.start.column) {
	        ++indexOfFirstLeadingComment;
	    }
	
	    tiesToBreak.forEach(function(comment, i) {
	        if (i < indexOfFirstLeadingComment) {
	            addTrailingComment(pn, comment);
	        } else {
	            addLeadingComment(fn, comment);
	        }
	    });
	
	    tiesToBreak.length = 0;
	}
	
	function addCommentHelper(node, comment) {
	    var comments = node.comments || (node.comments = []);
	    comments.push(comment);
	}
	
	function addLeadingComment(node, comment) {
	    comment.leading = true;
	    comment.trailing = false;
	    addCommentHelper(node, comment);
	}
	
	function addDanglingComment(node, comment) {
	    comment.leading = false;
	    comment.trailing = false;
	    addCommentHelper(node, comment);
	}
	
	function addTrailingComment(node, comment) {
	    comment.leading = false;
	    comment.trailing = true;
	    addCommentHelper(node, comment);
	}
	
	function printLeadingComment(commentPath, print) {
	    var comment = commentPath.getValue();
	    n.Comment.assert(comment);
	
	    var loc = comment.loc;
	    var lines = loc && loc.lines;
	    var parts = [print(commentPath)];
	
	    if (comment.trailing) {
	        // When we print trailing comments as leading comments, we don't
	        // want to bring any trailing spaces along.
	        parts.push("\n");
	
	    } else if (lines instanceof Lines) {
	        var trailingSpace = lines.slice(
	            loc.end,
	            lines.skipSpaces(loc.end)
	        );
	
	        if (trailingSpace.length === 1) {
	            // If the trailing space contains no newlines, then we want to
	            // preserve it exactly as we found it.
	            parts.push(trailingSpace);
	        } else {
	            // If the trailing space contains newlines, then replace it
	            // with just that many newlines, with all other spaces removed.
	            parts.push(new Array(trailingSpace.length).join("\n"));
	        }
	
	    } else {
	        parts.push("\n");
	    }
	
	    return concat(parts);
	}
	
	function printTrailingComment(commentPath, print) {
	    var comment = commentPath.getValue(commentPath);
	    n.Comment.assert(comment);
	
	    var loc = comment.loc;
	    var lines = loc && loc.lines;
	    var parts = [];
	
	    if (lines instanceof Lines) {
	        var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();
	        var leadingSpace = lines.slice(fromPos, loc.start);
	
	        if (leadingSpace.length === 1) {
	            // If the leading space contains no newlines, then we want to
	            // preserve it exactly as we found it.
	            parts.push(leadingSpace);
	        } else {
	            // If the leading space contains newlines, then replace it
	            // with just that many newlines, sans all other spaces.
	            parts.push(new Array(leadingSpace.length).join("\n"));
	        }
	    }
	
	    parts.push(print(commentPath));
	
	    return concat(parts);
	}
	
	exports.printComments = function(path, print) {
	    var value = path.getValue();
	    var innerLines = print(path);
	    var comments = n.Node.check(value) &&
	        types.getFieldValue(value, "comments");
	
	    if (!comments || comments.length === 0) {
	        return innerLines;
	    }
	
	    var leadingParts = [];
	    var trailingParts = [innerLines];
	
	    path.each(function(commentPath) {
	        var comment = commentPath.getValue();
	        var leading = types.getFieldValue(comment, "leading");
	        var trailing = types.getFieldValue(comment, "trailing");
	
	        if (leading || (trailing && !(n.Statement.check(value) ||
	                                      comment.type === "Block" ||
	                                      comment.type === "CommentBlock"))) {
	            leadingParts.push(printLeadingComment(commentPath, print));
	        } else if (trailing) {
	            trailingParts.push(printTrailingComment(commentPath, print));
	        }
	    }, "comments");
	
	    leadingParts.push.apply(leadingParts, trailingParts);
	    return concat(leadingParts);
	};


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(313);
	var sourceMap = __webpack_require__(319);
	var printComments = __webpack_require__(337).printComments;
	var linesModule = __webpack_require__(318);
	var fromString = linesModule.fromString;
	var concat = linesModule.concat;
	var normalizeOptions = __webpack_require__(330).normalize;
	var getReprinter = __webpack_require__(317).getReprinter;
	var types = __webpack_require__(292);
	var namedTypes = types.namedTypes;
	var isString = types.builtInTypes.string;
	var isObject = types.builtInTypes.object;
	var FastPath = __webpack_require__(336);
	var util = __webpack_require__(334);
	
	function PrintResult(code, sourceMap) {
	    assert.ok(this instanceof PrintResult);
	
	    isString.assert(code);
	    this.code = code;
	
	    if (sourceMap) {
	        isObject.assert(sourceMap);
	        this.map = sourceMap;
	    }
	}
	
	var PRp = PrintResult.prototype;
	var warnedAboutToString = false;
	
	PRp.toString = function() {
	    if (!warnedAboutToString) {
	        console.warn(
	            "Deprecation warning: recast.print now returns an object with " +
	            "a .code property. You appear to be treating the object as a " +
	            "string, which might still work but is strongly discouraged."
	        );
	
	        warnedAboutToString = true;
	    }
	
	    return this.code;
	};
	
	var emptyPrintResult = new PrintResult("");
	
	function Printer(originalOptions) {
	    assert.ok(this instanceof Printer);
	
	    var explicitTabWidth = originalOptions && originalOptions.tabWidth;
	    var options = normalizeOptions(originalOptions);
	    assert.notStrictEqual(options, originalOptions);
	
	    // It's common for client code to pass the same options into both
	    // recast.parse and recast.print, but the Printer doesn't need (and
	    // can be confused by) options.sourceFileName, so we null it out.
	    options.sourceFileName = null;
	
	    function printWithComments(path) {
	        assert.ok(path instanceof FastPath);
	        return printComments(path, print);
	    }
	
	    function print(path, includeComments) {
	        if (includeComments)
	            return printWithComments(path);
	
	        assert.ok(path instanceof FastPath);
	
	        if (!explicitTabWidth) {
	            var oldTabWidth = options.tabWidth;
	            var loc = path.getNode().loc;
	            if (loc && loc.lines && loc.lines.guessTabWidth) {
	                options.tabWidth = loc.lines.guessTabWidth();
	                var lines = maybeReprint(path);
	                options.tabWidth = oldTabWidth;
	                return lines;
	            }
	        }
	
	        return maybeReprint(path);
	    }
	
	    function maybeReprint(path) {
	        var reprinter = getReprinter(path);
	        if (reprinter) {
	            // Since the print function that we pass to the reprinter will
	            // be used to print "new" nodes, it's tempting to think we
	            // should pass printRootGenerically instead of print, to avoid
	            // calling maybeReprint again, but that would be a mistake
	            // because the new nodes might not be entirely new, but merely
	            // moved from elsewhere in the AST. The print function is the
	            // right choice because it gives us the opportunity to reprint
	            // such nodes using their original source.
	            return maybeAddParens(path, reprinter(print));
	        }
	        return printRootGenerically(path);
	    }
	
	    // Print the root node generically, but then resume reprinting its
	    // children non-generically.
	    function printRootGenerically(path, includeComments) {
	        return includeComments
	            ? printComments(path, printRootGenerically)
	            : genericPrint(path, options, printWithComments);
	    }
	
	    // Print the entire AST generically.
	    function printGenerically(path) {
	        return genericPrint(path, options, printGenerically);
	    }
	
	    this.print = function(ast) {
	        if (!ast) {
	            return emptyPrintResult;
	        }
	
	        var lines = print(FastPath.from(ast), true);
	
	        return new PrintResult(
	            lines.toString(options),
	            util.composeSourceMaps(
	                options.inputSourceMap,
	                lines.getSourceMap(
	                    options.sourceMapName,
	                    options.sourceRoot
	                )
	            )
	        );
	    };
	
	    this.printGenerically = function(ast) {
	        if (!ast) {
	            return emptyPrintResult;
	        }
	
	        var path = FastPath.from(ast);
	        var oldReuseWhitespace = options.reuseWhitespace;
	
	        // Do not reuse whitespace (or anything else, for that matter)
	        // when printing generically.
	        options.reuseWhitespace = false;
	
	        // TODO Allow printing of comments?
	        var pr = new PrintResult(printGenerically(path).toString(options));
	        options.reuseWhitespace = oldReuseWhitespace;
	        return pr;
	    };
	}
	
	exports.Printer = Printer;
	
	function maybeAddParens(path, lines) {
	    return path.needsParens() ? concat(["(", lines, ")"]) : lines;
	}
	
	function genericPrint(path, options, printPath) {
	    assert.ok(path instanceof FastPath);
	
	    var node = path.getValue();
	    var parts = [];
	    var needsParens = false;
	    var linesWithoutParens =
	        genericPrintNoParens(path, options, printPath);
	
	    if (! node || linesWithoutParens.isEmpty()) {
	        return linesWithoutParens;
	    }
	
	    if (node.decorators &&
	        node.decorators.length > 0 &&
	        // If the parent node is an export declaration, it will be
	        // responsible for printing node.decorators.
	        ! util.getParentExportDeclaration(path)) {
	
	        path.each(function(decoratorPath) {
	            parts.push(printPath(decoratorPath), "\n");
	        }, "decorators");
	
	    } else if (util.isExportDeclaration(node) &&
	               node.declaration &&
	               node.declaration.decorators) {
	        // Export declarations are responsible for printing any decorators
	        // that logically apply to node.declaration.
	        path.each(function(decoratorPath) {
	            parts.push(printPath(decoratorPath), "\n");
	        }, "declaration", "decorators");
	
	    } else {
	        // Nodes with decorators can't have parentheses, so we can avoid
	        // computing path.needsParens() except in this case.
	        needsParens = path.needsParens();
	    }
	
	    if (needsParens) {
	        parts.unshift("(");
	    }
	
	    parts.push(linesWithoutParens);
	
	    if (needsParens) {
	        parts.push(")");
	    }
	
	    return concat(parts);
	}
	
	function genericPrintNoParens(path, options, print) {
	    var n = path.getValue();
	
	    if (!n) {
	        return fromString("");
	    }
	
	    if (typeof n === "string") {
	        return fromString(n, options);
	    }
	
	    namedTypes.Printable.assert(n);
	
	    var parts = [];
	
	    switch (n.type) {
	    case "File":
	        return path.call(print, "program");
	
	    case "Program":
	        // Babel 6
	        if (n.directives) {
	            path.each(function(childPath) {
	                parts.push(print(childPath), ";\n");
	            }, "directives");
	        }
	
	        parts.push(path.call(function(bodyPath) {
	            return printStatementSequence(bodyPath, options, print);
	        }, "body"));
	
	        return concat(parts);
	
	    case "Noop": // Babel extension.
	    case "EmptyStatement":
	        return fromString("");
	
	    case "ExpressionStatement":
	        return concat([path.call(print, "expression"), ";"]);
	
	    case "ParenthesizedExpression": // Babel extension.
	        return concat(["(", path.call(print, "expression"), ")"]);
	
	    case "BinaryExpression":
	    case "LogicalExpression":
	    case "AssignmentExpression":
	        return fromString(" ").join([
	            path.call(print, "left"),
	            n.operator,
	            path.call(print, "right")
	        ]);
	
	    case "AssignmentPattern":
	        return concat([
	            path.call(print, "left"),
	            " = ",
	            path.call(print, "right")
	        ]);
	
	    case "MemberExpression":
	        parts.push(path.call(print, "object"));
	
	        var property = path.call(print, "property");
	        if (n.computed) {
	            parts.push("[", property, "]");
	        } else {
	            parts.push(".", property);
	        }
	
	        return concat(parts);
	
	    case "MetaProperty":
	        return concat([
	            path.call(print, "meta"),
	            ".",
	            path.call(print, "property")
	        ]);
	
	    case "BindExpression":
	        if (n.object) {
	            parts.push(path.call(print, "object"));
	        }
	
	        parts.push("::", path.call(print, "callee"));
	
	        return concat(parts);
	
	    case "Path":
	        return fromString(".").join(n.body);
	
	    case "Identifier":
	        return concat([
	            fromString(n.name, options),
	            path.call(print, "typeAnnotation")
	        ]);
	
	    case "SpreadElement":
	    case "SpreadElementPattern":
	    case "RestProperty": // Babel 6 for ObjectPattern
	    case "SpreadProperty":
	    case "SpreadPropertyPattern":
	    case "RestElement":
	        return concat(["...", path.call(print, "argument")]);
	
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	        if (n.async)
	            parts.push("async ");
	
	        parts.push("function");
	
	        if (n.generator)
	            parts.push("*");
	
	        if (n.id) {
	            parts.push(
	                " ",
	                path.call(print, "id"),
	                path.call(print, "typeParameters")
	            );
	        }
	
	        parts.push(
	            "(",
	            printFunctionParams(path, options, print),
	            ")",
	            path.call(print, "returnType"),
	            " ",
	            path.call(print, "body")
	        );
	
	        return concat(parts);
	
	    case "ArrowFunctionExpression":
	        if (n.async)
	            parts.push("async ");
	
	        if (n.typeParameters) {
	            parts.push(path.call(print, "typeParameters"));
	        }
	
	        if (
	            !options.arrowParensAlways &&
	            n.params.length === 1 &&
	            !n.rest &&
	            n.params[0].type === 'Identifier' &&
	            !n.params[0].typeAnnotation &&
	            !n.returnType
	        ) {
	            parts.push(path.call(print, "params", 0));
	        } else {
	            parts.push(
	                "(",
	                printFunctionParams(path, options, print),
	                ")",
	                path.call(print, "returnType")
	            );
	        }
	
	        parts.push(" => ", path.call(print, "body"));
	
	        return concat(parts);
	
	    case "MethodDefinition":
	        if (n.static) {
	            parts.push("static ");
	        }
	
	        parts.push(printMethod(path, options, print));
	
	        return concat(parts);
	
	    case "YieldExpression":
	        parts.push("yield");
	
	        if (n.delegate)
	            parts.push("*");
	
	        if (n.argument)
	            parts.push(" ", path.call(print, "argument"));
	
	        return concat(parts);
	
	    case "AwaitExpression":
	        parts.push("await");
	
	        if (n.all)
	            parts.push("*");
	
	        if (n.argument)
	            parts.push(" ", path.call(print, "argument"));
	
	        return concat(parts);
	
	    case "ModuleDeclaration":
	        parts.push("module", path.call(print, "id"));
	
	        if (n.source) {
	            assert.ok(!n.body);
	            parts.push("from", path.call(print, "source"));
	        } else {
	            parts.push(path.call(print, "body"));
	        }
	
	        return fromString(" ").join(parts);
	
	    case "ImportSpecifier":
	        if (n.imported) {
	            parts.push(path.call(print, "imported"));
	            if (n.local &&
	                n.local.name !== n.imported.name) {
	                parts.push(" as ", path.call(print, "local"));
	            }
	        } else if (n.id) {
	            parts.push(path.call(print, "id"));
	            if (n.name) {
	                parts.push(" as ", path.call(print, "name"));
	            }
	        }
	
	        return concat(parts);
	
	    case "ExportSpecifier":
	        if (n.local) {
	            parts.push(path.call(print, "local"));
	            if (n.exported &&
	                n.exported.name !== n.local.name) {
	                parts.push(" as ", path.call(print, "exported"));
	            }
	        } else if (n.id) {
	            parts.push(path.call(print, "id"));
	            if (n.name) {
	                parts.push(" as ", path.call(print, "name"));
	            }
	        }
	
	        return concat(parts);
	
	    case "ExportBatchSpecifier":
	        return fromString("*");
	
	    case "ImportNamespaceSpecifier":
	        parts.push("* as ");
	        if (n.local) {
	            parts.push(path.call(print, "local"));
	        } else if (n.id) {
	            parts.push(path.call(print, "id"));
	        }
	        return concat(parts);
	
	    case "ImportDefaultSpecifier":
	        if (n.local) {
	            return path.call(print, "local");
	        }
	        return path.call(print, "id");
	
	    case "ExportDeclaration":
	    case "ExportDefaultDeclaration":
	    case "ExportNamedDeclaration":
	        return printExportDeclaration(path, options, print);
	
	    case "ExportAllDeclaration":
	        parts.push("export *");
	
	        if (n.exported) {
	            parts.push(" as ", path.call(print, "exported"));
	        }
	
	        parts.push(
	            " from ",
	            path.call(print, "source")
	        );
	
	        return concat(parts);
	
	    case "ExportNamespaceSpecifier":
	        return concat(["* as ", path.call(print, "exported")]);
	
	    case "ExportDefaultSpecifier":
	        return path.call(print, "exported");
	
	    case "ImportDeclaration":
	        parts.push("import ");
	
	        if (n.importKind && n.importKind !== "value") {
	            parts.push(n.importKind + " ");
	        }
	
	        if (n.specifiers &&
	            n.specifiers.length > 0) {
	
	            var foundImportSpecifier = false;
	
	            path.each(function(specifierPath) {
	                var i = specifierPath.getName();
	                if (i > 0) {
	                    parts.push(", ");
	                }
	
	                var value = specifierPath.getValue();
	
	                if (namedTypes.ImportDefaultSpecifier.check(value) ||
	                    namedTypes.ImportNamespaceSpecifier.check(value)) {
	                    assert.strictEqual(foundImportSpecifier, false);
	                } else {
	                    namedTypes.ImportSpecifier.assert(value);
	                    if (!foundImportSpecifier) {
	                        foundImportSpecifier = true;
	                        parts.push(
	                          options.objectCurlySpacing ? "{ " : "{"
	                        );
	                    }
	                }
	
	                parts.push(print(specifierPath));
	            }, "specifiers");
	
	            if (foundImportSpecifier) {
	                parts.push(
	                  options.objectCurlySpacing ? " }" : "}"
	                );
	            }
	
	            parts.push(" from ");
	        }
	
	        parts.push(path.call(print, "source"), ";");
	
	        return concat(parts);
	
	    case "BlockStatement":
	        var naked = path.call(function(bodyPath) {
	            return printStatementSequence(bodyPath, options, print);
	        }, "body");
	
	
	        if (naked.isEmpty()) {
	            if (!n.directives || n.directives.length === 0) {
	                return fromString("{}");
	            }
	        }
	
	        parts.push("{\n");
	        // Babel 6
	        if (n.directives) {
	            path.each(function(childPath) {
	                parts.push(
	                    print(childPath).indent(options.tabWidth),
	                    ";",
	                    n.directives.length > 1 || !naked.isEmpty() ? "\n" : ""
	                );
	            }, "directives");
	        }
	        parts.push(naked.indent(options.tabWidth));
	        parts.push("\n}");
	
	        return concat(parts);
	
	    case "ReturnStatement":
	        parts.push("return");
	
	        if (n.argument) {
	            var argLines = path.call(print, "argument");
	            if (argLines.length > 1 &&
	                namedTypes.JSXElement &&
	                namedTypes.JSXElement.check(n.argument)) {
	                parts.push(
	                    " (\n",
	                    argLines.indent(options.tabWidth),
	                    "\n)"
	                );
	            } else {
	                parts.push(" ", argLines);
	            }
	        }
	
	        parts.push(";");
	
	        return concat(parts);
	
	    case "CallExpression":
	        return concat([
	            path.call(print, "callee"),
	            printArgumentsList(path, options, print)
	        ]);
	
	    case "ObjectExpression":
	    case "ObjectPattern":
	    case "ObjectTypeAnnotation":
	        var allowBreak = false;
	        var isTypeAnnotation = n.type === "ObjectTypeAnnotation";
	        var separator = options.flowObjectCommas ? "," : (isTypeAnnotation ? ";" : ",");
	        var fields = [];
	
	        if (isTypeAnnotation) {
	            fields.push("indexers", "callProperties");
	        }
	
	        fields.push("properties");
	
	        var len = 0;
	        fields.forEach(function(field) {
	            len += n[field].length;
	        });
	
	        var oneLine = (isTypeAnnotation && len === 1) || len === 0;
	        var leftBrace = n.exact ? "{|" : "{";
	        var rightBrace = n.exact ? "|}" : "}";
	        parts.push(oneLine ? leftBrace : leftBrace + "\n");
	        var leftBraceIndex = parts.length - 1;
	
	        var i = 0;
	        fields.forEach(function(field) {
	            path.each(function(childPath) {
	                var lines = print(childPath);
	
	                if (!oneLine) {
	                    lines = lines.indent(options.tabWidth);
	                }
	
	                var multiLine = !isTypeAnnotation && lines.length > 1;
	                if (multiLine && allowBreak) {
	                    // Similar to the logic for BlockStatement.
	                    parts.push("\n");
	                }
	
	                parts.push(lines);
	
	                if (i < len - 1) {
	                    // Add an extra line break if the previous object property
	                    // had a multi-line value.
	                    parts.push(separator + (multiLine ? "\n\n" : "\n"));
	                    allowBreak = !multiLine;
	                } else if (len !== 1 && isTypeAnnotation) {
	                    parts.push(separator);
	                } else if (!oneLine && util.isTrailingCommaEnabled(options, "objects")) {
	                    parts.push(separator);
	                }
	                i++;
	            }, field);
	        });
	
	        parts.push(oneLine ? rightBrace : "\n" + rightBrace);
	
	        if (i !== 0 && oneLine && options.objectCurlySpacing) {
	            parts[leftBraceIndex] = leftBrace + " ";
	            parts[parts.length - 1] = " " + rightBrace;
	        }
	
	        return concat(parts);
	
	    case "PropertyPattern":
	        return concat([
	            path.call(print, "key"),
	            ": ",
	            path.call(print, "pattern")
	        ]);
	
	    case "ObjectProperty": // Babel 6
	    case "Property": // Non-standard AST node type.
	        if (n.method || n.kind === "get" || n.kind === "set") {
	            return printMethod(path, options, print);
	        }
	
	        var key = path.call(print, "key");
	        if (n.computed) {
	            parts.push("[", key, "]");
	        } else {
	            parts.push(key);
	        }
	
	        if (! n.shorthand) {
	            parts.push(": ", path.call(print, "value"));
	        }
	
	        return concat(parts);
	
	    case "ClassMethod": // Babel 6
	        if (n.static) {
	            parts.push("static ");
	        }
	
	        return concat([parts, printObjectMethod(path, options, print)]);
	
	    case "ObjectMethod": // Babel 6
	        return printObjectMethod(path, options, print);
	
	    case "Decorator":
	        return concat(["@", path.call(print, "expression")]);
	
	    case "ArrayExpression":
	    case "ArrayPattern":
	        var elems = n.elements,
	            len = elems.length;
	
	        var printed = path.map(print, "elements");
	        var joined = fromString(", ").join(printed);
	        var oneLine = joined.getLineLength(1) <= options.wrapColumn;
	        if (oneLine) {
	          if (options.arrayBracketSpacing) {
	            parts.push("[ ");
	          } else {
	            parts.push("[");
	          }
	        } else {
	          parts.push("[\n");
	        }
	
	        path.each(function(elemPath) {
	            var i = elemPath.getName();
	            var elem = elemPath.getValue();
	            if (!elem) {
	                // If the array expression ends with a hole, that hole
	                // will be ignored by the interpreter, but if it ends with
	                // two (or more) holes, we need to write out two (or more)
	                // commas so that the resulting code is interpreted with
	                // both (all) of the holes.
	                parts.push(",");
	            } else {
	                var lines = printed[i];
	                if (oneLine) {
	                    if (i > 0)
	                        parts.push(" ");
	                } else {
	                    lines = lines.indent(options.tabWidth);
	                }
	                parts.push(lines);
	                if (i < len - 1 || (!oneLine && util.isTrailingCommaEnabled(options, "arrays")))
	                    parts.push(",");
	                if (!oneLine)
	                    parts.push("\n");
	            }
	        }, "elements");
	
	        if (oneLine && options.arrayBracketSpacing) {
	          parts.push(" ]");
	        } else {
	          parts.push("]");
	        }
	
	        return concat(parts);
	
	    case "SequenceExpression":
	        return fromString(", ").join(path.map(print, "expressions"));
	
	    case "ThisExpression":
	        return fromString("this");
	
	    case "Super":
	        return fromString("super");
	
	    case "NullLiteral": // Babel 6 Literal split
	        return fromString("null");
	
	    case "RegExpLiteral": // Babel 6 Literal split
	        return fromString(n.extra.raw);
	
	    case "BooleanLiteral": // Babel 6 Literal split
	    case "NumericLiteral": // Babel 6 Literal split
	    case "StringLiteral": // Babel 6 Literal split
	    case "Literal":
	        if (typeof n.value !== "string")
	            return fromString(n.value, options);
	
	        return fromString(nodeStr(n.value, options), options);
	
	    case "Directive": // Babel 6
	        return path.call(print, "value");
	
	    case "DirectiveLiteral": // Babel 6
	        return fromString(nodeStr(n.value, options));
	
	    case "ModuleSpecifier":
	        if (n.local) {
	            throw new Error(
	                "The ESTree ModuleSpecifier type should be abstract"
	            );
	        }
	
	        // The Esprima ModuleSpecifier type is just a string-valued
	        // Literal identifying the imported-from module.
	        return fromString(nodeStr(n.value, options), options);
	
	    case "UnaryExpression":
	        parts.push(n.operator);
	        if (/[a-z]$/.test(n.operator))
	            parts.push(" ");
	        parts.push(path.call(print, "argument"));
	        return concat(parts);
	
	    case "UpdateExpression":
	        parts.push(
	            path.call(print, "argument"),
	            n.operator
	        );
	
	        if (n.prefix)
	            parts.reverse();
	
	        return concat(parts);
	
	    case "ConditionalExpression":
	        return concat([
	            "(", path.call(print, "test"),
	            " ? ", path.call(print, "consequent"),
	            " : ", path.call(print, "alternate"), ")"
	        ]);
	
	    case "NewExpression":
	        parts.push("new ", path.call(print, "callee"));
	        var args = n.arguments;
	        if (args) {
	            parts.push(printArgumentsList(path, options, print));
	        }
	
	        return concat(parts);
	
	    case "VariableDeclaration":
	        parts.push(n.kind, " ");
	        var maxLen = 0;
	        var printed = path.map(function(childPath) {
	            var lines = print(childPath);
	            maxLen = Math.max(lines.length, maxLen);
	            return lines;
	        }, "declarations");
	
	        if (maxLen === 1) {
	            parts.push(fromString(", ").join(printed));
	        } else if (printed.length > 1 ) {
	            parts.push(
	                fromString(",\n").join(printed)
	                    .indentTail(n.kind.length + 1)
	            );
	        } else {
	            parts.push(printed[0]);
	        }
	
	        // We generally want to terminate all variable declarations with a
	        // semicolon, except when they are children of for loops.
	        var parentNode = path.getParentNode();
	        if (!namedTypes.ForStatement.check(parentNode) &&
	            !namedTypes.ForInStatement.check(parentNode) &&
	            !(namedTypes.ForOfStatement &&
	              namedTypes.ForOfStatement.check(parentNode)) &&
	            !(namedTypes.ForAwaitStatement &&
	              namedTypes.ForAwaitStatement.check(parentNode))) {
	            parts.push(";");
	        }
	
	        return concat(parts);
	
	    case "VariableDeclarator":
	        return n.init ? fromString(" = ").join([
	            path.call(print, "id"),
	            path.call(print, "init")
	        ]) : path.call(print, "id");
	
	    case "WithStatement":
	        return concat([
	            "with (",
	            path.call(print, "object"),
	            ") ",
	            path.call(print, "body")
	        ]);
	
	    case "IfStatement":
	        var con = adjustClause(path.call(print, "consequent"), options),
	            parts = ["if (", path.call(print, "test"), ")", con];
	
	        if (n.alternate)
	            parts.push(
	                endsWithBrace(con) ? " else" : "\nelse",
	                adjustClause(path.call(print, "alternate"), options));
	
	        return concat(parts);
	
	    case "ForStatement":
	        // TODO Get the for (;;) case right.
	        var init = path.call(print, "init"),
	            sep = init.length > 1 ? ";\n" : "; ",
	            forParen = "for (",
	            indented = fromString(sep).join([
	                init,
	                path.call(print, "test"),
	                path.call(print, "update")
	            ]).indentTail(forParen.length),
	            head = concat([forParen, indented, ")"]),
	            clause = adjustClause(path.call(print, "body"), options),
	            parts = [head];
	
	        if (head.length > 1) {
	            parts.push("\n");
	            clause = clause.trimLeft();
	        }
	
	        parts.push(clause);
	
	        return concat(parts);
	
	    case "WhileStatement":
	        return concat([
	            "while (",
	            path.call(print, "test"),
	            ")",
	            adjustClause(path.call(print, "body"), options)
	        ]);
	
	    case "ForInStatement":
	        // Note: esprima can't actually parse "for each (".
	        return concat([
	            n.each ? "for each (" : "for (",
	            path.call(print, "left"),
	            " in ",
	            path.call(print, "right"),
	            ")",
	            adjustClause(path.call(print, "body"), options)
	        ]);
	
	    case "ForOfStatement":
	        return concat([
	            "for (",
	            path.call(print, "left"),
	            " of ",
	            path.call(print, "right"),
	            ")",
	            adjustClause(path.call(print, "body"), options)
	        ]);
	
	    case "ForAwaitStatement":
	        return concat([
	            "for await (",
	            path.call(print, "left"),
	            " of ",
	            path.call(print, "right"),
	            ")",
	            adjustClause(path.call(print, "body"), options)
	        ]);
	
	    case "DoWhileStatement":
	        var doBody = concat([
	            "do",
	            adjustClause(path.call(print, "body"), options)
	        ]), parts = [doBody];
	
	        if (endsWithBrace(doBody))
	            parts.push(" while");
	        else
	            parts.push("\nwhile");
	
	        parts.push(" (", path.call(print, "test"), ");");
	
	        return concat(parts);
	
	    case "DoExpression":
	        var statements = path.call(function(bodyPath) {
	            return printStatementSequence(bodyPath, options, print);
	        }, "body");
	
	        return concat([
	            "do {\n",
	            statements.indent(options.tabWidth),
	            "\n}"
	        ]);
	
	    case "BreakStatement":
	        parts.push("break");
	        if (n.label)
	            parts.push(" ", path.call(print, "label"));
	        parts.push(";");
	        return concat(parts);
	
	    case "ContinueStatement":
	        parts.push("continue");
	        if (n.label)
	            parts.push(" ", path.call(print, "label"));
	        parts.push(";");
	        return concat(parts);
	
	    case "LabeledStatement":
	        return concat([
	            path.call(print, "label"),
	            ":\n",
	            path.call(print, "body")
	        ]);
	
	    case "TryStatement":
	        parts.push(
	            "try ",
	            path.call(print, "block")
	        );
	
	        if (n.handler) {
	            parts.push(" ", path.call(print, "handler"));
	        } else if (n.handlers) {
	            path.each(function(handlerPath) {
	                parts.push(" ", print(handlerPath));
	            }, "handlers");
	        }
	
	        if (n.finalizer) {
	            parts.push(" finally ", path.call(print, "finalizer"));
	        }
	
	        return concat(parts);
	
	    case "CatchClause":
	        parts.push("catch (", path.call(print, "param"));
	
	        if (n.guard)
	            // Note: esprima does not recognize conditional catch clauses.
	            parts.push(" if ", path.call(print, "guard"));
	
	        parts.push(") ", path.call(print, "body"));
	
	        return concat(parts);
	
	    case "ThrowStatement":
	        return concat(["throw ", path.call(print, "argument"), ";"]);
	
	    case "SwitchStatement":
	        return concat([
	            "switch (",
	            path.call(print, "discriminant"),
	            ") {\n",
	            fromString("\n").join(path.map(print, "cases")),
	            "\n}"
	        ]);
	
	        // Note: ignoring n.lexical because it has no printing consequences.
	
	    case "SwitchCase":
	        if (n.test)
	            parts.push("case ", path.call(print, "test"), ":");
	        else
	            parts.push("default:");
	
	        if (n.consequent.length > 0) {
	            parts.push("\n", path.call(function(consequentPath) {
	                return printStatementSequence(consequentPath, options, print);
	            }, "consequent").indent(options.tabWidth));
	        }
	
	        return concat(parts);
	
	    case "DebuggerStatement":
	        return fromString("debugger;");
	
	    // JSX extensions below.
	
	    case "JSXAttribute":
	        parts.push(path.call(print, "name"));
	        if (n.value)
	            parts.push("=", path.call(print, "value"));
	        return concat(parts);
	
	    case "JSXIdentifier":
	        return fromString(n.name, options);
	
	    case "JSXNamespacedName":
	        return fromString(":").join([
	            path.call(print, "namespace"),
	            path.call(print, "name")
	        ]);
	
	    case "JSXMemberExpression":
	        return fromString(".").join([
	            path.call(print, "object"),
	            path.call(print, "property")
	        ]);
	
	    case "JSXSpreadAttribute":
	        return concat(["{...", path.call(print, "argument"), "}"]);
	
	    case "JSXExpressionContainer":
	        return concat(["{", path.call(print, "expression"), "}"]);
	
	    case "JSXElement":
	        var openingLines = path.call(print, "openingElement");
	
	        if (n.openingElement.selfClosing) {
	            assert.ok(!n.closingElement);
	            return openingLines;
	        }
	
	        var childLines = concat(
	            path.map(function(childPath) {
	                var child = childPath.getValue();
	
	                if (namedTypes.Literal.check(child) &&
	                    typeof child.value === "string") {
	                    if (/\S/.test(child.value)) {
	                        return child.value.replace(/^\s+|\s+$/g, "");
	                    } else if (/\n/.test(child.value)) {
	                        return "\n";
	                    }
	                }
	
	                return print(childPath);
	            }, "children")
	        ).indentTail(options.tabWidth);
	
	        var closingLines = path.call(print, "closingElement");
	
	        return concat([
	            openingLines,
	            childLines,
	            closingLines
	        ]);
	
	    case "JSXOpeningElement":
	        parts.push("<", path.call(print, "name"));
	        var attrParts = [];
	
	        path.each(function(attrPath) {
	            attrParts.push(" ", print(attrPath));
	        }, "attributes");
	
	        var attrLines = concat(attrParts);
	
	        var needLineWrap = (
	            attrLines.length > 1 ||
	            attrLines.getLineLength(1) > options.wrapColumn
	        );
	
	        if (needLineWrap) {
	            attrParts.forEach(function(part, i) {
	                if (part === " ") {
	                    assert.strictEqual(i % 2, 0);
	                    attrParts[i] = "\n";
	                }
	            });
	
	            attrLines = concat(attrParts).indentTail(options.tabWidth);
	        }
	
	        parts.push(attrLines, n.selfClosing ? " />" : ">");
	
	        return concat(parts);
	
	    case "JSXClosingElement":
	        return concat(["</", path.call(print, "name"), ">"]);
	
	    case "JSXText":
	        return fromString(n.value, options);
	
	    case "JSXEmptyExpression":
	        return fromString("");
	
	    case "TypeAnnotatedIdentifier":
	        return concat([
	            path.call(print, "annotation"),
	            " ",
	            path.call(print, "identifier")
	        ]);
	
	    case "ClassBody":
	        if (n.body.length === 0) {
	            return fromString("{}");
	        }
	
	        return concat([
	            "{\n",
	            path.call(function(bodyPath) {
	                return printStatementSequence(bodyPath, options, print);
	            }, "body").indent(options.tabWidth),
	            "\n}"
	        ]);
	
	    case "ClassPropertyDefinition":
	        parts.push("static ", path.call(print, "definition"));
	        if (!namedTypes.MethodDefinition.check(n.definition))
	            parts.push(";");
	        return concat(parts);
	
	    case "ClassProperty":
	        if (n.static)
	            parts.push("static ");
	
	        var key = path.call(print, "key");
	        if (n.computed) {
	            key = concat(["[", key, "]"]);
	        } else if (n.variance === "plus") {
	            key = concat(["+", key]);
	        } else if (n.variance === "minus") {
	            key = concat(["-", key]);
	        }
	        parts.push(key);
	
	        if (n.typeAnnotation)
	            parts.push(path.call(print, "typeAnnotation"));
	
	        if (n.value)
	            parts.push(" = ", path.call(print, "value"));
	
	        parts.push(";");
	        return concat(parts);
	
	    case "ClassDeclaration":
	    case "ClassExpression":
	        parts.push("class");
	
	        if (n.id) {
	            parts.push(
	                " ",
	                path.call(print, "id"),
	                path.call(print, "typeParameters")
	            );
	        }
	
	        if (n.superClass) {
	            parts.push(
	                " extends ",
	                path.call(print, "superClass"),
	                path.call(print, "superTypeParameters")
	            );
	        }
	
	        if (n["implements"] && n['implements'].length > 0) {
	            parts.push(
	                " implements ",
	                fromString(", ").join(path.map(print, "implements"))
	            );
	        }
	
	        parts.push(" ", path.call(print, "body"));
	
	        return concat(parts);
	
	    case "TemplateElement":
	        return fromString(n.value.raw, options).lockIndentTail();
	
	    case "TemplateLiteral":
	        var expressions = path.map(print, "expressions");
	        parts.push("`");
	
	        path.each(function(childPath) {
	            var i = childPath.getName();
	            parts.push(print(childPath));
	            if (i < expressions.length) {
	                parts.push("${", expressions[i], "}");
	            }
	        }, "quasis");
	
	        parts.push("`");
	
	        return concat(parts).lockIndentTail();
	
	    case "TaggedTemplateExpression":
	        return concat([
	            path.call(print, "tag"),
	            path.call(print, "quasi")
	        ]);
	
	    // These types are unprintable because they serve as abstract
	    // supertypes for other (printable) types.
	    case "Node":
	    case "Printable":
	    case "SourceLocation":
	    case "Position":
	    case "Statement":
	    case "Function":
	    case "Pattern":
	    case "Expression":
	    case "Declaration":
	    case "Specifier":
	    case "NamedSpecifier":
	    case "Comment": // Supertype of Block and Line.
	    case "MemberTypeAnnotation": // Flow
	    case "TupleTypeAnnotation": // Flow
	    case "Type": // Flow
	        throw new Error("unprintable type: " + JSON.stringify(n.type));
	
	    case "CommentBlock": // Babel block comment.
	    case "Block": // Esprima block comment.
	        return concat(["/*", fromString(n.value, options), "*/"]);
	
	    case "CommentLine": // Babel line comment.
	    case "Line": // Esprima line comment.
	        return concat(["//", fromString(n.value, options)]);
	
	    // Type Annotations for Facebook Flow, typically stripped out or
	    // transformed away before printing.
	    case "TypeAnnotation":
	        if (n.typeAnnotation) {
	            if (n.typeAnnotation.type !== "FunctionTypeAnnotation") {
	                parts.push(": ");
	            }
	            parts.push(path.call(print, "typeAnnotation"));
	            return concat(parts);
	        }
	
	        return fromString("");
	
	    case "ExistentialTypeParam":
	    case "ExistsTypeAnnotation":
	        return fromString("*", options);
	
	    case "EmptyTypeAnnotation":
	        return fromString("empty", options);
	
	    case "AnyTypeAnnotation":
	        return fromString("any", options);
	
	    case "MixedTypeAnnotation":
	        return fromString("mixed", options);
	
	    case "ArrayTypeAnnotation":
	        return concat([
	            path.call(print, "elementType"),
	            "[]"
	        ]);
	
	    case "BooleanTypeAnnotation":
	        return fromString("boolean", options);
	
	    case "BooleanLiteralTypeAnnotation":
	        assert.strictEqual(typeof n.value, "boolean");
	        return fromString("" + n.value, options);
	
	    case "DeclareClass":
	        return printFlowDeclaration(path, [
	            "class ",
	            path.call(print, "id"),
	            " ",
	            path.call(print, "body"),
	        ]);
	
	    case "DeclareFunction":
	        return printFlowDeclaration(path, [
	            "function ",
	            path.call(print, "id"),
	            ";"
	        ]);
	
	    case "DeclareModule":
	        return printFlowDeclaration(path, [
	            "module ",
	            path.call(print, "id"),
	            " ",
	            path.call(print, "body"),
	        ]);
	
	    case "DeclareModuleExports":
	        return printFlowDeclaration(path, [
	            "module.exports",
	            path.call(print, "typeAnnotation"),
	        ]);
	
	    case "DeclareVariable":
	        return printFlowDeclaration(path, [
	            "var ",
	            path.call(print, "id"),
	            ";"
	        ]);
	
	    case "DeclareExportDeclaration":
	        return concat([
	            "declare ",
	            printExportDeclaration(path, options, print)
	        ]);
	
	    case "FunctionTypeAnnotation":
	        // FunctionTypeAnnotation is ambiguous:
	        // declare function(a: B): void; OR
	        // var A: (a: B) => void;
	        var parent = path.getParentNode(0);
	        var isArrowFunctionTypeAnnotation = !(
	            namedTypes.ObjectTypeCallProperty.check(parent) ||
	            namedTypes.DeclareFunction.check(path.getParentNode(2))
	        );
	
	        var needsColon =
	            isArrowFunctionTypeAnnotation &&
	            !namedTypes.FunctionTypeParam.check(parent);
	
	        if (needsColon) {
	            parts.push(": ");
	        }
	
	        parts.push(
	            "(",
	            fromString(", ").join(path.map(print, "params")),
	            ")"
	        );
	
	        // The returnType is not wrapped in a TypeAnnotation, so the colon
	        // needs to be added separately.
	        if (n.returnType) {
	            parts.push(
	                isArrowFunctionTypeAnnotation ? " => " : ": ",
	                path.call(print, "returnType")
	            );
	        }
	
	        return concat(parts);
	
	    case "FunctionTypeParam":
	        return concat([
	            path.call(print, "name"),
	            n.optional ? '?' : '',
	            ": ",
	            path.call(print, "typeAnnotation"),
	        ]);
	
	    case "GenericTypeAnnotation":
	        return concat([
	            path.call(print, "id"),
	            path.call(print, "typeParameters")
	        ]);
	
	    case "DeclareInterface":
	        parts.push("declare ");
	
	    case "InterfaceDeclaration":
	        parts.push(
	            fromString("interface ", options),
	            path.call(print, "id"),
	            path.call(print, "typeParameters"),
	            " "
	        );
	
	        if (n["extends"]) {
	            parts.push(
	                "extends ",
	                fromString(", ").join(path.map(print, "extends"))
	            );
	        }
	
	        parts.push(" ", path.call(print, "body"));
	
	        return concat(parts);
	
	    case "ClassImplements":
	    case "InterfaceExtends":
	        return concat([
	            path.call(print, "id"),
	            path.call(print, "typeParameters")
	        ]);
	
	    case "IntersectionTypeAnnotation":
	        return fromString(" & ").join(path.map(print, "types"));
	
	    case "NullableTypeAnnotation":
	        return concat([
	            "?",
	            path.call(print, "typeAnnotation")
	        ]);
	
	    case "NullLiteralTypeAnnotation":
	        return fromString("null", options);
	
	    case "ThisTypeAnnotation":
	        return fromString("this", options);
	
	    case "NumberTypeAnnotation":
	        return fromString("number", options);
	
	    case "ObjectTypeCallProperty":
	        return path.call(print, "value");
	
	    case "ObjectTypeIndexer":
	        var variance =
	            n.variance === "plus" ? "+" :
	            n.variance === "minus" ? "-" : "";
	
	        return concat([
	            variance,
	            "[",
	            path.call(print, "id"),
	            ": ",
	            path.call(print, "key"),
	            "]: ",
	            path.call(print, "value")
	        ]);
	
	    case "ObjectTypeProperty":
	        var variance =
	            n.variance === "plus" ? "+" :
	            n.variance === "minus" ? "-" : "";
	
	        return concat([
	            variance,
	            path.call(print, "key"),
	            n.optional ? "?" : "",
	            ": ",
	            path.call(print, "value")
	        ]);
	
	    case "QualifiedTypeIdentifier":
	        return concat([
	            path.call(print, "qualification"),
	            ".",
	            path.call(print, "id")
	        ]);
	
	    case "StringLiteralTypeAnnotation":
	        return fromString(nodeStr(n.value, options), options);
	
	    case "NumberLiteralTypeAnnotation":
	        assert.strictEqual(typeof n.value, "number");
	        return fromString("" + n.value, options);
	
	    case "StringTypeAnnotation":
	        return fromString("string", options);
	
	    case "DeclareTypeAlias":
	        parts.push("declare ");
	
	    case "TypeAlias":
	        return concat([
	            "type ",
	            path.call(print, "id"),
	            path.call(print, "typeParameters"),
	            " = ",
	            path.call(print, "right"),
	            ";"
	        ]);
	
	    case "TypeCastExpression":
	        return concat([
	            "(",
	            path.call(print, "expression"),
	            path.call(print, "typeAnnotation"),
	            ")"
	        ]);
	
	    case "TypeParameterDeclaration":
	    case "TypeParameterInstantiation":
	        return concat([
	            "<",
	            fromString(", ").join(path.map(print, "params")),
	            ">"
	        ]);
	    case "TypeParameter":
	        switch (n.variance) {
	            case 'plus':
	                parts.push('+');
	                break;
	            case 'minus':
	                parts.push('-');
	                break;
	            default:
	        }
	
	        parts.push(path.call(print, 'name'));
	
	        if (n.bound) {
	            parts.push(path.call(print, 'bound'));
	        }
	
	        if (n['default']) {
	            parts.push('=', path.call(print, 'default'));
	        }
	
	        return concat(parts);
	
	    case "TypeofTypeAnnotation":
	        return concat([
	            fromString("typeof ", options),
	            path.call(print, "argument")
	        ]);
	
	    case "UnionTypeAnnotation":
	        return fromString(" | ").join(path.map(print, "types"));
	
	    case "VoidTypeAnnotation":
	        return fromString("void", options);
	
	    case "NullTypeAnnotation":
	        return fromString("null", options);
	
	    // Unhandled types below. If encountered, nodes of these types should
	    // be either left alone or desugared into AST types that are fully
	    // supported by the pretty-printer.
	    case "ClassHeritage": // TODO
	    case "ComprehensionBlock": // TODO
	    case "ComprehensionExpression": // TODO
	    case "Glob": // TODO
	    case "GeneratorExpression": // TODO
	    case "LetStatement": // TODO
	    case "LetExpression": // TODO
	    case "GraphExpression": // TODO
	    case "GraphIndexExpression": // TODO
	
	    // XML types that nobody cares about or needs to print.
	    case "XMLDefaultDeclaration":
	    case "XMLAnyName":
	    case "XMLQualifiedIdentifier":
	    case "XMLFunctionQualifiedIdentifier":
	    case "XMLAttributeSelector":
	    case "XMLFilterExpression":
	    case "XML":
	    case "XMLElement":
	    case "XMLList":
	    case "XMLEscape":
	    case "XMLText":
	    case "XMLStartTag":
	    case "XMLEndTag":
	    case "XMLPointTag":
	    case "XMLName":
	    case "XMLAttribute":
	    case "XMLCdata":
	    case "XMLComment":
	    case "XMLProcessingInstruction":
	    default:
	        debugger;
	        throw new Error("unknown type: " + JSON.stringify(n.type));
	    }
	
	    return p;
	}
	
	function printStatementSequence(path, options, print) {
	    var inClassBody =
	        namedTypes.ClassBody &&
	        namedTypes.ClassBody.check(path.getParentNode());
	
	    var filtered = [];
	    var sawComment = false;
	    var sawStatement = false;
	
	    path.each(function(stmtPath) {
	        var i = stmtPath.getName();
	        var stmt = stmtPath.getValue();
	
	        // Just in case the AST has been modified to contain falsy
	        // "statements," it's safer simply to skip them.
	        if (!stmt) {
	            return;
	        }
	
	        // Skip printing EmptyStatement nodes to avoid leaving stray
	        // semicolons lying around.
	        if (stmt.type === "EmptyStatement") {
	            return;
	        }
	
	        if (namedTypes.Comment.check(stmt)) {
	            // The pretty printer allows a dangling Comment node to act as
	            // a Statement when the Comment can't be attached to any other
	            // non-Comment node in the tree.
	            sawComment = true;
	        } else if (namedTypes.Statement.check(stmt)) {
	            sawStatement = true;
	        } else {
	            // When the pretty printer encounters a string instead of an
	            // AST node, it just prints the string. This behavior can be
	            // useful for fine-grained formatting decisions like inserting
	            // blank lines.
	            isString.assert(stmt);
	        }
	
	        // We can't hang onto stmtPath outside of this function, because
	        // it's just a reference to a mutable FastPath object, so we have
	        // to go ahead and print it here.
	        filtered.push({
	            node: stmt,
	            printed: print(stmtPath)
	        });
	    });
	
	    if (sawComment) {
	        assert.strictEqual(
	            sawStatement, false,
	            "Comments may appear as statements in otherwise empty statement " +
	                "lists, but may not coexist with non-Comment nodes."
	        );
	    }
	
	    var prevTrailingSpace = null;
	    var len = filtered.length;
	    var parts = [];
	
	    filtered.forEach(function(info, i) {
	        var printed = info.printed;
	        var stmt = info.node;
	        var multiLine = printed.length > 1;
	        var notFirst = i > 0;
	        var notLast = i < len - 1;
	        var leadingSpace;
	        var trailingSpace;
	        var lines = stmt && stmt.loc && stmt.loc.lines;
	        var trueLoc = lines && options.reuseWhitespace &&
	            util.getTrueLoc(stmt, lines);
	
	        if (notFirst) {
	            if (trueLoc) {
	                var beforeStart = lines.skipSpaces(trueLoc.start, true);
	                var beforeStartLine = beforeStart ? beforeStart.line : 1;
	                var leadingGap = trueLoc.start.line - beforeStartLine;
	                leadingSpace = Array(leadingGap + 1).join("\n");
	            } else {
	                leadingSpace = multiLine ? "\n\n" : "\n";
	            }
	        } else {
	            leadingSpace = "";
	        }
	
	        if (notLast) {
	            if (trueLoc) {
	                var afterEnd = lines.skipSpaces(trueLoc.end);
	                var afterEndLine = afterEnd ? afterEnd.line : lines.length;
	                var trailingGap = afterEndLine - trueLoc.end.line;
	                trailingSpace = Array(trailingGap + 1).join("\n");
	            } else {
	                trailingSpace = multiLine ? "\n\n" : "\n";
	            }
	        } else {
	            trailingSpace = "";
	        }
	
	        parts.push(
	            maxSpace(prevTrailingSpace, leadingSpace),
	            printed
	        );
	
	        if (notLast) {
	            prevTrailingSpace = trailingSpace;
	        } else if (trailingSpace) {
	            parts.push(trailingSpace);
	        }
	    });
	
	    return concat(parts);
	}
	
	function maxSpace(s1, s2) {
	    if (!s1 && !s2) {
	        return fromString("");
	    }
	
	    if (!s1) {
	        return fromString(s2);
	    }
	
	    if (!s2) {
	        return fromString(s1);
	    }
	
	    var spaceLines1 = fromString(s1);
	    var spaceLines2 = fromString(s2);
	
	    if (spaceLines2.length > spaceLines1.length) {
	        return spaceLines2;
	    }
	
	    return spaceLines1;
	}
	
	function printMethod(path, options, print) {
	    var node = path.getNode();
	    var kind = node.kind;
	    var parts = [];
	
	    if (node.type === "ObjectMethod" || node.type === "ClassMethod") {
	        node.value = node;
	    } else {
	        namedTypes.FunctionExpression.assert(node.value);
	    }
	
	    if (node.value.async) {
	        parts.push("async ");
	    }
	
	    if (!kind || kind === "init" || kind === "method" || kind === "constructor") {
	        if (node.value.generator) {
	            parts.push("*");
	        }
	    } else {
	        assert.ok(kind === "get" || kind === "set");
	        parts.push(kind, " ");
	    }
	
	    var key = path.call(print, "key");
	    if (node.computed) {
	        key = concat(["[", key, "]"]);
	    }
	
	    parts.push(
	        key,
	        path.call(print, "value", "typeParameters"),
	        "(",
	        path.call(function(valuePath) {
	            return printFunctionParams(valuePath, options, print);
	        }, "value"),
	        ")",
	        path.call(print, "value", "returnType"),
	        " ",
	        path.call(print, "value", "body")
	    );
	
	    return concat(parts);
	}
	
	function printArgumentsList(path, options, print) {
	    var printed = path.map(print, "arguments");
	    var trailingComma = util.isTrailingCommaEnabled(options, "parameters");
	
	    var joined = fromString(", ").join(printed);
	    if (joined.getLineLength(1) > options.wrapColumn) {
	        joined = fromString(",\n").join(printed);
	        return concat([
	            "(\n",
	            joined.indent(options.tabWidth),
	            trailingComma ? ",\n)" : "\n)"
	        ]);
	    }
	
	    return concat(["(", joined, ")"]);
	}
	
	function printFunctionParams(path, options, print) {
	    var fun = path.getValue();
	
	    namedTypes.Function.assert(fun);
	
	    var printed = path.map(print, "params");
	
	    if (fun.defaults) {
	        path.each(function(defExprPath) {
	            var i = defExprPath.getName();
	            var p = printed[i];
	            if (p && defExprPath.getValue()) {
	                printed[i] = concat([p, " = ", print(defExprPath)]);
	            }
	        }, "defaults");
	    }
	
	    if (fun.rest) {
	        printed.push(concat(["...", path.call(print, "rest")]));
	    }
	
	    var joined = fromString(", ").join(printed);
	    if (joined.length > 1 ||
	        joined.getLineLength(1) > options.wrapColumn) {
	        joined = fromString(",\n").join(printed);
	        if (util.isTrailingCommaEnabled(options, "parameters") &&
	            !fun.rest &&
	            fun.params[fun.params.length - 1].type !== 'RestElement') {
	            joined = concat([joined, ",\n"]);
	        } else {
	            joined = concat([joined, "\n"]);
	        }
	        return concat(["\n", joined.indent(options.tabWidth)]);
	    }
	
	    return joined;
	}
	
	function printObjectMethod(path, options, print) {
	    var objMethod = path.getValue();
	    var parts = [];
	
	    if (objMethod.async)
	        parts.push("async ");
	
	    if (objMethod.generator)
	        parts.push("*");
	
	    if (objMethod.method || objMethod.kind === "get" || objMethod.kind === "set") {
	        return printMethod(path, options, print);
	    }
	
	    var key = path.call(print, "key");
	    if (objMethod.computed) {
	        parts.push("[", key, "]");
	    } else {
	        parts.push(key);
	    }
	
	    parts.push(
	        "(",
	        printFunctionParams(path, options, print),
	        ")",
	        path.call(print, "returnType"),
	        " ",
	        path.call(print, "body")
	    );
	
	    return concat(parts);
	}
	
	function printExportDeclaration(path, options, print) {
	    var decl = path.getValue();
	    var parts = ["export "];
	    var shouldPrintSpaces = options.objectCurlySpacing;
	
	    namedTypes.Declaration.assert(decl);
	
	    if (decl["default"] ||
	        decl.type === "ExportDefaultDeclaration") {
	        parts.push("default ");
	    }
	
	    if (decl.declaration) {
	        parts.push(path.call(print, "declaration"));
	
	    } else if (decl.specifiers &&
	               decl.specifiers.length > 0) {
	
	        if (decl.specifiers.length === 1 &&
	            decl.specifiers[0].type === "ExportBatchSpecifier") {
	            parts.push("*");
	        } else {
	            parts.push(
	                shouldPrintSpaces ? "{ " : "{",
	                fromString(", ").join(path.map(print, "specifiers")),
	                shouldPrintSpaces ? " }" : "}"
	            );
	        }
	
	        if (decl.source) {
	            parts.push(" from ", path.call(print, "source"));
	        }
	    }
	
	    var lines = concat(parts);
	
	    if (lastNonSpaceCharacter(lines) !== ";" &&
	        ! (decl.declaration &&
	           (decl.declaration.type === "FunctionDeclaration" ||
	            decl.declaration.type === "ClassDeclaration"))) {
	        lines = concat([lines, ";"]);
	    }
	
	    return lines;
	}
	
	function printFlowDeclaration(path, parts) {
	    var parentExportDecl = util.getParentExportDeclaration(path);
	
	    if (parentExportDecl) {
	        assert.strictEqual(
	            parentExportDecl.type,
	            "DeclareExportDeclaration"
	        );
	    } else {
	        // If the parent node has type DeclareExportDeclaration, then it
	        // will be responsible for printing the "declare" token. Otherwise
	        // it needs to be printed with this non-exported declaration node.
	        parts.unshift("declare ");
	    }
	
	    return concat(parts);
	}
	
	function adjustClause(clause, options) {
	    if (clause.length > 1)
	        return concat([" ", clause]);
	
	    return concat([
	        "\n",
	        maybeAddSemicolon(clause).indent(options.tabWidth)
	    ]);
	}
	
	function lastNonSpaceCharacter(lines) {
	    var pos = lines.lastPos();
	    do {
	        var ch = lines.charAt(pos);
	        if (/\S/.test(ch))
	            return ch;
	    } while (lines.prevPos(pos));
	}
	
	function endsWithBrace(lines) {
	    return lastNonSpaceCharacter(lines) === "}";
	}
	
	function swapQuotes(str) {
	    return str.replace(/['"]/g, function(m) {
	        return m === '"' ? '\'' : '"';
	    });
	}
	
	function nodeStr(str, options) {
	    isString.assert(str);
	    switch (options.quote) {
	    case "auto":
	        var double = JSON.stringify(str);
	        var single = swapQuotes(JSON.stringify(swapQuotes(str)));
	        return double.length > single.length ? single : double;
	    case "single":
	        return swapQuotes(JSON.stringify(swapQuotes(str)));
	    case "double":
	    default:
	        return JSON.stringify(str);
	    }
	}
	
	function maybeAddSemicolon(lines) {
	    var eoc = lastNonSpaceCharacter(lines);
	    if (!eoc || "\n};".indexOf(eoc) < 0)
	        return concat([lines, ";"]);
	    return lines;
	}


/***/ },
/* 339 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _create = __webpack_require__(88);
	
	var _create2 = _interopRequireDefault(_create);
	
	exports.getDocblock = getDocblock;
	exports.getDoclets = getDoclets;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	/**
	 * Helper functions to work with docblock comments.
	 */
	
	var DOCLET_PATTERN = /^@(\w+)(?:$|\s((?:[^](?!^@\w))*))/gmi;
	
	function parseDocblock(str) {
	  var lines = str.split('\n');
	  for (var i = 0, l = lines.length; i < l; i++) {
	    lines[i] = lines[i].replace(/^\s*\*\s?/, '');
	  }
	  return lines.join('\n').trim();
	}
	
	var DOCBLOCK_HEADER = /^\*\s/;
	
	/**
	 * Given a path, this function returns the closest preceding docblock if it
	 * exists.
	 */
	function getDocblock(path) {
	  var comments = [];
	  if (path.node.leadingComments) {
	    comments = path.node.leadingComments.filter(function (comment) {
	      return comment.type === 'CommentBlock' && DOCBLOCK_HEADER.test(comment.value);
	    });
	  } else if (path.node.comments) {
	    comments = path.node.comments.filter(function (comment) {
	      return comment.leading && comment.type === 'CommentBlock' && DOCBLOCK_HEADER.test(comment.value);
	    });
	  }
	
	  if (comments.length > 0) {
	    return parseDocblock(comments[comments.length - 1].value);
	  }
	  return null;
	}
	
	/**
	 * Given a string, this functions returns an object with doclet names as keys
	 * and their "content" as values.
	 */
	function getDoclets(str) {
	  var doclets = (0, _create2.default)(null);
	  var match = DOCLET_PATTERN.exec(str);
	
	  for (; match; match = DOCLET_PATTERN.exec(str)) {
	    doclets[match[1]] = match[2] || true;
	  }
	
	  return doclets;
	}

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = componentMethodsHandler;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _getMemberValuePath = __webpack_require__(342);
	
	var _getMemberValuePath2 = _interopRequireDefault(_getMemberValuePath);
	
	var _getMethodDocumentation = __webpack_require__(358);
	
	var _getMethodDocumentation2 = _interopRequireDefault(_getMethodDocumentation);
	
	var _isReactComponentClass = __webpack_require__(364);
	
	var _isReactComponentClass2 = _interopRequireDefault(_isReactComponentClass);
	
	var _isReactComponentMethod = __webpack_require__(368);
	
	var _isReactComponentMethod2 = _interopRequireDefault(_isReactComponentMethod);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes; /*
	                                                * Copyright (c) 2015, Facebook, Inc.
	                                                * All rights reserved.
	                                                *
	                                                * This source code is licensed under the BSD-style license found in the
	                                                * LICENSE file in the root directory of this source tree. An additional grant
	                                                * of patent rights can be found in the PATENTS file in the same directory.
	                                                *
	                                                * 
	                                                */
	
	function getMethodsDoc(methodPaths) {
	  var methods = [];
	
	  methodPaths.forEach(function (methodPath) {
	    if ((0, _isReactComponentMethod2.default)(methodPath)) {
	      return;
	    }
	
	    methods.push((0, _getMethodDocumentation2.default)(methodPath));
	  });
	
	  return methods;
	}
	
	function isFunctionExpression(path) {
	  return types.FunctionExpression.check(path.get('value').node);
	}
	
	/**
	 * Extract all flow types for the methods of a react component. Doesn't
	 * return any react specific lifecycle methods.
	 */
	function componentMethodsHandler(documentation, path) {
	  // Extract all methods from the class or object.
	  var methodPaths = [];
	  if ((0, _isReactComponentClass2.default)(path)) {
	    methodPaths = path.get('body', 'body').filter(function (p) {
	      return types.MethodDefinition.check(p.node) && p.node.kind !== 'constructor';
	    });
	  } else if (types.ObjectExpression.check(path.node)) {
	    methodPaths = path.get('properties').filter(isFunctionExpression);
	
	    // Add the statics object properties.
	    var statics = (0, _getMemberValuePath2.default)(path, 'statics');
	    if (statics) {
	      statics.get('properties').each(function (p) {
	        if (isFunctionExpression(p)) {
	          p.node.static = true;
	          methodPaths.push(p);
	        }
	      });
	    }
	  }
	
	  var methods = getMethodsDoc(methodPaths);
	  documentation.set('methods', methods);
	}

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(343);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _LOOKUP_METHOD; /*
	                     * Copyright (c) 2015, Facebook, Inc.
	                     * All rights reserved.
	                     *
	                     * This source code is licensed under the BSD-style license found in the
	                     * LICENSE file in the root directory of this source tree. An additional grant
	                     * of patent rights can be found in the PATENTS file in the same directory.
	                     *
	                     * 
	                     *
	                     */
	
	exports.default = getMemberValuePath;
	
	var _getMemberExpressionValuePath = __webpack_require__(344);
	
	var _getMemberExpressionValuePath2 = _interopRequireDefault(_getMemberExpressionValuePath);
	
	var _getClassMemberValuePath = __webpack_require__(357);
	
	var _getClassMemberValuePath2 = _interopRequireDefault(_getClassMemberValuePath);
	
	var _getPropertyValuePath = __webpack_require__(349);
	
	var _getPropertyValuePath2 = _interopRequireDefault(_getPropertyValuePath);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes;
	
	
	var SYNONYMS = {
	  getDefaultProps: 'defaultProps',
	  defaultProps: 'getDefaultProps'
	};
	
	var LOOKUP_METHOD = (_LOOKUP_METHOD = {}, (0, _defineProperty3.default)(_LOOKUP_METHOD, types.ArrowFunctionExpression.name, _getMemberExpressionValuePath2.default), (0, _defineProperty3.default)(_LOOKUP_METHOD, types.FunctionExpression.name, _getMemberExpressionValuePath2.default), (0, _defineProperty3.default)(_LOOKUP_METHOD, types.FunctionDeclaration.name, _getMemberExpressionValuePath2.default), (0, _defineProperty3.default)(_LOOKUP_METHOD, types.VariableDeclaration.name, _getMemberExpressionValuePath2.default), (0, _defineProperty3.default)(_LOOKUP_METHOD, types.ObjectExpression.name, _getPropertyValuePath2.default), (0, _defineProperty3.default)(_LOOKUP_METHOD, types.ClassDeclaration.name, _getClassMemberValuePath2.default), (0, _defineProperty3.default)(_LOOKUP_METHOD, types.ClassExpression.name, _getClassMemberValuePath2.default), _LOOKUP_METHOD);
	
	function isSupportedDefinitionType(_ref) {
	  var node = _ref.node;
	
	  return types.ObjectExpression.check(node) || types.ClassDeclaration.check(node) || types.ClassExpression.check(node) ||
	
	  // potential stateless function component
	  types.VariableDeclaration.check(node) || types.ArrowFunctionExpression.check(node) || types.FunctionDeclaration.check(node) || types.FunctionExpression.check(node);
	}
	
	/**
	 * This is a helper method for handlers to make it easier to work either with
	 * an ObjectExpression from `React.createClass` class or with a class
	 * definition.
	 *
	 * Given a path and a name, this function will either return the path of the
	 * property value if the path is an ObjectExpression, or the value of the
	 * ClassProperty/MethodDefinition if it is a class definition (declaration or
	 * expression).
	 *
	 * It also normalizes the names so that e.g. `defaultProps` and
	 * `getDefaultProps` can be used interchangeably.
	 */
	function getMemberValuePath(componentDefinition, memberName) {
	  if (!isSupportedDefinitionType(componentDefinition)) {
	    throw new TypeError('Got unsupported definition type. Definition must be one of ' + 'ObjectExpression, ClassDeclaration, ClassExpression,' + 'VariableDeclaration, ArrowFunctionExpression, FunctionExpression, or ' + 'FunctionDeclaration. Got "' + componentDefinition.node.type + '"' + 'instead.');
	  }
	
	  var lookupMethod = LOOKUP_METHOD[componentDefinition.node.type];
	  var result = lookupMethod(componentDefinition, memberName);
	  if (!result && SYNONYMS[memberName]) {
	    return lookupMethod(componentDefinition, SYNONYMS[memberName]);
	  }
	  return result;
	}

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(33);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getMemberExpressionValuePath;
	
	var _getNameOrValue = __webpack_require__(345);
	
	var _getNameOrValue2 = _interopRequireDefault(_getNameOrValue);
	
	var _expressionTo = __webpack_require__(346);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes; /*
	                                                * Copyright (c) 2015, Facebook, Inc.
	                                                * All rights reserved.
	                                                *
	                                                * This source code is licensed under the BSD-style license found in the
	                                                * LICENSE file in the root directory of this source tree. An additional grant
	                                                * of patent rights can be found in the PATENTS file in the same directory.
	                                                *
	                                                * 
	                                                *
	                                                */
	
	function resolveName(path) {
	  if (types.VariableDeclaration.check(path.node)) {
	    var declarations = path.get('declarations');
	    if (declarations.value.length && declarations.value.length !== 1) {
	      throw new TypeError('Got unsupported VariableDeclaration. VariableDeclaration must only ' + 'have a single VariableDeclarator. Got ' + declarations.value.length + ' declarations.');
	    }
	    var value = declarations.get(0, 'id', 'name').value;
	    return value;
	  }
	
	  if (types.FunctionDeclaration.check(path.node)) {
	    return path.get('id', 'name').value;
	  }
	
	  if (types.FunctionExpression.check(path.node) || types.ArrowFunctionExpression.check(path.node)) {
	    if (!types.VariableDeclarator.check(path.parent.node)) {
	      return; // eslint-disable-line consistent-return
	    }
	
	    return path.parent.get('id', 'name').value;
	  }
	
	  throw new TypeError('Attempted to resolveName for an unsupported path. resolveName accepts a ' + 'VariableDeclaration, FunctionDeclaration, or FunctionExpression. Got "' + path.node.type + '".');
	}
	
	function getRoot(node) {
	  var root = node.parent;
	  while (root.parent) {
	    root = root.parent;
	  }
	  return root;
	}
	
	function getMemberExpressionValuePath(variableDefinition, memberName) {
	  var localName = resolveName(variableDefinition);
	  var program = getRoot(variableDefinition);
	
	  if (!localName) {
	    // likely an immediately exported and therefore nameless/anonymous node
	    // passed in
	    return;
	  }
	
	  var result;
	  _recast2.default.visit(program, {
	    visitAssignmentExpression: function visitAssignmentExpression(path) {
	      var memberPath = path.get('left');
	      if (!types.MemberExpression.check(memberPath.node)) {
	        return this.traverse(path);
	      }
	
	      if ((!memberPath.node.computed || types.Literal.check(memberPath.node.property)) && (0, _getNameOrValue2.default)(memberPath.get('property')) === memberName && (0, _expressionTo.String)(memberPath.get('object')) === localName) {
	        result = path.get('right');
	        return false;
	      }
	
	      this.traverse(memberPath);
	    }
	  });
	
	  return result; // eslint-disable-line consistent-return
	}

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getNameOrValue;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * If node is an Identifier, it returns its name. If it is a literal, it returns
	 * its value.
	 */
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	function getNameOrValue(path, raw) {
	  var node = path.node;
	  switch (node.type) {
	    case types.Identifier.name:
	      return node.name;
	    case types.Literal.name:
	      return raw ? node.raw : node.value;
	    default:
	      throw new TypeError('Argument must be an Identifier or a Literal');
	  }
	}

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Array = exports.String = undefined;
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	/*eslint no-loop-func: 0, no-use-before-define: 0*/
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Splits a MemberExpression or CallExpression into parts.
	 * E.g. foo.bar.baz becomes ['foo', 'bar', 'baz']
	 */
	
	function toArray(path) {
	  var parts = [path];
	  var result = [];
	
	  while (parts.length > 0) {
	    path = parts.shift();
	    var node = path.node;
	    if (types.CallExpression.check(node)) {
	      parts.push(path.get('callee'));
	      continue;
	    } else if (types.MemberExpression.check(node)) {
	      parts.push(path.get('object'));
	      if (node.computed) {
	        var resolvedPath = (0, _resolveToValue2.default)(path.get('property'));
	        if (resolvedPath !== undefined) {
	          result = result.concat(toArray(resolvedPath));
	        } else {
	          result.push('<computed>');
	        }
	      } else {
	        result.push(node.property.name);
	      }
	      continue;
	    } else if (types.Identifier.check(node)) {
	      result.push(node.name);
	      continue;
	    } else if (types.Literal.check(node)) {
	      result.push(node.raw);
	      continue;
	    } else if (types.ThisExpression.check(node)) {
	      result.push('this');
	      continue;
	    } else if (types.ObjectExpression.check(node)) {
	      var properties = path.get('properties').map(function (property) {
	        return toString(property.get('key')) + ': ' + toString(property.get('value'));
	      });
	      result.push('{' + properties.join(', ') + '}');
	      continue;
	    } else if (types.ArrayExpression.check(node)) {
	      result.push('[' + path.get('elements').map(toString).join(', ') + ']');
	      continue;
	    }
	  }
	
	  return result.reverse();
	}
	
	/**
	 * Creates a string representation of a member expression.
	 */
	function toString(path) {
	  return toArray(path).join('.');
	}
	
	exports.String = toString;
	exports.Array = toArray;

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = resolveToValue;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _getMemberExpressionRoot = __webpack_require__(348);
	
	var _getMemberExpressionRoot2 = _interopRequireDefault(_getMemberExpressionRoot);
	
	var _getPropertyValuePath = __webpack_require__(349);
	
	var _getPropertyValuePath2 = _interopRequireDefault(_getPropertyValuePath);
	
	var _expressionTo = __webpack_require__(346);
	
	var _traverse = __webpack_require__(351);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _recast$types = _recast2.default.types; /*
	                                             * Copyright (c) 2015, Facebook, Inc.
	                                             * All rights reserved.
	                                             *
	                                             * This source code is licensed under the BSD-style license found in the
	                                             * LICENSE file in the root directory of this source tree. An additional grant
	                                             * of patent rights can be found in the PATENTS file in the same directory.
	                                             *
	                                             * 
	                                             *
	                                             */
	
	var NodePath = _recast$types.NodePath;
	var builders = _recast$types.builders;
	var types = _recast$types.namedTypes;
	
	
	function buildMemberExpressionFromPattern(path) {
	  var node = path.node;
	  if (types.Property.check(node)) {
	    var objPath = buildMemberExpressionFromPattern(path.parent);
	    if (objPath) {
	      return new NodePath(builders.memberExpression(objPath.node, node.key, types.Literal.check(node.key)), objPath);
	    }
	  } else if (types.ObjectPattern.check(node)) {
	    return buildMemberExpressionFromPattern(path.parent);
	  } else if (types.VariableDeclarator.check(node)) {
	    return path.get('init');
	  }
	  return null;
	}
	
	function findScopePath(paths, path) {
	  if (paths.length < 1) {
	    return;
	  }
	  var resultPath = paths[0];
	  var parentPath = resultPath.parent;
	
	  if (types.ImportDefaultSpecifier.check(parentPath.node) || types.ImportSpecifier.check(parentPath.node) || types.ImportNamespaceSpecifier.check(parentPath.node) || types.VariableDeclarator.check(parentPath.node) || types.TypeAlias.check(parentPath.node)) {
	    resultPath = parentPath;
	  } else if (types.Property.check(parentPath.node)) {
	    // must be inside a pattern
	    var memberExpressionPath = buildMemberExpressionFromPattern(parentPath);
	    if (memberExpressionPath) {
	      return memberExpressionPath;
	    }
	  }
	
	  if (resultPath.node !== path.node) {
	    return resolveToValue(resultPath);
	  }
	}
	
	/**
	 * Tries to find the last value assigned to `name` in the scope created by
	 * `scope`. We are not descending into any statements (blocks).
	 */
	function findLastAssignedValue(scope, name) {
	  var results = [];
	
	  (0, _traverse.traverseShallow)(scope.path.node, {
	    visitAssignmentExpression: function visitAssignmentExpression(path) {
	      var node = path.node;
	      // Skip anything that is not an assignment to a variable with the
	      // passed name.
	      if (!types.Identifier.check(node.left) || node.left.name !== name || node.operator !== '=') {
	        return this.traverse(path);
	      }
	      results.push(path.get('right'));
	      return false;
	    }
	  });
	
	  if (results.length === 0) {
	    return null;
	  }
	  return resolveToValue(results.pop());
	}
	
	/**
	 * If the path is an identifier, it is resolved in the scope chain.
	 * If it is an assignment expression, it resolves to the right hand side.
	 * If it is a member expression it is resolved to it's initialization value.
	 *
	 * Else the path itself is returned.
	 */
	function resolveToValue(path) {
	  var node = path.node;
	  if (types.VariableDeclarator.check(node)) {
	    if (node.init) {
	      return resolveToValue(path.get('init'));
	    }
	  } else if (types.MemberExpression.check(node)) {
	    var resolved = resolveToValue((0, _getMemberExpressionRoot2.default)(path));
	    if (types.ObjectExpression.check(resolved.node)) {
	      var memberParts = (0, _expressionTo.Array)(path).slice(1);
	      var init = memberParts.reduce(function (propertyPath, propertyName) {
	        propertyPath = resolveToValue(propertyPath);
	        return types.ObjectExpression.check(propertyPath.node) ? (0, _getPropertyValuePath2.default)(propertyPath, propertyName) : null;
	      }, resolved);
	      return init ? resolveToValue(init) : path;
	    }
	  } else if (types.ImportDefaultSpecifier.check(node) || types.ImportNamespaceSpecifier.check(node) || types.ImportSpecifier.check(node)) {
	    return path.parentPath;
	  } else if (types.AssignmentExpression.check(node)) {
	    if (node.operator === '=') {
	      return resolveToValue(path.get('right'));
	    }
	  } else if (types.Identifier.check(node)) {
	    if ((types.ClassDeclaration.check(path.parentPath.node) || types.ClassExpression.check(path.parentPath.node) || types.Function.check(path.parentPath.node)) && path.parentPath.get('id') === path) {
	      return path.parentPath;
	    }
	
	    var scope = path.scope.lookup(node.name);
	    var resolvedPath = void 0;
	    if (scope) {
	      // The variable may be assigned a different value after initialization.
	      // We are first trying to find all assignments to the variable in the
	      // block where it is defined (i.e. we are not traversing into statements)
	      resolvedPath = findLastAssignedValue(scope, node.name);
	      if (!resolvedPath) {
	        var bindings = scope.getBindings()[node.name];
	        resolvedPath = findScopePath(bindings, path);
	      }
	    } else {
	      scope = path.scope.lookupType(node.name);
	      if (scope) {
	        var _types = scope.getTypes()[node.name];
	        resolvedPath = findScopePath(_types, path);
	      }
	    }
	    return resolvedPath || path;
	  }
	
	  return path;
	}

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getMemberExpressionRoot;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Returns the path to the first part of the MemberExpression. I.e. given a
	 * path representing
	 *
	 * foo.bar.baz
	 *
	 * it returns the path of/to `foo`.
	 */
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function getMemberExpressionRoot(memberExpressionPath) {
	  do {
	    memberExpressionPath = memberExpressionPath.get('object');
	  } while (types.MemberExpression.check(memberExpressionPath.node));
	  return memberExpressionPath;
	}

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getPropertyValuePath;
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Given an ObjectExpression, this function returns the path of the value of
	 * the property with name `propertyName`.
	 */
	
	function getPropertyValuePath(path, propertyName) {
	  types.ObjectExpression.assert(path.node);
	
	  return path.get('properties').filter(function (propertyPath) {
	    return (0, _getPropertyName2.default)(propertyPath) === propertyName;
	  }).map(function (propertyPath) {
	    return propertyPath.get('value');
	  })[0];
	}

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getPropertyName;
	
	var _getNameOrValue = __webpack_require__(345);
	
	var _getNameOrValue2 = _interopRequireDefault(_getNameOrValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * In an ObjectExpression, the name of a property can either be an identifier
	 * or a literal (or dynamic, but we don't support those). This function simply
	 * returns the value of the literal or name of the identifier.
	 */
	function getPropertyName(propertyPath) {
	  if (propertyPath.node.computed) {
	    throw new TypeError('Propery name must be an Identifier or a Literal');
	  }
	
	  return (0, _getNameOrValue2.default)(propertyPath.get('key'), false);
	} /*
	   * Copyright (c) 2015, Facebook, Inc.
	   * All rights reserved.
	   *
	   * This source code is licensed under the BSD-style license found in the
	   * LICENSE file in the root directory of this source tree. An additional grant
	   * of patent rights can be found in the PATENTS file in the same directory.
	   *
	   * 
	   *
	   */

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(352);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	exports.traverseShallow = traverseShallow;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A helper function that doesn't traverse into nested blocks / statements by
	 * default.
	 */
	function traverseShallow(ast, visitors) {
	  _recast2.default.visit(ast, (0, _extends3.default)({}, defaultVisitors, visitors));
	}
	
	var ignore = function ignore() {
	  return false;
	};
	var defaultVisitors = {
	  visitFunctionDeclaration: ignore,
	  visitFunctionExpression: ignore,
	  visitClassDeclaration: ignore,
	  visitClassExpression: ignore,
	  visitIfStatement: ignore,
	  visitWithStatement: ignore,
	  visitSwitchStatement: ignore,
	  visitWhileStatement: ignore,
	  visitDoWhileStatement: ignore,
	  visitForStatement: ignore,
	  visitForInStatement: ignore,
	  visitForOfStatement: ignore,
	  visitExportDeclaration: ignore,
	  visitExportNamedDeclaration: ignore,
	  visitExportDefaultDeclaration: ignore,
	  visitConditionalExpression: ignore
	};

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _assign = __webpack_require__(353);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(354), __esModule: true };

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(355);
	module.exports = __webpack_require__(18).Object.assign;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(17);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(356)});

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(50)
	  , gOPS     = __webpack_require__(74)
	  , pIE      = __webpack_require__(75)
	  , toObject = __webpack_require__(8)
	  , IObject  = __webpack_require__(53)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(27)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getClassMemberValuePath;
	
	var _getNameOrValue = __webpack_require__(345);
	
	var _getNameOrValue2 = _interopRequireDefault(_getNameOrValue);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var types = _recast2.default.types.namedTypes;
	function getClassMemberValuePath(classDefinition, memberName) {
	  // Fortunately it seems like that all members of a class body, be it
	  // ClassProperty or MethodDefinition, have the same structure: They have a
	  // "key" and a "value"
	  return classDefinition.get('body', 'body').filter(function (memberPath) {
	    return (!memberPath.node.computed || types.Literal.check(memberPath.node.key)) && (0, _getNameOrValue2.default)(memberPath.get('key')) === memberName && memberPath.node.kind !== 'set';
	  }).map(function (memberPath) {
	    return memberPath.get('value');
	  })[0];
	}

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getMethodDocumentation;
	
	var _docblock = __webpack_require__(340);
	
	var _getFlowType = __webpack_require__(359);
	
	var _getFlowType2 = _interopRequireDefault(_getFlowType);
	
	var _getParameterName = __webpack_require__(363);
	
	var _getParameterName2 = _interopRequireDefault(_getParameterName);
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	var _getTypeAnnotation = __webpack_require__(361);
	
	var _getTypeAnnotation2 = _interopRequireDefault(_getTypeAnnotation);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	
	function getMethodParamsDoc(methodPath) {
	  var params = [];
	  var functionExpression = methodPath.get('value');
	
	  // Extract param flow types.
	  functionExpression.get('params').each(function (paramPath) {
	    var type = null;
	    var typePath = (0, _getTypeAnnotation2.default)(paramPath);
	    if (typePath) {
	      type = (0, _getFlowType2.default)(typePath);
	      if (types.GenericTypeAnnotation.check(typePath.node)) {
	        type.alias = typePath.node.id.name;
	      }
	    }
	
	    var param = {
	      name: (0, _getParameterName2.default)(paramPath),
	      optional: paramPath.node.optional,
	      type: type
	    };
	
	    params.push(param);
	  });
	
	  return params;
	}
	
	// Extract flow return type.
	function getMethodReturnDoc(methodPath) {
	  var functionExpression = methodPath.get('value');
	
	  if (functionExpression.node.returnType) {
	    var returnType = (0, _getTypeAnnotation2.default)(functionExpression.get('returnType'));
	    if (returnType) {
	      return { type: (0, _getFlowType2.default)(returnType) };
	    }
	  }
	
	  return null;
	}
	
	function getMethodModifiers(methodPath) {
	  var modifiers = [];
	
	  if (methodPath.node.static) {
	    modifiers.push('static');
	  }
	
	  var functionExpression = methodPath.get('value').node;
	  if (functionExpression.generator) {
	    modifiers.push('generator');
	  }
	  if (functionExpression.async) {
	    modifiers.push('async');
	  }
	
	  return modifiers;
	}
	
	function getMethodDocumentation(methodPath) {
	  var name = (0, _getPropertyName2.default)(methodPath);
	  var docblock = (0, _docblock.getDocblock)(methodPath);
	
	  return {
	    name: name,
	    docblock: docblock,
	    modifiers: getMethodModifiers(methodPath),
	    params: getMethodParamsDoc(methodPath),
	    returns: getMethodReturnDoc(methodPath)
	  };
	}

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(352);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	exports.default = getFlowType;
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	var _printValue = __webpack_require__(360);
	
	var _printValue2 = _interopRequireDefault(_printValue);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _getTypeAnnotation = __webpack_require__(361);
	
	var _getTypeAnnotation2 = _interopRequireDefault(_getTypeAnnotation);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	var _isUnreachableFlowType = __webpack_require__(362);
	
	var _isUnreachableFlowType2 = _interopRequireDefault(_isUnreachableFlowType);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	/* eslint no-use-before-define: 0 */
	
	var types = _recast2.default.types.namedTypes;
	
	
	var flowTypes = {
	  AnyTypeAnnotation: 'any',
	  BooleanTypeAnnotation: 'boolean',
	  MixedTypeAnnotation: 'mixed',
	  NumberTypeAnnotation: 'number',
	  StringTypeAnnotation: 'string',
	  VoidTypeAnnotation: 'void'
	};
	
	var flowLiteralTypes = {
	  BooleanLiteralTypeAnnotation: 1,
	  NumberLiteralTypeAnnotation: 1,
	  StringLiteralTypeAnnotation: 1
	};
	
	var namedTypes = {
	  GenericTypeAnnotation: handleGenericTypeAnnotation,
	  ObjectTypeAnnotation: handleObjectTypeAnnotation,
	  UnionTypeAnnotation: handleUnionTypeAnnotation,
	  NullableTypeAnnotation: handleNullableTypeAnnotation,
	  FunctionTypeAnnotation: handleFunctionTypeAnnotation,
	  IntersectionTypeAnnotation: handleIntersectionTypeAnnotation,
	  TupleTypeAnnotation: handleTupleTypeAnnotation
	};
	
	function getFlowTypeWithRequirements(path) {
	  var type = getFlowType(path);
	
	  type.required = !path.parentPath.node.optional;
	
	  return type;
	}
	
	function handleGenericTypeAnnotation(path) {
	  var type = { name: path.node.id.name };
	
	  if (path.node.typeParameters) {
	    var params = path.get('typeParameters').get('params');
	
	    type = (0, _extends3.default)({}, type, {
	      elements: params.map(function (param) {
	        return getFlowType(param);
	      }),
	      raw: (0, _printValue2.default)(path)
	    });
	  } else {
	    var resolvedPath = (0, _resolveToValue2.default)(path.get('id'));
	
	    if (!(0, _isUnreachableFlowType2.default)(resolvedPath)) {
	      type = getFlowType(resolvedPath.get('right'));
	    }
	  }
	
	  return type;
	}
	
	function handleObjectTypeAnnotation(path) {
	  var type = {
	    name: 'signature',
	    type: 'object',
	    raw: (0, _printValue2.default)(path),
	    signature: { properties: [] }
	  };
	
	  path.get('callProperties').each(function (param) {
	    type.signature.constructor = getFlowType(param.get('value'));
	  });
	
	  path.get('indexers').each(function (param) {
	    type.signature.properties.push({
	      key: getFlowType(param.get('key')),
	      value: getFlowTypeWithRequirements(param.get('value'))
	    });
	  });
	
	  path.get('properties').each(function (param) {
	    type.signature.properties.push({
	      key: (0, _getPropertyName2.default)(param),
	      value: getFlowTypeWithRequirements(param.get('value'))
	    });
	  });
	
	  return type;
	}
	
	function handleUnionTypeAnnotation(path) {
	  return {
	    name: 'union',
	    raw: (0, _printValue2.default)(path),
	    elements: path.get('types').map(function (subType) {
	      return getFlowType(subType);
	    })
	  };
	}
	
	function handleIntersectionTypeAnnotation(path) {
	  return {
	    name: 'intersection',
	    raw: (0, _printValue2.default)(path),
	    elements: path.get('types').map(function (subType) {
	      return getFlowType(subType);
	    })
	  };
	}
	
	function handleNullableTypeAnnotation(path) {
	  var typeAnnotation = (0, _getTypeAnnotation2.default)(path);
	
	  if (!typeAnnotation) return null;
	
	  var type = getFlowType(typeAnnotation);
	  type.nullable = true;
	
	  return type;
	}
	
	function handleFunctionTypeAnnotation(path) {
	  var type = {
	    name: 'signature',
	    type: 'function',
	    raw: (0, _printValue2.default)(path),
	    signature: {
	      arguments: [],
	      return: getFlowType(path.get('returnType'))
	    }
	  };
	
	  path.get('params').each(function (param) {
	    var typeAnnotation = (0, _getTypeAnnotation2.default)(param);
	    if (!typeAnnotation) return null;
	
	    type.signature.arguments.push({
	      name: (0, _getPropertyName2.default)(param.get('name')),
	      type: getFlowType(typeAnnotation)
	    });
	  });
	
	  return type;
	}
	
	function handleTupleTypeAnnotation(path) {
	  var type = { name: 'tuple', raw: (0, _printValue2.default)(path), elements: [] };
	
	  path.get('types').each(function (param) {
	    type.elements.push(getFlowType(param));
	  });
	
	  return type;
	}
	
	/**
	 * Tries to identify the flow type by inspecting the path for known
	 * flow type names. This method doesn't check whether the found type is actually
	 * existing. It simply assumes that a match is always valid.
	 *
	 * If there is no match, "unknown" is returned.
	 */
	function getFlowType(path) {
	  var node = path.node;
	  var type = void 0;
	
	  if (types.Type.check(node)) {
	    if (node.type in flowTypes) {
	      type = { name: flowTypes[node.type] };
	    } else if (node.type in flowLiteralTypes) {
	      type = { name: 'literal', value: node.raw || '' + node.value };
	    } else if (node.type in namedTypes) {
	      type = namedTypes[node.type](path);
	    }
	  }
	
	  if (!type) {
	    type = { name: 'unknown' };
	  }
	
	  return type;
	}

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = printValue;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Prints the given path without leading or trailing comments.
	 */
	function printValue(path) {
	  if (path.node.comments) {
	    path.node.comments.length = 0;
	  }
	  return _recast2.default.print(path).code;
	} /*
	   * Copyright (c) 2015, Facebook, Inc.
	   * All rights reserved.
	   *
	   * This source code is licensed under the BSD-style license found in the
	   * LICENSE file in the root directory of this source tree. An additional grant
	   * of patent rights can be found in the PATENTS file in the same directory.
	   *
	   * 
	   *
	   */

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getTypeAnnotation;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes; /*
	                                                * Copyright (c) 2015, Facebook, Inc.
	                                                * All rights reserved.
	                                                *
	                                                * This source code is licensed under the BSD-style license found in the
	                                                * LICENSE file in the root directory of this source tree. An additional grant
	                                                * of patent rights can be found in the PATENTS file in the same directory.
	                                                *
	                                                * 
	                                                *
	                                                */
	
	function hasTypeAnnotation(path) {
	  return !!path.node.typeAnnotation;
	}
	
	/**
	 * Gets the most inner valuable TypeAnnotation from path. If no TypeAnnotation
	 * can be found nothing is returned
	 */
	function getTypeAnnotation(path) {
	  if (!hasTypeAnnotation(path)) return null;
	
	  var resultPath = path;
	  do {
	    resultPath = resultPath.get('typeAnnotation');
	  } while (hasTypeAnnotation(resultPath) && !types.Type.check(resultPath.node));
	
	  return resultPath;
	}

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Returns true of the path is an unreachable TypePath
	 */
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	exports.default = function (path) {
	  return !path || types.Identifier.check(path.node) || types.ImportDeclaration.check(path.node) || types.CallExpression.check(path.node);
	};

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getParameterName;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _printValue = __webpack_require__(360);
	
	var _printValue2 = _interopRequireDefault(_printValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var types = _recast2.default.types.namedTypes;
	function getParameterName(parameterPath) {
	  switch (parameterPath.node.type) {
	    case types.Identifier.name:
	      return parameterPath.node.name;
	    case types.AssignmentPattern.name:
	      return getParameterName(parameterPath.get('left'));
	    case types.ObjectPattern.name:
	      return (0, _printValue2.default)(parameterPath);
	    case types.RestElement.name:
	      return '...' + getParameterName(parameterPath.get('argument'));
	    default:
	      throw new TypeError('Parameter name must be an Identifier, an AssignmentPattern an ' + ('ObjectPattern or a RestElement, got ' + parameterPath.node.type));
	  }
	}

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isReactComponentClass;
	
	var _isReactModuleName = __webpack_require__(365);
	
	var _isReactModuleName2 = _interopRequireDefault(_isReactModuleName);
	
	var _match = __webpack_require__(366);
	
	var _match2 = _interopRequireDefault(_match);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToModule = __webpack_require__(367);
	
	var _resolveToModule2 = _interopRequireDefault(_resolveToModule);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes; /*
	                                                * Copyright (c) 2015, Facebook, Inc.
	                                                * All rights reserved.
	                                                *
	                                                * This source code is licensed under the BSD-style license found in the
	                                                * LICENSE file in the root directory of this source tree. An additional grant
	                                                * of patent rights can be found in the PATENTS file in the same directory.
	                                                *
	                                                * 
	                                                */
	
	function isRenderMethod(node) {
	  return types.MethodDefinition.check(node) && !node.computed && !node.static && (node.kind === '' || node.kind === 'method') && node.key.name === 'render';
	}
	
	/**
	 * Returns `true` of the path represents a class definition which either extends
	 * `React.Component` or implements a `render()` method.
	 */
	function isReactComponentClass(path) {
	  var node = path.node;
	  if (!types.ClassDeclaration.check(node) && !types.ClassExpression.check(node)) {
	    return false;
	  }
	
	  // render method
	  if (node.body.body.some(isRenderMethod)) {
	    return true;
	  }
	
	  // extends ReactComponent?
	  if (!node.superClass) {
	    return false;
	  }
	  var superClass = (0, _resolveToValue2.default)(path.get('superClass'));
	  if (!(0, _match2.default)(superClass.node, { property: { name: 'Component' } })) {
	    return false;
	  }
	  var module = (0, _resolveToModule2.default)(superClass);
	  return !!module && (0, _isReactModuleName2.default)(module);
	}

/***/ },
/* 365 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isReactModuleName;
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var reactModules = ['react', 'react/addons', 'react-native'];
	
	/**
	 * Takes a module name (string) and returns true if it refers to a root react
	 * module name.
	 */
	function isReactModuleName(moduleName) {
	  return reactModules.some(function (reactModuleName) {
	    return reactModuleName === moduleName.toLowerCase();
	  });
	}

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof2 = __webpack_require__(37);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	exports.default = match;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	/**
	 * This function takes an AST node and matches it against "pattern". Pattern
	 * is simply a (nested) object literal and it is traversed to see whether node
	 * contains those (nested) properties with the provided values.
	 */
	function match(node, pattern) {
	  if (!node) {
	    return false;
	  }
	  for (var prop in pattern) {
	    if (!node[prop]) {
	      return false;
	    }
	    if (pattern[prop] && (0, _typeof3.default)(pattern[prop]) === 'object') {
	      if (!match(node[prop], pattern[prop])) {
	        return false;
	      }
	    } else if (node[prop] !== pattern[prop]) {
	      return false;
	    }
	  }
	  return true;
	}

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = resolveToModule;
	
	var _match = __webpack_require__(366);
	
	var _match2 = _interopRequireDefault(_match);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Given a path (e.g. call expression, member expression or identifier),
	 * this function tries to find the name of module from which the "root value"
	 * was imported.
	 */
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	function resolveToModule(path) {
	  var node = path.node;
	  switch (node.type) {
	    case types.VariableDeclarator.name:
	      if (node.init) {
	        return resolveToModule(path.get('init'));
	      }
	      break;
	    case types.CallExpression.name:
	      if ((0, _match2.default)(node.callee, { type: types.Identifier.name, name: 'require' })) {
	        return node.arguments[0].value;
	      }
	      return resolveToModule(path.get('callee'));
	    case types.Identifier.name:
	      var valuePath = (0, _resolveToValue2.default)(path);
	      if (valuePath !== path) {
	        return resolveToModule(valuePath);
	      }
	      break;
	    case types.ImportDeclaration.name:
	      return node.source.value;
	    case types.MemberExpression.name:
	      while (path && types.MemberExpression.check(path.node)) {
	        path = path.get('object');
	      }
	      if (path) {
	        return resolveToModule(path);
	      }
	  }
	}

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (methodPath) {
	  if (!types.MethodDefinition.check(methodPath.node) && !types.Property.check(methodPath.node)) {
	    return false;
	  }
	
	  var name = (0, _getPropertyName2.default)(methodPath);
	  return componentMethods.indexOf(name) !== -1;
	};
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	
	var componentMethods = ['componentDidMount', 'componentDidReceiveProps', 'componentDidUpdate', 'componentWillMount', 'componentWillReceiveProps', 'componentWillUnmount', 'componentWillUpdate', 'getChildContext', 'getDefaultProps', 'getInitialState', 'render', 'shouldComponentUpdate'];
	
	/**
	 * Returns if the method path is a Component method.
	 */

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(352);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	exports.default = componentMethodsJsDocHandler;
	
	var _parseJsDoc = __webpack_require__(370);
	
	var _parseJsDoc2 = _interopRequireDefault(_parseJsDoc);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Merges two objects ignoring null/undefined.
	function merge(obj1, obj2) {
	  if (obj1 == null && obj2 == null) {
	    return null;
	  }
	  var merged = (0, _extends3.default)({}, obj1);
	  for (var prop in obj2) {
	    if (obj2[prop] != null) {
	      merged[prop] = obj2[prop];
	    }
	  }
	  return merged;
	}
	/**
	 * Extract info from the methods jsdoc blocks. Must be run after
	 * flowComponentMethodsHandler.
	 */
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function componentMethodsJsDocHandler(documentation) {
	  var methods = documentation.get('methods');
	  if (!methods) {
	    return;
	  }
	
	  methods = methods.map(function (method) {
	    if (!method.docblock) {
	      return method;
	    }
	
	    var jsDoc = (0, _parseJsDoc2.default)(method.docblock);
	
	    var returns = merge(jsDoc.returns, method.returns);
	    var params = method.params.map(function (param) {
	      var jsDocParam = jsDoc.params.find(function (p) {
	        return p.name === param.name;
	      });
	      return merge(jsDocParam, param);
	    });
	
	    return (0, _extends3.default)({}, method, {
	      description: jsDoc.description || null,
	      returns: returns,
	      params: params
	    });
	  });
	
	  documentation.set('methods', methods);
	}

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = parseJsDoc;
	
	var _doctrine = __webpack_require__(371);
	
	var _doctrine2 = _interopRequireDefault(_doctrine);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function getType(tag) {
	  if (!tag.type) {
	    return null;
	  } else if (tag.type.type === 'UnionType') {
	    // union type
	    return { name: 'union', value: tag.type.elements.map(function (element) {
	        return element.name;
	      }) };
	  } else if (tag.type.type === 'AllLiteral') {
	    // return {*}
	    return { name: 'mixed' };
	  }
	  return { name: tag.type.name ? tag.type.name : tag.type.expression.name };
	} /*
	   * Copyright (c) 2015, Facebook, Inc.
	   * All rights reserved.
	   *
	   * This source code is licensed under the BSD-style license found in the
	   * LICENSE file in the root directory of this source tree. An additional grant
	   * of patent rights can be found in the PATENTS file in the same directory.
	   *
	   * 
	   */
	
	function getOptional(tag) {
	  if (tag.type && tag.type.type && tag.type.type === 'OptionalType') {
	    return true;
	  }
	  return;
	}
	
	// Add jsdoc @return description.
	function getReturnsJsDoc(jsDoc) {
	  var returnTag = jsDoc.tags.find(function (tag) {
	    return tag.title === 'return' || tag.title === 'returns';
	  });
	  if (returnTag) {
	    return {
	      description: returnTag.description,
	      type: getType(returnTag)
	    };
	  }
	  return null;
	}
	
	// Add jsdoc @param descriptions.
	function getParamsJsDoc(jsDoc) {
	  if (!jsDoc.tags) {
	    return [];
	  }
	  return jsDoc.tags.filter(function (tag) {
	    return tag.title === 'param';
	  }).map(function (tag) {
	    return {
	      name: tag.name,
	      description: tag.description,
	      type: getType(tag),
	      optional: getOptional(tag)
	    };
	  });
	}
	
	function parseJsDoc(docblock) {
	  var jsDoc = _doctrine2.default.parse(docblock);
	
	  return {
	    description: jsDoc.description || null,
	    params: getParamsJsDoc(jsDoc),
	    returns: getReturnsJsDoc(jsDoc)
	  };
	}

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * @fileoverview Main Doctrine object
	 * @author Yusuke Suzuki <utatane.tea@gmail.com>
	 * @author Dan Tao <daniel.tao@gmail.com>
	 * @author Andrew Eisenberg <andrew@eisenberg.as>
	 */
	
	(function () {
	    'use strict';
	
	    var typed,
	        utility,
	        isArray,
	        jsdoc,
	        esutils,
	        hasOwnProperty;
	
	    esutils = __webpack_require__(372);
	    isArray = __webpack_require__(376);
	    typed = __webpack_require__(377);
	    utility = __webpack_require__(378);
	
	    function sliceSource(source, index, last) {
	        return source.slice(index, last);
	    }
	
	    hasOwnProperty = (function () {
	        var func = Object.prototype.hasOwnProperty;
	        return function hasOwnProperty(obj, name) {
	            return func.call(obj, name);
	        };
	    }());
	
	    function shallowCopy(obj) {
	        var ret = {}, key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                ret[key] = obj[key];
	            }
	        }
	        return ret;
	    }
	
	    function isASCIIAlphanumeric(ch) {
	        return (ch >= 0x61  /* 'a' */ && ch <= 0x7A  /* 'z' */) ||
	            (ch >= 0x41  /* 'A' */ && ch <= 0x5A  /* 'Z' */) ||
	            (ch >= 0x30  /* '0' */ && ch <= 0x39  /* '9' */);
	    }
	
	    function isParamTitle(title) {
	        return title === 'param' || title === 'argument' || title === 'arg';
	    }
	
	    function isReturnTitle(title) {
	        return title === 'return' || title === 'returns';
	    }
	
	    function isProperty(title) {
	        return title === 'property' || title === 'prop';
	    }
	
	    function isNameParameterRequired(title) {
	        return isParamTitle(title) || isProperty(title) ||
	            title === 'alias' || title === 'this' || title === 'mixes' || title === 'requires';
	    }
	
	    function isAllowedName(title) {
	        return isNameParameterRequired(title) || title === 'const' || title === 'constant';
	    }
	
	    function isAllowedNested(title) {
	        return isProperty(title) || isParamTitle(title);
	    }
	
	    function isAllowedOptional(title) {
	        return isProperty(title) || isParamTitle(title);
	    }
	
	    function isTypeParameterRequired(title) {
	        return isParamTitle(title) || isReturnTitle(title) ||
	            title === 'define' || title === 'enum' ||
	            title === 'implements' || title === 'this' ||
	            title === 'type' || title === 'typedef' || isProperty(title);
	    }
	
	    // Consider deprecation instead using 'isTypeParameterRequired' and 'Rules' declaration to pick when a type is optional/required
	    // This would require changes to 'parseType'
	    function isAllowedType(title) {
	        return isTypeParameterRequired(title) || title === 'throws' || title === 'const' || title === 'constant' ||
	            title === 'namespace' || title === 'member' || title === 'var' || title === 'module' ||
	            title === 'constructor' || title === 'class' || title === 'extends' || title === 'augments' ||
	            title === 'public' || title === 'private' || title === 'protected';
	    }
	
	    function trim(str) {
	        return str.replace(/^\s+/, '').replace(/\s+$/, '');
	    }
	
	    function unwrapComment(doc) {
	        // JSDoc comment is following form
	        //   /**
	        //    * .......
	        //    */
	        // remove /**, */ and *
	        var BEFORE_STAR = 0,
	            STAR = 1,
	            AFTER_STAR = 2,
	            index,
	            len,
	            mode,
	            result,
	            ch;
	
	        doc = doc.replace(/^\/\*\*?/, '').replace(/\*\/$/, '');
	        index = 0;
	        len = doc.length;
	        mode = BEFORE_STAR;
	        result = '';
	
	        while (index < len) {
	            ch = doc.charCodeAt(index);
	            switch (mode) {
	            case BEFORE_STAR:
	                if (esutils.code.isLineTerminator(ch)) {
	                    result += String.fromCharCode(ch);
	                } else if (ch === 0x2A  /* '*' */) {
	                    mode = STAR;
	                } else if (!esutils.code.isWhiteSpace(ch)) {
	                    result += String.fromCharCode(ch);
	                    mode = AFTER_STAR;
	                }
	                break;
	
	            case STAR:
	                if (!esutils.code.isWhiteSpace(ch)) {
	                    result += String.fromCharCode(ch);
	                }
	                mode = esutils.code.isLineTerminator(ch) ? BEFORE_STAR : AFTER_STAR;
	                break;
	
	            case AFTER_STAR:
	                result += String.fromCharCode(ch);
	                if (esutils.code.isLineTerminator(ch)) {
	                    mode = BEFORE_STAR;
	                }
	                break;
	            }
	            index += 1;
	        }
	
	        return result.replace(/\s+$/, '');
	    }
	
	    // JSDoc Tag Parser
	
	    (function (exports) {
	        var Rules,
	            index,
	            lineNumber,
	            length,
	            source,
	            recoverable,
	            sloppy,
	            strict;
	
	        function advance() {
	            var ch = source.charCodeAt(index);
	            index += 1;
	            if (esutils.code.isLineTerminator(ch) && !(ch === 0x0D  /* '\r' */ && source.charCodeAt(index) === 0x0A  /* '\n' */)) {
	                lineNumber += 1;
	            }
	            return String.fromCharCode(ch);
	        }
	
	        function scanTitle() {
	            var title = '';
	            // waste '@'
	            advance();
	
	            while (index < length && isASCIIAlphanumeric(source.charCodeAt(index))) {
	                title += advance();
	            }
	
	            return title;
	        }
	
	        function seekContent() {
	            var ch, waiting, last = index;
	
	            waiting = false;
	            while (last < length) {
	                ch = source.charCodeAt(last);
	                if (esutils.code.isLineTerminator(ch) && !(ch === 0x0D  /* '\r' */ && source.charCodeAt(last + 1) === 0x0A  /* '\n' */)) {
	                    waiting = true;
	                } else if (waiting) {
	                    if (ch === 0x40  /* '@' */) {
	                        break;
	                    }
	                    if (!esutils.code.isWhiteSpace(ch)) {
	                        waiting = false;
	                    }
	                }
	                last += 1;
	            }
	            return last;
	        }
	
	        // type expression may have nest brace, such as,
	        // { { ok: string } }
	        //
	        // therefore, scanning type expression with balancing braces.
	        function parseType(title, last) {
	            var ch, brace, type, direct = false;
	
	
	            // search '{'
	            while (index < last) {
	                ch = source.charCodeAt(index);
	                if (esutils.code.isWhiteSpace(ch)) {
	                    advance();
	                } else if (ch === 0x7B  /* '{' */) {
	                    advance();
	                    break;
	                } else {
	                    // this is direct pattern
	                    direct = true;
	                    break;
	                }
	            }
	
	
	            if (direct) {
	                return null;
	            }
	
	            // type expression { is found
	            brace = 1;
	            type = '';
	            while (index < last) {
	                ch = source.charCodeAt(index);
	                if (esutils.code.isLineTerminator(ch)) {
	                    advance();
	                } else {
	                    if (ch === 0x7D  /* '}' */) {
	                        brace -= 1;
	                        if (brace === 0) {
	                            advance();
	                            break;
	                        }
	                    } else if (ch === 0x7B  /* '{' */) {
	                        brace += 1;
	                    }
	                    type += advance();
	                }
	            }
	
	            if (brace !== 0) {
	                // braces is not balanced
	                return utility.throwError('Braces are not balanced');
	            }
	
	            if (isAllowedOptional(title)) {
	                return typed.parseParamType(type);
	            }
	
	            return typed.parseType(type);
	        }
	
	        function scanIdentifier(last) {
	            var identifier;
	            if (!esutils.code.isIdentifierStartES5(source.charCodeAt(index))) {
	                return null;
	            }
	            identifier = advance();
	            while (index < last && esutils.code.isIdentifierPartES5(source.charCodeAt(index))) {
	                identifier += advance();
	            }
	            return identifier;
	        }
	
	        function skipWhiteSpace(last) {
	            while (index < last && (esutils.code.isWhiteSpace(source.charCodeAt(index)) || esutils.code.isLineTerminator(source.charCodeAt(index)))) {
	                advance();
	            }
	        }
	
	        function parseName(last, allowBrackets, allowNestedParams) {
	            var name = '',
	                useBrackets,
	                insideString;
	
	
	            skipWhiteSpace(last);
	
	            if (index >= last) {
	                return null;
	            }
	
	            if (allowBrackets && source.charCodeAt(index) === 0x5B  /* '[' */) {
	                useBrackets = true;
	                name = advance();
	            }
	
	            if (!esutils.code.isIdentifierStartES5(source.charCodeAt(index))) {
	                return null;
	            }
	
	            name += scanIdentifier(last);
	
	            if (allowNestedParams) {
	                if (source.charCodeAt(index) === 0x3A /* ':' */ && (
	                        name === 'module' ||
	                        name === 'external' ||
	                        name === 'event')) {
	                    name += advance();
	                    name += scanIdentifier(last);
	
	                }
	                if(source.charCodeAt(index) === 0x5B  /* '[' */ && source.charCodeAt(index + 1) === 0x5D  /* ']' */){
	                    name += advance();
	                    name += advance();
	                }
	                while (source.charCodeAt(index) === 0x2E  /* '.' */ ||
	                        source.charCodeAt(index) === 0x2F  /* '/' */ ||
	                        source.charCodeAt(index) === 0x23  /* '#' */ ||
	                        source.charCodeAt(index) === 0x2D  /* '-' */ ||
	                        source.charCodeAt(index) === 0x7E  /* '~' */) {
	                    name += advance();
	                    name += scanIdentifier(last);
	                }
	            }
	
	            if (useBrackets) {
	                skipWhiteSpace(last);
	                // do we have a default value for this?
	                if (source.charCodeAt(index) === 0x3D  /* '=' */) {
	                    // consume the '='' symbol
	                    name += advance();
	                    skipWhiteSpace(last);
	
	                    var ch;
	                    var bracketDepth = 1;
	
	                    // scan in the default value
	                    while (index < last) {
	                        ch = source.charCodeAt(index);
	
	                        if (esutils.code.isWhiteSpace(ch)) {
	                            if (!insideString) {
	                                skipWhiteSpace(last);
	                                ch = source.charCodeAt(index);
	                            }
	                        }
	
	                        if (ch === 0x27 /* ''' */) {
	                            if (!insideString) {
	                                insideString = '\'';
	                            } else {
	                                if (insideString === '\'') {
	                                    insideString = '';
	                                }
	                            }
	                        }
	
	                        if (ch === 0x22 /* '"' */) {
	                            if (!insideString) {
	                                insideString = '"';
	                            } else {
	                                if (insideString === '"') {
	                                    insideString = '';
	                                }
	                            }
	                        }
	
	                        if (ch === 0x5B /* '[' */) {
	                            bracketDepth++;
	                        } else if (ch === 0x5D  /* ']' */ &&
	                            --bracketDepth === 0) {
	                            break;
	                        }
	
	                        name += advance();
	                    }
	                }
	
	                skipWhiteSpace(last);
	
	                if (index >= last || source.charCodeAt(index) !== 0x5D  /* ']' */) {
	                    // we never found a closing ']'
	                    return null;
	                }
	
	                // collect the last ']'
	                name += advance();
	            }
	
	            return name;
	        }
	
	        function skipToTag() {
	            while (index < length && source.charCodeAt(index) !== 0x40  /* '@' */) {
	                advance();
	            }
	            if (index >= length) {
	                return false;
	            }
	            utility.assert(source.charCodeAt(index) === 0x40  /* '@' */);
	            return true;
	        }
	
	        function TagParser(options, title) {
	            this._options = options;
	            this._title = title.toLowerCase();
	            this._tag = {
	                title: title,
	                description: null
	            };
	            if (this._options.lineNumbers) {
	                this._tag.lineNumber = lineNumber;
	            }
	            this._last = 0;
	            // space to save special information for title parsers.
	            this._extra = { };
	        }
	
	        // addError(err, ...)
	        TagParser.prototype.addError = function addError(errorText) {
	            var args = Array.prototype.slice.call(arguments, 1),
	                msg = errorText.replace(
	                    /%(\d)/g,
	                    function (whole, index) {
	                        utility.assert(index < args.length, 'Message reference must be in range');
	                        return args[index];
	                    }
	                );
	
	            if (!this._tag.errors) {
	                this._tag.errors = [];
	            }
	            if (strict) {
	                utility.throwError(msg);
	            }
	            this._tag.errors.push(msg);
	            return recoverable;
	        };
	
	        TagParser.prototype.parseType = function () {
	            // type required titles
	            if (isTypeParameterRequired(this._title)) {
	                try {
	                    this._tag.type = parseType(this._title, this._last);
	                    if (!this._tag.type) {
	                        if (!isParamTitle(this._title) && !isReturnTitle(this._title)) {
	                            if (!this.addError('Missing or invalid tag type')) {
	                                return false;
	                            }
	                        }
	                    }
	                } catch (error) {
	                    this._tag.type = null;
	                    if (!this.addError(error.message)) {
	                        return false;
	                    }
	                }
	            } else if (isAllowedType(this._title)) {
	                // optional types
	                try {
	                    this._tag.type = parseType(this._title, this._last);
	                } catch (e) {
	                    //For optional types, lets drop the thrown error when we hit the end of the file
	                }
	            }
	            return true;
	        };
	
	        TagParser.prototype._parseNamePath = function (optional) {
	            var name;
	            name = parseName(this._last, sloppy && isAllowedOptional(this._title), true);
	            if (!name) {
	                if (!optional) {
	                    if (!this.addError('Missing or invalid tag name')) {
	                        return false;
	                    }
	                }
	            }
	            this._tag.name = name;
	            return true;
	        };
	
	        TagParser.prototype.parseNamePath = function () {
	            return this._parseNamePath(false);
	        };
	
	        TagParser.prototype.parseNamePathOptional = function () {
	            return this._parseNamePath(true);
	        };
	
	
	        TagParser.prototype.parseName = function () {
	            var assign, name;
	
	            // param, property requires name
	            if (isAllowedName(this._title)) {
	                this._tag.name = parseName(this._last, sloppy && isAllowedOptional(this._title), isAllowedNested(this._title));
	                if (!this._tag.name) {
	                    if (!isNameParameterRequired(this._title)) {
	                        return true;
	                    }
	
	                    // it's possible the name has already been parsed but interpreted as a type
	                    // it's also possible this is a sloppy declaration, in which case it will be
	                    // fixed at the end
	                    if (isParamTitle(this._title) && this._tag.type && this._tag.type.name) {
	                        this._extra.name = this._tag.type;
	                        this._tag.name = this._tag.type.name;
	                        this._tag.type = null;
	                    } else {
	                        if (!this.addError('Missing or invalid tag name')) {
	                            return false;
	                        }
	                    }
	                } else {
	                    name = this._tag.name;
	                    if (name.charAt(0) === '[' && name.charAt(name.length - 1) === ']') {
	                        // extract the default value if there is one
	                        // example: @param {string} [somebody=John Doe] description
	                        assign = name.substring(1, name.length - 1).split('=');
	                        if (assign[1]) {
	                            this._tag['default'] = assign[1];
	                        }
	                        this._tag.name = assign[0];
	
	                        // convert to an optional type
	                        if (this._tag.type && this._tag.type.type !== 'OptionalType') {
	                            this._tag.type = {
	                                type: 'OptionalType',
	                                expression: this._tag.type
	                            };
	                        }
	                    }
	                }
	            }
	
	
	            return true;
	        };
	
	        TagParser.prototype.parseDescription = function parseDescription() {
	            var description = trim(sliceSource(source, index, this._last));
	            if (description) {
	                if ((/^-\s+/).test(description)) {
	                    description = description.substring(2);
	                }
	                this._tag.description = description;
	            }
	            return true;
	        };
	
	        TagParser.prototype.parseCaption = function parseDescription() {
	            var description = trim(sliceSource(source, index, this._last));
	            var captionStartTag = '<caption>';
	            var captionEndTag = '</caption>';
	            var captionStart = description.indexOf(captionStartTag);
	            var captionEnd = description.indexOf(captionEndTag);
	            if (captionStart >= 0 && captionEnd >= 0) {
	                this._tag.caption = trim(description.substring(
	                    captionStart + captionStartTag.length, captionEnd));
	                this._tag.description = trim(description.substring(captionEnd + captionEndTag.length));
	            } else {
	                this._tag.description = description;
	            }
	            return true;
	        };
	
	        TagParser.prototype.parseKind = function parseKind() {
	            var kind, kinds;
	            kinds = {
	                'class': true,
	                'constant': true,
	                'event': true,
	                'external': true,
	                'file': true,
	                'function': true,
	                'member': true,
	                'mixin': true,
	                'module': true,
	                'namespace': true,
	                'typedef': true
	            };
	            kind = trim(sliceSource(source, index, this._last));
	            this._tag.kind = kind;
	            if (!hasOwnProperty(kinds, kind)) {
	                if (!this.addError('Invalid kind name \'%0\'', kind)) {
	                    return false;
	                }
	            }
	            return true;
	        };
	
	        TagParser.prototype.parseAccess = function parseAccess() {
	            var access;
	            access = trim(sliceSource(source, index, this._last));
	            this._tag.access = access;
	            if (access !== 'private' && access !== 'protected' && access !== 'public') {
	                if (!this.addError('Invalid access name \'%0\'', access)) {
	                    return false;
	                }
	            }
	            return true;
	        };
	
	        TagParser.prototype.parseThis = function parseAccess() {
	            // this name may be a name expression (e.g. {foo.bar})
	            // or a name path (e.g. foo.bar)
	            var value = trim(sliceSource(source, index, this._last));
	            if (value && value.charAt(0) === '{') {
	                var gotType = this.parseType();
	                if (gotType && this._tag.type.type === 'NameExpression') {
	                    this._tag.name = this._tag.type.name;
	                    return true;
	                } else {
	                    return this.addError('Invalid name for this');
	                }
	            } else {
	                return this.parseNamePath();
	            }
	        };
	
	        TagParser.prototype.parseVariation = function parseVariation() {
	            var variation, text;
	            text = trim(sliceSource(source, index, this._last));
	            variation = parseFloat(text, 10);
	            this._tag.variation = variation;
	            if (isNaN(variation)) {
	                if (!this.addError('Invalid variation \'%0\'', text)) {
	                    return false;
	                }
	            }
	            return true;
	        };
	
	        TagParser.prototype.ensureEnd = function () {
	            var shouldBeEmpty = trim(sliceSource(source, index, this._last));
	            if (shouldBeEmpty) {
	                if (!this.addError('Unknown content \'%0\'', shouldBeEmpty)) {
	                    return false;
	                }
	            }
	            return true;
	        };
	
	        TagParser.prototype.epilogue = function epilogue() {
	            var description;
	
	            description = this._tag.description;
	            // un-fix potentially sloppy declaration
	            if (isAllowedOptional(this._title) && !this._tag.type && description && description.charAt(0) === '[') {
	                this._tag.type = this._extra.name;
	                if (!this._tag.name) {
	                    this._tag.name = undefined;
	                }
	
	                if (!sloppy) {
	                    if (!this.addError('Missing or invalid tag name')) {
	                        return false;
	                    }
	                }
	            }
	
	            return true;
	        };
	
	        Rules = {
	            // http://usejsdoc.org/tags-access.html
	            'access': ['parseAccess'],
	            // http://usejsdoc.org/tags-alias.html
	            'alias': ['parseNamePath', 'ensureEnd'],
	            // http://usejsdoc.org/tags-augments.html
	            'augments': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
	            // http://usejsdoc.org/tags-constructor.html
	            'constructor': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
	            // Synonym: http://usejsdoc.org/tags-constructor.html
	            'class': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
	            // Synonym: http://usejsdoc.org/tags-extends.html
	            'extends': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
	            // http://usejsdoc.org/tags-example.html
	            'example': ['parseCaption'],
	            // http://usejsdoc.org/tags-deprecated.html
	            'deprecated': ['parseDescription'],
	            // http://usejsdoc.org/tags-global.html
	            'global': ['ensureEnd'],
	            // http://usejsdoc.org/tags-inner.html
	            'inner': ['ensureEnd'],
	            // http://usejsdoc.org/tags-instance.html
	            'instance': ['ensureEnd'],
	            // http://usejsdoc.org/tags-kind.html
	            'kind': ['parseKind'],
	            // http://usejsdoc.org/tags-mixes.html
	            'mixes': ['parseNamePath', 'ensureEnd'],
	            // http://usejsdoc.org/tags-mixin.html
	            'mixin': ['parseNamePathOptional', 'ensureEnd'],
	            // http://usejsdoc.org/tags-member.html
	            'member': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
	            // http://usejsdoc.org/tags-method.html
	            'method': ['parseNamePathOptional', 'ensureEnd'],
	            // http://usejsdoc.org/tags-module.html
	            'module': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
	            // Synonym: http://usejsdoc.org/tags-method.html
	            'func': ['parseNamePathOptional', 'ensureEnd'],
	            // Synonym: http://usejsdoc.org/tags-method.html
	            'function': ['parseNamePathOptional', 'ensureEnd'],
	            // Synonym: http://usejsdoc.org/tags-member.html
	            'var': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
	            // http://usejsdoc.org/tags-name.html
	            'name': ['parseNamePath', 'ensureEnd'],
	            // http://usejsdoc.org/tags-namespace.html
	            'namespace': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
	            // http://usejsdoc.org/tags-private.html
	            'private': ['parseType', 'parseDescription'],
	            // http://usejsdoc.org/tags-protected.html
	            'protected': ['parseType', 'parseDescription'],
	            // http://usejsdoc.org/tags-public.html
	            'public': ['parseType', 'parseDescription'],
	            // http://usejsdoc.org/tags-readonly.html
	            'readonly': ['ensureEnd'],
	            // http://usejsdoc.org/tags-requires.html
	            'requires': ['parseNamePath', 'ensureEnd'],
	            // http://usejsdoc.org/tags-since.html
	            'since': ['parseDescription'],
	            // http://usejsdoc.org/tags-static.html
	            'static': ['ensureEnd'],
	            // http://usejsdoc.org/tags-summary.html
	            'summary': ['parseDescription'],
	            // http://usejsdoc.org/tags-this.html
	            'this': ['parseThis', 'ensureEnd'],
	            // http://usejsdoc.org/tags-todo.html
	            'todo': ['parseDescription'],
	            // http://usejsdoc.org/tags-typedef.html
	            'typedef': ['parseType', 'parseNamePathOptional'],
	            // http://usejsdoc.org/tags-variation.html
	            'variation': ['parseVariation'],
	            // http://usejsdoc.org/tags-version.html
	            'version': ['parseDescription']
	        };
	
	        TagParser.prototype.parse = function parse() {
	            var i, iz, sequences, method;
	
	
	            // empty title
	            if (!this._title) {
	                if (!this.addError('Missing or invalid title')) {
	                    return null;
	                }
	            }
	
	            // Seek to content last index.
	            this._last = seekContent(this._title);
	
	            if (hasOwnProperty(Rules, this._title)) {
	                sequences = Rules[this._title];
	            } else {
	                // default sequences
	                sequences = ['parseType', 'parseName', 'parseDescription', 'epilogue'];
	            }
	
	            for (i = 0, iz = sequences.length; i < iz; ++i) {
	                method = sequences[i];
	                if (!this[method]()) {
	                    return null;
	                }
	            }
	
	            return this._tag;
	        };
	
	        function parseTag(options) {
	            var title, parser, tag;
	
	            // skip to tag
	            if (!skipToTag()) {
	                return null;
	            }
	
	            // scan title
	            title = scanTitle();
	
	            // construct tag parser
	            parser = new TagParser(options, title);
	            tag = parser.parse();
	
	            // Seek global index to end of this tag.
	            while (index < parser._last) {
	                advance();
	            }
	
	            return tag;
	        }
	
	        //
	        // Parse JSDoc
	        //
	
	        function scanJSDocDescription(preserveWhitespace) {
	            var description = '', ch, atAllowed;
	
	            atAllowed = true;
	            while (index < length) {
	                ch = source.charCodeAt(index);
	
	                if (atAllowed && ch === 0x40  /* '@' */) {
	                    break;
	                }
	
	                if (esutils.code.isLineTerminator(ch)) {
	                    atAllowed = true;
	                } else if (atAllowed && !esutils.code.isWhiteSpace(ch)) {
	                    atAllowed = false;
	                }
	
	                description += advance();
	            }
	
	            return preserveWhitespace ? description : trim(description);
	        }
	
	        function parse(comment, options) {
	            var tags = [], tag, description, interestingTags, i, iz;
	
	            if (options === undefined) {
	                options = {};
	            }
	
	            if (typeof options.unwrap === 'boolean' && options.unwrap) {
	                source = unwrapComment(comment);
	            } else {
	                source = comment;
	            }
	
	            // array of relevant tags
	            if (options.tags) {
	                if (isArray(options.tags)) {
	                    interestingTags = { };
	                    for (i = 0, iz = options.tags.length; i < iz; i++) {
	                        if (typeof options.tags[i] === 'string') {
	                            interestingTags[options.tags[i]] = true;
	                        } else {
	                            utility.throwError('Invalid "tags" parameter: ' + options.tags);
	                        }
	                    }
	                } else {
	                    utility.throwError('Invalid "tags" parameter: ' + options.tags);
	                }
	            }
	
	            length = source.length;
	            index = 0;
	            lineNumber = 0;
	            recoverable = options.recoverable;
	            sloppy = options.sloppy;
	            strict = options.strict;
	
	            description = scanJSDocDescription(options.preserveWhitespace);
	
	            while (true) {
	                tag = parseTag(options);
	                if (!tag) {
	                    break;
	                }
	                if (!interestingTags || interestingTags.hasOwnProperty(tag.title)) {
	                    tags.push(tag);
	                }
	            }
	
	            return {
	                description: description,
	                tags: tags
	            };
	        }
	        exports.parse = parse;
	    }(jsdoc = {}));
	
	    exports.version = utility.VERSION;
	    exports.parse = jsdoc.parse;
	    exports.parseType = typed.parseType;
	    exports.parseParamType = typed.parseParamType;
	    exports.unwrapComment = unwrapComment;
	    exports.Syntax = shallowCopy(typed.Syntax);
	    exports.Error = utility.DoctrineError;
	    exports.type = {
	        Syntax: exports.Syntax,
	        parseType: typed.parseType,
	        parseParamType: typed.parseParamType,
	        stringify: typed.stringify
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	
	(function () {
	    'use strict';
	
	    exports.ast = __webpack_require__(373);
	    exports.code = __webpack_require__(374);
	    exports.keyword = __webpack_require__(375);
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 373 */
/***/ function(module, exports) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	(function () {
	    'use strict';
	
	    function isExpression(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'ArrayExpression':
	            case 'AssignmentExpression':
	            case 'BinaryExpression':
	            case 'CallExpression':
	            case 'ConditionalExpression':
	            case 'FunctionExpression':
	            case 'Identifier':
	            case 'Literal':
	            case 'LogicalExpression':
	            case 'MemberExpression':
	            case 'NewExpression':
	            case 'ObjectExpression':
	            case 'SequenceExpression':
	            case 'ThisExpression':
	            case 'UnaryExpression':
	            case 'UpdateExpression':
	                return true;
	        }
	        return false;
	    }
	
	    function isIterationStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'DoWhileStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'WhileStatement':
	                return true;
	        }
	        return false;
	    }
	
	    function isStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'BlockStatement':
	            case 'BreakStatement':
	            case 'ContinueStatement':
	            case 'DebuggerStatement':
	            case 'DoWhileStatement':
	            case 'EmptyStatement':
	            case 'ExpressionStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'IfStatement':
	            case 'LabeledStatement':
	            case 'ReturnStatement':
	            case 'SwitchStatement':
	            case 'ThrowStatement':
	            case 'TryStatement':
	            case 'VariableDeclaration':
	            case 'WhileStatement':
	            case 'WithStatement':
	                return true;
	        }
	        return false;
	    }
	
	    function isSourceElement(node) {
	      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
	    }
	
	    function trailingStatement(node) {
	        switch (node.type) {
	        case 'IfStatement':
	            if (node.alternate != null) {
	                return node.alternate;
	            }
	            return node.consequent;
	
	        case 'LabeledStatement':
	        case 'ForStatement':
	        case 'ForInStatement':
	        case 'WhileStatement':
	        case 'WithStatement':
	            return node.body;
	        }
	        return null;
	    }
	
	    function isProblematicIfStatement(node) {
	        var current;
	
	        if (node.type !== 'IfStatement') {
	            return false;
	        }
	        if (node.alternate == null) {
	            return false;
	        }
	        current = node.consequent;
	        do {
	            if (current.type === 'IfStatement') {
	                if (current.alternate == null)  {
	                    return true;
	                }
	            }
	            current = trailingStatement(current);
	        } while (current);
	
	        return false;
	    }
	
	    module.exports = {
	        isExpression: isExpression,
	        isStatement: isStatement,
	        isIterationStatement: isIterationStatement,
	        isSourceElement: isSourceElement,
	        isProblematicIfStatement: isProblematicIfStatement,
	
	        trailingStatement: trailingStatement
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 374 */
/***/ function(module, exports) {

	/*
	  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	(function () {
	    'use strict';
	
	    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;
	
	    // See `tools/generate-identifier-regex.js`.
	    ES5Regex = {
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
	    };
	
	    ES6Regex = {
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	    };
	
	    function isDecimalDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39;  // 0..9
	    }
	
	    function isHexDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
	            0x61 <= ch && ch <= 0x66 ||     // a..f
	            0x41 <= ch && ch <= 0x46;       // A..F
	    }
	
	    function isOctalDigit(ch) {
	        return ch >= 0x30 && ch <= 0x37;  // 0..7
	    }
	
	    // 7.2 White Space
	
	    NON_ASCII_WHITESPACES = [
	        0x1680, 0x180E,
	        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
	        0x202F, 0x205F,
	        0x3000,
	        0xFEFF
	    ];
	
	    function isWhiteSpace(ch) {
	        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
	            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
	    }
	
	    // 7.3 Line Terminators
	
	    function isLineTerminator(ch) {
	        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
	    }
	
	    // 7.6 Identifier Names and Identifiers
	
	    function fromCodePoint(cp) {
	        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
	        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
	        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
	        return cu1 + cu2;
	    }
	
	    IDENTIFIER_START = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_START[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }
	
	    IDENTIFIER_PART = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_PART[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch >= 0x30 && ch <= 0x39 ||  // 0..9
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }
	
	    function isIdentifierStartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }
	
	    function isIdentifierPartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }
	
	    function isIdentifierStartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }
	
	    function isIdentifierPartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }
	
	    module.exports = {
	        isDecimalDigit: isDecimalDigit,
	        isHexDigit: isHexDigit,
	        isOctalDigit: isOctalDigit,
	        isWhiteSpace: isWhiteSpace,
	        isLineTerminator: isLineTerminator,
	        isIdentifierStartES5: isIdentifierStartES5,
	        isIdentifierPartES5: isIdentifierPartES5,
	        isIdentifierStartES6: isIdentifierStartES6,
	        isIdentifierPartES6: isIdentifierPartES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>
	
	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:
	
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	
	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	(function () {
	    'use strict';
	
	    var code = __webpack_require__(374);
	
	    function isStrictModeReservedWordES6(id) {
	        switch (id) {
	        case 'implements':
	        case 'interface':
	        case 'package':
	        case 'private':
	        case 'protected':
	        case 'public':
	        case 'static':
	        case 'let':
	            return true;
	        default:
	            return false;
	        }
	    }
	
	    function isKeywordES5(id, strict) {
	        // yield should not be treated as keyword under non-strict mode.
	        if (!strict && id === 'yield') {
	            return false;
	        }
	        return isKeywordES6(id, strict);
	    }
	
	    function isKeywordES6(id, strict) {
	        if (strict && isStrictModeReservedWordES6(id)) {
	            return true;
	        }
	
	        switch (id.length) {
	        case 2:
	            return (id === 'if') || (id === 'in') || (id === 'do');
	        case 3:
	            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
	        case 4:
	            return (id === 'this') || (id === 'else') || (id === 'case') ||
	                (id === 'void') || (id === 'with') || (id === 'enum');
	        case 5:
	            return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                (id === 'class') || (id === 'super');
	        case 6:
	            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                (id === 'switch') || (id === 'export') || (id === 'import');
	        case 7:
	            return (id === 'default') || (id === 'finally') || (id === 'extends');
	        case 8:
	            return (id === 'function') || (id === 'continue') || (id === 'debugger');
	        case 10:
	            return (id === 'instanceof');
	        default:
	            return false;
	        }
	    }
	
	    function isReservedWordES5(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
	    }
	
	    function isReservedWordES6(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
	    }
	
	    function isRestrictedWord(id) {
	        return id === 'eval' || id === 'arguments';
	    }
	
	    function isIdentifierNameES5(id) {
	        var i, iz, ch;
	
	        if (id.length === 0) { return false; }
	
	        ch = id.charCodeAt(0);
	        if (!code.isIdentifierStartES5(ch)) {
	            return false;
	        }
	
	        for (i = 1, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (!code.isIdentifierPartES5(ch)) {
	                return false;
	            }
	        }
	        return true;
	    }
	
	    function decodeUtf16(lead, trail) {
	        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
	    }
	
	    function isIdentifierNameES6(id) {
	        var i, iz, ch, lowCh, check;
	
	        if (id.length === 0) { return false; }
	
	        check = code.isIdentifierStartES6;
	        for (i = 0, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (0xD800 <= ch && ch <= 0xDBFF) {
	                ++i;
	                if (i >= iz) { return false; }
	                lowCh = id.charCodeAt(i);
	                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
	                    return false;
	                }
	                ch = decodeUtf16(ch, lowCh);
	            }
	            if (!check(ch)) {
	                return false;
	            }
	            check = code.isIdentifierPartES6;
	        }
	        return true;
	    }
	
	    function isIdentifierES5(id, strict) {
	        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
	    }
	
	    function isIdentifierES6(id, strict) {
	        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
	    }
	
	    module.exports = {
	        isKeywordES5: isKeywordES5,
	        isKeywordES6: isKeywordES6,
	        isReservedWordES5: isReservedWordES5,
	        isReservedWordES6: isReservedWordES6,
	        isRestrictedWord: isRestrictedWord,
	        isIdentifierNameES5: isIdentifierNameES5,
	        isIdentifierNameES6: isIdentifierNameES6,
	        isIdentifierES5: isIdentifierES5,
	        isIdentifierES6: isIdentifierES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 376 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * @fileoverview Type expression parser.
	 * @author Yusuke Suzuki <utatane.tea@gmail.com>
	 * @author Dan Tao <daniel.tao@gmail.com>
	 * @author Andrew Eisenberg <andrew@eisenberg.as>
	 */
	
	// "typed", the Type Expression Parser for doctrine.
	
	(function () {
	    'use strict';
	
	    var Syntax,
	        Token,
	        source,
	        length,
	        index,
	        previous,
	        token,
	        value,
	        esutils,
	        utility;
	
	    esutils = __webpack_require__(372);
	    utility = __webpack_require__(378);
	
	    Syntax = {
	        NullableLiteral: 'NullableLiteral',
	        AllLiteral: 'AllLiteral',
	        NullLiteral: 'NullLiteral',
	        UndefinedLiteral: 'UndefinedLiteral',
	        VoidLiteral: 'VoidLiteral',
	        UnionType: 'UnionType',
	        ArrayType: 'ArrayType',
	        RecordType: 'RecordType',
	        FieldType: 'FieldType',
	        FunctionType: 'FunctionType',
	        ParameterType: 'ParameterType',
	        RestType: 'RestType',
	        NonNullableType: 'NonNullableType',
	        OptionalType: 'OptionalType',
	        NullableType: 'NullableType',
	        NameExpression: 'NameExpression',
	        TypeApplication: 'TypeApplication',
	        StringLiteralType: 'StringLiteralType',
	        NumericLiteralType: 'NumericLiteralType',
	        BooleanLiteralType: 'BooleanLiteralType'
	    };
	
	    Token = {
	        ILLEGAL: 0,    // ILLEGAL
	        DOT_LT: 1,     // .<
	        REST: 2,       // ...
	        LT: 3,         // <
	        GT: 4,         // >
	        LPAREN: 5,     // (
	        RPAREN: 6,     // )
	        LBRACE: 7,     // {
	        RBRACE: 8,     // }
	        LBRACK: 9,    // [
	        RBRACK: 10,    // ]
	        COMMA: 11,     // ,
	        COLON: 12,     // :
	        STAR: 13,      // *
	        PIPE: 14,      // |
	        QUESTION: 15,  // ?
	        BANG: 16,      // !
	        EQUAL: 17,     // =
	        NAME: 18,      // name token
	        STRING: 19,    // string
	        NUMBER: 20,    // number
	        EOF: 21
	    };
	
	    function isTypeName(ch) {
	        return '><(){}[],:*|?!='.indexOf(String.fromCharCode(ch)) === -1 && !esutils.code.isWhiteSpace(ch) && !esutils.code.isLineTerminator(ch);
	    }
	
	    function Context(previous, index, token, value) {
	        this._previous = previous;
	        this._index = index;
	        this._token = token;
	        this._value = value;
	    }
	
	    Context.prototype.restore = function () {
	        previous = this._previous;
	        index = this._index;
	        token = this._token;
	        value = this._value;
	    };
	
	    Context.save = function () {
	        return new Context(previous, index, token, value);
	    };
	
	    function advance() {
	        var ch = source.charAt(index);
	        index += 1;
	        return ch;
	    }
	
	    function scanHexEscape(prefix) {
	        var i, len, ch, code = 0;
	
	        len = (prefix === 'u') ? 4 : 2;
	        for (i = 0; i < len; ++i) {
	            if (index < length && esutils.code.isHexDigit(source.charCodeAt(index))) {
	                ch = advance();
	                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
	            } else {
	                return '';
	            }
	        }
	        return String.fromCharCode(code);
	    }
	
	    function scanString() {
	        var str = '', quote, ch, code, unescaped, restore; //TODO review removal octal = false
	        quote = source.charAt(index);
	        ++index;
	
	        while (index < length) {
	            ch = advance();
	
	            if (ch === quote) {
	                quote = '';
	                break;
	            } else if (ch === '\\') {
	                ch = advance();
	                if (!esutils.code.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                    case 'n':
	                        str += '\n';
	                        break;
	                    case 'r':
	                        str += '\r';
	                        break;
	                    case 't':
	                        str += '\t';
	                        break;
	                    case 'u':
	                    case 'x':
	                        restore = index;
	                        unescaped = scanHexEscape(ch);
	                        if (unescaped) {
	                            str += unescaped;
	                        } else {
	                            index = restore;
	                            str += ch;
	                        }
	                        break;
	                    case 'b':
	                        str += '\b';
	                        break;
	                    case 'f':
	                        str += '\f';
	                        break;
	                    case 'v':
	                        str += '\v';
	                        break;
	
	                    default:
	                        if (esutils.code.isOctalDigit(ch.charCodeAt(0))) {
	                            code = '01234567'.indexOf(ch);
	
	                            // \0 is not octal escape sequence
	                            // Deprecating unused code. TODO review removal
	                            //if (code !== 0) {
	                            //    octal = true;
	                            //}
	
	                            if (index < length && esutils.code.isOctalDigit(source.charCodeAt(index))) {
	                                //TODO Review Removal octal = true;
	                                code = code * 8 + '01234567'.indexOf(advance());
	
	                                // 3 digits are only allowed when string starts
	                                // with 0, 1, 2, 3
	                                if ('0123'.indexOf(ch) >= 0 &&
	                                        index < length &&
	                                        esutils.code.isOctalDigit(source.charCodeAt(index))) {
	                                    code = code * 8 + '01234567'.indexOf(advance());
	                                }
	                            }
	                            str += String.fromCharCode(code);
	                        } else {
	                            str += ch;
	                        }
	                        break;
	                    }
	                } else {
	                    if (ch ===  '\r' && source.charCodeAt(index) === 0x0A  /* '\n' */) {
	                        ++index;
	                    }
	                }
	            } else if (esutils.code.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            } else {
	                str += ch;
	            }
	        }
	
	        if (quote !== '') {
	            utility.throwError('unexpected quote');
	        }
	
	        value = str;
	        return Token.STRING;
	    }
	
	    function scanNumber() {
	        var number, ch;
	
	        number = '';
	        ch = source.charCodeAt(index);
	
	        if (ch !== 0x2E  /* '.' */) {
	            number = advance();
	            ch = source.charCodeAt(index);
	
	            if (number === '0') {
	                if (ch === 0x78  /* 'x' */ || ch === 0x58  /* 'X' */) {
	                    number += advance();
	                    while (index < length) {
	                        ch = source.charCodeAt(index);
	                        if (!esutils.code.isHexDigit(ch)) {
	                            break;
	                        }
	                        number += advance();
	                    }
	
	                    if (number.length <= 2) {
	                        // only 0x
	                        utility.throwError('unexpected token');
	                    }
	
	                    if (index < length) {
	                        ch = source.charCodeAt(index);
	                        if (esutils.code.isIdentifierStartES5(ch)) {
	                            utility.throwError('unexpected token');
	                        }
	                    }
	                    value = parseInt(number, 16);
	                    return Token.NUMBER;
	                }
	
	                if (esutils.code.isOctalDigit(ch)) {
	                    number += advance();
	                    while (index < length) {
	                        ch = source.charCodeAt(index);
	                        if (!esutils.code.isOctalDigit(ch)) {
	                            break;
	                        }
	                        number += advance();
	                    }
	
	                    if (index < length) {
	                        ch = source.charCodeAt(index);
	                        if (esutils.code.isIdentifierStartES5(ch) || esutils.code.isDecimalDigit(ch)) {
	                            utility.throwError('unexpected token');
	                        }
	                    }
	                    value = parseInt(number, 8);
	                    return Token.NUMBER;
	                }
	
	                if (esutils.code.isDecimalDigit(ch)) {
	                    utility.throwError('unexpected token');
	                }
	            }
	
	            while (index < length) {
	                ch = source.charCodeAt(index);
	                if (!esutils.code.isDecimalDigit(ch)) {
	                    break;
	                }
	                number += advance();
	            }
	        }
	
	        if (ch === 0x2E  /* '.' */) {
	            number += advance();
	            while (index < length) {
	                ch = source.charCodeAt(index);
	                if (!esutils.code.isDecimalDigit(ch)) {
	                    break;
	                }
	                number += advance();
	            }
	        }
	
	        if (ch === 0x65  /* 'e' */ || ch === 0x45  /* 'E' */) {
	            number += advance();
	
	            ch = source.charCodeAt(index);
	            if (ch === 0x2B  /* '+' */ || ch === 0x2D  /* '-' */) {
	                number += advance();
	            }
	
	            ch = source.charCodeAt(index);
	            if (esutils.code.isDecimalDigit(ch)) {
	                number += advance();
	                while (index < length) {
	                    ch = source.charCodeAt(index);
	                    if (!esutils.code.isDecimalDigit(ch)) {
	                        break;
	                    }
	                    number += advance();
	                }
	            } else {
	                utility.throwError('unexpected token');
	            }
	        }
	
	        if (index < length) {
	            ch = source.charCodeAt(index);
	            if (esutils.code.isIdentifierStartES5(ch)) {
	                utility.throwError('unexpected token');
	            }
	        }
	
	        value = parseFloat(number);
	        return Token.NUMBER;
	    }
	
	
	    function scanTypeName() {
	        var ch, ch2;
	
	        value = advance();
	        while (index < length && isTypeName(source.charCodeAt(index))) {
	            ch = source.charCodeAt(index);
	            if (ch === 0x2E  /* '.' */) {
	                if ((index + 1) >= length) {
	                    return Token.ILLEGAL;
	                }
	                ch2 = source.charCodeAt(index + 1);
	                if (ch2 === 0x3C  /* '<' */) {
	                    break;
	                }
	            }
	            value += advance();
	        }
	        return Token.NAME;
	    }
	
	    function next() {
	        var ch;
	
	        previous = index;
	
	        while (index < length && esutils.code.isWhiteSpace(source.charCodeAt(index))) {
	            advance();
	        }
	        if (index >= length) {
	            token = Token.EOF;
	            return token;
	        }
	
	        ch = source.charCodeAt(index);
	        switch (ch) {
	        case 0x27:  /* ''' */
	        case 0x22:  /* '"' */
	            token = scanString();
	            return token;
	
	        case 0x3A:  /* ':' */
	            advance();
	            token = Token.COLON;
	            return token;
	
	        case 0x2C:  /* ',' */
	            advance();
	            token = Token.COMMA;
	            return token;
	
	        case 0x28:  /* '(' */
	            advance();
	            token = Token.LPAREN;
	            return token;
	
	        case 0x29:  /* ')' */
	            advance();
	            token = Token.RPAREN;
	            return token;
	
	        case 0x5B:  /* '[' */
	            advance();
	            token = Token.LBRACK;
	            return token;
	
	        case 0x5D:  /* ']' */
	            advance();
	            token = Token.RBRACK;
	            return token;
	
	        case 0x7B:  /* '{' */
	            advance();
	            token = Token.LBRACE;
	            return token;
	
	        case 0x7D:  /* '}' */
	            advance();
	            token = Token.RBRACE;
	            return token;
	
	        case 0x2E:  /* '.' */
	            if (index + 1 < length) {
	                ch = source.charCodeAt(index + 1);
	                if (ch === 0x3C  /* '<' */) {
	                    advance();  // '.'
	                    advance();  // '<'
	                    token = Token.DOT_LT;
	                    return token;
	                }
	
	                if (ch === 0x2E  /* '.' */ && index + 2 < length && source.charCodeAt(index + 2) === 0x2E  /* '.' */) {
	                    advance();  // '.'
	                    advance();  // '.'
	                    advance();  // '.'
	                    token = Token.REST;
	                    return token;
	                }
	
	                if (esutils.code.isDecimalDigit(ch)) {
	                    token = scanNumber();
	                    return token;
	                }
	            }
	            token = Token.ILLEGAL;
	            return token;
	
	        case 0x3C:  /* '<' */
	            advance();
	            token = Token.LT;
	            return token;
	
	        case 0x3E:  /* '>' */
	            advance();
	            token = Token.GT;
	            return token;
	
	        case 0x2A:  /* '*' */
	            advance();
	            token = Token.STAR;
	            return token;
	
	        case 0x7C:  /* '|' */
	            advance();
	            token = Token.PIPE;
	            return token;
	
	        case 0x3F:  /* '?' */
	            advance();
	            token = Token.QUESTION;
	            return token;
	
	        case 0x21:  /* '!' */
	            advance();
	            token = Token.BANG;
	            return token;
	
	        case 0x3D:  /* '=' */
	            advance();
	            token = Token.EQUAL;
	            return token;
	
	        case 0x2D: /* '-' */
	            token = scanNumber();
	            return token;
	
	        default:
	            if (esutils.code.isDecimalDigit(ch)) {
	                token = scanNumber();
	                return token;
	            }
	
	            // type string permits following case,
	            //
	            // namespace.module.MyClass
	            //
	            // this reduced 1 token TK_NAME
	            utility.assert(isTypeName(ch));
	            token = scanTypeName();
	            return token;
	        }
	    }
	
	    function consume(target, text) {
	        utility.assert(token === target, text || 'consumed token not matched');
	        next();
	    }
	
	    function expect(target, message) {
	        if (token !== target) {
	            utility.throwError(message || 'unexpected token');
	        }
	        next();
	    }
	
	    // UnionType := '(' TypeUnionList ')'
	    //
	    // TypeUnionList :=
	    //     <<empty>>
	    //   | NonemptyTypeUnionList
	    //
	    // NonemptyTypeUnionList :=
	    //     TypeExpression
	    //   | TypeExpression '|' NonemptyTypeUnionList
	    function parseUnionType() {
	        var elements;
	        consume(Token.LPAREN, 'UnionType should start with (');
	        elements = [];
	        if (token !== Token.RPAREN) {
	            while (true) {
	                elements.push(parseTypeExpression());
	                if (token === Token.RPAREN) {
	                    break;
	                }
	                expect(Token.PIPE);
	            }
	        }
	        consume(Token.RPAREN, 'UnionType should end with )');
	        return {
	            type: Syntax.UnionType,
	            elements: elements
	        };
	    }
	
	    // ArrayType := '[' ElementTypeList ']'
	    //
	    // ElementTypeList :=
	    //     <<empty>>
	    //  | TypeExpression
	    //  | '...' TypeExpression
	    //  | TypeExpression ',' ElementTypeList
	    function parseArrayType() {
	        var elements;
	        consume(Token.LBRACK, 'ArrayType should start with [');
	        elements = [];
	        while (token !== Token.RBRACK) {
	            if (token === Token.REST) {
	                consume(Token.REST);
	                elements.push({
	                    type: Syntax.RestType,
	                    expression: parseTypeExpression()
	                });
	                break;
	            } else {
	                elements.push(parseTypeExpression());
	            }
	            if (token !== Token.RBRACK) {
	                expect(Token.COMMA);
	            }
	        }
	        expect(Token.RBRACK);
	        return {
	            type: Syntax.ArrayType,
	            elements: elements
	        };
	    }
	
	    function parseFieldName() {
	        var v = value;
	        if (token === Token.NAME || token === Token.STRING) {
	            next();
	            return v;
	        }
	
	        if (token === Token.NUMBER) {
	            consume(Token.NUMBER);
	            return String(v);
	        }
	
	        utility.throwError('unexpected token');
	    }
	
	    // FieldType :=
	    //     FieldName
	    //   | FieldName ':' TypeExpression
	    //
	    // FieldName :=
	    //     NameExpression
	    //   | StringLiteral
	    //   | NumberLiteral
	    //   | ReservedIdentifier
	    function parseFieldType() {
	        var key;
	
	        key = parseFieldName();
	        if (token === Token.COLON) {
	            consume(Token.COLON);
	            return {
	                type: Syntax.FieldType,
	                key: key,
	                value: parseTypeExpression()
	            };
	        }
	        return {
	            type: Syntax.FieldType,
	            key: key,
	            value: null
	        };
	    }
	
	    // RecordType := '{' FieldTypeList '}'
	    //
	    // FieldTypeList :=
	    //     <<empty>>
	    //   | FieldType
	    //   | FieldType ',' FieldTypeList
	    function parseRecordType() {
	        var fields;
	
	        consume(Token.LBRACE, 'RecordType should start with {');
	        fields = [];
	        if (token === Token.COMMA) {
	            consume(Token.COMMA);
	        } else {
	            while (token !== Token.RBRACE) {
	                fields.push(parseFieldType());
	                if (token !== Token.RBRACE) {
	                    expect(Token.COMMA);
	                }
	            }
	        }
	        expect(Token.RBRACE);
	        return {
	            type: Syntax.RecordType,
	            fields: fields
	        };
	    }
	
	    // NameExpression :=
	    //    Identifier
	    //  | TagIdentifier ':' Identifier
	    //
	    // Tag identifier is one of "module", "external" or "event"
	    // Identifier is the same as Token.NAME, including any dots, something like
	    // namespace.module.MyClass
	    function parseNameExpression() {
	        var name = value;
	        expect(Token.NAME);
	
	        if (token === Token.COLON && (
	                name === 'module' ||
	                name === 'external' ||
	                name === 'event')) {
	            consume(Token.COLON);
	            name += ':' + value;
	            expect(Token.NAME);
	        }
	
	        return {
	            type: Syntax.NameExpression,
	            name: name
	        };
	    }
	
	    // TypeExpressionList :=
	    //     TopLevelTypeExpression
	    //   | TopLevelTypeExpression ',' TypeExpressionList
	    function parseTypeExpressionList() {
	        var elements = [];
	
	        elements.push(parseTop());
	        while (token === Token.COMMA) {
	            consume(Token.COMMA);
	            elements.push(parseTop());
	        }
	        return elements;
	    }
	
	    // TypeName :=
	    //     NameExpression
	    //   | NameExpression TypeApplication
	    //
	    // TypeApplication :=
	    //     '.<' TypeExpressionList '>'
	    //   | '<' TypeExpressionList '>'   // this is extension of doctrine
	    function parseTypeName() {
	        var expr, applications;
	
	        expr = parseNameExpression();
	        if (token === Token.DOT_LT || token === Token.LT) {
	            next();
	            applications = parseTypeExpressionList();
	            expect(Token.GT);
	            return {
	                type: Syntax.TypeApplication,
	                expression: expr,
	                applications: applications
	            };
	        }
	        return expr;
	    }
	
	    // ResultType :=
	    //     <<empty>>
	    //   | ':' void
	    //   | ':' TypeExpression
	    //
	    // BNF is above
	    // but, we remove <<empty>> pattern, so token is always TypeToken::COLON
	    function parseResultType() {
	        consume(Token.COLON, 'ResultType should start with :');
	        if (token === Token.NAME && value === 'void') {
	            consume(Token.NAME);
	            return {
	                type: Syntax.VoidLiteral
	            };
	        }
	        return parseTypeExpression();
	    }
	
	    // ParametersType :=
	    //     RestParameterType
	    //   | NonRestParametersType
	    //   | NonRestParametersType ',' RestParameterType
	    //
	    // RestParameterType :=
	    //     '...'
	    //     '...' Identifier
	    //
	    // NonRestParametersType :=
	    //     ParameterType ',' NonRestParametersType
	    //   | ParameterType
	    //   | OptionalParametersType
	    //
	    // OptionalParametersType :=
	    //     OptionalParameterType
	    //   | OptionalParameterType, OptionalParametersType
	    //
	    // OptionalParameterType := ParameterType=
	    //
	    // ParameterType := TypeExpression | Identifier ':' TypeExpression
	    //
	    // Identifier is "new" or "this"
	    function parseParametersType() {
	        var params = [], optionalSequence = false, expr, rest = false;
	
	        while (token !== Token.RPAREN) {
	            if (token === Token.REST) {
	                // RestParameterType
	                consume(Token.REST);
	                rest = true;
	            }
	
	            expr = parseTypeExpression();
	            if (expr.type === Syntax.NameExpression && token === Token.COLON) {
	                // Identifier ':' TypeExpression
	                consume(Token.COLON);
	                expr = {
	                    type: Syntax.ParameterType,
	                    name: expr.name,
	                    expression: parseTypeExpression()
	                };
	            }
	            if (token === Token.EQUAL) {
	                consume(Token.EQUAL);
	                expr = {
	                    type: Syntax.OptionalType,
	                    expression: expr
	                };
	                optionalSequence = true;
	            } else {
	                if (optionalSequence) {
	                    utility.throwError('unexpected token');
	                }
	            }
	            if (rest) {
	                expr = {
	                    type: Syntax.RestType,
	                    expression: expr
	                };
	            }
	            params.push(expr);
	            if (token !== Token.RPAREN) {
	                expect(Token.COMMA);
	            }
	        }
	        return params;
	    }
	
	    // FunctionType := 'function' FunctionSignatureType
	    //
	    // FunctionSignatureType :=
	    //   | TypeParameters '(' ')' ResultType
	    //   | TypeParameters '(' ParametersType ')' ResultType
	    //   | TypeParameters '(' 'this' ':' TypeName ')' ResultType
	    //   | TypeParameters '(' 'this' ':' TypeName ',' ParametersType ')' ResultType
	    function parseFunctionType() {
	        var isNew, thisBinding, params, result, fnType;
	        utility.assert(token === Token.NAME && value === 'function', 'FunctionType should start with \'function\'');
	        consume(Token.NAME);
	
	        // Google Closure Compiler is not implementing TypeParameters.
	        // So we do not. if we don't get '(', we see it as error.
	        expect(Token.LPAREN);
	
	        isNew = false;
	        params = [];
	        thisBinding = null;
	        if (token !== Token.RPAREN) {
	            // ParametersType or 'this'
	            if (token === Token.NAME &&
	                    (value === 'this' || value === 'new')) {
	                // 'this' or 'new'
	                // 'new' is Closure Compiler extension
	                isNew = value === 'new';
	                consume(Token.NAME);
	                expect(Token.COLON);
	                thisBinding = parseTypeName();
	                if (token === Token.COMMA) {
	                    consume(Token.COMMA);
	                    params = parseParametersType();
	                }
	            } else {
	                params = parseParametersType();
	            }
	        }
	
	        expect(Token.RPAREN);
	
	        result = null;
	        if (token === Token.COLON) {
	            result = parseResultType();
	        }
	
	        fnType = {
	            type: Syntax.FunctionType,
	            params: params,
	            result: result
	        };
	        if (thisBinding) {
	            // avoid adding null 'new' and 'this' properties
	            fnType['this'] = thisBinding;
	            if (isNew) {
	                fnType['new'] = true;
	            }
	        }
	        return fnType;
	    }
	
	    // BasicTypeExpression :=
	    //     '*'
	    //   | 'null'
	    //   | 'undefined'
	    //   | TypeName
	    //   | FunctionType
	    //   | UnionType
	    //   | RecordType
	    //   | ArrayType
	    function parseBasicTypeExpression() {
	        var context;
	        switch (token) {
	        case Token.STAR:
	            consume(Token.STAR);
	            return {
	                type: Syntax.AllLiteral
	            };
	
	        case Token.LPAREN:
	            return parseUnionType();
	
	        case Token.LBRACK:
	            return parseArrayType();
	
	        case Token.LBRACE:
	            return parseRecordType();
	
	        case Token.NAME:
	            if (value === 'null') {
	                consume(Token.NAME);
	                return {
	                    type: Syntax.NullLiteral
	                };
	            }
	
	            if (value === 'undefined') {
	                consume(Token.NAME);
	                return {
	                    type: Syntax.UndefinedLiteral
	                };
	            }
	
	            if (value === 'true' || value === 'false') {
	                consume(Token.NAME);
	                return {
	                    type: Syntax.BooleanLiteralType,
	                    value: value === 'true'
	                };
	            }
	
	            context = Context.save();
	            if (value === 'function') {
	                try {
	                    return parseFunctionType();
	                } catch (e) {
	                    context.restore();
	                }
	            }
	
	            return parseTypeName();
	
	        case Token.STRING:
	            next();
	            return {
	                type: Syntax.StringLiteralType,
	                value: value
	            };
	
	        case Token.NUMBER:
	            next();
	            return {
	                type: Syntax.NumericLiteralType,
	                value: value
	            };
	
	        default:
	            utility.throwError('unexpected token');
	        }
	    }
	
	    // TypeExpression :=
	    //     BasicTypeExpression
	    //   | '?' BasicTypeExpression
	    //   | '!' BasicTypeExpression
	    //   | BasicTypeExpression '?'
	    //   | BasicTypeExpression '!'
	    //   | '?'
	    //   | BasicTypeExpression '[]'
	    function parseTypeExpression() {
	        var expr;
	
	        if (token === Token.QUESTION) {
	            consume(Token.QUESTION);
	            if (token === Token.COMMA || token === Token.EQUAL || token === Token.RBRACE ||
	                    token === Token.RPAREN || token === Token.PIPE || token === Token.EOF ||
	                    token === Token.RBRACK || token === Token.GT) {
	                return {
	                    type: Syntax.NullableLiteral
	                };
	            }
	            return {
	                type: Syntax.NullableType,
	                expression: parseBasicTypeExpression(),
	                prefix: true
	            };
	        }
	
	        if (token === Token.BANG) {
	            consume(Token.BANG);
	            return {
	                type: Syntax.NonNullableType,
	                expression: parseBasicTypeExpression(),
	                prefix: true
	            };
	        }
	
	        expr = parseBasicTypeExpression();
	        if (token === Token.BANG) {
	            consume(Token.BANG);
	            return {
	                type: Syntax.NonNullableType,
	                expression: expr,
	                prefix: false
	            };
	        }
	
	        if (token === Token.QUESTION) {
	            consume(Token.QUESTION);
	            return {
	                type: Syntax.NullableType,
	                expression: expr,
	                prefix: false
	            };
	        }
	
	        if (token === Token.LBRACK) {
	            consume(Token.LBRACK);
	            expect(Token.RBRACK, 'expected an array-style type declaration (' + value + '[])');
	            return {
	                type: Syntax.TypeApplication,
	                expression: {
	                    type: Syntax.NameExpression,
	                    name: 'Array'
	                },
	                applications: [expr]
	            };
	        }
	
	        return expr;
	    }
	
	    // TopLevelTypeExpression :=
	    //      TypeExpression
	    //    | TypeUnionList
	    //
	    // This rule is Google Closure Compiler extension, not ES4
	    // like,
	    //   { number | string }
	    // If strict to ES4, we should write it as
	    //   { (number|string) }
	    function parseTop() {
	        var expr, elements;
	
	        expr = parseTypeExpression();
	        if (token !== Token.PIPE) {
	            return expr;
	        }
	
	        elements = [expr];
	        consume(Token.PIPE);
	        while (true) {
	            elements.push(parseTypeExpression());
	            if (token !== Token.PIPE) {
	                break;
	            }
	            consume(Token.PIPE);
	        }
	
	        return {
	            type: Syntax.UnionType,
	            elements: elements
	        };
	    }
	
	    function parseTopParamType() {
	        var expr;
	
	        if (token === Token.REST) {
	            consume(Token.REST);
	            return {
	                type: Syntax.RestType,
	                expression: parseTop()
	            };
	        }
	
	        expr = parseTop();
	        if (token === Token.EQUAL) {
	            consume(Token.EQUAL);
	            return {
	                type: Syntax.OptionalType,
	                expression: expr
	            };
	        }
	
	        return expr;
	    }
	
	    function parseType(src, opt) {
	        var expr;
	
	        source = src;
	        length = source.length;
	        index = 0;
	        previous = 0;
	
	        next();
	        expr = parseTop();
	
	        if (opt && opt.midstream) {
	            return {
	                expression: expr,
	                index: previous
	            };
	        }
	
	        if (token !== Token.EOF) {
	            utility.throwError('not reach to EOF');
	        }
	
	        return expr;
	    }
	
	    function parseParamType(src, opt) {
	        var expr;
	
	        source = src;
	        length = source.length;
	        index = 0;
	        previous = 0;
	
	        next();
	        expr = parseTopParamType();
	
	        if (opt && opt.midstream) {
	            return {
	                expression: expr,
	                index: previous
	            };
	        }
	
	        if (token !== Token.EOF) {
	            utility.throwError('not reach to EOF');
	        }
	
	        return expr;
	    }
	
	    function stringifyImpl(node, compact, topLevel) {
	        var result, i, iz;
	
	        switch (node.type) {
	        case Syntax.NullableLiteral:
	            result = '?';
	            break;
	
	        case Syntax.AllLiteral:
	            result = '*';
	            break;
	
	        case Syntax.NullLiteral:
	            result = 'null';
	            break;
	
	        case Syntax.UndefinedLiteral:
	            result = 'undefined';
	            break;
	
	        case Syntax.VoidLiteral:
	            result = 'void';
	            break;
	
	        case Syntax.UnionType:
	            if (!topLevel) {
	                result = '(';
	            } else {
	                result = '';
	            }
	
	            for (i = 0, iz = node.elements.length; i < iz; ++i) {
	                result += stringifyImpl(node.elements[i], compact);
	                if ((i + 1) !== iz) {
	                    result += '|';
	                }
	            }
	
	            if (!topLevel) {
	                result += ')';
	            }
	            break;
	
	        case Syntax.ArrayType:
	            result = '[';
	            for (i = 0, iz = node.elements.length; i < iz; ++i) {
	                result += stringifyImpl(node.elements[i], compact);
	                if ((i + 1) !== iz) {
	                    result += compact ? ',' : ', ';
	                }
	            }
	            result += ']';
	            break;
	
	        case Syntax.RecordType:
	            result = '{';
	            for (i = 0, iz = node.fields.length; i < iz; ++i) {
	                result += stringifyImpl(node.fields[i], compact);
	                if ((i + 1) !== iz) {
	                    result += compact ? ',' : ', ';
	                }
	            }
	            result += '}';
	            break;
	
	        case Syntax.FieldType:
	            if (node.value) {
	                result = node.key + (compact ? ':' : ': ') + stringifyImpl(node.value, compact);
	            } else {
	                result = node.key;
	            }
	            break;
	
	        case Syntax.FunctionType:
	            result = compact ? 'function(' : 'function (';
	
	            if (node['this']) {
	                if (node['new']) {
	                    result += (compact ? 'new:' : 'new: ');
	                } else {
	                    result += (compact ? 'this:' : 'this: ');
	                }
	
	                result += stringifyImpl(node['this'], compact);
	
	                if (node.params.length !== 0) {
	                    result += compact ? ',' : ', ';
	                }
	            }
	
	            for (i = 0, iz = node.params.length; i < iz; ++i) {
	                result += stringifyImpl(node.params[i], compact);
	                if ((i + 1) !== iz) {
	                    result += compact ? ',' : ', ';
	                }
	            }
	
	            result += ')';
	
	            if (node.result) {
	                result += (compact ? ':' : ': ') + stringifyImpl(node.result, compact);
	            }
	            break;
	
	        case Syntax.ParameterType:
	            result = node.name + (compact ? ':' : ': ') + stringifyImpl(node.expression, compact);
	            break;
	
	        case Syntax.RestType:
	            result = '...';
	            if (node.expression) {
	                result += stringifyImpl(node.expression, compact);
	            }
	            break;
	
	        case Syntax.NonNullableType:
	            if (node.prefix) {
	                result = '!' + stringifyImpl(node.expression, compact);
	            } else {
	                result = stringifyImpl(node.expression, compact) + '!';
	            }
	            break;
	
	        case Syntax.OptionalType:
	            result = stringifyImpl(node.expression, compact) + '=';
	            break;
	
	        case Syntax.NullableType:
	            if (node.prefix) {
	                result = '?' + stringifyImpl(node.expression, compact);
	            } else {
	                result = stringifyImpl(node.expression, compact) + '?';
	            }
	            break;
	
	        case Syntax.NameExpression:
	            result = node.name;
	            break;
	
	        case Syntax.TypeApplication:
	            result = stringifyImpl(node.expression, compact) + '.<';
	            for (i = 0, iz = node.applications.length; i < iz; ++i) {
	                result += stringifyImpl(node.applications[i], compact);
	                if ((i + 1) !== iz) {
	                    result += compact ? ',' : ', ';
	                }
	            }
	            result += '>';
	            break;
	
	        case Syntax.StringLiteralType:
	            result = '"' + node.value + '"';
	            break;
	
	        case Syntax.NumericLiteralType:
	            result = String(node.value);
	            break;
	
	        case Syntax.BooleanLiteralType:
	            result = String(node.value);
	            break;
	
	        default:
	            utility.throwError('Unknown type ' + node.type);
	        }
	
	        return result;
	    }
	
	    function stringify(node, options) {
	        if (options == null) {
	            options = {};
	        }
	        return stringifyImpl(node, options.compact, options.topLevel);
	    }
	
	    exports.parseType = parseType;
	    exports.parseParamType = parseParamType;
	    exports.stringify = stringify;
	    exports.Syntax = Syntax;
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * @fileoverview Utilities for Doctrine
	 * @author Yusuke Suzuki <utatane.tea@gmail.com>
	 */
	
	
	(function () {
	    'use strict';
	
	    var VERSION;
	
	    VERSION = __webpack_require__(379).version;
	    exports.VERSION = VERSION;
	
	    function DoctrineError(message) {
	        this.name = 'DoctrineError';
	        this.message = message;
	    }
	    DoctrineError.prototype = (function () {
	        var Middle = function () { };
	        Middle.prototype = Error.prototype;
	        return new Middle();
	    }());
	    DoctrineError.prototype.constructor = DoctrineError;
	    exports.DoctrineError = DoctrineError;
	
	    function throwError(message) {
	        throw new DoctrineError(message);
	    }
	    exports.throwError = throwError;
	
	    exports.assert = __webpack_require__(313);
	}());
	
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 379 */
/***/ function(module, exports) {

	module.exports = {
		"_args": [
			[
				"doctrine@^1.2.0",
				"/home/travis/build/tocco/tocco-client/packages/tocco-ui-showcase/node_modules/react-docgen"
			]
		],
		"_from": "doctrine@>=1.2.0 <2.0.0",
		"_id": "doctrine@1.5.0",
		"_inCache": true,
		"_location": "/doctrine",
		"_nodeVersion": "4.4.7",
		"_npmOperationalInternal": {
			"host": "packages-16-east.internal.npmjs.com",
			"tmp": "tmp/doctrine-1.5.0.tgz_1476393949423_0.8078370734583586"
		},
		"_npmUser": {
			"email": "nicholas+eslint@nczconsulting.com",
			"name": "eslint"
		},
		"_npmVersion": "2.15.8",
		"_phantomChildren": {},
		"_requested": {
			"name": "doctrine",
			"raw": "doctrine@^1.2.0",
			"rawSpec": "^1.2.0",
			"scope": null,
			"spec": ">=1.2.0 <2.0.0",
			"type": "range"
		},
		"_requiredBy": [
			"/react-docgen"
		],
		"_resolved": "https://registry.npmjs.org/doctrine/-/doctrine-1.5.0.tgz",
		"_shasum": "379dce730f6166f76cefa4e6707a159b02c5a6fa",
		"_shrinkwrap": null,
		"_spec": "doctrine@^1.2.0",
		"_where": "/home/travis/build/tocco/tocco-client/packages/tocco-ui-showcase/node_modules/react-docgen",
		"bugs": {
			"url": "https://github.com/eslint/doctrine/issues"
		},
		"dependencies": {
			"esutils": "^2.0.2",
			"isarray": "^1.0.0"
		},
		"description": "JSDoc parser",
		"devDependencies": {
			"coveralls": "^2.11.2",
			"dateformat": "^1.0.11",
			"eslint": "^1.10.3",
			"eslint-release": "^0.10.0",
			"istanbul": "^0.4.1",
			"linefix": "^0.1.1",
			"mocha": "^2.3.3",
			"npm-license": "^0.3.1",
			"semver": "^5.0.3",
			"shelljs": "^0.5.3",
			"shelljs-nodecli": "^0.1.1",
			"should": "^5.0.1"
		},
		"directories": {
			"lib": "./lib"
		},
		"dist": {
			"shasum": "379dce730f6166f76cefa4e6707a159b02c5a6fa",
			"tarball": "https://registry.npmjs.org/doctrine/-/doctrine-1.5.0.tgz"
		},
		"engines": {
			"node": ">=0.10.0"
		},
		"files": [
			"LICENSE.BSD",
			"LICENSE.closure-compiler",
			"LICENSE.esprima",
			"README.md",
			"lib"
		],
		"gitHead": "dcd631feb5dd5bcd0899dd35548da2752ea2263e",
		"homepage": "https://github.com/eslint/doctrine",
		"installable": true,
		"licenses": [
			{
				"type": "BSD",
				"url": "http://github.com/eslint/doctrine/raw/master/LICENSE.BSD"
			}
		],
		"main": "lib/doctrine.js",
		"maintainers": [
			{
				"name": "constellation",
				"email": "utatane.tea@gmail.com"
			},
			{
				"name": "eslint",
				"email": "nicholas+eslint@nczconsulting.com"
			},
			{
				"name": "nzakas",
				"email": "nicholas@nczconsulting.com"
			}
		],
		"name": "doctrine",
		"optionalDependencies": {},
		"repository": {
			"type": "git",
			"url": "git+https://github.com/eslint/doctrine.git"
		},
		"scripts": {
			"alpharelease": "eslint-prerelease alpha",
			"betarelease": "eslint-prerelease beta",
			"ci-release": "eslint-ci-release",
			"lint": "eslint lib/",
			"release": "eslint-release",
			"test": "npm run lint && node Makefile.js test"
		},
		"version": "1.5.0"
	};

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = defaultPropsHandler;
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	var _getMemberValuePath = __webpack_require__(342);
	
	var _getMemberValuePath2 = _interopRequireDefault(_getMemberValuePath);
	
	var _printValue = __webpack_require__(360);
	
	var _printValue2 = _interopRequireDefault(_printValue);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	var _isStatelessComponent = __webpack_require__(381);
	
	var _isStatelessComponent2 = _interopRequireDefault(_isStatelessComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _recast$types = _recast2.default.types; /*
	                                             * Copyright (c) 2015, Facebook, Inc.
	                                             * All rights reserved.
	                                             *
	                                             * This source code is licensed under the BSD-style license found in the
	                                             * LICENSE file in the root directory of this source tree. An additional grant
	                                             * of patent rights can be found in the PATENTS file in the same directory.
	                                             *
	                                             * 
	                                             *
	                                             */
	
	var types = _recast$types.namedTypes;
	var visit = _recast$types.visit;
	
	
	function getDefaultValue(path) {
	  var node = path.node;
	  var defaultValue;
	  if (types.Literal.check(node)) {
	    defaultValue = node.raw;
	  } else {
	    if (types.AssignmentPattern.check(path.node)) {
	      path = (0, _resolveToValue2.default)(path.get('right'));
	    } else {
	      path = (0, _resolveToValue2.default)(path);
	    }
	    if (types.ImportDeclaration.check(path.node)) {
	      defaultValue = node.name;
	    } else {
	      node = path.node;
	      defaultValue = (0, _printValue2.default)(path);
	    }
	  }
	  if (typeof defaultValue !== 'undefined') {
	    return {
	      value: defaultValue,
	      computed: types.CallExpression.check(node) || types.MemberExpression.check(node) || types.Identifier.check(node)
	    };
	  }
	}
	
	function getStatelessPropsPath(componentDefinition) {
	  return (0, _resolveToValue2.default)(componentDefinition).get('params', 0);
	}
	
	function getDefaultPropsPath(componentDefinition) {
	  var defaultPropsPath = (0, _getMemberValuePath2.default)(componentDefinition, 'defaultProps');
	  if (!defaultPropsPath) {
	    return;
	  }
	
	  defaultPropsPath = (0, _resolveToValue2.default)(defaultPropsPath);
	  if (!defaultPropsPath) {
	    return;
	  }
	
	  if (types.FunctionExpression.check(defaultPropsPath.node)) {
	    // Find the value that is returned from the function and process it if it is
	    // an object literal.
	    visit(defaultPropsPath.get('body'), {
	      visitFunction: function visitFunction() {
	        return false;
	      },
	      visitReturnStatement: function visitReturnStatement(path) {
	        var resolvedPath = (0, _resolveToValue2.default)(path.get('argument'));
	        if (types.ObjectExpression.check(resolvedPath.node)) {
	          defaultPropsPath = resolvedPath;
	        }
	        return false;
	      }
	    });
	  }
	  return defaultPropsPath;
	}
	
	function getDefaultValuesFromProps(properties, documentation, isStatelessComponent) {
	  properties.filter(function (propertyPath) {
	    return types.Property.check(propertyPath.node);
	  })
	  // Don't evaluate property if component is functional and the node is not an AssignmentPattern
	  .filter(function (propertyPath) {
	    return !isStatelessComponent || types.AssignmentPattern.check(propertyPath.get('value').node);
	  }).forEach(function (propertyPath) {
	    var propDescriptor = documentation.getPropDescriptor((0, _getPropertyName2.default)(propertyPath));
	    var value = isStatelessComponent ? propertyPath.get('value', 'right') : propertyPath.get('value');
	    var defaultValue = getDefaultValue(value, isStatelessComponent);
	    if (defaultValue) {
	      propDescriptor.defaultValue = defaultValue;
	    }
	  });
	}
	
	function defaultPropsHandler(documentation, componentDefinition) {
	  var statelessProps = null;
	  var defaultPropsPath = getDefaultPropsPath(componentDefinition);
	  if ((0, _isStatelessComponent2.default)(componentDefinition)) {
	    statelessProps = getStatelessPropsPath(componentDefinition);
	  }
	
	  // Do both statelessProps and defaultProps if both are available so defaultProps can override
	  if (statelessProps && types.ObjectPattern.check(statelessProps.node)) {
	    getDefaultValuesFromProps(statelessProps.get('properties'), documentation, true);
	  }
	  if (defaultPropsPath && types.ObjectExpression.check(defaultPropsPath.node)) {
	    getDefaultValuesFromProps(defaultPropsPath.get('properties'), documentation, false);
	  }
	}

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isStatelessComponent;
	
	var _getPropertyValuePath = __webpack_require__(349);
	
	var _getPropertyValuePath2 = _interopRequireDefault(_getPropertyValuePath);
	
	var _isReactComponentClass = __webpack_require__(364);
	
	var _isReactComponentClass2 = _interopRequireDefault(_isReactComponentClass);
	
	var _isReactCreateClassCall = __webpack_require__(382);
	
	var _isReactCreateClassCall2 = _interopRequireDefault(_isReactCreateClassCall);
	
	var _isReactCreateElementCall = __webpack_require__(383);
	
	var _isReactCreateElementCall2 = _interopRequireDefault(_isReactCreateElementCall);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	
	var reNonLexicalBlocks = /^If|^Else|^Switch/;
	
	var validPossibleStatelessComponentTypes = ['Property', 'FunctionDeclaration', 'FunctionExpression', 'ArrowFunctionExpression'];
	
	function isJSXElementOrReactCreateElement(path) {
	  return path.node.type === 'JSXElement' || path.node.type === 'CallExpression' && (0, _isReactCreateElementCall2.default)(path);
	}
	
	function returnsJSXElementOrReactCreateElementCall(path) {
	  var visited = false;
	
	  // early exit for ArrowFunctionExpressions
	  if (isJSXElementOrReactCreateElement(path.get('body'))) {
	    return true;
	  }
	
	  function isSameBlockScope(p) {
	    var block = p;
	    do {
	      block = block.parent;
	      // jump over non-lexical blocks
	      if (reNonLexicalBlocks.test(block.parent.node.type)) {
	        block = block.parent;
	      }
	    } while (!types.BlockStatement.check(block.node) && /Function|Property/.test(block.parent.parent.node.type) && !reNonLexicalBlocks.test(block.parent.node.type));
	
	    // special case properties
	    if (types.Property.check(path.node)) {
	      return block.node === path.get('value', 'body').node;
	    }
	
	    return block.node === path.get('body').node;
	  }
	
	  _recast2.default.visit(path, {
	    visitReturnStatement: function visitReturnStatement(returnPath) {
	      var resolvedPath = (0, _resolveToValue2.default)(returnPath.get('argument'));
	      if (isJSXElementOrReactCreateElement(resolvedPath) && isSameBlockScope(returnPath)) {
	        visited = true;
	        return false;
	      }
	
	      if (resolvedPath.node.type === 'CallExpression') {
	        var calleeValue = (0, _resolveToValue2.default)(resolvedPath.get('callee'));
	
	        if (returnsJSXElementOrReactCreateElementCall(calleeValue)) {
	          visited = true;
	          return false;
	        }
	
	        var resolvedValue = void 0;
	
	        var namesToResolve = [calleeValue.get('property')];
	
	        if (calleeValue.node.type === 'MemberExpression') {
	          if (calleeValue.get('object').node.type === 'Identifier') {
	            resolvedValue = (0, _resolveToValue2.default)(calleeValue.get('object'));
	          } else {
	            while (calleeValue.get('object').node.type !== 'Identifier') {
	              calleeValue = calleeValue.get('object');
	              namesToResolve.unshift(calleeValue.get('property'));
	            }
	
	            resolvedValue = (0, _resolveToValue2.default)(calleeValue.get('object'));
	          }
	        }
	
	        if (resolvedValue && types.ObjectExpression.check(resolvedValue.node)) {
	          var resolvedMemberExpression = namesToResolve.reduce(function (result, path) {
	            // eslint-disable-line no-shadow
	            if (!path) {
	              return result;
	            }
	
	            if (result) {
	              result = (0, _getPropertyValuePath2.default)(result, path.node.name);
	              if (result && types.Identifier.check(result.node)) {
	                return (0, _resolveToValue2.default)(result);
	              }
	            }
	            return result;
	          }, resolvedValue);
	
	          if (!resolvedMemberExpression || returnsJSXElementOrReactCreateElementCall(resolvedMemberExpression)) {
	            visited = true;
	            return false;
	          }
	        }
	      }
	
	      this.traverse(returnPath);
	    }
	  });
	
	  return visited;
	}
	
	/**
	 * Returns `true` if the path represents a function which returns a JSXElement
	 */
	function isStatelessComponent(path) {
	  var node = path.node;
	
	  if (validPossibleStatelessComponentTypes.indexOf(node.type) === -1) {
	    return false;
	  }
	
	  if (node.type === 'Property') {
	    if ((0, _isReactCreateClassCall2.default)(path.parent) || (0, _isReactComponentClass2.default)(path.parent)) {
	      return false;
	    }
	  }
	
	  if (returnsJSXElementOrReactCreateElementCall(path)) {
	    return true;
	  }
	
	  return false;
	}

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isReactCreateClassCall;
	
	var _isReactModuleName = __webpack_require__(365);
	
	var _isReactModuleName2 = _interopRequireDefault(_isReactModuleName);
	
	var _match = __webpack_require__(366);
	
	var _match2 = _interopRequireDefault(_match);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToModule = __webpack_require__(367);
	
	var _resolveToModule2 = _interopRequireDefault(_resolveToModule);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Returns true if the expression is a function call of the form
	 * `React.createClass(...)`.
	 */
	
	function isReactCreateClassCall(path) {
	  if (types.ExpressionStatement.check(path.node)) {
	    path = path.get('expression');
	  }
	
	  if (!(0, _match2.default)(path.node, { callee: { property: { name: 'createClass' } } })) {
	    return false;
	  }
	  var module = (0, _resolveToModule2.default)(path.get('callee', 'object'));
	  return Boolean(module && (0, _isReactModuleName2.default)(module));
	}

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isReactCreateElementCall;
	
	var _isReactModuleName = __webpack_require__(365);
	
	var _isReactModuleName2 = _interopRequireDefault(_isReactModuleName);
	
	var _match = __webpack_require__(366);
	
	var _match2 = _interopRequireDefault(_match);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToModule = __webpack_require__(367);
	
	var _resolveToModule2 = _interopRequireDefault(_resolveToModule);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Returns true if the expression is a function call of the form
	 * `React.createElement(...)`.
	 */
	
	function isReactCreateElementCall(path) {
	  if (types.ExpressionStatement.check(path.node)) {
	    path = path.get('expression');
	  }
	
	  if (!(0, _match2.default)(path.node, { callee: { property: { name: 'createElement' } } })) {
	    return false;
	  }
	  var module = (0, _resolveToModule2.default)(path.get('callee', 'object'));
	  return Boolean(module && (0, _isReactModuleName2.default)(module));
	}

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = propTypeHandler;
	
	var _getPropType = __webpack_require__(385);
	
	var _getPropType2 = _interopRequireDefault(_getPropType);
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	var _getMemberValuePath = __webpack_require__(342);
	
	var _getMemberValuePath2 = _interopRequireDefault(_getMemberValuePath);
	
	var _isReactModuleName = __webpack_require__(365);
	
	var _isReactModuleName2 = _interopRequireDefault(_isReactModuleName);
	
	var _isRequiredPropType = __webpack_require__(397);
	
	var _isRequiredPropType2 = _interopRequireDefault(_isRequiredPropType);
	
	var _printValue = __webpack_require__(360);
	
	var _printValue2 = _interopRequireDefault(_printValue);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToModule = __webpack_require__(367);
	
	var _resolveToModule2 = _interopRequireDefault(_resolveToModule);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	
	function isPropTypesExpression(path) {
	  var moduleName = (0, _resolveToModule2.default)(path);
	  if (moduleName) {
	    return (0, _isReactModuleName2.default)(moduleName) || moduleName === 'ReactPropTypes';
	  }
	  return false;
	}
	
	function amendPropTypes(documentation, path) {
	  if (!types.ObjectExpression.check(path.node)) {
	    return;
	  }
	
	  path.get('properties').each(function (propertyPath) {
	    switch (propertyPath.node.type) {
	      case types.Property.name:
	        var propDescriptor = documentation.getPropDescriptor((0, _getPropertyName2.default)(propertyPath));
	        var valuePath = propertyPath.get('value');
	        var type = isPropTypesExpression(valuePath) ? (0, _getPropType2.default)(valuePath) : { name: 'custom', raw: (0, _printValue2.default)(valuePath) };
	
	        if (type) {
	          propDescriptor.type = type;
	          propDescriptor.required = type.name !== 'custom' && (0, _isRequiredPropType2.default)(valuePath);
	        }
	        break;
	      case types.SpreadProperty.name:
	        var resolvedValuePath = (0, _resolveToValue2.default)(propertyPath.get('argument'));
	        switch (resolvedValuePath.node.type) {
	          case types.ObjectExpression.name:
	            // normal object literal
	            amendPropTypes(documentation, resolvedValuePath);
	            break;
	        }
	        break;
	    }
	  });
	}
	
	function propTypeHandler(documentation, path) {
	  var propTypesPath = (0, _getMemberValuePath2.default)(path, 'propTypes');
	  if (!propTypesPath) {
	    return;
	  }
	  propTypesPath = (0, _resolveToValue2.default)(propTypesPath);
	  if (!propTypesPath) {
	    return;
	  }
	  amendPropTypes(documentation, propTypesPath);
	}

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(386);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	exports.default = getPropType;
	
	var _docblock = __webpack_require__(340);
	
	var _getMembers = __webpack_require__(396);
	
	var _getMembers2 = _interopRequireDefault(_getMembers);
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	var _isRequiredPropType = __webpack_require__(397);
	
	var _isRequiredPropType2 = _interopRequireDefault(_isRequiredPropType);
	
	var _printValue = __webpack_require__(360);
	
	var _printValue2 = _interopRequireDefault(_printValue);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes; /*
	                                                * Copyright (c) 2015, Facebook, Inc.
	                                                * All rights reserved.
	                                                *
	                                                * This source code is licensed under the BSD-style license found in the
	                                                * LICENSE file in the root directory of this source tree. An additional grant
	                                                * of patent rights can be found in the PATENTS file in the same directory.
	                                                *
	                                                * 
	                                                *
	                                                */
	
	/*eslint no-use-before-define: 0*/
	
	function getEnumValues(path) {
	  var values = [];
	
	  path.get('elements').each(function (elementPath) {
	    if (types.SpreadElement.check(elementPath.node)) {
	      var _value = (0, _resolveToValue2.default)(elementPath.get('argument'));
	
	      if (types.ArrayExpression.check(_value.node)) {
	        // if the SpreadElement resolved to an Array, add all their elements too
	        return values.push.apply(values, (0, _toConsumableArray3.default)(getEnumValues(_value)));
	      } else {
	        // otherwise we'll just print the SpreadElement itself
	        return values.push({
	          value: (0, _printValue2.default)(elementPath),
	          computed: !types.Literal.check(elementPath.node)
	        });
	      }
	    }
	
	    // try to resolve the array element to it's value
	    var value = (0, _resolveToValue2.default)(elementPath);
	    return values.push({
	      value: (0, _printValue2.default)(value),
	      computed: !types.Literal.check(value.node)
	    });
	  });
	
	  return values;
	}
	
	function getPropTypeOneOf(argumentPath) {
	  var type = { name: 'enum' };
	  var value = (0, _resolveToValue2.default)(argumentPath);
	  if (!types.ArrayExpression.check(value.node)) {
	    // could not easily resolve to an Array, let's print the original value
	    type.computed = true;
	    type.value = (0, _printValue2.default)(argumentPath);
	  } else {
	    type.value = getEnumValues(value);
	  }
	  return type;
	}
	
	function getPropTypeOneOfType(argumentPath) {
	  var type = { name: 'union' };
	  if (!types.ArrayExpression.check(argumentPath.node)) {
	    type.computed = true;
	    type.value = (0, _printValue2.default)(argumentPath);
	  } else {
	    type.value = argumentPath.get('elements').map(getPropType);
	  }
	  return type;
	}
	
	function getPropTypeArrayOf(argumentPath) {
	  var type = { name: 'arrayOf' };
	  var subType = getPropType(argumentPath);
	
	  if (subType.name === 'unknown') {
	    type.value = (0, _printValue2.default)(argumentPath);
	    type.computed = true;
	  } else {
	    type.value = subType;
	  }
	  return type;
	}
	
	function getPropTypeObjectOf(argumentPath) {
	  var type = { name: 'objectOf' };
	  var subType = getPropType(argumentPath);
	
	  if (subType.name === 'unknown') {
	    type.value = (0, _printValue2.default)(argumentPath);
	    type.computed = true;
	  } else {
	    type.value = subType;
	  }
	  return type;
	}
	
	function getPropTypeShape(argumentPath) {
	  var type = { name: 'shape' };
	  if (!types.ObjectExpression.check(argumentPath.node)) {
	    argumentPath = (0, _resolveToValue2.default)(argumentPath);
	  }
	
	  if (types.ObjectExpression.check(argumentPath.node)) {
	    var value = {};
	    argumentPath.get('properties').each(function (propertyPath) {
	      var descriptor = getPropType(propertyPath.get('value'));
	      var docs = (0, _docblock.getDocblock)(propertyPath);
	      if (docs) {
	        descriptor.description = docs;
	      }
	      descriptor.required = (0, _isRequiredPropType2.default)(propertyPath.get('value'));
	      value[(0, _getPropertyName2.default)(propertyPath)] = descriptor;
	    });
	    type.value = value;
	  }
	
	  if (!type.value) {
	    type.value = (0, _printValue2.default)(argumentPath);
	    type.computed = true;
	  }
	
	  return type;
	}
	
	function getPropTypeInstanceOf(argumentPath) {
	  return {
	    name: 'instanceOf',
	    value: (0, _printValue2.default)(argumentPath)
	  };
	}
	
	var simplePropTypes = {
	  array: 1,
	  bool: 1,
	  func: 1,
	  number: 1,
	  object: 1,
	  string: 1,
	  any: 1,
	  element: 1,
	  node: 1,
	  symbol: 1
	};
	
	var propTypes = {
	  oneOf: getPropTypeOneOf,
	  oneOfType: getPropTypeOneOfType,
	  instanceOf: getPropTypeInstanceOf,
	  arrayOf: getPropTypeArrayOf,
	  objectOf: getPropTypeObjectOf,
	  shape: getPropTypeShape
	};
	
	/**
	 * Tries to identify the prop type by inspecting the path for known
	 * prop type names. This method doesn't check whether the found type is actually
	 * from React.PropTypes. It simply assumes that a match has the same meaning
	 * as the React.PropTypes one.
	 *
	 * If there is no match, "custom" is returned.
	 */
	function getPropType(path) {
	  var descriptor;
	  (0, _getMembers2.default)(path, true).some(function (member) {
	    var node = member.path.node;
	    var name;
	    if (types.Literal.check(node)) {
	      name = node.value;
	    } else if (types.Identifier.check(node) && !member.computed) {
	      name = node.name;
	    }
	    if (name) {
	      if (simplePropTypes.hasOwnProperty(name)) {
	        descriptor = { name: name };
	        return true;
	      } else if (propTypes.hasOwnProperty(name) && member.argumentsPath) {
	        descriptor = propTypes[name](member.argumentsPath.get(0));
	        return true;
	      }
	    }
	  });
	  if (!descriptor) {
	    var node = path.node;
	    if (types.Identifier.check(node) && simplePropTypes.hasOwnProperty(node.name)) {
	      descriptor = { name: node.name };
	    } else if (types.CallExpression.check(node) && types.Identifier.check(node.callee) && propTypes.hasOwnProperty(node.callee.name)) {
	      descriptor = propTypes[node.callee.name](path.get('arguments', 0));
	    } else {
	      descriptor = { name: 'custom', raw: (0, _printValue2.default)(path) };
	    }
	  }
	  return descriptor;
	}

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _from = __webpack_require__(387);
	
	var _from2 = _interopRequireDefault(_from);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }
	
	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(388), __esModule: true };

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(40);
	__webpack_require__(389);
	module.exports = __webpack_require__(18).Array.from;

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(19)
	  , $export        = __webpack_require__(17)
	  , toObject       = __webpack_require__(8)
	  , call           = __webpack_require__(390)
	  , isArrayIter    = __webpack_require__(391)
	  , toLength       = __webpack_require__(56)
	  , createProperty = __webpack_require__(392)
	  , getIterFn      = __webpack_require__(393);
	
	$export($export.S + $export.F * !__webpack_require__(395)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(23);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(46)
	  , ITERATOR   = __webpack_require__(61)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(22)
	  , createDesc      = __webpack_require__(30);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(394)
	  , ITERATOR  = __webpack_require__(61)('iterator')
	  , Iterators = __webpack_require__(46);
	module.exports = __webpack_require__(18).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(54)
	  , TAG = __webpack_require__(61)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(61)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getMembers;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	/*eslint no-labels: 0*/
	
	/**
	 * Helper methods for dealing with MemberExpressions (and CallExpressions).
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Given a "nested" Member/CallExpression, e.g.
	 *
	 * foo.bar()[baz][42]
	 *
	 * this returns a list of "members". In this example it would be something like
	 * [
	 *   {path: NodePath<bar>, arguments: NodePath<empty>, computed: false},
	 *   {path: NodePath<baz>, arguments: null, computed: true},
	 *   {path: NodePath<42>, arguments: null, computed: false}
	 * ]
	 */
	
	function getMembers(path) {
	  var includeRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  var result = [];
	  var argumentsPath = null;
	  loop: while (true) {
	    // eslint-disable-line no-constant-condition
	    switch (true) {
	      case types.MemberExpression.check(path.node):
	        result.push({
	          path: path.get('property'),
	          computed: path.node.computed,
	          argumentsPath: argumentsPath
	        });
	        argumentsPath = null;
	        path = path.get('object');
	        break;
	      case types.CallExpression.check(path.node):
	        argumentsPath = path.get('arguments');
	        path = path.get('callee');
	        break;
	      default:
	        break loop;
	    }
	  }
	  if (includeRoot && result.length > 0) {
	    result.push({
	      path: path,
	      computed: false,
	      argumentsPath: argumentsPath
	    });
	  }
	  return result.reverse();
	}

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isRequiredPropType;
	
	var _getMembers = __webpack_require__(396);
	
	var _getMembers2 = _interopRequireDefault(_getMembers);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Returns true of the prop is required, according to its type defintion
	 */
	function isRequiredPropType(path) {
	  return (0, _getMembers2.default)(path).some(function (member) {
	    return !member.computed && member.path.node.name === 'isRequired' || member.computed && member.path.node.value === 'isRequired';
	  });
	} /*
	   * Copyright (c) 2015, Facebook, Inc.
	   * All rights reserved.
	   *
	   * This source code is licensed under the BSD-style license found in the
	   * LICENSE file in the root directory of this source tree. An additional grant
	   * of patent rights can be found in the PATENTS file in the same directory.
	   *
	   * 
	   */

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = propTypeCompositionHandler;
	
	var _getMemberValuePath = __webpack_require__(342);
	
	var _getMemberValuePath2 = _interopRequireDefault(_getMemberValuePath);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToModule = __webpack_require__(367);
	
	var _resolveToModule2 = _interopRequireDefault(_resolveToModule);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * It resolves the path to its module name and adds it to the "composes" entry
	 * in the documentation.
	 */
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	function amendComposes(documentation, path) {
	  var moduleName = (0, _resolveToModule2.default)(path);
	  if (moduleName) {
	    documentation.addComposes(moduleName);
	  }
	}
	
	function processObjectExpression(documentation, path) {
	  path.get('properties').each(function (propertyPath) {
	    switch (propertyPath.node.type) {
	      case types.SpreadProperty.name:
	        var resolvedValuePath = (0, _resolveToValue2.default)(propertyPath.get('argument'));
	        amendComposes(documentation, resolvedValuePath);
	        break;
	    }
	  });
	}
	
	function propTypeCompositionHandler(documentation, path) {
	  var propTypesPath = (0, _getMemberValuePath2.default)(path, 'propTypes');
	  if (!propTypesPath) {
	    return;
	  }
	  propTypesPath = (0, _resolveToValue2.default)(propTypesPath);
	  if (!propTypesPath) {
	    return;
	  }
	
	  switch (propTypesPath.node.type) {
	    case types.ObjectExpression.name:
	      processObjectExpression(documentation, propTypesPath);
	      break;
	    default:
	      amendComposes(documentation, propTypesPath);
	      break;
	  }
	}

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = propDocBlockHandler;
	
	var _getMemberValuePath = __webpack_require__(342);
	
	var _getMemberValuePath2 = _interopRequireDefault(_getMemberValuePath);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	var _setPropDescription = __webpack_require__(400);
	
	var _setPropDescription2 = _interopRequireDefault(_setPropDescription);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes; /*
	                                                * Copyright (c) 2015, Facebook, Inc.
	                                                * All rights reserved.
	                                                *
	                                                * This source code is licensed under the BSD-style license found in the
	                                                * LICENSE file in the root directory of this source tree. An additional grant
	                                                * of patent rights can be found in the PATENTS file in the same directory.
	                                                *
	                                                * 
	                                                *
	                                                */
	
	function propDocBlockHandler(documentation, path) {
	  var propTypesPath = (0, _getMemberValuePath2.default)(path, 'propTypes');
	  if (!propTypesPath) {
	    return;
	  }
	  propTypesPath = (0, _resolveToValue2.default)(propTypesPath);
	  if (!propTypesPath || !types.ObjectExpression.check(propTypesPath.node)) {
	    return;
	  }
	
	  propTypesPath.get('properties').each(function (propertyPath) {
	    // we only support documentation of actual properties, not spread
	    if (types.Property.check(propertyPath.node)) {
	      (0, _setPropDescription2.default)(documentation, propertyPath);
	    }
	  });
	}

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	var _docblock = __webpack_require__(340);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 *
	 */
	exports.default = function (documentation, propertyPath) {
	  var propName = (0, _getPropertyName2.default)(propertyPath);
	  var propDescriptor = documentation.getPropDescriptor(propName);
	
	  if (propDescriptor.description) {
	    return;
	  }
	
	  propDescriptor.description = (0, _docblock.getDocblock)(propertyPath) || '';
	}; /*
	    * Copyright (c) 2015, Facebook, Inc.
	    * All rights reserved.
	    *
	    * This source code is licensed under the BSD-style license found in the
	    * LICENSE file in the root directory of this source tree. An additional grant
	    * of patent rights can be found in the PATENTS file in the same directory.
	    *
	    * 
	    *
	    */

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = displayNameHandler;
	
	var _getMemberValuePath = __webpack_require__(342);
	
	var _getMemberValuePath2 = _interopRequireDefault(_getMemberValuePath);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	var _traverse = __webpack_require__(351);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes; /*
	                                                * Copyright (c) 2015, Facebook, Inc.
	                                                * All rights reserved.
	                                                *
	                                                * This source code is licensed under the BSD-style license found in the
	                                                * LICENSE file in the root directory of this source tree. An additional grant
	                                                * of patent rights can be found in the PATENTS file in the same directory.
	                                                *
	                                                * 
	                                                *
	                                                */
	
	function displayNameHandler(documentation, path) {
	  var displayNamePath = (0, _getMemberValuePath2.default)(path, 'displayName');
	  if (!displayNamePath) {
	    return;
	  }
	  displayNamePath = (0, _resolveToValue2.default)(displayNamePath);
	
	  // If display name is defined as a getter we get a function expression as
	  // value. In that case we try to determine the value from the return
	  // statement.
	  if (types.FunctionExpression.check(displayNamePath.node)) {
	    (0, _traverse.traverseShallow)(displayNamePath.get('body'), {
	      visitReturnStatement: function visitReturnStatement(path) {
	        displayNamePath = (0, _resolveToValue2.default)(path.get('argument'));
	        return false;
	      }
	    });
	  }
	  if (!displayNamePath || !types.Literal.check(displayNamePath.node)) {
	    return;
	  }
	  documentation.set('displayName', displayNamePath.node.value);
	}

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flowTypeHandler;
	
	var _getFlowType = __webpack_require__(359);
	
	var _getFlowType2 = _interopRequireDefault(_getFlowType);
	
	var _getPropertyName = __webpack_require__(350);
	
	var _getPropertyName2 = _interopRequireDefault(_getPropertyName);
	
	var _getFlowTypeFromReactComponent = __webpack_require__(403);
	
	var _getFlowTypeFromReactComponent2 = _interopRequireDefault(_getFlowTypeFromReactComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	function setPropDescriptor(documentation, path) {
	  var propDescriptor = documentation.getPropDescriptor((0, _getPropertyName2.default)(path));
	  var type = (0, _getFlowType2.default)(path.get('value'));
	  if (type) {
	    propDescriptor.flowType = type;
	    propDescriptor.required = !path.node.optional;
	  }
	}
	
	/**
	 * This handler tries to find flow Type annotated react components and extract
	 * its types to the documentation. It also extracts docblock comments which are
	 * inlined in the type definition.
	 */
	function flowTypeHandler(documentation, path) {
	  var flowTypesPath = (0, _getFlowTypeFromReactComponent2.default)(path);
	
	  if (!flowTypesPath) {
	    return;
	  }
	
	  (0, _getFlowTypeFromReactComponent.applyToFlowTypeProperties)(flowTypesPath, function (propertyPath) {
	    setPropDescriptor(documentation, propertyPath);
	  });
	}

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.applyToFlowTypeProperties = applyToFlowTypeProperties;
	
	var _getTypeAnnotation = __webpack_require__(361);
	
	var _getTypeAnnotation2 = _interopRequireDefault(_getTypeAnnotation);
	
	var _getMemberValuePath = __webpack_require__(342);
	
	var _getMemberValuePath2 = _interopRequireDefault(_getMemberValuePath);
	
	var _isReactComponentClass = __webpack_require__(364);
	
	var _isReactComponentClass2 = _interopRequireDefault(_isReactComponentClass);
	
	var _isStatelessComponent = __webpack_require__(381);
	
	var _isStatelessComponent2 = _interopRequireDefault(_isStatelessComponent);
	
	var _isUnreachableFlowType = __webpack_require__(362);
	
	var _isUnreachableFlowType2 = _interopRequireDefault(_isUnreachableFlowType);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Given an React component (stateless or class) tries to find the
	 * flow type for the props. If not found or not one of the supported
	 * component types returns null.
	 */
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	exports.default = function (path) {
	  var typePath = void 0;
	
	  if ((0, _isReactComponentClass2.default)(path)) {
	    var superTypes = path.get('superTypeParameters');
	
	    if (superTypes.value) {
	      typePath = superTypes.get('params').get(1);
	    } else {
	      var propsMemberPath = (0, _getMemberValuePath2.default)(path, 'props');
	      if (!propsMemberPath) {
	        return null;
	      }
	
	      typePath = (0, _getTypeAnnotation2.default)(propsMemberPath.parentPath);
	    }
	  } else if ((0, _isStatelessComponent2.default)(path)) {
	    var param = path.get('params').get(0);
	
	    typePath = (0, _getTypeAnnotation2.default)(param);
	  }
	
	  if (typePath && types.GenericTypeAnnotation.check(typePath.node)) {
	    typePath = (0, _resolveToValue2.default)(typePath.get('id'));
	    if (!typePath || types.Identifier.check(typePath.node) || (0, _isUnreachableFlowType2.default)(typePath)) {
	      return;
	    }
	
	    typePath = typePath.get('right');
	  }
	
	  return typePath;
	};
	
	function applyToFlowTypeProperties(path, callback) {
	  if (path.node.properties) {
	    path.get('properties').each(function (propertyPath) {
	      return callback(propertyPath);
	    });
	  } else if (path.node.type === 'IntersectionTypeAnnotation') {
	    path.get('types').each(function (typesPath) {
	      return applyToFlowTypeProperties(typesPath, callback);
	    });
	  } else if (path.node.type !== 'UnionTypeAnnotation') {
	    // The react-docgen output format does not currently allow
	    // for the expression of union types
	    var typePath = resolveGenericTypeAnnotation(path);
	    if (typePath) {
	      applyToFlowTypeProperties(typePath, callback);
	    }
	  }
	}
	
	function resolveGenericTypeAnnotation(path) {
	  // If the node doesn't have types or properties, try to get the type.
	  var typePath = void 0;
	  if (path && types.GenericTypeAnnotation.check(path.node)) {
	    typePath = (0, _resolveToValue2.default)(path.get('id'));
	    if (!typePath || types.Identifier.check(typePath.node) || (0, _isUnreachableFlowType2.default)(typePath)) {
	      return;
	    }
	
	    typePath = typePath.get('right');
	  }
	
	  return typePath;
	}

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flowTypeDocBlockHandler;
	
	var _setPropDescription = __webpack_require__(400);
	
	var _setPropDescription2 = _interopRequireDefault(_setPropDescription);
	
	var _getFlowTypeFromReactComponent = __webpack_require__(403);
	
	var _getFlowTypeFromReactComponent2 = _interopRequireDefault(_getFlowTypeFromReactComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * This handler tries to find flow Type annotated react components and extract
	 * its types to the documentation. It also extracts docblock comments which are
	 * inlined in the type definition.
	 */
	function flowTypeDocBlockHandler(documentation, path) {
	  var flowTypesPath = (0, _getFlowTypeFromReactComponent2.default)(path);
	
	  if (!flowTypesPath) {
	    return;
	  }
	
	  (0, _getFlowTypeFromReactComponent.applyToFlowTypeProperties)(flowTypesPath, function (propertyPath) {
	    return (0, _setPropDescription2.default)(documentation, propertyPath);
	  });
	} /*
	   * Copyright (c) 2015, Facebook, Inc.
	   * All rights reserved.
	   *
	   * This source code is licensed under the BSD-style license found in the
	   * LICENSE file in the root directory of this source tree. An additional grant
	   * of patent rights can be found in the PATENTS file in the same directory.
	   *
	   * 
	   *
	   */

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ERROR_MISSING_DEFINITION = undefined;
	exports.default = parse;
	
	var _Documentation = __webpack_require__(406);
	
	var _Documentation2 = _interopRequireDefault(_Documentation);
	
	var _babylon = __webpack_require__(433);
	
	var _babylon2 = _interopRequireDefault(_babylon);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ERROR_MISSING_DEFINITION = 'No suitable component definition found.'; /*
	                                                                           * Copyright (c) 2015, Facebook, Inc.
	                                                                           * All rights reserved.
	                                                                           *
	                                                                           * This source code is licensed under the BSD-style license found in the
	                                                                           * LICENSE file in the root directory of this source tree. An additional grant
	                                                                           * of patent rights can be found in the PATENTS file in the same directory.
	                                                                           *
	                                                                           * 
	                                                                           *
	                                                                           */
	
	function executeHandlers(handlers, componentDefinitions) {
	  return componentDefinitions.map(function (componentDefinition) {
	    var documentation = new _Documentation2.default();
	    handlers.forEach(function (handler) {
	      return handler(documentation, componentDefinition);
	    });
	    return documentation.toObject();
	  });
	}
	
	/**
	 * Takes JavaScript source code and returns an object with the information
	 * extract from it.
	 *
	 * `resolver` is a strategy to find the AST node(s) of the component
	 * definition(s) inside `src`.
	 * It is a function that gets passed the program AST node of
	 * the source as first argument, and a reference to recast as second argument.
	 *
	 * This allows you define your own strategy for finding component definitions.
	 *
	 * `handlers` is an array of functions which are passed a reference to the
	 * component definitions (extracted by `resolver`) so that they can extract
	 * information from it. They get also passed a reference to a `Documentation`
	 * object to attach the information to.
	 *
	 * If `resolver` returns an array of component definitions, `parse` will return
	 * an array of documentation objects. If `resolver` returns a single node
	 * instead, `parse` will return a documentation object.
	 */
	function parse(src, resolver, handlers) {
	  var ast = _recast2.default.parse(src, { esprima: _babylon2.default });
	  var componentDefinitions = resolver(ast.program, _recast2.default);
	
	  if (Array.isArray(componentDefinitions)) {
	    if (componentDefinitions.length === 0) {
	      throw new Error(ERROR_MISSING_DEFINITION);
	    }
	    return executeHandlers(handlers, componentDefinitions);
	  } else if (componentDefinitions) {
	    return executeHandlers(handlers, [componentDefinitions])[0];
	  }
	
	  throw new Error(ERROR_MISSING_DEFINITION);
	}
	
	exports.ERROR_MISSING_DEFINITION = ERROR_MISSING_DEFINITION;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _from = __webpack_require__(387);
	
	var _from2 = _interopRequireDefault(_from);
	
	var _slicedToArray2 = __webpack_require__(407);
	
	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);
	
	var _getIterator2 = __webpack_require__(411);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	var _set = __webpack_require__(414);
	
	var _set2 = _interopRequireDefault(_set);
	
	var _map = __webpack_require__(429);
	
	var _map2 = _interopRequireDefault(_map);
	
	var _classCallCheck2 = __webpack_require__(31);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(32);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 *  Copyright (c) 2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 *
	 *  
	 *
	 */
	
	var Documentation = function () {
	  function Documentation() {
	    (0, _classCallCheck3.default)(this, Documentation);
	
	    this._props = new _map2.default();
	    this._composes = new _set2.default();
	    this._data = new _map2.default();
	  }
	
	  (0, _createClass3.default)(Documentation, [{
	    key: "addComposes",
	    value: function addComposes(moduleName) {
	      this._composes.add(moduleName);
	    }
	  }, {
	    key: "set",
	    value: function set(key, value) {
	      this._data.set(key, value);
	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      return this._data.get(key);
	    }
	  }, {
	    key: "getPropDescriptor",
	    value: function getPropDescriptor(propName) {
	      var propDescriptor = this._props.get(propName);
	      if (!propDescriptor) {
	        this._props.set(propName, propDescriptor = {});
	      }
	      return propDescriptor;
	    }
	  }, {
	    key: "toObject",
	    value: function toObject() {
	      var obj = {};
	
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;
	
	      try {
	        for (var _iterator = (0, _getIterator3.default)(this._data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var _step$value = (0, _slicedToArray3.default)(_step.value, 2);
	
	          var key = _step$value[0];
	          var value = _step$value[1];
	
	          obj[key] = value;
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	
	      if (this._props.size > 0) {
	        obj.props = {};
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;
	
	        try {
	          for (var _iterator2 = (0, _getIterator3.default)(this._props), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var _step2$value = (0, _slicedToArray3.default)(_step2.value, 2);
	
	            var name = _step2$value[0];
	            var descriptor = _step2$value[1];
	
	            obj.props[name] = descriptor;
	          }
	        } catch (err) {
	          _didIteratorError2 = true;
	          _iteratorError2 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	              _iterator2.return();
	            }
	          } finally {
	            if (_didIteratorError2) {
	              throw _iteratorError2;
	            }
	          }
	        }
	      }
	
	      if (this._composes.size > 0) {
	        obj.composes = (0, _from2.default)(this._composes);
	      }
	      return obj;
	    }
	  }]);
	  return Documentation;
	}();
	
	module.exports = Documentation;

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _isIterable2 = __webpack_require__(408);
	
	var _isIterable3 = _interopRequireDefault(_isIterable2);
	
	var _getIterator2 = __webpack_require__(411);
	
	var _getIterator3 = _interopRequireDefault(_getIterator2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;
	
	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);
	
	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }
	
	    return _arr;
	  }
	
	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(409), __esModule: true };

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(62);
	__webpack_require__(40);
	module.exports = __webpack_require__(410);

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(394)
	  , ITERATOR  = __webpack_require__(61)('iterator')
	  , Iterators = __webpack_require__(46);
	module.exports = __webpack_require__(18).isIterable = function(it){
	  var O = Object(it);
	  return O[ITERATOR] !== undefined
	    || '@@iterator' in O
	    || Iterators.hasOwnProperty(classof(O));
	};

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(412), __esModule: true };

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(62);
	__webpack_require__(40);
	module.exports = __webpack_require__(413);

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(23)
	  , get      = __webpack_require__(393);
	module.exports = __webpack_require__(18).getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(415), __esModule: true };

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(80);
	__webpack_require__(40);
	__webpack_require__(62);
	__webpack_require__(416);
	__webpack_require__(426);
	module.exports = __webpack_require__(18).Set;

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(417);
	
	// 23.2 Set Objects
	module.exports = __webpack_require__(422)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(22).f
	  , create      = __webpack_require__(48)
	  , redefineAll = __webpack_require__(418)
	  , ctx         = __webpack_require__(19)
	  , anInstance  = __webpack_require__(419)
	  , defined     = __webpack_require__(9)
	  , forOf       = __webpack_require__(420)
	  , $iterDefine = __webpack_require__(43)
	  , step        = __webpack_require__(65)
	  , setSpecies  = __webpack_require__(421)
	  , DESCRIPTORS = __webpack_require__(26)
	  , fastKey     = __webpack_require__(70).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(21);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },
/* 419 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(19)
	  , call        = __webpack_require__(390)
	  , isArrayIter = __webpack_require__(391)
	  , anObject    = __webpack_require__(23)
	  , toLength    = __webpack_require__(56)
	  , getIterFn   = __webpack_require__(393)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(14)
	  , core        = __webpack_require__(18)
	  , dP          = __webpack_require__(22)
	  , DESCRIPTORS = __webpack_require__(26)
	  , SPECIES     = __webpack_require__(61)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global         = __webpack_require__(14)
	  , $export        = __webpack_require__(17)
	  , meta           = __webpack_require__(70)
	  , fails          = __webpack_require__(27)
	  , hide           = __webpack_require__(21)
	  , redefineAll    = __webpack_require__(418)
	  , forOf          = __webpack_require__(420)
	  , anInstance     = __webpack_require__(419)
	  , isObject       = __webpack_require__(24)
	  , setToStringTag = __webpack_require__(60)
	  , dP             = __webpack_require__(22).f
	  , each           = __webpack_require__(423)(0)
	  , DESCRIPTORS    = __webpack_require__(26);
	
	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    C = wrapper(function(target, iterable){
	      anInstance(target, C, NAME, '_c');
	      target._c = new Base;
	      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
	        anInstance(this, C, KEY);
	        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    if('size' in proto)dP(C.prototype, 'size', {
	      get: function(){
	        return this._c.size;
	      }
	    });
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F, O);
	
	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(19)
	  , IObject  = __webpack_require__(53)
	  , toObject = __webpack_require__(8)
	  , toLength = __webpack_require__(56)
	  , asc      = __webpack_require__(424);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(425);
	
	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(24)
	  , isArray  = __webpack_require__(76)
	  , SPECIES  = __webpack_require__(61)('species');
	
	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(17);
	
	$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(427)('Set')});

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(394)
	  , from    = __webpack_require__(428);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(420);
	
	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(430), __esModule: true };

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(80);
	__webpack_require__(40);
	__webpack_require__(62);
	__webpack_require__(431);
	__webpack_require__(432);
	module.exports = __webpack_require__(18).Map;

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(417);
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(422)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(17);
	
	$export($export.P + $export.R, 'Map', {toJSON: __webpack_require__(427)('Map')});

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*
	 *  Copyright (c) 2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	var babylon = __webpack_require__(434);
	
	var options = {
	  sourceType: 'module',
	  strictMode: false,
	  locations: true,
	  ranges: true,
	  ecmaVersion: 7,
	  features: {
	    'es7.classProperties': true,
	    'es7.decorators': true,
	    'es7.comprehensions': true,
	    'es7.asyncFunctions': true,
	    'es7.exportExtensions': true,
	    'es7.trailingFunctionCommas': true,
	    'es7.objectRestSpread': true,
	    'es7.doExpressions': true,
	    'es7.functionBind': true
	  },
	  plugins: { jsx: true, flow: true }
	};
	
	exports.default = {
	  parse: function parse(src) {
	    var file = babylon.parse(src, options);
	    file.program.comments = file.comments;
	    return file.program;
	  }
	};

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.parse = parse;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _parser = __webpack_require__(435);
	
	var _parser2 = _interopRequireDefault(_parser);
	
	__webpack_require__(444);
	
	__webpack_require__(445);
	
	__webpack_require__(446);
	
	__webpack_require__(447);
	
	__webpack_require__(448);
	
	__webpack_require__(449);
	
	__webpack_require__(450);
	
	var _tokenizerTypes = __webpack_require__(439);
	
	__webpack_require__(438);
	
	__webpack_require__(440);
	
	var _pluginsFlow = __webpack_require__(451);
	
	var _pluginsFlow2 = _interopRequireDefault(_pluginsFlow);
	
	var _pluginsJsx = __webpack_require__(452);
	
	var _pluginsJsx2 = _interopRequireDefault(_pluginsJsx);
	
	_parser.plugins.flow = _pluginsFlow2["default"];
	_parser.plugins.jsx = _pluginsJsx2["default"];
	
	function parse(input, options) {
	  return new _parser2["default"](options, input).parse();
	}
	
	exports.tokTypes = _tokenizerTypes.types;

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	// istanbul ignore next
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// istanbul ignore next
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _utilIdentifier = __webpack_require__(436);
	
	var _options = __webpack_require__(437);
	
	var _tokenizer = __webpack_require__(438);
	
	var _tokenizer2 = _interopRequireDefault(_tokenizer);
	
	// Registered plugins
	
	var plugins = {};
	
	exports.plugins = plugins;
	
	var Parser = (function (_Tokenizer) {
	  _inherits(Parser, _Tokenizer);
	
	  function Parser(options, input) {
	    _classCallCheck(this, Parser);
	
	    _Tokenizer.call(this, input);
	
	    this.options = _options.getOptions(options);
	    this.isKeyword = _utilIdentifier.isKeyword;
	    this.isReservedWord = _utilIdentifier.reservedWords[6];
	    this.input = input;
	    this.loadPlugins(this.options.plugins);
	
	    // Figure out if it's a module code.
	    this.inModule = this.options.sourceType === "module";
	    this.strict = this.options.strictMode === false ? false : this.inModule;
	
	    // If enabled, skip leading hashbang line.
	    if (this.state.pos === 0 && this.input[0] === "#" && this.input[1] === "!") {
	      this.skipLineComment(2);
	    }
	  }
	
	  Parser.prototype.extend = function extend(name, f) {
	    this[name] = f(this[name]);
	  };
	
	  Parser.prototype.loadPlugins = function loadPlugins(plugins) {
	    for (var _name in plugins) {
	      var plugin = exports.plugins[_name];
	      if (!plugin) throw new Error("Plugin '" + _name + "' not found");
	      plugin(this, plugins[_name]);
	    }
	  };
	
	  Parser.prototype.parse = function parse() {
	    var file = this.startNode();
	    var program = this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(file, program);
	  };
	
	  return Parser;
	})(_tokenizer2["default"]);
	
	exports["default"] = Parser;

/***/ },
/* 436 */
/***/ function(module, exports) {

	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.
	
	"use strict";
	
	exports.__esModule = true;
	exports.isIdentifierStart = isIdentifierStart;
	exports.isIdentifierChar = isIdentifierChar;
	function makePredicate(words) {
	  words = words.split(" ");
	  return function (str) {
	    return words.indexOf(str) >= 0;
	  };
	}
	
	// Reserved word lists for various dialects of the language
	
	var reservedWords = {
	  6: makePredicate("enum await"),
	  strict: makePredicate("implements interface let package private protected public static yield"),
	  strictBind: makePredicate("eval arguments")
	};
	
	exports.reservedWords = reservedWords;
	// And the keywords
	
	var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");
	
	exports.isKeyword = isKeyword;
	// ## Character categories
	
	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `tools/generate-identifier-regex.js`.
	
	var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";
	
	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
	
	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
	
	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by tools/generate-identifier-regex.js
	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];
	
	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}
	
	// Test whether a given character code starts an identifier.
	
	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}
	
	// Test whether a given character is part of an identifier.
	
	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}

/***/ },
/* 437 */
/***/ function(module, exports) {

	// A second optional argument can be given to further configure
	// the parser process. These options are recognized:
	
	"use strict";
	
	exports.__esModule = true;
	exports.getOptions = getOptions;
	var defaultOptions = {
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // By default, reserved words are not enforced. Disable
	  // `allowReserved` to enforce them. When this option has the
	  // value "never", reserved words and keywords can also not be
	  // used as property names.
	  allowReserved: true,
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  plugins: {},
	  // Babel-specific options
	  features: {},
	  strictMode: null
	};
	
	exports.defaultOptions = defaultOptions;
	// Interpret and default an options object
	
	function getOptions(opts) {
	  var options = {};
	  for (var key in defaultOptions) {
	    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
	  }
	  return options;
	}

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	// istanbul ignore next
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _utilIdentifier = __webpack_require__(436);
	
	var _types = __webpack_require__(439);
	
	var _context = __webpack_require__(440);
	
	var _utilLocation = __webpack_require__(441);
	
	var _utilWhitespace = __webpack_require__(442);
	
	var _state = __webpack_require__(443);
	
	var _state2 = _interopRequireDefault(_state);
	
	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.
	
	var Token = function Token(state) {
	  _classCallCheck(this, Token);
	
	  this.type = state.type;
	  this.value = state.value;
	  this.start = state.start;
	  this.end = state.end;
	  this.loc = new _utilLocation.SourceLocation(state.startLoc, state.endLoc);
	}
	
	// ## Tokenizer
	
	// Are we running under Rhino?
	/* global Packages */
	;
	
	exports.Token = Token;
	var isRhino = typeof Packages === "object" && Object.prototype.toString.call(Packages) === "[object JavaPackage]";
	
	// Parse a regular expression. Some context-awareness is necessary,
	// since a '/' inside a '[]' set does not end the expression.
	
	function tryCreateRegexp(src, flags, throwErrorStart) {
	  try {
	    return new RegExp(src, flags);
	  } catch (e) {
	    if (throwErrorStart !== undefined) {
	      if (e instanceof SyntaxError) this.raise(throwErrorStart, "Error parsing regular expression: " + e.message);
	      this.raise(e);
	    }
	  }
	}
	
	var regexpUnicodeSupport = !!tryCreateRegexp("￿", "u");
	
	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) return String.fromCharCode(code);
	  return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
	}
	
	var Tokenizer = (function () {
	  function Tokenizer(input) {
	    _classCallCheck(this, Tokenizer);
	
	    this.state = new _state2["default"]();
	    this.state.init(input);
	  }
	
	  // Move to the next token
	
	  Tokenizer.prototype.next = function next() {
	    this.state.tokens.push(new Token(this.state));
	
	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  };
	
	  // TODO
	
	  Tokenizer.prototype.eat = function eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  };
	
	  // TODO
	
	  Tokenizer.prototype.match = function match(type) {
	    return this.state.type === type;
	  };
	
	  // TODO
	
	  Tokenizer.prototype.lookahead = function lookahead() {
	    var old = this.state;
	    this.state = old.clone();
	    this.next();
	    var curr = this.state.clone();
	    this.state = old;
	    return curr;
	  };
	
	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).
	
	  Tokenizer.prototype.setStrict = function setStrict(strict) {
	    this.strict = strict;
	    if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
	    this.state.pos = this.state.start;
	    while (this.state.pos < this.state.lineStart) {
	      this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
	      --this.state.curLine;
	    }
	    this.nextToken();
	  };
	
	  Tokenizer.prototype.curContext = function curContext() {
	    return this.state.context[this.state.context.length - 1];
	  };
	
	  // Read a single token, updating the parser object's token-related
	  // properties.
	
	  Tokenizer.prototype.nextToken = function nextToken() {
	    var curContext = this.curContext();
	    if (!curContext || !curContext.preserveSpace) this.skipSpace();
	
	    this.state.start = this.state.pos;
	    this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);
	
	    if (curContext.override) {
	      return curContext.override(this);
	    } else {
	      return this.readToken(this.fullCharCodeAtPos());
	    }
	  };
	
	  Tokenizer.prototype.readToken = function readToken(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (_utilIdentifier.isIdentifierStart(code, true) || code === 92 /* '\' */) return this.readWord();
	
	    return this.getTokenFromCode(code);
	  };
	
	  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
	    var code = this.input.charCodeAt(this.state.pos);
	    if (code <= 0xd7ff || code >= 0xe000) return code;
	
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    return (code << 10) + next - 0x35fdc00;
	  };
	
	  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new _utilLocation.SourceLocation(startLoc, endLoc),
	      range: [start, end]
	    };
	
	    this.state.tokens.push(comment);
	    this.state.comments.push(comment);
	    this.addComment(comment);
	  };
	
	  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
	    var startLoc = this.state.curPosition();
	    var start = this.state.pos,
	        end = this.input.indexOf("*/", this.state.pos += 2);
	    if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");
	
	    this.state.pos = end + 2;
	    _utilWhitespace.lineBreakG.lastIndex = start;
	    var match = undefined;
	    while ((match = _utilWhitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }
	
	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  };
	
	  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
	    var start = this.state.pos;
	    var startLoc = this.state.curPosition();
	    var ch = this.input.charCodeAt(this.state.pos += startSkip);
	    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this.state.pos;
	      ch = this.input.charCodeAt(this.state.pos);
	    }
	
	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  };
	
	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.
	
	  Tokenizer.prototype.skipSpace = function skipSpace() {
	    loop: while (this.state.pos < this.input.length) {
	      var ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:case 160:
	          // ' '
	          ++this.state.pos;
	          break;
	
	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }
	
	        case 10:case 8232:case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;
	
	        case 47:
	          // '/'
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              // '*'
	              this.skipBlockComment();
	              break;
	
	            case 47:
	              this.skipLineComment(2);
	              break;
	
	            default:
	              break loop;
	          }
	          break;
	
	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && _utilWhitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }
	      }
	    }
	  };
	
	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.
	
	  Tokenizer.prototype.finishToken = function finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    var prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;
	
	    this.updateContext(prevType);
	  };
	
	  // ### Token reading
	
	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //
	
	  Tokenizer.prototype.readToken_dot = function readToken_dot() {
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      return this.readNumber(true);
	    }
	
	    var next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 46 && next2 === 46) {
	      // 46 = dot '.'
	      this.state.pos += 3;
	      return this.finishToken(_types.types.ellipsis);
	    } else {
	      ++this.state.pos;
	      return this.finishToken(_types.types.dot);
	    }
	  };
	
	  Tokenizer.prototype.readToken_slash = function readToken_slash() {
	    // '/'
	    if (this.state.exprAllowed) {
	      ++this.state.pos;
	      return this.readRegexp();
	    }
	
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.slash, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
	    // '%*'
	    var type = code === 42 ? _types.types.star : _types.types.modulo;
	    var width = 1;
	    var next = this.input.charCodeAt(this.state.pos + 1);
	
	    if (next === 42 && this.options.features["es7.exponentiationOperator"]) {
	      // '*'
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = _types.types.exponent;
	    }
	
	    if (next === 61) {
	      width++;
	      type = _types.types.assign;
	    }
	
	    return this.finishOp(type, width);
	  };
	
	  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
	    // '|&'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
	    if (next === 61) return this.finishOp(_types.types.assign, 2);
	    return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
	  };
	
	  Tokenizer.prototype.readToken_caret = function readToken_caret() {
	    // '^'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.bitwiseXOR, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
	    // '+-'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	
	    if (next === code) {
	      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3);
	        this.skipSpace();
	        return this.nextToken();
	      }
	      return this.finishOp(_types.types.incDec, 2);
	    }
	
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.plusMin, 1);
	    }
	  };
	
	  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
	    // '<>'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    var size = 1;
	
	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
	      return this.finishOp(_types.types.bitShift, size);
	    }
	
	    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      if (this.inModule) this.unexpected();
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4);
	      this.skipSpace();
	      return this.nextToken();
	    }
	
	    if (next === 61) {
	      size = this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2;
	    }
	
	    return this.finishOp(_types.types.relational, size);
	  };
	
	  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
	    // '=!'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62) {
	      // '=>'
	      this.state.pos += 2;
	      return this.finishToken(_types.types.arrow);
	    }
	    return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
	  };
	
	  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	      case 46:
	        // '.'
	        return this.readToken_dot();
	
	      // Punctuation tokens.
	      case 40:
	        ++this.state.pos;return this.finishToken(_types.types.parenL);
	      case 41:
	        ++this.state.pos;return this.finishToken(_types.types.parenR);
	      case 59:
	        ++this.state.pos;return this.finishToken(_types.types.semi);
	      case 44:
	        ++this.state.pos;return this.finishToken(_types.types.comma);
	      case 91:
	        ++this.state.pos;return this.finishToken(_types.types.bracketL);
	      case 93:
	        ++this.state.pos;return this.finishToken(_types.types.bracketR);
	      case 123:
	        ++this.state.pos;return this.finishToken(_types.types.braceL);
	      case 125:
	        ++this.state.pos;return this.finishToken(_types.types.braceR);
	
	      case 58:
	        if (this.options.features["es7.functionBind"] && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          return this.finishOp(_types.types.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(_types.types.colon);
	        }
	
	      case 63:
	        ++this.state.pos;return this.finishToken(_types.types.question);
	      case 64:
	        ++this.state.pos;return this.finishToken(_types.types.at);
	
	      case 96:
	        // '`'
	        ++this.state.pos;
	        return this.finishToken(_types.types.backQuote);
	
	      case 48:
	        // '0'
	        var next = this.input.charCodeAt(this.state.pos + 1);
	        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	        // 1-9
	        return this.readNumber(false);
	
	      // Quotes produce strings.
	      case 34:case 39:
	        // '"', "'"
	        return this.readString(code);
	
	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.
	
	      case 47:
	        // '/'
	        return this.readToken_slash();
	
	      case 37:case 42:
	        // '%*'
	        return this.readToken_mult_modulo(code);
	
	      case 124:case 38:
	        // '|&'
	        return this.readToken_pipe_amp(code);
	
	      case 94:
	        // '^'
	        return this.readToken_caret();
	
	      case 43:case 45:
	        // '+-'
	        return this.readToken_plus_min(code);
	
	      case 60:case 62:
	        // '<>'
	        return this.readToken_lt_gt(code);
	
	      case 61:case 33:
	        // '=!'
	        return this.readToken_eq_excl(code);
	
	      case 126:
	        // '~'
	        return this.finishOp(_types.types.prefix, 1);
	    }
	
	    this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
	  };
	
	  Tokenizer.prototype.finishOp = function finishOp(type, size) {
	    var str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    return this.finishToken(type, str);
	  };
	
	  Tokenizer.prototype.readRegexp = function readRegexp() {
	    // istanbul ignore next
	
	    var _this = this;
	
	    var escaped = undefined,
	        inClass = undefined,
	        start = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	      var ch = this.input.charAt(this.state.pos);
	      if (_utilWhitespace.lineBreak.test(ch)) {
	        this.raise(start, "Unterminated regular expression");
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === "[") {
	          inClass = true;
	        } else if (ch === "]" && inClass) {
	          inClass = false;
	        } else if (ch === "/" && !inClass) {
	          break;
	        }
	        escaped = ch === "\\";
	      }
	      ++this.state.pos;
	    }
	    var content = this.input.slice(start, this.state.pos);
	    ++this.state.pos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1();
	    var tmp = content;
	    if (mods) {
	      var validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	      if (mods.indexOf("u") >= 0 && !regexpUnicodeSupport) {
	        // Replace each astral symbol and every Unicode escape sequence that
	        // possibly represents an astral symbol or a paired surrogate with a
	        // single ASCII symbol to avoid throwing on regular expressions that
	        // are only valid in combination with the `/u` flag.
	        // Note: replacing with the ASCII symbol `x` might cause false
	        // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
	        // perfectly valid pattern that is equivalent to `[a-b]`, but it would
	        // be replaced by `[x-b]` which throws an error.
	        tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (match, code, offset) {
	          code = Number("0x" + code);
	          if (code > 0x10FFFF) _this.raise(start + offset + 3, "Code point out of bounds");
	          return "x";
	        });
	        tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
	      }
	    }
	    // Detect invalid regular expressions.
	    var value = null;
	    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,
	    // so don't do detection if we are running under Rhino
	    if (!isRhino) {
	      tryCreateRegexp.call(this, tmp, undefined, start);
	      // Get a regular expression object for this pattern-flag pair, or `null` in
	      // case the current environment doesn't support the flags it uses.
	      value = tryCreateRegexp.call(this, content, mods);
	    }
	    return this.finishToken(_types.types.regexp, {
	      pattern: content,
	      flags: mods,
	      value: value
	    });
	  };
	
	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.
	
	  Tokenizer.prototype.readInt = function readInt(radix, len) {
	    var start = this.state.pos,
	        total = 0;
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this.input.charCodeAt(this.state.pos),
	          val = undefined;
	      if (code >= 97) {
	        val = code - 97 + 10; // a
	      } else if (code >= 65) {
	          val = code - 65 + 10; // A
	        } else if (code >= 48 && code <= 57) {
	            val = code - 48; // 0-9
	          } else {
	              val = Infinity;
	            }
	      if (val >= radix) break;
	      ++this.state.pos;
	      total = total * radix + val;
	    }
	    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;
	
	    return total;
	  };
	
	  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
	    this.state.pos += 2; // 0x
	    var val = this.readInt(radix);
	    if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	    return this.finishToken(_types.types.num, val);
	  };
	
	  // Read an integer, octal integer, or floating-point number.
	
	  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
	    var start = this.state.pos,
	        isFloat = false,
	        octal = this.input.charCodeAt(this.state.pos) === 48;
	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	    var next = this.input.charCodeAt(this.state.pos);
	    if (next === 46) {
	      // '.'
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if (next === 69 || next === 101) {
	      // 'eE'
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) ++this.state.pos; // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number");
	      isFloat = true;
	    }
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	
	    var str = this.input.slice(start, this.state.pos),
	        val = undefined;
	    if (isFloat) {
	      val = parseFloat(str);
	    } else if (!octal || str.length === 1) {
	      val = parseInt(str, 10);
	    } else if (/[89]/.test(str) || this.strict) {
	      this.raise(start, "Invalid number");
	    } else {
	      val = parseInt(str, 8);
	    }
	    return this.finishToken(_types.types.num, val);
	  };
	
	  // Read a string value, interpreting backslash-escapes.
	
	  Tokenizer.prototype.readCodePoint = function readCodePoint() {
	    var ch = this.input.charCodeAt(this.state.pos),
	        code = undefined;
	
	    if (ch === 123) {
	      var codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
	      ++this.state.pos;
	      if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
	    } else {
	      code = this.readHexChar(4);
	    }
	    return code;
	  };
	
	  Tokenizer.prototype.readString = function readString(quote) {
	    var out = "",
	        chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else {
	        if (_utilWhitespace.isNewLine(ch)) this.raise(this.state.start, "Unterminated string constant");
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(_types.types.string, out);
	  };
	
	  // Reads template string tokens.
	
	  Tokenizer.prototype.readTmplToken = function readTmplToken() {
	    var out = "",
	        chunkStart = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        // '`', '${'
	        if (this.state.pos === this.state.start && this.match(_types.types.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            return this.finishToken(_types.types.dollarBraceL);
	          } else {
	            ++this.state.pos;
	            return this.finishToken(_types.types.backQuote);
	          }
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_types.types.template, out);
	      }
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(true);
	        chunkStart = this.state.pos;
	      } else if (_utilWhitespace.isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;
	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
	          case 10:
	            out += "\n";
	            break;
	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  };
	
	  // Used to read escaped characters
	
	  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
	    var ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;
	    switch (ch) {
	      case 110:
	        return "\n"; // 'n' -> '\n'
	      case 114:
	        return "\r"; // 'r' -> '\r'
	      case 120:
	        return String.fromCharCode(this.readHexChar(2)); // 'x'
	      case 117:
	        return codePointToString(this.readCodePoint()); // 'u'
	      case 116:
	        return "\t"; // 't' -> '\t'
	      case 98:
	        return "\b"; // 'b' -> '\b'
	      case 118:
	        return "\u000b"; // 'v' -> '\u000b'
	      case 102:
	        return "\f"; // 'f' -> '\f'
	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
	      case 10:
	        // ' \n'
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;
	        return "";
	      default:
	        if (ch >= 48 && ch <= 55) {
	          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
	          var octal = parseInt(octalStr, 8);
	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }
	          if (octal > 0 && (this.strict || inTemplate)) {
	            this.raise(this.state.pos - 2, "Octal literal in strict mode");
	          }
	          this.state.pos += octalStr.length - 1;
	          return String.fromCharCode(octal);
	        }
	        return String.fromCharCode(ch);
	    }
	  };
	
	  // Used to read character escape sequences ('\x', '\u', '\U').
	
	  Tokenizer.prototype.readHexChar = function readHexChar(len) {
	    var codePos = this.state.pos;
	    var n = this.readInt(16, len);
	    if (n === null) this.raise(codePos, "Bad character escape sequence");
	    return n;
	  };
	
	  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.
	
	  Tokenizer.prototype.readWord1 = function readWord1() {
	    this.state.containsEsc = false;
	    var word = "",
	        first = true,
	        chunkStart = this.state.pos;
	    while (this.state.pos < this.input.length) {
	      var ch = this.fullCharCodeAtPos();
	      if (_utilIdentifier.isIdentifierChar(ch, true)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        // "\"
	        this.state.containsEsc = true;
	
	        word += this.input.slice(chunkStart, this.state.pos);
	        var escStart = this.state.pos;
	
	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          // "u"
	          this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }
	
	        ++this.state.pos;
	        var esc = this.readCodePoint();
	        if (!(first ? _utilIdentifier.isIdentifierStart : _utilIdentifier.isIdentifierChar)(esc, true)) {
	          this.raise(escStart, "Invalid Unicode escape");
	        }
	
	        word += codePointToString(esc);
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  };
	
	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.
	
	  Tokenizer.prototype.readWord = function readWord() {
	    var word = this.readWord1();
	    var type = _types.types.name;
	    if (!this.state.containsEsc && this.isKeyword(word)) type = _types.keywords[word];
	    return this.finishToken(type, word);
	  };
	
	  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
	    if (prevType === _types.types.colon) {
	      var _parent = this.curContext();
	      if (_parent === _context.types.b_stat || _parent === _context.types.b_expr) {
	        return !_parent.isExpr;
	      }
	    }
	
	    if (prevType === _types.types._return) {
	      return _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	    }
	
	    if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
	      return true;
	    }
	
	    if (prevType === _types.types.braceL) {
	      return this.curContext() === _context.types.b_stat;
	    }
	
	    return !this.state.exprAllowed;
	  };
	
	  Tokenizer.prototype.updateContext = function updateContext(prevType) {
	    var update = undefined,
	        type = this.state.type;
	    if (type.keyword && prevType === _types.types.dot) {
	      this.state.exprAllowed = false;
	    } else if (update = type.updateContext) {
	      update.call(this, prevType);
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  };
	
	  return Tokenizer;
	})();
	
	exports["default"] = Tokenizer;

/***/ },
/* 439 */
/***/ function(module, exports) {

	// ## Token types
	
	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.
	
	// All token type variables start with an underscore, to make them
	// easy to recognize.
	
	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.
	
	"use strict";
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var TokenType = function TokenType(label) {
	  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  _classCallCheck(this, TokenType);
	
	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.rightAssociative = !!conf.rightAssociative;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};
	
	exports.TokenType = TokenType;
	
	function binop(name, prec) {
	  return new TokenType(name, { beforeExpr: true, binop: prec });
	}
	var beforeExpr = { beforeExpr: true },
	    startsExpr = { startsExpr: true };
	
	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),
	
	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  doubleColon: new TokenType("::", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
	  at: new TokenType("@"),
	
	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.
	
	  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
	  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
	  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
	  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=", 6),
	  relational: binop("</>", 7),
	  bitShift: binop("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
	};
	
	exports.types = types;
	// Map keyword names to token types.
	
	var keywords = {};
	
	exports.keywords = keywords;
	// Succinct definitions of keyword token types
	function kw(name) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  options.keyword = name;
	  keywords[name] = types["_" + name] = new TokenType(name, options);
	}
	
	kw("break");
	kw("case", beforeExpr);
	kw("catch");
	kw("continue");
	kw("debugger");
	kw("default", beforeExpr);
	kw("do", { isLoop: true });
	kw("else", beforeExpr);
	kw("finally");
	kw("for", { isLoop: true });
	kw("function", startsExpr);
	kw("if");
	kw("return", beforeExpr);
	kw("switch");
	kw("throw", beforeExpr);
	kw("try");
	kw("var");
	kw("let");
	kw("const");
	kw("while", { isLoop: true });
	kw("with");
	kw("new", { beforeExpr: true, startsExpr: true });
	kw("this", startsExpr);
	kw("super", startsExpr);
	kw("class");
	kw("extends", beforeExpr);
	kw("export");
	kw("import");
	kw("yield", { beforeExpr: true, startsExpr: true });
	kw("null", startsExpr);
	kw("true", startsExpr);
	kw("false", startsExpr);
	kw("in", { beforeExpr: true, binop: 7 });
	kw("instanceof", { beforeExpr: true, binop: 7 });
	kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design
	
	"use strict";
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _types = __webpack_require__(439);
	
	var TokContext = function TokContext(token, isExpr, preserveSpace, override) {
	  _classCallCheck(this, TokContext);
	
	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};
	
	exports.TokContext = TokContext;
	var types = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", true),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  f_expr: new TokContext("function", true)
	};
	
	exports.types = types;
	// Token-specific context update code
	
	_types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
	  if (this.state.context.length === 1) {
	    this.state.exprAllowed = true;
	    return;
	  }
	
	  var out = this.state.context.pop();
	  if (out === types.b_stat && this.curContext() === types.f_expr) {
	    this.state.context.pop();
	    this.state.exprAllowed = false;
	  } else if (out === types.b_tmpl) {
	    this.state.exprAllowed = true;
	  } else {
	    this.state.exprAllowed = !out.isExpr;
	  }
	};
	
	_types.types.braceL.updateContext = function (prevType) {
	  this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
	  this.state.exprAllowed = true;
	};
	
	_types.types.dollarBraceL.updateContext = function () {
	  this.state.context.push(types.b_tmpl);
	  this.state.exprAllowed = true;
	};
	
	_types.types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
	  this.state.context.push(statementParens ? types.p_stat : types.p_expr);
	  this.state.exprAllowed = true;
	};
	
	_types.types.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};
	
	_types.types._function.updateContext = function () {
	  if (this.curContext() !== types.b_stat) {
	    this.state.context.push(types.f_expr);
	  }
	
	  this.state.exprAllowed = false;
	};
	
	_types.types.backQuote.updateContext = function () {
	  if (this.curContext() === types.q_tmpl) {
	    this.state.context.pop();
	  } else {
	    this.state.context.push(types.q_tmpl);
	  }
	  this.state.exprAllowed = false;
	};

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.getLineInfo = getLineInfo;
	// istanbul ignore next
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _whitespace = __webpack_require__(442);
	
	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.
	
	var Position = function Position(line, col) {
	  _classCallCheck(this, Position);
	
	  this.line = line;
	  this.column = col;
	};
	
	exports.Position = Position;
	
	var SourceLocation = function SourceLocation(start, end) {
	  _classCallCheck(this, SourceLocation);
	
	  this.start = start;
	  this.end = end;
	}
	
	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.
	
	;
	
	exports.SourceLocation = SourceLocation;
	
	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    _whitespace.lineBreakG.lastIndex = cur;
	    var match = _whitespace.lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}

/***/ },
/* 442 */
/***/ function(module, exports) {

	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.
	
	"use strict";
	
	exports.__esModule = true;
	exports.isNewLine = isNewLine;
	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	exports.lineBreak = lineBreak;
	var lineBreakG = new RegExp(lineBreak.source, "g");
	
	exports.lineBreakG = lineBreakG;
	
	function isNewLine(code) {
	  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
	}
	
	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	exports.nonASCIIwhitespace = nonASCIIwhitespace;

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _utilLocation = __webpack_require__(441);
	
	var _context = __webpack_require__(440);
	
	var _types = __webpack_require__(439);
	
	var State = (function () {
	  function State() {
	    _classCallCheck(this, State);
	  }
	
	  State.prototype.init = function init(input) {
	    this.input = input;
	
	    // Used to signify the start of a potential arrow function
	    this.potentialArrowAt = -1;
	
	    // Flags to track whether we are in a function, a generator.
	    this.inFunction = this.inGenerator = false;
	
	    // Labels in scope.
	    this.labels = [];
	
	    // Leading decorators.
	    this.decorators = [];
	
	    // Token store.
	    this.tokens = [];
	
	    // Comment store.
	    this.comments = [];
	
	    // Comment attachment store
	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];
	
	    // The current position of the tokenizer in the input.
	    this.pos = this.lineStart = 0;
	    this.curLine = 1;
	
	    // Properties of the current token:
	    // Its type
	    this.type = _types.types.eof;
	    // For tokens that include more information than their type, the value
	    this.value = null;
	    // Its start and end offset
	    this.start = this.end = this.pos;
	    // And, if locations are used, the {line, column} object
	    // corresponding to those offsets
	    this.startLoc = this.endLoc = this.curPosition();
	
	    // Position information for the previous token
	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;
	
	    // The context stack is used to superficially track syntactic
	    // context to predict whether a regular expression is allowed in a
	    // given position.
	    this.context = [_context.types.b_stat];
	    this.exprAllowed = true;
	
	    // Used to signal to callers of `readWord1` whether the word
	    // contained any escape sequences. This is needed because words with
	    // escape sequences must not be interpreted as keywords.
	
	    this.containsEsc = false;
	
	    return this;
	  };
	
	  State.prototype.curPosition = function curPosition() {
	    return new _utilLocation.Position(this.curLine, this.pos - this.lineStart);
	  };
	
	  State.prototype.clone = function clone() {
	    var state = new State();
	    for (var key in this) {
	      var val = this[key];
	      if (Array.isArray(val)) val = val.slice();
	      state[key] = val;
	    }
	    return state;
	  };
	
	  return State;
	})();
	
	exports["default"] = State;
	module.exports = exports["default"];

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _tokenizerTypes = __webpack_require__(439);
	
	var _index = __webpack_require__(435);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilWhitespace = __webpack_require__(442);
	
	var pp = _index2["default"].prototype;
	
	// ## Parser utilities
	
	// Test whether a statement node is the string literal `"use strict"`.
	
	pp.isUseStrict = function (stmt) {
	  return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && stmt.expression.raw.slice(1, -1) === "use strict";
	};
	
	// TODO
	
	pp.isRelational = function (op) {
	  return this.match(_tokenizerTypes.types.relational) && this.state.value === op;
	};
	
	// TODO
	
	pp.expectRelational = function (op) {
	  if (this.isRelational(op)) {
	    this.next();
	  } else {
	    this.unexpected();
	  }
	};
	
	// Tests whether parsed token is a contextual keyword.
	
	pp.isContextual = function (name) {
	  return this.match(_tokenizerTypes.types.name) && this.state.value === name;
	};
	
	// Consumes contextual keyword if possible.
	
	pp.eatContextual = function (name) {
	  return this.state.value === name && this.eat(_tokenizerTypes.types.name);
	};
	
	// Asserts that following token is given contextual keyword.
	
	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) this.unexpected();
	};
	
	// Test whether a semicolon can be inserted at the current position.
	
	pp.canInsertSemicolon = function () {
	  return this.match(_tokenizerTypes.types.eof) || this.match(_tokenizerTypes.types.braceR) || _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	};
	
	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.
	
	pp.semicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.canInsertSemicolon()) this.unexpected();
	};
	
	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.
	
	pp.expect = function (type) {
	  return this.eat(type) || this.unexpected();
	};
	
	// Raise an unexpected token error.
	
	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.state.start, "Unexpected token");
	};

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _tokenizerTypes = __webpack_require__(439);
	
	var _index = __webpack_require__(435);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilWhitespace = __webpack_require__(442);
	
	var pp = _index2["default"].prototype;
	
	// ### Statement parsing
	
	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.
	
	pp.parseTopLevel = function (file, program) {
	  program.sourceType = this.options.sourceType;
	  program.body = [];
	
	  var first = true;
	  while (!this.match(_tokenizerTypes.types.eof)) {
	    var stmt = this.parseStatement(true, true);
	    program.body.push(stmt);
	    if (first) {
	      if (this.isUseStrict(stmt)) this.setStrict(true);
	      first = false;
	    }
	  }
	  this.next();
	
	  file.program = this.finishNode(program, "Program");
	  file.comments = this.state.comments;
	  file.tokens = this.state.tokens;
	
	  return this.finishNode(file, "File");
	};
	
	var loopLabel = { kind: "loop" },
	    switchLabel = { kind: "switch" };
	
	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.
	
	pp.parseStatement = function (declaration, topLevel) {
	  if (this.match(_tokenizerTypes.types.at)) {
	    this.parseDecorators(true);
	  }
	
	  var starttype = this.state.type,
	      node = this.startNode();
	
	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.
	
	  switch (starttype) {
	    case _tokenizerTypes.types._break:case _tokenizerTypes.types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case _tokenizerTypes.types._debugger:
	      return this.parseDebuggerStatement(node);
	    case _tokenizerTypes.types._do:
	      return this.parseDoStatement(node);
	    case _tokenizerTypes.types._for:
	      return this.parseForStatement(node);
	    case _tokenizerTypes.types._function:
	      if (!declaration) this.unexpected();
	      return this.parseFunctionStatement(node);
	
	    case _tokenizerTypes.types._class:
	      if (!declaration) this.unexpected();
	      this.takeDecorators(node);
	      return this.parseClass(node, true);
	
	    case _tokenizerTypes.types._if:
	      return this.parseIfStatement(node);
	    case _tokenizerTypes.types._return:
	      return this.parseReturnStatement(node);
	    case _tokenizerTypes.types._switch:
	      return this.parseSwitchStatement(node);
	    case _tokenizerTypes.types._throw:
	      return this.parseThrowStatement(node);
	    case _tokenizerTypes.types._try:
	      return this.parseTryStatement(node);
	    case _tokenizerTypes.types._let:case _tokenizerTypes.types._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var
	    case _tokenizerTypes.types._var:
	      return this.parseVarStatement(node, starttype);
	    case _tokenizerTypes.types._while:
	      return this.parseWhileStatement(node);
	    case _tokenizerTypes.types._with:
	      return this.parseWithStatement(node);
	    case _tokenizerTypes.types.braceL:
	      return this.parseBlock();
	    case _tokenizerTypes.types.semi:
	      return this.parseEmptyStatement(node);
	    case _tokenizerTypes.types._export:
	    case _tokenizerTypes.types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
	
	        if (!this.inModule) this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
	      }
	      return starttype === _tokenizerTypes.types._import ? this.parseImport(node) : this.parseExport(node);
	
	    case _tokenizerTypes.types.name:
	      if (this.options.features["es7.asyncFunctions"] && this.state.value === "async") {
	        // peek ahead and see if next token is a function
	        var state = this.state.clone();
	        this.next();
	        if (this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.expect(_tokenizerTypes.types._function);
	          return this.parseFunction(node, true, false, true);
	        } else {
	          this.state = state;
	        }
	      }
	
	    // If the statement does not start with a statement keyword or a
	    // brace, it's an ExpressionStatement or LabeledStatement. We
	    // simply start parsing an expression, and afterwards, if the
	    // next token is a colon and the expression was a simple
	    // Identifier node, we switch to interpreting it as a label.
	    default:
	      var maybeName = this.state.value,
	          expr = this.parseExpression();
	
	      if (starttype === _tokenizerTypes.types.name && expr.type === "Identifier" && this.eat(_tokenizerTypes.types.colon)) {
	        return this.parseLabeledStatement(node, maybeName, expr);
	      } else {
	        return this.parseExpressionStatement(node, expr);
	      }
	  }
	};
	
	pp.takeDecorators = function (node) {
	  if (this.state.decorators.length) {
	    node.decorators = this.state.decorators;
	    this.state.decorators = [];
	  }
	};
	
	pp.parseDecorators = function (allowExport) {
	  while (this.match(_tokenizerTypes.types.at)) {
	    this.state.decorators.push(this.parseDecorator());
	  }
	
	  if (allowExport && this.match(_tokenizerTypes.types._export)) {
	    return;
	  }
	
	  if (!this.match(_tokenizerTypes.types._class)) {
	    this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
	  }
	};
	
	pp.parseDecorator = function () {
	  if (!this.options.features["es7.decorators"]) {
	    this.unexpected();
	  }
	  var node = this.startNode();
	  this.next();
	  node.expression = this.parseMaybeAssign();
	  return this.finishNode(node, "Decorator");
	};
	
	pp.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();
	
	  if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
	    node.label = null;
	  } else if (!this.match(_tokenizerTypes.types.name)) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdent();
	    this.semicolon();
	  }
	
	  // Verify that there is an actual destination to break or
	  // continue to.
	  for (var i = 0; i < this.state.labels.length; ++i) {
	    var lab = this.state.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};
	
	pp.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};
	
	pp.parseDoStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  this.expect(_tokenizerTypes.types._while);
	  node.test = this.parseParenExpression();
	  this.eat(_tokenizerTypes.types.semi);
	  return this.finishNode(node, "DoWhileStatement");
	};
	
	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.
	
	pp.parseForStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  this.expect(_tokenizerTypes.types.parenL);
	
	  if (this.match(_tokenizerTypes.types.semi)) {
	    return this.parseFor(node, null);
	  }
	
	  if (this.match(_tokenizerTypes.types._var) || this.match(_tokenizerTypes.types._let) || this.match(_tokenizerTypes.types._const)) {
	    var _init = this.startNode(),
	        varKind = this.state.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");
	    if ((this.match(_tokenizerTypes.types._in) || this.isContextual("of")) && _init.declarations.length === 1 && !(varKind !== _tokenizerTypes.types._var && _init.declarations[0].init)) return this.parseForIn(node, _init);
	    return this.parseFor(node, _init);
	  }
	
	  var refShorthandDefaultPos = { start: 0 };
	  var init = this.parseExpression(true, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	    this.toAssignable(init);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else if (refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return this.parseFor(node, init);
	};
	
	pp.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};
	
	pp.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(_tokenizerTypes.types._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};
	
	pp.parseReturnStatement = function (node) {
	  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.state.start, "'return' outside of function");
	  }
	
	  this.next();
	
	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.
	
	  if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }
	
	  return this.finishNode(node, "ReturnStatement");
	};
	
	pp.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  this.state.labels.push(switchLabel);
	
	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.
	
	  for (var cur, sawDefault; !this.match(_tokenizerTypes.types.braceR);) {
	    if (this.match(_tokenizerTypes.types._case) || this.match(_tokenizerTypes.types._default)) {
	      var isCase = this.match(_tokenizerTypes.types._case);
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(_tokenizerTypes.types.colon);
	    } else {
	      if (!cur) this.unexpected();
	      cur.consequent.push(this.parseStatement(true));
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.state.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};
	
	pp.parseThrowStatement = function (node) {
	  this.next();
	  if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};
	
	// Reused empty array added for node fields that are always empty.
	
	var empty = [];
	
	pp.parseTryStatement = function (node) {
	  this.next();
	  node.block = this.parseBlock();
	  node.handler = null;
	  if (this.match(_tokenizerTypes.types._catch)) {
	    var clause = this.startNode();
	    this.next();
	    this.expect(_tokenizerTypes.types.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true);
	    this.expect(_tokenizerTypes.types.parenR);
	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }
	
	  node.guardedHandlers = empty;
	  node.finalizer = this.eat(_tokenizerTypes.types._finally) ? this.parseBlock() : null;
	
	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }
	
	  return this.finishNode(node, "TryStatement");
	};
	
	pp.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};
	
	pp.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};
	
	pp.parseWithStatement = function (node) {
	  if (this.strict) this.raise(this.state.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};
	
	pp.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};
	
	pp.parseLabeledStatement = function (node, maybeName, expr) {
	  var _arr = this.state.labels;
	
	  for (var _i = 0; _i < _arr.length; _i++) {
	    var label = _arr[_i];
	    if (label.name === maybeName) {
	      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }
	
	  var kind = this.state.type.isLoop ? "loop" : this.match(_tokenizerTypes.types._switch) ? "switch" : null;
	  for (var i = this.state.labels.length - 1; i >= 0; i--) {
	    var label = this.state.labels[i];
	    if (label.statementStart === node.start) {
	      label.statementStart = this.state.start;
	      label.kind = kind;
	    } else {
	      break;
	    }
	  }
	
	  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
	  node.body = this.parseStatement(true);
	  this.state.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};
	
	pp.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};
	
	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).
	
	pp.parseBlock = function (allowStrict) {
	  var node = this.startNode(),
	      first = true,
	      oldStrict = undefined;
	  node.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    var stmt = this.parseStatement(true);
	    node.body.push(stmt);
	    if (first && allowStrict && this.isUseStrict(stmt)) {
	      oldStrict = this.strict;
	      this.setStrict(this.strict = true);
	    }
	    first = false;
	  }
	  if (oldStrict === false) this.setStrict(false);
	  return this.finishNode(node, "BlockStatement");
	};
	
	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.
	
	pp.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(_tokenizerTypes.types.semi);
	  node.test = this.match(_tokenizerTypes.types.semi) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.semi);
	  node.update = this.match(_tokenizerTypes.types.parenR) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};
	
	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.
	
	pp.parseForIn = function (node, init) {
	  var type = this.match(_tokenizerTypes.types._in) ? "ForInStatement" : "ForOfStatement";
	  this.next();
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, type);
	};
	
	// Parse a list of variable declarations.
	
	pp.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarHead(decl);
	    if (this.eat(_tokenizerTypes.types.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === _tokenizerTypes.types._const && !(this.match(_tokenizerTypes.types._in) || this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_tokenizerTypes.types._in) || this.isContextual("of")))) {
	      this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(_tokenizerTypes.types.comma)) break;
	  }
	  return node;
	};
	
	pp.parseVarHead = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true);
	};
	
	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).
	
	pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync) {
	  this.initFunction(node, isAsync);
	  node.generator = this.eat(_tokenizerTypes.types.star);
	
	  if (isStatement || this.match(_tokenizerTypes.types.name)) {
	    node.id = this.parseIdent();
	  }
	
	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);
	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};
	
	pp.parseFunctionParams = function (node) {
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.options.features["es7.trailingFunctionCommas"]);
	};
	
	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).
	
	pp.parseClass = function (node, isStatement) {
	  this.next();
	  this.parseClassId(node, isStatement);
	  this.parseClassSuper(node);
	  var classBody = this.startNode();
	  var hadConstructor = false;
	  classBody.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  var decorators = [];
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (this.eat(_tokenizerTypes.types.semi)) continue;
	    if (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	      continue;
	    }
	    var method = this.startNode();
	    if (decorators.length) {
	      method.decorators = decorators;
	      decorators = [];
	    }
	    var isMaybeStatic = this.match(_tokenizerTypes.types.name) && this.state.value === "static";
	    var isGenerator = this.eat(_tokenizerTypes.types.star),
	        isAsync = false;
	    this.parsePropertyName(method);
	    method["static"] = isMaybeStatic && !this.match(_tokenizerTypes.types.parenL);
	    if (method["static"]) {
	      if (isGenerator) this.unexpected();
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	      this.parsePropertyName(method);
	    }
	    if (!isGenerator && method.key.type === "Identifier" && !method.computed && this.isClassProperty()) {
	      classBody.body.push(this.parseClassProperty(method));
	      continue;
	    }
	    if (this.options.features["es7.asyncFunctions"] && !this.match(_tokenizerTypes.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async") {
	      isAsync = true;
	      this.parsePropertyName(method);
	    }
	    var isGetSet = false;
	    method.kind = "method";
	    if (!method.computed) {
	      var key = method.key;
	
	      if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_tokenizerTypes.types.parenL) && (key.name === "get" || key.name === "set")) {
	        isGetSet = true;
	        method.kind = key.name;
	        key = this.parsePropertyName(method);
	      }
	      if (!method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
	        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
	        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
	        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
	        if (isAsync) this.raise(key.start, "Constructor can't be an async function");
	        method.kind = "constructor";
	        hadConstructor = true;
	      }
	    }
	    if (method.kind === "constructor" && method.decorators) {
	      this.raise(method.start, "You can't attach decorators to a class constructor");
	    }
	    this.parseClassMethod(classBody, method, isGenerator, isAsync);
	    if (isGetSet) {
	      var paramCount = method.kind === "get" ? 0 : 1;
	      if (method.value.params.length !== paramCount) {
	        var start = method.value.start;
	        if (method.kind === "get") {
	          this.raise(start, "getter should have no params");
	        } else {
	          this.raise(start, "setter should have exactly one param");
	        }
	      }
	    }
	  }
	
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no method");
	  }
	
	  node.body = this.finishNode(classBody, "ClassBody");
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};
	
	pp.isClassProperty = function () {
	  return this.match(_tokenizerTypes.types.eq) || this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};
	
	pp.parseClassProperty = function (node) {
	  if (this.match(_tokenizerTypes.types.eq)) {
	    if (!this.options.features["es7.classProperties"]) this.unexpected();
	    this.next();
	    node.value = this.parseMaybeAssign();
	  } else {
	    node.value = null;
	  }
	  this.semicolon();
	  return this.finishNode(node, "ClassProperty");
	};
	
	pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
	  method.value = this.parseMethod(isGenerator, isAsync);
	  classBody.body.push(this.finishNode(method, "MethodDefinition"));
	};
	
	pp.parseClassId = function (node, isStatement) {
	  node.id = this.match(_tokenizerTypes.types.name) ? this.parseIdent() : isStatement ? this.unexpected() : null;
	};
	
	pp.parseClassSuper = function (node) {
	  node.superClass = this.eat(_tokenizerTypes.types._extends) ? this.parseExprSubscripts() : null;
	};
	
	// Parses module export declaration.
	
	pp.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    if (this.options.features["es7.exportExtensions"] && this.eatContextual("as")) {
	      specifier.exported = this.parseIdent();
	      node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
	      this.parseExportSpecifiersMaybe(node);
	      this.parseExportFrom(node, true);
	    } else {
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	  } else if (this.options.features["es7.exportExtensions"] && this.isExportDefaultSpecifier()) {
	    var specifier = this.startNode();
	    specifier.exported = this.parseIdent(true);
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    if (this.match(_tokenizerTypes.types.comma) && this.lookahead().type === _tokenizerTypes.types.star) {
	      this.expect(_tokenizerTypes.types.comma);
	      var _specifier = this.startNode();
	      this.expect(_tokenizerTypes.types.star);
	      this.expectContextual("as");
	      _specifier.exported = this.parseIdent();
	      node.specifiers.push(this.finishNode(_specifier, "ExportNamespaceSpecifier"));
	    } else {
	      this.parseExportSpecifiersMaybe(node);
	    }
	    this.parseExportFrom(node, true);
	  } else if (this.eat(_tokenizerTypes.types._default)) {
	    // export default ...
	    var possibleDeclaration = this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._class);
	    var expr = this.parseMaybeAssign();
	    var needsSemi = true;
	    if (possibleDeclaration) {
	      needsSemi = false;
	      if (expr.id) {
	        expr.type = expr.type === "FunctionExpression" ? "FunctionDeclaration" : "ClassDeclaration";
	      }
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    this.checkExport(node);
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
	    node.specifiers = [];
	    node.source = null;
	    node.declaration = this.parseExportDeclaration(node);
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    this.parseExportFrom(node);
	  }
	  this.checkExport(node);
	  return this.finishNode(node, "ExportNamedDeclaration");
	};
	
	pp.parseExportDeclaration = function () {
	  return this.parseStatement(true);
	};
	
	pp.isExportDefaultSpecifier = function () {
	  if (this.match(_tokenizerTypes.types.name)) {
	    return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
	  }
	
	  if (!this.match(_tokenizerTypes.types._default)) {
	    return false;
	  }
	
	  var lookahead = this.lookahead();
	  return lookahead.type === _tokenizerTypes.types.comma || lookahead.type === _tokenizerTypes.types.name && lookahead.value === "from";
	};
	
	pp.parseExportSpecifiersMaybe = function (node) {
	  if (this.eat(_tokenizerTypes.types.comma)) {
	    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
	  }
	};
	
	pp.parseExportFrom = function (node, expect) {
	  if (this.eatContextual("from")) {
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	    this.checkExport(node);
	  } else {
	    if (expect) {
	      this.unexpected();
	    } else {
	      node.source = null;
	    }
	  }
	
	  this.semicolon();
	};
	
	pp.shouldParseExportDeclaration = function () {
	  return this.options.features["es7.asyncFunctions"] && this.isContextual("async");
	};
	
	pp.checkExport = function (node) {
	  if (this.state.decorators.length) {
	    var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
	    if (!node.declaration || !isClass) {
	      this.raise(node.start, "You can only use decorators on an export when exporting a class");
	    }
	    this.takeDecorators(node.declaration);
	  }
	};
	
	// Parses a comma-separated list of module exports.
	
	pp.parseExportSpecifiers = function () {
	  var nodes = [],
	      first = true;
	  // export { x, y as z } [from '...']
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    var node = this.startNode();
	    node.local = this.parseIdent(this.match(_tokenizerTypes.types._default));
	    node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local.__clone();
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }
	
	  return nodes;
	};
	
	// Parses import declaration.
	
	pp.parseImport = function (node) {
	  this.next();
	
	  // import '...'
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.specifiers = [];
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = [];
	    this.parseImportSpecifiers(node);
	    this.expectContextual("from");
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};
	
	// Parses a comma-separated list of module imports.
	
	pp.parseImportSpecifiers = function (node) {
	  var first = true;
	  if (this.match(_tokenizerTypes.types.name)) {
	    // import defaultObj, { x, y as z } from '...'
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdent(), startPos, startLoc));
	    if (!this.eat(_tokenizerTypes.types.comma)) return;
	  }
	
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    specifier.local = this.parseIdent();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
	    return;
	  }
	
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    var specifier = this.startNode();
	    specifier.imported = this.parseIdent(true);
	    specifier.local = this.eatContextual("as") ? this.parseIdent() : specifier.imported.__clone();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }
	};
	
	pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.local = id;
	  this.checkLVal(node.local, true);
	  return this.finishNode(node, "ImportDefaultSpecifier");
	};

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _tokenizerTypes = __webpack_require__(439);
	
	var _index = __webpack_require__(435);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilIdentifier = __webpack_require__(436);
	
	var pp = _index2["default"].prototype;
	
	// Convert existing expression atom to assignable pattern
	// if possible.
	
	pp.toAssignable = function (node, isBinding) {
	  if (node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;
	
	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        var _arr = node.properties;
	        for (var _i = 0; _i < _arr.length; _i++) {
	          var prop = _arr[_i];
	          if (prop.type === "SpreadProperty") continue;
	          if (prop.kind !== "init") this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	          this.toAssignable(prop.value, isBinding);
	        }
	        break;
	
	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding);
	        break;
	
	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }
	        break;
	
	      case "MemberExpression":
	        if (!isBinding) break;
	
	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  }
	  return node;
	};
	
	// Convert list of expression atoms to binding list.
	
	pp.toAssignableList = function (exprList, isBinding) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type === "RestElement") {
	      --end;
	    } else if (last && last.type === "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
	        this.unexpected(arg.start);
	      }
	      --end;
	    }
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding);
	  }
	  return exprList;
	};
	
	// Convert list of expression atoms to a list of
	
	pp.toReferencedList = function (exprList) {
	  return exprList;
	};
	
	// Parses spread element.
	
	pp.parseSpread = function (refShorthandDefaultPos) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
	  return this.finishNode(node, "SpreadElement");
	};
	
	pp.parseRest = function () {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types.bracketL) ? this.parseBindingAtom() : this.unexpected();
	  return this.finishNode(node, "RestElement");
	};
	
	// Parses lvalue (assignable) atom.
	
	pp.parseBindingAtom = function () {
	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.parseIdent();
	
	    case _tokenizerTypes.types.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(_tokenizerTypes.types.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern");
	
	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(true);
	
	    default:
	      this.unexpected();
	  }
	};
	
	pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) first = false;else this.expect(_tokenizerTypes.types.comma);
	    if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.eat(close)) {
	      break;
	    } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	      elts.push(this.parseAssignableListItemTypes(this.parseRest()));
	      this.expect(close);
	      break;
	    } else {
	      var left = this.parseMaybeDefault();
	      this.parseAssignableListItemTypes(left);
	      elts.push(this.parseMaybeDefault(null, null, left));
	    }
	  }
	  return elts;
	};
	
	pp.parseAssignableListItemTypes = function (param) {
	  return param;
	};
	
	// Parses assignment pattern around given atom if possible.
	
	pp.parseMaybeDefault = function (startPos, startLoc, left) {
	  startLoc = startLoc || this.state.startLoc;
	  startPos = startPos || this.state.start;
	  left = left || this.parseBindingAtom();
	  if (!this.eat(_tokenizerTypes.types.eq)) return left;
	
	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};
	
	// Verify that a node is an lval — something that can be assigned
	// to.
	
	pp.checkLVal = function (expr, isBinding, checkClashes) {
	  switch (expr.type) {
	    case "Identifier":
	      if (this.strict && (_utilIdentifier.reservedWords.strictBind(expr.name) || _utilIdentifier.reservedWords.strict(expr.name))) this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      if (checkClashes) {
	        if (checkClashes[expr.name]) {
	          this.raise(expr.start, "Argument name clash in strict mode");
	        } else {
	          checkClashes[expr.name] = true;
	        }
	      }
	      break;
	
	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;
	
	    case "ObjectPattern":
	      var _arr2 = expr.properties;
	
	      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	        var prop = _arr2[_i2];
	        if (prop.type === "Property") prop = prop.value;
	        this.checkLVal(prop, isBinding, checkClashes);
	      }
	      break;
	
	    case "ArrayPattern":
	      var _arr3 = expr.elements;
	
	      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	        var elem = _arr3[_i3];
	        if (elem) this.checkLVal(elem, isBinding, checkClashes);
	      }
	      break;
	
	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes);
	      break;
	
	    case "SpreadProperty":
	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes);
	      break;
	
	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
	  }
	};

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser
	
	"use strict";
	
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _tokenizerTypes = __webpack_require__(439);
	
	var _index = __webpack_require__(435);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilIdentifier = __webpack_require__(436);
	
	var pp = _index2["default"].prototype;
	
	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.
	
	pp.checkPropClash = function (prop, propHash) {
	  if (prop.computed || prop.method || prop.shorthand) return;
	
	  var key = prop.key,
	      name = undefined;
	  switch (key.type) {
	    case "Identifier":
	      name = key.name;break;
	    case "Literal":
	      name = String(key.value);break;
	    default:
	      return;
	  }
	
	  var kind = prop.kind;
	  if (name === "__proto__" && kind === "init") {
	    if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	    propHash.proto = true;
	  }
	};
	
	// ### Expression parsing
	
	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function (s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.
	
	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).
	
	pp.parseExpression = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types.comma)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(_tokenizerTypes.types.comma)) {
	      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
	    }
	    this.toReferencedList(node.expressions);
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};
	
	// Parse an assignment expression. This includes applications of
	// operators like `+=`.
	
	pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {
	  if (this.match(_tokenizerTypes.types._yield) && this.state.inGenerator) {
	    return this.parseYield();
	  }
	
	  var failOnShorthandAssign = undefined;
	  if (!refShorthandDefaultPos) {
	    refShorthandDefaultPos = { start: 0 };
	    failOnShorthandAssign = true;
	  } else {
	    failOnShorthandAssign = false;
	  }
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  if (this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.name)) {
	    this.state.potentialArrowAt = this.state.start;
	  }
	  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.state.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.left = this.match(_tokenizerTypes.types.eq) ? this.toAssignable(left) : left;
	    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly
	    this.checkLVal(left);
	    if (left.parenthesizedExpression) {
	      var errorMsg = undefined;
	      if (left.type === "ObjectPattern") {
	        errorMsg = "`({a}) = 0` use `({a} = 0)`";
	      } else if (left.type === "ArrayPattern") {
	        errorMsg = "`([a]) = 0` use `([a] = 0)`";
	      }
	      if (errorMsg) {
	        this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
	      }
	    }
	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return left;
	};
	
	// Parse a ternary conditional (`?:`) operator.
	
	pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  if (this.eat(_tokenizerTypes.types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};
	
	// Start the precedence parser.
	
	pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeUnary(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	  }
	};
	
	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.
	
	pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.state.type.binop;
	  if (prec != null && (!noIn || !this.match(_tokenizerTypes.types._in))) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.state.value;
	      var op = this.state.type;
	      this.next();
	      var startPos = this.state.start,
	          startLoc = this.state.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);
	      this.finishNode(node, op === _tokenizerTypes.types.logicalOR || op === _tokenizerTypes.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};
	
	// Parse unary operators, both prefix and postfix.
	
	pp.parseMaybeUnary = function (refShorthandDefaultPos) {
	  if (this.state.type.prefix) {
	    var node = this.startNode(),
	        update = this.match(_tokenizerTypes.types.incDec);
	    node.operator = this.state.value;
	    node.prefix = true;
	    this.next();
	    node.argument = this.parseMaybeUnary();
	    if (refShorthandDefaultPos && refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);
	    if (update) {
	      this.checkLVal(node.argument);
	    } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raise(node.start, "Deleting local variable in strict mode");
	    }
	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }
	
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprSubscripts(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  while (this.state.type.postfix && !this.canInsertSemicolon()) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.prefix = false;
	    node.argument = expr;
	    this.checkLVal(expr);
	    this.next();
	    expr = this.finishNode(node, "UpdateExpression");
	  }
	  return expr;
	};
	
	// Parse call, dot, and `[]`-subscript expressions.
	
	pp.parseExprSubscripts = function (refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprAtom(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseSubscripts(expr, startPos, startLoc);
	  }
	};
	
	pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (!noCalls && this.eat(_tokenizerTypes.types.doubleColon)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.callee = this.parseNoCallExpr();
	      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	    } else if (this.eat(_tokenizerTypes.types.dot)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseIdent(true);
	      node.computed = false;
	      base = this.finishNode(node, "MemberExpression");
	    } else if (this.eat(_tokenizerTypes.types.bracketL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseExpression();
	      node.computed = true;
	      this.expect(_tokenizerTypes.types.bracketR);
	      base = this.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this.match(_tokenizerTypes.types.parenL)) {
	      var possibleAsync = base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
	      this.next();
	
	      var node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.options.features["es7.trailingFunctionCommas"]);
	      base = this.finishNode(node, "CallExpression");
	
	      if (possibleAsync && (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.arrow))) {
	        base = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	      } else {
	        this.toReferencedList(node.arguments);
	      }
	    } else if (this.match(_tokenizerTypes.types.backQuote)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.tag = base;
	      node.quasi = this.parseTemplate();
	      base = this.finishNode(node, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};
	
	pp.parseAsyncArrowFromCallExpression = function (node, call) {
	  if (!this.options.features["es7.asyncFunctions"]) this.unexpected();
	  this.expect(_tokenizerTypes.types.arrow);
	  return this.parseArrowExpression(node, call.arguments, true);
	};
	
	// Parse a no-call expression (like argument of `new` or `::` operators).
	
	pp.parseNoCallExpr = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	};
	
	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.
	
	pp.parseExprAtom = function (refShorthandDefaultPos) {
	  var node = undefined,
	      canBeArrow = this.state.potentialArrowAt === this.state.start;
	  switch (this.state.type) {
	    case _tokenizerTypes.types._super:
	      if (!this.state.inFunction) this.raise(this.state.start, "'super' outside of function or class");
	    case _tokenizerTypes.types._this:
	      var type = this.match(_tokenizerTypes.types._this) ? "ThisExpression" : "Super";
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, type);
	
	    case _tokenizerTypes.types._yield:
	      if (this.state.inGenerator) this.unexpected();
	
	    case _tokenizerTypes.types._do:
	      if (this.options.features["es7.doExpressions"]) {
	        var _node = this.startNode();
	        this.next();
	        var oldInFunction = this.state.inFunction;
	        var oldLabels = this.state.labels;
	        this.state.labels = [];
	        this.state.inFunction = false;
	        _node.body = this.parseBlock();
	        this.state.inFunction = oldInFunction;
	        this.state.labels = oldLabels;
	        return this.finishNode(_node, "DoExpression");
	      }
	
	    case _tokenizerTypes.types.name:
	      node = this.startNode();
	      var id = this.parseIdent(true);
	
	      if (this.options.features["es7.asyncFunctions"]) {
	        if (id.name === "await") {
	          if (this.inAsync) return this.parseAwait(node);
	        } else if (id.name === "async" && this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.next();
	          return this.parseFunction(node, false, false, true);
	        } else if (canBeArrow && id.name === "async" && this.match(_tokenizerTypes.types.name)) {
	          var params = [this.parseIdent()];
	          this.expect(_tokenizerTypes.types.arrow);
	          // var foo = bar => {};
	          return this.parseArrowExpression(node, params, true);
	        }
	      }
	
	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	        return this.parseArrowExpression(node, [id]);
	      }
	
	      return id;
	
	    case _tokenizerTypes.types.regexp:
	      var value = this.state.value;
	      node = this.parseLiteral(value.value);
	      node.regex = { pattern: value.pattern, flags: value.flags };
	      return node;
	
	    case _tokenizerTypes.types.num:case _tokenizerTypes.types.string:
	      return this.parseLiteral(this.state.value);
	
	    case _tokenizerTypes.types._null:case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node = this.startNode();
	      node.rawValue = node.value = this.match(_tokenizerTypes.types._null) ? null : this.match(_tokenizerTypes.types._true);
	      node.raw = this.state.type.keyword;
	      this.next();
	      return this.finishNode(node, "Literal");
	
	    case _tokenizerTypes.types.parenL:
	      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);
	
	    case _tokenizerTypes.types.bracketL:
	      node = this.startNode();
	      this.next();
	      // check whether this is array comprehension or regular array
	      if (this.options.features["es7.comprehensions"] && this.match(_tokenizerTypes.types._for)) {
	        return this.parseComprehension(node, false);
	      }
	      node.elements = this.parseExprList(_tokenizerTypes.types.bracketR, true, true, refShorthandDefaultPos);
	      this.toReferencedList(node.elements);
	      return this.finishNode(node, "ArrayExpression");
	
	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(false, refShorthandDefaultPos);
	
	    case _tokenizerTypes.types._function:
	      node = this.startNode();
	      this.next();
	      return this.parseFunction(node, false);
	
	    case _tokenizerTypes.types.at:
	      this.parseDecorators();
	
	    case _tokenizerTypes.types._class:
	      node = this.startNode();
	      this.takeDecorators(node);
	      return this.parseClass(node, false);
	
	    case _tokenizerTypes.types._new:
	      return this.parseNew();
	
	    case _tokenizerTypes.types.backQuote:
	      return this.parseTemplate();
	
	    case _tokenizerTypes.types.doubleColon:
	      node = this.startNode();
	      this.next();
	      node.object = null;
	      var callee = node.callee = this.parseNoCallExpr();
	      if (callee.type === "MemberExpression") {
	        return this.finishNode(node, "BindExpression");
	      } else {
	        this.raise(callee.start, "Binding should be performed on object property.");
	      }
	
	    default:
	      this.unexpected();
	  }
	};
	
	pp.parseLiteral = function (value) {
	  var node = this.startNode();
	  node.rawValue = node.value = value;
	  node.raw = this.input.slice(this.state.start, this.state.end);
	  this.next();
	  return this.finishNode(node, "Literal");
	};
	
	pp.parseParenExpression = function () {
	  this.expect(_tokenizerTypes.types.parenL);
	  var val = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  return val;
	};
	
	pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;
	  var val = undefined;
	  this.next();
	
	  if (this.options.features["es7.comprehensions"] && this.match(_tokenizerTypes.types._for)) {
	    return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);
	  }
	
	  var innerStartPos = this.state.start,
	      innerStartLoc = this.state.startLoc;
	  var exprList = [],
	      first = true;
	  var refShorthandDefaultPos = { start: 0 },
	      spreadStart = undefined,
	      innerParenStart = undefined,
	      optionalCommaStart = undefined;
	  while (!this.match(_tokenizerTypes.types.parenR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.match(_tokenizerTypes.types.parenR) && this.options.features["es7.trailingFunctionCommas"]) {
	        optionalCommaStart = this.state.start;
	        break;
	      }
	    }
	
	    if (this.match(_tokenizerTypes.types.ellipsis)) {
	      var spreadNodeStartPos = this.state.start,
	          spreadNodeStartLoc = this.state.startLoc;
	      spreadStart = this.state.start;
	      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
	      break;
	    } else {
	      if (this.match(_tokenizerTypes.types.parenL) && !innerParenStart) {
	        innerParenStart = this.state.start;
	      }
	      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
	    }
	  }
	  var innerEndPos = this.state.start;
	  var innerEndLoc = this.state.startLoc;
	  this.expect(_tokenizerTypes.types.parenR);
	
	  if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	    if (innerParenStart) this.unexpected(innerParenStart);
	    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
	  }
	
	  if (!exprList.length) {
	    if (isAsync) {
	      return;
	    } else {
	      this.unexpected(this.state.lastTokStart);
	    }
	  }
	  if (optionalCommaStart) this.unexpected(optionalCommaStart);
	  if (spreadStart) this.unexpected(spreadStart);
	  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);
	
	  if (exprList.length > 1) {
	    val = this.startNodeAt(innerStartPos, innerStartLoc);
	    val.expressions = exprList;
	    this.toReferencedList(val.expressions);
	    this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	  } else {
	    val = exprList[0];
	  }
	
	  val.parenthesizedExpression = true;
	  return val;
	};
	
	pp.parseParenItem = function (node) {
	  return node;
	};
	
	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the
	
	pp.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdent(true);
	
	  if (this.eat(_tokenizerTypes.types.dot)) {
	    node.meta = meta;
	    node.property = this.parseIdent(true);
	
	    if (node.property.name !== "target") {
	      this.raise(node.property.start, "The only valid meta property for new is new.target");
	    }
	
	    return this.finishNode(node, "MetaProperty");
	  }
	
	  node.callee = this.parseNoCallExpr();
	
	  if (this.eat(_tokenizerTypes.types.parenL)) {
	    node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.options.features["es7.trailingFunctionCommas"]);
	    this.toReferencedList(node.arguments);
	  } else {
	    node.arguments = [];
	  }
	
	  return this.finishNode(node, "NewExpression");
	};
	
	// Parse template expression.
	
	pp.parseTemplateElement = function () {
	  var elem = this.startNode();
	  elem.value = {
	    raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	    cooked: this.state.value
	  };
	  this.next();
	  elem.tail = this.match(_tokenizerTypes.types.backQuote);
	  return this.finishNode(elem, "TemplateElement");
	};
	
	pp.parseTemplate = function () {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement();
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(_tokenizerTypes.types.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(_tokenizerTypes.types.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement());
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};
	
	// Parse an object literal or binding pattern.
	
	pp.parseObj = function (isPattern, refShorthandDefaultPos) {
	  var node = this.startNode(),
	      first = true,
	      propHash = Object.create(null);
	  node.properties = [];
	  var decorators = [];
	  this.next();
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }
	
	    while (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	    }
	
	    var prop = this.startNode(),
	        isGenerator = false,
	        isAsync = false,
	        startPos = undefined,
	        startLoc = undefined;
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }
	    if (this.options.features["es7.objectRestSpread"] && this.match(_tokenizerTypes.types.ellipsis)) {
	      prop = this.parseSpread();
	      prop.type = "SpreadProperty";
	      node.properties.push(prop);
	      continue;
	    }
	    prop.method = false;
	    prop.shorthand = false;
	    if (isPattern || refShorthandDefaultPos) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }
	    if (!isPattern) {
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	    }
	    if (!isPattern && this.options.features["es7.asyncFunctions"] && this.isContextual("async")) {
	      if (isGenerator) this.unexpected();
	      var asyncId = this.parseIdent();
	      if (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.braceR)) {
	        prop.key = asyncId;
	      } else {
	        isAsync = true;
	        this.parsePropertyName(prop);
	      }
	    } else {
	      this.parsePropertyName(prop);
	    }
	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
	    this.checkPropClash(prop, propHash);
	    node.properties.push(this.finishNode(prop, "Property"));
	  }
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no property");
	  }
	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};
	
	pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
	  if (this.eat(_tokenizerTypes.types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
	    prop.kind = "init";
	  } else if (this.match(_tokenizerTypes.types.parenL)) {
	    if (isPattern) this.unexpected();
	    prop.kind = "init";
	    prop.method = true;
	    prop.value = this.parseMethod(isGenerator, isAsync);
	  } else if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    if (isGenerator || isAsync || isPattern) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    prop.value = this.parseMethod(false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.value.params.length !== paramCount) {
	      var start = prop.value.start;
	      if (prop.kind === "get") this.raise(start, "getter should have no params");else this.raise(start, "setter should have exactly one param");
	    }
	  } else if (!prop.computed && prop.key.type === "Identifier") {
	    prop.kind = "init";
	    if (isPattern) {
	      if (this.isKeyword(prop.key.name) || this.strict && (_utilIdentifier.reservedWords.strictBind(prop.key.name) || _utilIdentifier.reservedWords.strict(prop.key.name)) || !this.options.allowReserved && this.isReservedWord(prop.key.name)) this.raise(prop.key.start, "Binding " + prop.key.name);
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else if (this.match(_tokenizerTypes.types.eq) && refShorthandDefaultPos) {
	      if (!refShorthandDefaultPos.start) refShorthandDefaultPos.start = this.state.start;
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else {
	      prop.value = prop.key.__clone();
	    }
	    prop.shorthand = true;
	  } else {
	    this.unexpected();
	  }
	};
	
	pp.parsePropertyName = function (prop) {
	  if (this.eat(_tokenizerTypes.types.bracketL)) {
	    prop.computed = true;
	    prop.key = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.bracketR);
	    return prop.key;
	  } else {
	    prop.computed = false;
	    return prop.key = this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdent(true);
	  }
	};
	
	// Initialize empty function node.
	
	pp.initFunction = function (node, isAsync) {
	  node.id = null;
	  node.generator = false;
	  node.expression = false;
	  if (this.options.features["es7.asyncFunctions"]) {
	    node.async = !!isAsync;
	  }
	};
	
	// Parse object or class method.
	
	pp.parseMethod = function (isGenerator, isAsync) {
	  var node = this.startNode();
	  this.initFunction(node, isAsync);
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.options.features["es7.trailingFunctionCommas"]);
	  node.generator = isGenerator;
	  this.parseFunctionBody(node);
	  return this.finishNode(node, "FunctionExpression");
	};
	
	// Parse arrow function expression with given parameters.
	
	pp.parseArrowExpression = function (node, params, isAsync) {
	  this.initFunction(node, isAsync);
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};
	
	// Parse function body and check parameters.
	
	pp.parseFunctionBody = function (node, allowExpression) {
	  var isExpression = allowExpression && !this.match(_tokenizerTypes.types.braceL);
	
	  var oldInAsync = this.inAsync;
	  this.inAsync = node.async;
	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.state.inFunction,
	        oldInGen = this.state.inGenerator,
	        oldLabels = this.state.labels;
	    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
	  }
	  this.inAsync = oldInAsync;
	
	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {
	    var nameHash = Object.create(null),
	        oldStrict = this.strict;
	    this.strict = true;
	    if (node.id) {
	      this.checkLVal(node.id, true);
	    }
	    var _arr = node.params;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var param = _arr[_i];
	      this.checkLVal(param, true, nameHash);
	    }
	    this.strict = oldStrict;
	  }
	};
	
	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).
	
	pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }
	
	    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
	  }
	  return elts;
	};
	
	pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
	  var elt = undefined;
	  if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	    elt = null;
	  } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	    elt = this.parseSpread(refShorthandDefaultPos);
	  } else {
	    elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
	  }
	  return elt;
	};
	
	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.
	
	pp.parseIdent = function (liberal) {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.name)) {
	    if (!liberal && (!this.options.allowReserved && this.isReservedWord(this.state.value) || this.strict && _utilIdentifier.reservedWords.strict(this.state.value))) this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
	    node.name = this.state.value;
	  } else if (liberal && this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "Identifier");
	};
	
	// Parses await expression inside async function.
	
	pp.parseAwait = function (node) {
	  if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
	    this.unexpected();
	  }
	  node.all = this.eat(_tokenizerTypes.types.star);
	  node.argument = this.parseMaybeUnary();
	  return this.finishNode(node, "AwaitExpression");
	};
	
	// Parses yield expression inside generator.
	
	pp.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon() || !this.match(_tokenizerTypes.types.star) && !this.state.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(_tokenizerTypes.types.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};
	
	// Parses array and generator comprehensions.
	
	pp.parseComprehension = function (node, isGenerator) {
	  node.blocks = [];
	  while (this.match(_tokenizerTypes.types._for)) {
	    var block = this.startNode();
	    this.next();
	    this.expect(_tokenizerTypes.types.parenL);
	    block.left = this.parseBindingAtom();
	    this.checkLVal(block.left, true);
	    this.expectContextual("of");
	    block.right = this.parseExpression();
	    this.expect(_tokenizerTypes.types.parenR);
	    node.blocks.push(this.finishNode(block, "ComprehensionBlock"));
	  }
	  node.filter = this.eat(_tokenizerTypes.types._if) ? this.parseParenExpression() : null;
	  node.body = this.parseExpression();
	  this.expect(isGenerator ? _tokenizerTypes.types.parenR : _tokenizerTypes.types.bracketR);
	  node.generator = isGenerator;
	  return this.finishNode(node, "ComprehensionExpression");
	};

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	// istanbul ignore next
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _index = __webpack_require__(435);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _utilLocation = __webpack_require__(441);
	
	// Start an AST node, attaching a start offset.
	
	var pp = _index2["default"].prototype;
	
	var Node = (function () {
	  function Node(parser, pos, loc) {
	    _classCallCheck(this, Node);
	
	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new _utilLocation.SourceLocation(loc);
	  }
	
	  Node.prototype.__clone = function __clone() {
	    var node2 = new Node();
	    for (var key in this) node2[key] = this[key];
	    return node2;
	  };
	
	  return Node;
	})();
	
	exports.Node = Node;
	
	pp.startNode = function () {
	  return new Node(this, this.state.start, this.state.startLoc);
	};
	
	pp.startNodeAt = function (pos, loc) {
	  return new Node(this, pos, loc);
	};
	
	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  node.loc.end = loc;
	  this.processComment(node);
	  return node;
	}
	
	// Finish an AST node, adding `type` and `end` properties.
	
	pp.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	};
	
	// Finish node at given position
	
	pp.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _utilLocation = __webpack_require__(441);
	
	var _index = __webpack_require__(435);
	
	var _index2 = _interopRequireDefault(_index);
	
	var pp = _index2["default"].prototype;
	
	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.
	
	pp.raise = function (pos, message) {
	  var loc = _utilLocation.getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  throw err;
	};

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Based on the comment attachment algorithm used in espree and estraverse.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	"use strict";
	
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _index = __webpack_require__(435);
	
	var _index2 = _interopRequireDefault(_index);
	
	function last(stack) {
	  return stack[stack.length - 1];
	}
	
	var pp = _index2["default"].prototype;
	
	pp.addComment = function (comment) {
	  this.state.trailingComments.push(comment);
	  this.state.leadingComments.push(comment);
	};
	
	pp.processComment = function (node) {
	  if (node.type === "Program" && node.body.length > 0) return;
	
	  var stack = this.state.commentStack;
	
	  var lastChild, trailingComments, i;
	
	  if (this.state.trailingComments.length > 0) {
	    // If the first comment in trailingComments comes after the
	    // current node, then we're good - all comments in the array will
	    // come after the node and so it's safe to add them as official
	    // trailingComments.
	    if (this.state.trailingComments[0].start >= node.end) {
	      trailingComments = this.state.trailingComments;
	      this.state.trailingComments = [];
	    } else {
	      // Otherwise, if the first comment doesn't come after the
	      // current node, that means we have a mix of leading and trailing
	      // comments in the array and that leadingComments contains the
	      // same items as trailingComments. Reset trailingComments to
	      // zero items and we'll handle this by evaluating leadingComments
	      // later.
	      this.state.trailingComments.length = 0;
	    }
	  } else {
	    var lastInStack = last(stack);
	    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	      trailingComments = lastInStack.trailingComments;
	      lastInStack.trailingComments = null;
	    }
	  }
	
	  // Eating the stack.
	  while (stack.length > 0 && last(stack).start >= node.start) {
	    lastChild = stack.pop();
	  }
	
	  if (lastChild) {
	    if (lastChild.leadingComments) {
	      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
	        node.leadingComments = lastChild.leadingComments;
	        lastChild.leadingComments = null;
	      } else {
	        // A leading comment for an anonymous class had been stolen by its first MethodDefinition,
	        // so this takes back the leading comment.
	        // See also: https://github.com/eslint/espree/issues/158
	        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	          if (lastChild.leadingComments[i].end <= node.start) {
	            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	            break;
	          }
	        }
	      }
	    }
	  } else if (this.state.leadingComments.length > 0) {
	    if (last(this.state.leadingComments).end <= node.start) {
	      node.leadingComments = this.state.leadingComments;
	      this.state.leadingComments = [];
	    } else {
	      // https://github.com/eslint/espree/issues/2
	      //
	      // In special cases, such as return (without a value) and
	      // debugger, all comments will end up as leadingComments and
	      // will otherwise be eliminated. This step runs when the
	      // commentStack is empty and there are comments left
	      // in leadingComments.
	      //
	      // This loop figures out the stopping point between the actual
	      // leading and trailing comments by finding the location of the
	      // first comment that comes after the given node.
	      for (i = 0; i < this.state.leadingComments.length; i++) {
	        if (this.state.leadingComments[i].end > node.start) {
	          break;
	        }
	      }
	
	      // Split the array based on the location of the first comment
	      // that comes after the node. Keep in mind that this could
	      // result in an empty array, and if so, the array must be
	      // deleted.
	      node.leadingComments = this.state.leadingComments.slice(0, i);
	      if (node.leadingComments.length === 0) {
	        node.leadingComments = null;
	      }
	
	      // Similarly, trailing comments are attached later. The variable
	      // must be reset to null if there are no trailing comments.
	      trailingComments = this.state.leadingComments.slice(i);
	      if (trailingComments.length === 0) {
	        trailingComments = null;
	      }
	    }
	  }
	
	  if (trailingComments) {
	    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
	      node.innerComments = trailingComments;
	    } else {
	      node.trailingComments = trailingComments;
	    }
	  }
	
	  stack.push(node);
	};

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _tokenizerTypes = __webpack_require__(439);
	
	var _parser = __webpack_require__(435);
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var pp = _parser2["default"].prototype;
	
	pp.flowParseTypeInitialiser = function (tok) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(tok || _tokenizerTypes.types.colon);
	  var type = this.flowParseType();
	  this.state.inType = oldInType;
	  return type;
	};
	
	pp.flowParseDeclareClass = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node, true);
	  return this.finishNode(node, "DeclareClass");
	};
	
	pp.flowParseDeclareFunction = function (node) {
	  this.next();
	
	  var id = node.id = this.parseIdent();
	
	  var typeNode = this.startNode();
	  var typeContainer = this.startNode();
	
	  if (this.isRelational("<")) {
	    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    typeNode.typeParameters = null;
	  }
	
	  this.expect(_tokenizerTypes.types.parenL);
	  var tmp = this.flowParseFunctionTypeParams();
	  typeNode.params = tmp.params;
	  typeNode.rest = tmp.rest;
	  this.expect(_tokenizerTypes.types.parenR);
	  typeNode.returnType = this.flowParseTypeInitialiser();
	
	  typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	  id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
	
	  this.finishNode(id, id.type);
	
	  this.semicolon();
	
	  return this.finishNode(node, "DeclareFunction");
	};
	
	pp.flowParseDeclare = function (node) {
	  if (this.match(_tokenizerTypes.types._class)) {
	    return this.flowParseDeclareClass(node);
	  } else if (this.match(_tokenizerTypes.types._function)) {
	    return this.flowParseDeclareFunction(node);
	  } else if (this.match(_tokenizerTypes.types._var)) {
	    return this.flowParseDeclareVariable(node);
	  } else if (this.isContextual("module")) {
	    return this.flowParseDeclareModule(node);
	  } else if (this.isContextual("type")) {
	    return this.flowParseDeclareTypeAlias(node);
	  } else if (this.isContextual("interface")) {
	    return this.flowParseDeclareInterface(node);
	  } else {
	    this.unexpected();
	  }
	};
	
	pp.flowParseDeclareVariable = function (node) {
	  this.next();
	  node.id = this.flowParseTypeAnnotatableIdentifier();
	  this.semicolon();
	  return this.finishNode(node, "DeclareVariable");
	};
	
	pp.flowParseDeclareModule = function (node) {
	  this.next();
	
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.id = this.parseExprAtom();
	  } else {
	    node.id = this.parseIdent();
	  }
	
	  var bodyNode = node.body = this.startNode();
	  var body = bodyNode.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var node2 = this.startNode();
	
	    // todo: declare check
	    this.next();
	
	    body.push(this.flowParseDeclare(node2));
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	
	  this.finishNode(bodyNode, "BlockStatement");
	  return this.finishNode(node, "DeclareModule");
	};
	
	pp.flowParseDeclareTypeAlias = function (node) {
	  this.next();
	  this.flowParseTypeAlias(node);
	  return this.finishNode(node, "DeclareTypeAlias");
	};
	
	pp.flowParseDeclareInterface = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node);
	  return this.finishNode(node, "DeclareInterface");
	};
	
	// Interfaces
	
	pp.flowParseInterfaceish = function (node, allowStatic) {
	  node.id = this.parseIdent();
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }
	
	  node["extends"] = [];
	  node.mixins = [];
	
	  if (this.eat(_tokenizerTypes.types._extends)) {
	    do {
	      node["extends"].push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }
	
	  if (this.isContextual("mixins")) {
	    this.next();
	    do {
	      node.mixins.push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }
	
	  node.body = this.flowParseObjectType(allowStatic);
	};
	
	pp.flowParseInterfaceExtends = function () {
	  var node = this.startNode();
	
	  node.id = this.parseIdent();
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  } else {
	    node.typeParameters = null;
	  }
	
	  return this.finishNode(node, "InterfaceExtends");
	};
	
	pp.flowParseInterface = function (node) {
	  this.flowParseInterfaceish(node, false);
	  return this.finishNode(node, "InterfaceDeclaration");
	};
	
	// Type aliases
	
	pp.flowParseTypeAlias = function (node) {
	  node.id = this.parseIdent();
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }
	
	  node.right = this.flowParseTypeInitialiser(_tokenizerTypes.types.eq);
	  this.semicolon();
	
	  return this.finishNode(node, "TypeAlias");
	};
	
	// Type annotations
	
	pp.flowParseTypeParameterDeclaration = function () {
	  var node = this.startNode();
	  node.params = [];
	
	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseTypeAnnotatableIdentifier());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");
	
	  return this.finishNode(node, "TypeParameterDeclaration");
	};
	
	pp.flowParseTypeParameterInstantiation = function () {
	  var node = this.startNode(),
	      oldInType = this.state.inType;
	  node.params = [];
	
	  this.state.inType = true;
	
	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseType());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");
	
	  this.state.inType = oldInType;
	
	  return this.finishNode(node, "TypeParameterInstantiation");
	};
	
	pp.flowParseObjectPropertyKey = function () {
	  return this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdent(true);
	};
	
	pp.flowParseObjectTypeIndexer = function (node, isStatic) {
	  node["static"] = isStatic;
	
	  this.expect(_tokenizerTypes.types.bracketL);
	  node.id = this.flowParseObjectPropertyKey();
	  node.key = this.flowParseTypeInitialiser();
	  this.expect(_tokenizerTypes.types.bracketR);
	  node.value = this.flowParseTypeInitialiser();
	
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeIndexer");
	};
	
	pp.flowParseObjectTypeMethodish = function (node) {
	  node.params = [];
	  node.rest = null;
	  node.typeParameters = null;
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  }
	
	  this.expect(_tokenizerTypes.types.parenL);
	  while (this.match(_tokenizerTypes.types.name)) {
	    node.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    node.rest = this.flowParseFunctionTypeParam();
	  }
	  this.expect(_tokenizerTypes.types.parenR);
	  node.returnType = this.flowParseTypeInitialiser();
	
	  return this.finishNode(node, "FunctionTypeAnnotation");
	};
	
	pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
	  node["static"] = isStatic;
	  node.key = key;
	  node.optional = false;
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeProperty");
	};
	
	pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
	  var valueNode = this.startNode();
	  node["static"] = isStatic;
	  node.value = this.flowParseObjectTypeMethodish(valueNode);
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeCallProperty");
	};
	
	pp.flowParseObjectType = function (allowStatic) {
	  var nodeStart = this.startNode();
	  var node;
	  var propertyKey;
	  var isStatic;
	
	  nodeStart.callProperties = [];
	  nodeStart.properties = [];
	  nodeStart.indexers = [];
	
	  this.expect(_tokenizerTypes.types.braceL);
	
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var optional = false;
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node = this.startNode();
	    if (allowStatic && this.isContextual("static")) {
	      this.next();
	      isStatic = true;
	    }
	
	    if (this.match(_tokenizerTypes.types.bracketL)) {
	      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
	    } else if (this.match(_tokenizerTypes.types.parenL) || this.isRelational("<")) {
	      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
	    } else {
	      if (isStatic && this.match(_tokenizerTypes.types.colon)) {
	        propertyKey = this.parseIdent();
	      } else {
	        propertyKey = this.flowParseObjectPropertyKey();
	      }
	      if (this.isRelational("<") || this.match(_tokenizerTypes.types.parenL)) {
	        // This is a method property
	        nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
	      } else {
	        if (this.eat(_tokenizerTypes.types.question)) {
	          optional = true;
	        }
	        node.key = propertyKey;
	        node.value = this.flowParseTypeInitialiser();
	        node.optional = optional;
	        node["static"] = isStatic;
	        this.flowObjectTypeSemicolon();
	        nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
	      }
	    }
	  }
	
	  this.expect(_tokenizerTypes.types.braceR);
	
	  return this.finishNode(nodeStart, "ObjectTypeAnnotation");
	};
	
	pp.flowObjectTypeSemicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.eat(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    this.unexpected();
	  }
	};
	
	pp.flowParseGenericType = function (startPos, startLoc, id) {
	  var node = this.startNodeAt(startPos, startLoc);
	
	  node.typeParameters = null;
	  node.id = id;
	
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var node2 = this.startNodeAt(startPos, startLoc);
	    node2.qualification = node.id;
	    node2.id = this.parseIdent();
	    node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
	  }
	
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  }
	
	  return this.finishNode(node, "GenericTypeAnnotation");
	};
	
	pp.flowParseTypeofType = function () {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types._typeof);
	  node.argument = this.flowParsePrimaryType();
	  return this.finishNode(node, "TypeofTypeAnnotation");
	};
	
	pp.flowParseTupleType = function () {
	  var node = this.startNode();
	  node.types = [];
	  this.expect(_tokenizerTypes.types.bracketL);
	  // We allow trailing commas
	  while (this.state.pos < this.input.length && !this.match(_tokenizerTypes.types.bracketR)) {
	    node.types.push(this.flowParseType());
	    if (this.match(_tokenizerTypes.types.bracketR)) break;
	    this.expect(_tokenizerTypes.types.comma);
	  }
	  this.expect(_tokenizerTypes.types.bracketR);
	  return this.finishNode(node, "TupleTypeAnnotation");
	};
	
	pp.flowParseFunctionTypeParam = function () {
	  var optional = false;
	  var node = this.startNode();
	  node.name = this.parseIdent();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    optional = true;
	  }
	  node.optional = optional;
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "FunctionTypeParam");
	};
	
	pp.flowParseFunctionTypeParams = function () {
	  var ret = { params: [], rest: null };
	  while (this.match(_tokenizerTypes.types.name)) {
	    ret.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    ret.rest = this.flowParseFunctionTypeParam();
	  }
	  return ret;
	};
	
	pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
	  switch (id.name) {
	    case "any":
	      return this.finishNode(node, "AnyTypeAnnotation");
	
	    case "void":
	      return this.finishNode(node, "VoidTypeAnnotation");
	
	    case "bool":
	    case "boolean":
	      return this.finishNode(node, "BooleanTypeAnnotation");
	
	    case "mixed":
	      return this.finishNode(node, "MixedTypeAnnotation");
	
	    case "number":
	      return this.finishNode(node, "NumberTypeAnnotation");
	
	    case "string":
	      return this.finishNode(node, "StringTypeAnnotation");
	
	    default:
	      return this.flowParseGenericType(startPos, startLoc, id);
	  }
	};
	
	// The parsing of types roughly parallels the parsing of expressions, and
	// primary types are kind of like primary expressions...they're the
	// primitives with which other types are constructed.
	pp.flowParsePrimaryType = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.startNode();
	  var tmp;
	  var type;
	  var isGroupedType = false;
	
	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdent());
	
	    case _tokenizerTypes.types.braceL:
	      return this.flowParseObjectType();
	
	    case _tokenizerTypes.types.bracketL:
	      return this.flowParseTupleType();
	
	    case _tokenizerTypes.types.relational:
	      if (this.state.value === "<") {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	        this.expect(_tokenizerTypes.types.parenL);
	        tmp = this.flowParseFunctionTypeParams();
	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        this.expect(_tokenizerTypes.types.parenR);
	
	        this.expect(_tokenizerTypes.types.arrow);
	
	        node.returnType = this.flowParseType();
	
	        return this.finishNode(node, "FunctionTypeAnnotation");
	      }
	
	    case _tokenizerTypes.types.parenL:
	      this.next();
	
	      // Check to see if this is actually a grouped type
	      if (!this.match(_tokenizerTypes.types.parenR) && !this.match(_tokenizerTypes.types.ellipsis)) {
	        if (this.match(_tokenizerTypes.types.name)) {
	          var token = this.lookahead().type;
	          isGroupedType = token !== _tokenizerTypes.types.question && token !== _tokenizerTypes.types.colon;
	        } else {
	          isGroupedType = true;
	        }
	      }
	
	      if (isGroupedType) {
	        type = this.flowParseType();
	        this.expect(_tokenizerTypes.types.parenR);
	
	        // If we see a => next then someone was probably confused about
	        // function types, so we can provide a better error message
	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
	        }
	
	        return type;
	      }
	
	      tmp = this.flowParseFunctionTypeParams();
	      node.params = tmp.params;
	      node.rest = tmp.rest;
	
	      this.expect(_tokenizerTypes.types.parenR);
	
	      this.expect(_tokenizerTypes.types.arrow);
	
	      node.returnType = this.flowParseType();
	      node.typeParameters = null;
	
	      return this.finishNode(node, "FunctionTypeAnnotation");
	
	    case _tokenizerTypes.types.string:
	      node.rawValue = node.value = this.state.value;
	      node.raw = this.input.slice(this.state.start, this.state.end);
	      this.next();
	      return this.finishNode(node, "StringLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types.num:
	      node.rawValue = node.value = this.state.value;
	      node.raw = this.input.slice(this.state.start, this.state.end);
	      this.next();
	      return this.finishNode(node, "NumberLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._null:
	      node.value = this.match(_tokenizerTypes.types._null);
	      this.next();
	      return this.finishNode(node, "NullLiteralTypeAnnotation");
	
	    case _tokenizerTypes.types._this:
	      node.value = this.match(_tokenizerTypes.types._this);
	      this.next();
	      return this.finishNode(node, "ThisTypeAnnotation");
	
	    default:
	      if (this.state.type.keyword === "typeof") {
	        return this.flowParseTypeofType();
	      }
	  }
	
	  this.unexpected();
	};
	
	pp.flowParsePostfixType = function () {
	  var node = this.startNode();
	  var type = node.elementType = this.flowParsePrimaryType();
	  if (this.match(_tokenizerTypes.types.bracketL)) {
	    this.expect(_tokenizerTypes.types.bracketL);
	    this.expect(_tokenizerTypes.types.bracketR);
	    return this.finishNode(node, "ArrayTypeAnnotation");
	  } else {
	    return type;
	  }
	};
	
	pp.flowParsePrefixType = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    node.typeAnnotation = this.flowParsePrefixType();
	    return this.finishNode(node, "NullableTypeAnnotation");
	  } else {
	    return this.flowParsePostfixType();
	  }
	};
	
	pp.flowParseIntersectionType = function () {
	  var node = this.startNode();
	  var type = this.flowParsePrefixType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseAND)) {
	    node.types.push(this.flowParsePrefixType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	};
	
	pp.flowParseUnionType = function () {
	  var node = this.startNode();
	  var type = this.flowParseIntersectionType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseOR)) {
	    node.types.push(this.flowParseIntersectionType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	};
	
	pp.flowParseType = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  var type = this.flowParseUnionType();
	  this.state.inType = oldInType;
	  return type;
	};
	
	pp.flowParseTypeAnnotation = function () {
	  var node = this.startNode();
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "TypeAnnotation");
	};
	
	pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {
	  var ident = this.parseIdent();
	  var isOptionalParam = false;
	
	  if (canBeOptionalParam && this.eat(_tokenizerTypes.types.question)) {
	    this.expect(_tokenizerTypes.types.question);
	    isOptionalParam = true;
	  }
	
	  if (requireTypeAnnotation || this.match(_tokenizerTypes.types.colon)) {
	    ident.typeAnnotation = this.flowParseTypeAnnotation();
	    this.finishNode(ident, ident.type);
	  }
	
	  if (isOptionalParam) {
	    ident.optional = true;
	    this.finishNode(ident, ident.type);
	  }
	
	  return ident;
	};
	
	exports["default"] = function (instance) {
	  // function name(): string {}
	  instance.extend("parseFunctionBody", function (inner) {
	    return function (node, allowExpression) {
	      if (this.match(_tokenizerTypes.types.colon) && !allowExpression) {
	        // if allowExpression is true then we're parsing an arrow function and if
	        // there's a return type then it's been handled elsewhere
	        node.returnType = this.flowParseTypeAnnotation();
	      }
	
	      return inner.call(this, node, allowExpression);
	    };
	  });
	
	  instance.extend("parseStatement", function (inner) {
	    return function (declaration, topLevel) {
	      // strict mode handling of `interface` since it's a reserved word
	      if (this.strict && this.match(_tokenizerTypes.types.name) && this.state.value === "interface") {
	        var node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      } else {
	        return inner.call(this, declaration, topLevel);
	      }
	    };
	  });
	
	  instance.extend("parseExpressionStatement", function (inner) {
	    return function (node, expr) {
	      if (expr.type === "Identifier") {
	        if (expr.name === "declare") {
	          if (this.match(_tokenizerTypes.types._class) || this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._var)) {
	            return this.flowParseDeclare(node);
	          }
	        } else if (this.match(_tokenizerTypes.types.name)) {
	          if (expr.name === "interface") {
	            return this.flowParseInterface(node);
	          } else if (expr.name === "type") {
	            return this.flowParseTypeAlias(node);
	          }
	        }
	      }
	
	      return inner.call(this, node, expr);
	    };
	  });
	
	  instance.extend("shouldParseExportDeclaration", function (inner) {
	    return function () {
	      return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
	    };
	  });
	
	  instance.extend("parseParenItem", function () {
	    return function (node, startLoc, startPos, forceArrow) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        var typeCastNode = this.startNodeAt(startLoc, startPos);
	        typeCastNode.expression = node;
	        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
	
	        if (forceArrow && !this.match(_tokenizerTypes.types.arrow)) {
	          this.unexpected();
	        }
	
	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          // ((lol): number => {});
	          var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), [node]);
	          func.returnType = typeCastNode.typeAnnotation;
	          return func;
	        } else {
	          return this.finishNode(typeCastNode, "TypeCastExpression");
	        }
	      } else {
	        return node;
	      }
	    };
	  });
	
	  instance.extend("parseExport", function (inner) {
	    return function (node) {
	      node = inner.call(this, node);
	      if (node.type === "ExportNamedDeclaration") {
	        node.exportKind = node.exportKind || "value";
	      }
	      return node;
	    };
	  });
	
	  instance.extend("parseExportDeclaration", function (inner) {
	    return function (node) {
	      if (this.isContextual("type")) {
	        node.exportKind = "type";
	
	        var declarationNode = this.startNode();
	        this.next();
	
	        if (this.match(_tokenizerTypes.types.braceL)) {
	          // export type { foo, bar };
	          node.specifiers = this.parseExportSpecifiers();
	          this.parseExportFrom(node);
	          return null;
	        } else {
	          // export type Foo = Bar;
	          return this.flowParseTypeAlias(declarationNode);
	        }
	      } else if (this.isContextual("interface")) {
	        node.exportKind = "type";
	        var _declarationNode = this.startNode();
	        this.next();
	        return this.flowParseInterface(_declarationNode);
	      } else {
	        return inner.call(this, node);
	      }
	    };
	  });
	
	  instance.extend("parseClassId", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	    };
	  });
	
	  // don't consider `void` to be a keyword as then it'll use the void token type
	  // and set startExpr
	  instance.extend("isKeyword", function (inner) {
	    return function (name) {
	      if (this.state.inType && name === "void") {
	        return false;
	      } else {
	        return inner.call(this, name);
	      }
	    };
	  });
	
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inType && (code === 62 || code === 60)) {
	        return this.finishOp(_tokenizerTypes.types.relational, 1);
	      } else {
	        return inner.call(this, code);
	      }
	    };
	  });
	
	  instance.extend("jsx_readToken", function (inner) {
	    return function () {
	      if (!this.state.inType) return inner.call(this);
	    };
	  });
	
	  function typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    return node.expression;
	  }
	
	  instance.extend("toAssignableList", function (inner) {
	    return function (exprList, isBinding) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr.type === "TypeCastExpression") {
	          exprList[i] = typeCastToParameter(expr);
	        }
	      }
	      return inner.call(this, exprList, isBinding);
	    };
	  });
	
	  instance.extend("toReferencedList", function () {
	    return function (exprList) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
	          this.raise(expr.start, "Unexpected type cast");
	        }
	      }
	
	      return exprList;
	    };
	  });
	
	  instance.extend("parseExprListItem", function (inner) {
	    return function (allowEmpty, refShorthandDefaultPos) {
	      var container = this.startNode();
	      var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        container._exprListItem = true;
	        container.expression = node;
	        container.typeAnnotation = this.flowParseTypeAnnotation();
	        return this.finishNode(container, "TypeCastExpression");
	      } else {
	        return node;
	      }
	    };
	  });
	
	  instance.extend("parseClassProperty", function (inner) {
	    return function (node) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      return inner.call(this, node);
	    };
	  });
	
	  instance.extend("isClassProperty", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });
	
	  instance.extend("parseClassMethod", function () {
	    return function (classBody, method, isGenerator, isAsync) {
	      var typeParameters;
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      method.value = this.parseMethod(isGenerator, isAsync);
	      method.value.typeParameters = typeParameters;
	      classBody.body.push(this.finishNode(method, "MethodDefinition"));
	    };
	  });
	
	  instance.extend("parseClassSuper", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (node.superClass && this.isRelational("<")) {
	        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	      }
	      if (this.isContextual("implements")) {
	        this.next();
	        var implemented = node["implements"] = [];
	        do {
	          var _node = this.startNode();
	          _node.id = this.parseIdent();
	          if (this.isRelational("<")) {
	            _node.typeParameters = this.flowParseTypeParameterInstantiation();
	          } else {
	            _node.typeParameters = null;
	          }
	          implemented.push(this.finishNode(_node, "ClassImplements"));
	        } while (this.eat(_tokenizerTypes.types.comma));
	      }
	    };
	  });
	
	  instance.extend("parseObjPropValue", function (inner) {
	    return function (prop) {
	      var typeParameters;
	
	      // method shorthand
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        if (!this.match(_tokenizerTypes.types.parenL)) this.unexpected();
	      }
	
	      inner.apply(this, arguments);
	
	      // add typeParameters if we found them
	      if (typeParameters) {
	        prop.value.typeParameters = typeParameters;
	      }
	    };
	  });
	
	  instance.extend("parseAssignableListItemTypes", function () {
	    return function (param) {
	      if (this.eat(_tokenizerTypes.types.question)) {
	        param.optional = true;
	      }
	      if (this.match(_tokenizerTypes.types.colon)) {
	        param.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      this.finishNode(param, param.type);
	      return param;
	    };
	  });
	
	  instance.extend("parseImportSpecifiers", function (inner) {
	    return function (node) {
	      node.importKind = "value";
	
	      var kind = this.match(_tokenizerTypes.types._typeof) ? "typeof" : this.isContextual("type") ? "type" : null;
	      if (kind) {
	        var lh = this.lookahead();
	        if (lh.type === _tokenizerTypes.types.name && lh.value !== "from" || lh.type === _tokenizerTypes.types.braceL || lh.type === _tokenizerTypes.types.star) {
	          this.next();
	          node.importKind = kind;
	        }
	      }
	
	      inner.call(this, node);
	    };
	  });
	
	  // function foo<T>() {}
	  instance.extend("parseFunctionParams", function (inner) {
	    return function (node) {
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      inner.call(this, node);
	    };
	  });
	
	  // var foo: string = bar
	  instance.extend("parseVarHead", function (inner) {
	    return function (decl) {
	      inner.call(this, decl);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	        this.finishNode(decl.id, decl.id.type);
	      }
	    };
	  });
	
	  // var foo = (async (): number => {});
	  instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
	    return function (node, call) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.returnType = this.flowParseTypeAnnotation();
	      }
	
	      return inner.call(this, node, call);
	    };
	  });
	
	  instance.extend("parseParenAndDistinguishExpression", function (inner) {
	    return function (startPos, startLoc, canBeArrow, isAsync) {
	      startPos = startPos || this.state.start;
	      startLoc = startLoc || this.state.startLoc;
	
	      if (this.lookahead().type === _tokenizerTypes.types.parenR) {
	        // var foo = (): number => {};
	        this.expect(_tokenizerTypes.types.parenL);
	        this.expect(_tokenizerTypes.types.parenR);
	
	        var node = this.startNodeAt(startPos, startLoc);
	        if (this.match(_tokenizerTypes.types.colon)) node.returnType = this.flowParseTypeAnnotation();
	        this.expect(_tokenizerTypes.types.arrow);
	        return this.parseArrowExpression(node, [], isAsync);
	      } else {
	        // var foo = (foo): number => {};
	        var node = inner.call(this, startPos, startLoc, canBeArrow, isAsync);
	
	        if (this.match(_tokenizerTypes.types.colon)) {
	          var state = this.state.clone();
	          try {
	            return this.parseParenItem(node, startPos, startLoc, true);
	          } catch (err) {
	            if (err instanceof SyntaxError) {
	              this.state = state;
	              return node;
	            } else {
	              throw err;
	            }
	          }
	        } else {
	          return node;
	        }
	      }
	    };
	  });
	};
	
	module.exports = exports["default"];

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	// istanbul ignore next
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	
	var _xhtml = __webpack_require__(453);
	
	var _xhtml2 = _interopRequireDefault(_xhtml);
	
	var _tokenizerTypes = __webpack_require__(439);
	
	var _tokenizerContext = __webpack_require__(440);
	
	var _parser = __webpack_require__(435);
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var _utilIdentifier = __webpack_require__(436);
	
	var _utilWhitespace = __webpack_require__(442);
	
	var HEX_NUMBER = /^[\da-fA-F]+$/;
	var DECIMAL_NUMBER = /^\d+$/;
	
	_tokenizerContext.types.j_oTag = new _tokenizerContext.TokContext("<tag", false);
	_tokenizerContext.types.j_cTag = new _tokenizerContext.TokContext("</tag", false);
	_tokenizerContext.types.j_expr = new _tokenizerContext.TokContext("<tag>...</tag>", true, true);
	
	_tokenizerTypes.types.jsxName = new _tokenizerTypes.TokenType("jsxName");
	_tokenizerTypes.types.jsxText = new _tokenizerTypes.TokenType("jsxText", { beforeExpr: true });
	_tokenizerTypes.types.jsxTagStart = new _tokenizerTypes.TokenType("jsxTagStart");
	_tokenizerTypes.types.jsxTagEnd = new _tokenizerTypes.TokenType("jsxTagEnd");
	
	_tokenizerTypes.types.jsxTagStart.updateContext = function () {
	  this.state.context.push(_tokenizerContext.types.j_expr); // treat as beginning of JSX expression
	  this.state.context.push(_tokenizerContext.types.j_oTag); // start opening tag context
	  this.state.exprAllowed = false;
	};
	
	_tokenizerTypes.types.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.state.context.pop();
	  if (out === _tokenizerContext.types.j_oTag && prevType === _tokenizerTypes.types.slash || out === _tokenizerContext.types.j_cTag) {
	    this.state.context.pop();
	    this.state.exprAllowed = this.curContext() === _tokenizerContext.types.j_expr;
	  } else {
	    this.state.exprAllowed = true;
	  }
	};
	
	var pp = _parser2["default"].prototype;
	
	// Reads inline JSX contents token.
	
	pp.jsxReadToken = function () {
	  var out = "",
	      chunkStart = this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated JSX contents");
	    }
	
	    var ch = this.input.charCodeAt(this.state.pos);
	
	    switch (ch) {
	      case 60: // "<"
	      case 123:
	        // "{"
	        if (this.state.pos === this.state.start) {
	          if (ch === 60 && this.state.exprAllowed) {
	            ++this.state.pos;
	            return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	          }
	          return this.getTokenFromCode(ch);
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_tokenizerTypes.types.jsxText, out);
	
	      case 38:
	        // "&"
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	        break;
	
	      default:
	        if (_utilWhitespace.isNewLine(ch)) {
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadNewLine(true);
	          chunkStart = this.state.pos;
	        } else {
	          ++this.state.pos;
	        }
	    }
	  }
	};
	
	pp.jsxReadNewLine = function (normalizeCRLF) {
	  var ch = this.input.charCodeAt(this.state.pos);
	  var out;
	  ++this.state.pos;
	  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	    ++this.state.pos;
	    out = normalizeCRLF ? "\n" : "\r\n";
	  } else {
	    out = String.fromCharCode(ch);
	  }
	  ++this.state.curLine;
	  this.state.lineStart = this.state.pos;
	
	  return out;
	};
	
	pp.jsxReadString = function (quote) {
	  var out = "",
	      chunkStart = ++this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated string constant");
	    }
	
	    var ch = this.input.charCodeAt(this.state.pos);
	    if (ch === quote) break;
	    if (ch === 38) {
	      // "&"
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadEntity();
	      chunkStart = this.state.pos;
	    } else if (_utilWhitespace.isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadNewLine(false);
	      chunkStart = this.state.pos;
	    } else {
	      ++this.state.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.state.pos++);
	  return this.finishToken(_tokenizerTypes.types.string, out);
	};
	
	pp.jsxReadEntity = function () {
	  var str = "",
	      count = 0,
	      entity;
	  var ch = this.input[this.state.pos];
	
	  var startPos = ++this.state.pos;
	  while (this.state.pos < this.input.length && count++ < 10) {
	    ch = this.input[this.state.pos++];
	    if (ch === ";") {
	      if (str[0] === "#") {
	        if (str[1] === "x") {
	          str = str.substr(2);
	          if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
	        } else {
	          str = str.substr(1);
	          if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
	        }
	      } else {
	        entity = _xhtml2["default"][str];
	      }
	      break;
	    }
	    str += ch;
	  }
	  if (!entity) {
	    this.state.pos = startPos;
	    return "&";
	  }
	  return entity;
	};
	
	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can"t contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.
	
	pp.jsxReadWord = function () {
	  var ch,
	      start = this.state.pos;
	  do {
	    ch = this.input.charCodeAt(++this.state.pos);
	  } while (_utilIdentifier.isIdentifierChar(ch) || ch === 45); // "-"
	  return this.finishToken(_tokenizerTypes.types.jsxName, this.input.slice(start, this.state.pos));
	};
	
	// Transforms JSX element name to string.
	
	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }
	
	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }
	
	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	}
	
	// Parse next token as JSX identifier
	
	pp.jsxParseIdentifier = function () {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.jsxName)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "JSXIdentifier");
	};
	
	// Parse namespaced identifier.
	
	pp.jsxParseNamespacedName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var name = this.jsxParseIdentifier();
	  if (!this.eat(_tokenizerTypes.types.colon)) return name;
	
	  var node = this.startNodeAt(startPos, startLoc);
	  node.namespace = name;
	  node.name = this.jsxParseIdentifier();
	  return this.finishNode(node, "JSXNamespacedName");
	};
	
	// Parses element name in any form - namespaced, member
	// or single identifier.
	
	pp.jsxParseElementName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.jsxParseNamespacedName();
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var newNode = this.startNodeAt(startPos, startLoc);
	    newNode.object = node;
	    newNode.property = this.jsxParseIdentifier();
	    node = this.finishNode(newNode, "JSXMemberExpression");
	  }
	  return node;
	};
	
	// Parses any type of JSX attribute value.
	
	pp.jsxParseAttributeValue = function () {
	  var node;
	  switch (this.state.type) {
	    case _tokenizerTypes.types.braceL:
	      node = this.jsxParseExpressionContainer();
	      if (node.expression.type === "JSXEmptyExpression") {
	        this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
	      } else {
	        return node;
	      }
	
	    case _tokenizerTypes.types.jsxTagStart:
	    case _tokenizerTypes.types.string:
	      node = this.parseExprAtom();
	      node.rawValue = null;
	      return node;
	
	    default:
	      this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
	  }
	};
	
	// JSXEmptyExpression is unique type since it doesn"t actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).
	
	pp.jsxParseEmptyExpression = function () {
	  var tmp = this.state.start;
	  this.state.start = this.state.lastTokEnd;
	  this.state.lastTokEnd = tmp;
	
	  tmp = this.state.startLoc;
	  this.state.startLoc = this.state.lastTokEndLoc;
	  this.state.lastTokEndLoc = tmp;
	
	  return this.finishNode(this.startNode(), "JSXEmptyExpression");
	};
	
	// Parses JSX expression enclosed into curly brackets.
	
	pp.jsxParseExpressionContainer = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.braceR)) {
	    node.expression = this.jsxParseEmptyExpression();
	  } else {
	    node.expression = this.parseExpression();
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	  return this.finishNode(node, "JSXExpressionContainer");
	};
	
	// Parses following JSX attribute name-value pair.
	
	pp.jsxParseAttribute = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.braceL)) {
	    this.expect(_tokenizerTypes.types.ellipsis);
	    node.argument = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.braceR);
	    return this.finishNode(node, "JSXSpreadAttribute");
	  }
	  node.name = this.jsxParseNamespacedName();
	  node.value = this.eat(_tokenizerTypes.types.eq) ? this.jsxParseAttributeValue() : null;
	  return this.finishNode(node, "JSXAttribute");
	};
	
	// Parses JSX opening tag starting after "<".
	
	pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.attributes = [];
	  node.name = this.jsxParseElementName();
	  while (!this.match(_tokenizerTypes.types.slash) && !this.match(_tokenizerTypes.types.jsxTagEnd)) {
	    node.attributes.push(this.jsxParseAttribute());
	  }
	  node.selfClosing = this.eat(_tokenizerTypes.types.slash);
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXOpeningElement");
	};
	
	// Parses JSX closing tag starting after "</".
	
	pp.jsxParseClosingElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.name = this.jsxParseElementName();
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXClosingElement");
	};
	
	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.
	
	pp.jsxParseElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  var children = [];
	  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	  var closingElement = null;
	
	  if (!openingElement.selfClosing) {
	    contents: for (;;) {
	      switch (this.state.type) {
	        case _tokenizerTypes.types.jsxTagStart:
	          startPos = this.state.start;startLoc = this.state.startLoc;
	          this.next();
	          if (this.eat(_tokenizerTypes.types.slash)) {
	            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	            break contents;
	          }
	          children.push(this.jsxParseElementAt(startPos, startLoc));
	          break;
	
	        case _tokenizerTypes.types.jsxText:
	          children.push(this.parseExprAtom());
	          break;
	
	        case _tokenizerTypes.types.braceL:
	          children.push(this.jsxParseExpressionContainer());
	          break;
	
	        default:
	          this.unexpected();
	      }
	    }
	
	    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	      this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
	    }
	  }
	
	  node.openingElement = openingElement;
	  node.closingElement = closingElement;
	  node.children = children;
	  if (this.match(_tokenizerTypes.types.relational) && this.state.value === "<") {
	    this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	  }
	  return this.finishNode(node, "JSXElement");
	};
	
	// Parses entire JSX element from current position.
	
	pp.jsxParseElement = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  this.next();
	  return this.jsxParseElementAt(startPos, startLoc);
	};
	
	exports["default"] = function (instance) {
	  instance.extend("parseExprAtom", function (inner) {
	    return function (refShortHandDefaultPos) {
	      if (this.match(_tokenizerTypes.types.jsxText)) {
	        var node = this.parseLiteral(this.state.value);
	        // https://github.com/babel/babel/issues/2078
	        node.rawValue = null;
	        return node;
	      } else if (this.match(_tokenizerTypes.types.jsxTagStart)) {
	        return this.jsxParseElement();
	      } else {
	        return inner.call(this, refShortHandDefaultPos);
	      }
	    };
	  });
	
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      var context = this.curContext();
	
	      if (context === _tokenizerContext.types.j_expr) {
	        return this.jsxReadToken();
	      }
	
	      if (context === _tokenizerContext.types.j_oTag || context === _tokenizerContext.types.j_cTag) {
	        if (_utilIdentifier.isIdentifierStart(code)) {
	          return this.jsxReadWord();
	        }
	
	        if (code === 62) {
	          ++this.state.pos;
	          return this.finishToken(_tokenizerTypes.types.jsxTagEnd);
	        }
	
	        if ((code === 34 || code === 39) && context === _tokenizerContext.types.j_oTag) {
	          return this.jsxReadString(code);
	        }
	      }
	
	      if (code === 60 && this.state.exprAllowed) {
	        ++this.state.pos;
	        return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	      }
	
	      return inner.call(this, code);
	    };
	  });
	
	  instance.extend("updateContext", function (inner) {
	    return function (prevType) {
	      if (this.match(_tokenizerTypes.types.braceL)) {
	        var curContext = this.curContext();
	        if (curContext === _tokenizerContext.types.j_oTag) {
	          this.state.context.push(_tokenizerContext.types.b_expr);
	        } else if (curContext === _tokenizerContext.types.j_expr) {
	          this.state.context.push(_tokenizerContext.types.b_tmpl);
	        } else {
	          inner.call(this, prevType);
	        }
	        this.state.exprAllowed = true;
	      } else if (this.match(_tokenizerTypes.types.slash) && prevType === _tokenizerTypes.types.jsxTagStart) {
	        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
	        this.state.context.push(_tokenizerContext.types.j_cTag); // reconsider as closing tag context
	        this.state.exprAllowed = false;
	      } else {
	        return inner.call(this, prevType);
	      }
	    };
	  });
	};
	
	module.exports = exports["default"];

/***/ },
/* 453 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = {
	  quot: "\"",
	  amp: "&",
	  apos: "'",
	  lt: "<",
	  gt: ">",
	  nbsp: " ",
	  iexcl: "¡",
	  cent: "¢",
	  pound: "£",
	  curren: "¤",
	  yen: "¥",
	  brvbar: "¦",
	  sect: "§",
	  uml: "¨",
	  copy: "©",
	  ordf: "ª",
	  laquo: "«",
	  not: "¬",
	  shy: "­",
	  reg: "®",
	  macr: "¯",
	  deg: "°",
	  plusmn: "±",
	  sup2: "²",
	  sup3: "³",
	  acute: "´",
	  micro: "µ",
	  para: "¶",
	  middot: "·",
	  cedil: "¸",
	  sup1: "¹",
	  ordm: "º",
	  raquo: "»",
	  frac14: "¼",
	  frac12: "½",
	  frac34: "¾",
	  iquest: "¿",
	  Agrave: "À",
	  Aacute: "Á",
	  Acirc: "Â",
	  Atilde: "Ã",
	  Auml: "Ä",
	  Aring: "Å",
	  AElig: "Æ",
	  Ccedil: "Ç",
	  Egrave: "È",
	  Eacute: "É",
	  Ecirc: "Ê",
	  Euml: "Ë",
	  Igrave: "Ì",
	  Iacute: "Í",
	  Icirc: "Î",
	  Iuml: "Ï",
	  ETH: "Ð",
	  Ntilde: "Ñ",
	  Ograve: "Ò",
	  Oacute: "Ó",
	  Ocirc: "Ô",
	  Otilde: "Õ",
	  Ouml: "Ö",
	  times: "×",
	  Oslash: "Ø",
	  Ugrave: "Ù",
	  Uacute: "Ú",
	  Ucirc: "Û",
	  Uuml: "Ü",
	  Yacute: "Ý",
	  THORN: "Þ",
	  szlig: "ß",
	  agrave: "à",
	  aacute: "á",
	  acirc: "â",
	  atilde: "ã",
	  auml: "ä",
	  aring: "å",
	  aelig: "æ",
	  ccedil: "ç",
	  egrave: "è",
	  eacute: "é",
	  ecirc: "ê",
	  euml: "ë",
	  igrave: "ì",
	  iacute: "í",
	  icirc: "î",
	  iuml: "ï",
	  eth: "ð",
	  ntilde: "ñ",
	  ograve: "ò",
	  oacute: "ó",
	  ocirc: "ô",
	  otilde: "õ",
	  ouml: "ö",
	  divide: "÷",
	  oslash: "ø",
	  ugrave: "ù",
	  uacute: "ú",
	  ucirc: "û",
	  uuml: "ü",
	  yacute: "ý",
	  thorn: "þ",
	  yuml: "ÿ",
	  OElig: "Œ",
	  oelig: "œ",
	  Scaron: "Š",
	  scaron: "š",
	  Yuml: "Ÿ",
	  fnof: "ƒ",
	  circ: "ˆ",
	  tilde: "˜",
	  Alpha: "Α",
	  Beta: "Β",
	  Gamma: "Γ",
	  Delta: "Δ",
	  Epsilon: "Ε",
	  Zeta: "Ζ",
	  Eta: "Η",
	  Theta: "Θ",
	  Iota: "Ι",
	  Kappa: "Κ",
	  Lambda: "Λ",
	  Mu: "Μ",
	  Nu: "Ν",
	  Xi: "Ξ",
	  Omicron: "Ο",
	  Pi: "Π",
	  Rho: "Ρ",
	  Sigma: "Σ",
	  Tau: "Τ",
	  Upsilon: "Υ",
	  Phi: "Φ",
	  Chi: "Χ",
	  Psi: "Ψ",
	  Omega: "Ω",
	  alpha: "α",
	  beta: "β",
	  gamma: "γ",
	  delta: "δ",
	  epsilon: "ε",
	  zeta: "ζ",
	  eta: "η",
	  theta: "θ",
	  iota: "ι",
	  kappa: "κ",
	  lambda: "λ",
	  mu: "μ",
	  nu: "ν",
	  xi: "ξ",
	  omicron: "ο",
	  pi: "π",
	  rho: "ρ",
	  sigmaf: "ς",
	  sigma: "σ",
	  tau: "τ",
	  upsilon: "υ",
	  phi: "φ",
	  chi: "χ",
	  psi: "ψ",
	  omega: "ω",
	  thetasym: "ϑ",
	  upsih: "ϒ",
	  piv: "ϖ",
	  ensp: " ",
	  emsp: " ",
	  thinsp: " ",
	  zwnj: "‌",
	  zwj: "‍",
	  lrm: "‎",
	  rlm: "‏",
	  ndash: "–",
	  mdash: "—",
	  lsquo: "‘",
	  rsquo: "’",
	  sbquo: "‚",
	  ldquo: "“",
	  rdquo: "”",
	  bdquo: "„",
	  dagger: "†",
	  Dagger: "‡",
	  bull: "•",
	  hellip: "…",
	  permil: "‰",
	  prime: "′",
	  Prime: "″",
	  lsaquo: "‹",
	  rsaquo: "›",
	  oline: "‾",
	  frasl: "⁄",
	  euro: "€",
	  image: "ℑ",
	  weierp: "℘",
	  real: "ℜ",
	  trade: "™",
	  alefsym: "ℵ",
	  larr: "←",
	  uarr: "↑",
	  rarr: "→",
	  darr: "↓",
	  harr: "↔",
	  crarr: "↵",
	  lArr: "⇐",
	  uArr: "⇑",
	  rArr: "⇒",
	  dArr: "⇓",
	  hArr: "⇔",
	  forall: "∀",
	  part: "∂",
	  exist: "∃",
	  empty: "∅",
	  nabla: "∇",
	  isin: "∈",
	  notin: "∉",
	  ni: "∋",
	  prod: "∏",
	  sum: "∑",
	  minus: "−",
	  lowast: "∗",
	  radic: "√",
	  prop: "∝",
	  infin: "∞",
	  ang: "∠",
	  and: "∧",
	  or: "∨",
	  cap: "∩",
	  cup: "∪",
	  "int": "∫",
	  there4: "∴",
	  sim: "∼",
	  cong: "≅",
	  asymp: "≈",
	  ne: "≠",
	  equiv: "≡",
	  le: "≤",
	  ge: "≥",
	  sub: "⊂",
	  sup: "⊃",
	  nsub: "⊄",
	  sube: "⊆",
	  supe: "⊇",
	  oplus: "⊕",
	  otimes: "⊗",
	  perp: "⊥",
	  sdot: "⋅",
	  lceil: "⌈",
	  rceil: "⌉",
	  lfloor: "⌊",
	  rfloor: "⌋",
	  lang: "〈",
	  rang: "〉",
	  loz: "◊",
	  spades: "♠",
	  clubs: "♣",
	  hearts: "♥",
	  diams: "♦"
	};
	module.exports = exports["default"];

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.findAllExportedComponentDefinitions = exports.findExportedComponentDefinition = exports.findAllComponentDefinitions = undefined;
	
	var _findAllComponentDefinitions = __webpack_require__(455);
	
	var _findAllComponentDefinitions2 = _interopRequireDefault(_findAllComponentDefinitions);
	
	var _findExportedComponentDefinition = __webpack_require__(457);
	
	var _findExportedComponentDefinition2 = _interopRequireDefault(_findExportedComponentDefinition);
	
	var _findAllExportedComponentDefinitions = __webpack_require__(461);
	
	var _findAllExportedComponentDefinitions2 = _interopRequireDefault(_findAllExportedComponentDefinitions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.findAllComponentDefinitions = _findAllComponentDefinitions2.default;
	exports.findExportedComponentDefinition = _findExportedComponentDefinition2.default;
	exports.findAllExportedComponentDefinitions = _findAllExportedComponentDefinitions2.default; /*
	                                                                                              *  Copyright (c) 2015, Facebook, Inc.
	                                                                                              *  All rights reserved.
	                                                                                              *
	                                                                                              *  This source code is licensed under the BSD-style license found in the
	                                                                                              *  LICENSE file in the root directory of this source tree. An additional grant
	                                                                                              *  of patent rights can be found in the PATENTS file in the same directory.
	                                                                                              *
	                                                                                              * 
	                                                                                              *
	                                                                                              */

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = findAllReactCreateClassCalls;
	
	var _isReactComponentClass = __webpack_require__(364);
	
	var _isReactComponentClass2 = _interopRequireDefault(_isReactComponentClass);
	
	var _isReactCreateClassCall = __webpack_require__(382);
	
	var _isReactCreateClassCall2 = _interopRequireDefault(_isReactCreateClassCall);
	
	var _isStatelessComponent = __webpack_require__(381);
	
	var _isStatelessComponent2 = _interopRequireDefault(_isStatelessComponent);
	
	var _normalizeClassDefinition = __webpack_require__(456);
	
	var _normalizeClassDefinition2 = _interopRequireDefault(_normalizeClassDefinition);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Given an AST, this function tries to find all object expressions that are
	 * passed to `React.createClass` calls, by resolving all references properly.
	 */
	function findAllReactCreateClassCalls(ast, recast) {
	  var types = recast.types.namedTypes;
	  var definitions = [];
	
	  function classVisitor(path) {
	    if ((0, _isReactComponentClass2.default)(path)) {
	      (0, _normalizeClassDefinition2.default)(path);
	      definitions.push(path);
	    }
	    return false;
	  }
	
	  function statelessVisitor(path) {
	    if ((0, _isStatelessComponent2.default)(path)) {
	      definitions.push(path);
	    }
	    return false;
	  }
	
	  recast.visit(ast, {
	    visitFunctionDeclaration: statelessVisitor,
	    visitFunctionExpression: statelessVisitor,
	    visitArrowFunctionExpression: statelessVisitor,
	    visitClassExpression: classVisitor,
	    visitClassDeclaration: classVisitor,
	    visitCallExpression: function visitCallExpression(path) {
	      if (!(0, _isReactCreateClassCall2.default)(path)) {
	        return false;
	      }
	      var resolvedPath = (0, _resolveToValue2.default)(path.get('arguments', 0));
	      if (types.ObjectExpression.check(resolvedPath.node)) {
	        definitions.push(resolvedPath);
	      }
	      return false;
	    }
	  });
	
	  return definitions;
	} /*
	   * Copyright (c) 2015, Facebook, Inc.
	   * All rights reserved.
	   *
	   * This source code is licensed under the BSD-style license found in the
	   * LICENSE file in the root directory of this source tree. An additional grant
	   * of patent rights can be found in the PATENTS file in the same directory.
	   *
	   * 
	   *
	   */

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _slicedToArray2 = __webpack_require__(407);
	
	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);
	
	exports.default = normalizeClassDefinition;
	
	var _getMemberExpressionRoot = __webpack_require__(348);
	
	var _getMemberExpressionRoot2 = _interopRequireDefault(_getMemberExpressionRoot);
	
	var _getMembers3 = __webpack_require__(396);
	
	var _getMembers4 = _interopRequireDefault(_getMembers3);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _recast$types = _recast2.default.types; /*
	                                             * Copyright (c) 2015, Facebook, Inc.
	                                             * All rights reserved.
	                                             *
	                                             * This source code is licensed under the BSD-style license found in the
	                                             * LICENSE file in the root directory of this source tree. An additional grant
	                                             * of patent rights can be found in the PATENTS file in the same directory.
	                                             *
	                                             * 
	                                             */
	
	var types = _recast$types.namedTypes;
	var builders = _recast$types.builders;
	
	var ignore = function ignore() {
	  return false;
	};
	
	/**
	 * Given a class definition (i.e. `class` declaration or expression), this
	 * function "normalizes" the definition, by looking for assignments of static
	 * properties and converting them to ClassProperties.
	 *
	 * Example:
	 *
	 * class MyComponent extends React.Component {
	 *   // ...
	 * }
	 * MyComponent.propTypes = { ... };
	 *
	 * is converted to
	 *
	 * class MyComponent extends React.Component {
	 *   // ...
	 *   static propTypes = { ... };
	 * }
	 */
	function normalizeClassDefinition(classDefinition) {
	  var variableName;
	  if (types.ClassDeclaration.check(classDefinition.node)) {
	    variableName = classDefinition.node.id.name;
	  } else if (types.ClassExpression.check(classDefinition.node)) {
	    var parentPath = classDefinition.parentPath;
	
	    while (parentPath.node !== classDefinition.scope.node && !types.BlockStatement.check(parentPath.node)) {
	      if (types.VariableDeclarator.check(parentPath.node) && types.Identifier.check(parentPath.node.id)) {
	        variableName = parentPath.node.id.name;
	        break;
	      } else if (types.AssignmentExpression.check(parentPath.node) && types.Identifier.check(parentPath.node.left)) {
	        variableName = parentPath.node.left.name;
	        break;
	      }
	      parentPath = parentPath.parentPath;
	    }
	  }
	
	  if (!variableName) {
	    return;
	  }
	
	  var scopeRoot = classDefinition.scope;
	  _recast2.default.visit(scopeRoot.node, {
	    visitFunction: ignore,
	    visitClassDeclaration: ignore,
	    visitClassExpression: ignore,
	    visitForInStatement: ignore,
	    visitForStatement: ignore,
	    visitAssignmentExpression: function visitAssignmentExpression(path) {
	      if (types.MemberExpression.check(path.node.left)) {
	        var first = (0, _getMemberExpressionRoot2.default)(path.get('left'));
	        if (types.Identifier.check(first.node) && first.node.name === variableName) {
	          var _getMembers = (0, _getMembers4.default)(path.get('left'));
	
	          var _getMembers2 = (0, _slicedToArray3.default)(_getMembers, 1);
	
	          var member = _getMembers2[0];
	
	          if (member && !member.path.node.computed) {
	            var classProperty = builders.classProperty(member.path.node, path.node.right, null, true);
	            classDefinition.get('body', 'body').value.push(classProperty);
	            return false;
	          }
	        }
	        this.traverse(path);
	      } else {
	        return false;
	      }
	    }
	  });
	}

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = findExportedComponentDefinition;
	
	var _isExportsOrModuleAssignment = __webpack_require__(458);
	
	var _isExportsOrModuleAssignment2 = _interopRequireDefault(_isExportsOrModuleAssignment);
	
	var _isReactComponentClass = __webpack_require__(364);
	
	var _isReactComponentClass2 = _interopRequireDefault(_isReactComponentClass);
	
	var _isReactCreateClassCall = __webpack_require__(382);
	
	var _isReactCreateClassCall2 = _interopRequireDefault(_isReactCreateClassCall);
	
	var _isStatelessComponent = __webpack_require__(381);
	
	var _isStatelessComponent2 = _interopRequireDefault(_isStatelessComponent);
	
	var _normalizeClassDefinition = __webpack_require__(456);
	
	var _normalizeClassDefinition2 = _interopRequireDefault(_normalizeClassDefinition);
	
	var _resolveExportDeclaration = __webpack_require__(459);
	
	var _resolveExportDeclaration2 = _interopRequireDefault(_resolveExportDeclaration);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	var _resolveHOC = __webpack_require__(460);
	
	var _resolveHOC2 = _interopRequireDefault(_resolveHOC);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var ERROR_MULTIPLE_DEFINITIONS = 'Multiple exported component definitions found.';
	
	function ignore() {
	  return false;
	}
	
	function isComponentDefinition(path) {
	  return (0, _isReactCreateClassCall2.default)(path) || (0, _isReactComponentClass2.default)(path) || (0, _isStatelessComponent2.default)(path);
	}
	
	function resolveDefinition(definition, types) {
	  if ((0, _isReactCreateClassCall2.default)(definition)) {
	    // return argument
	    var resolvedPath = (0, _resolveToValue2.default)(definition.get('arguments', 0));
	    if (types.ObjectExpression.check(resolvedPath.node)) {
	      return resolvedPath;
	    }
	  } else if ((0, _isReactComponentClass2.default)(definition)) {
	    (0, _normalizeClassDefinition2.default)(definition);
	    return definition;
	  } else if ((0, _isStatelessComponent2.default)(definition)) {
	    return definition;
	  }
	  return null;
	}
	
	/**
	 * Given an AST, this function tries to find the exported component definition.
	 *
	 * The component definition is either the ObjectExpression passed to
	 * `React.createClass` or a `class` definition extending `React.Component` or
	 * having a `render()` method.
	 *
	 * If a definition is part of the following statements, it is considered to be
	 * exported:
	 *
	 * modules.exports = Definition;
	 * exports.foo = Definition;
	 * export default Definition;
	 * export var Definition = ...;
	 */
	function findExportedComponentDefinition(ast, recast) {
	  var types = recast.types.namedTypes;
	  var definition;
	
	  function exportDeclaration(path) {
	    var definitions = (0, _resolveExportDeclaration2.default)(path, types).reduce(function (acc, definition) {
	      if (isComponentDefinition(definition)) {
	        acc.push(definition);
	      } else {
	        var resolved = (0, _resolveToValue2.default)((0, _resolveHOC2.default)(definition));
	        if (isComponentDefinition(resolved)) {
	          acc.push(resolved);
	        }
	      }
	      return acc;
	    }, []);
	
	    if (definitions.length === 0) {
	      return false;
	    }
	    if (definitions.length > 1 || definition) {
	      // If a file exports multiple components, ... complain!
	      throw new Error(ERROR_MULTIPLE_DEFINITIONS);
	    }
	    definition = resolveDefinition(definitions[0], types);
	    return false;
	  }
	
	  recast.visit(ast, {
	    visitFunctionDeclaration: ignore,
	    visitFunctionExpression: ignore,
	    visitClassDeclaration: ignore,
	    visitClassExpression: ignore,
	    visitIfStatement: ignore,
	    visitWithStatement: ignore,
	    visitSwitchStatement: ignore,
	    visitCatchCause: ignore,
	    visitWhileStatement: ignore,
	    visitDoWhileStatement: ignore,
	    visitForStatement: ignore,
	    visitForInStatement: ignore,
	
	    visitExportDeclaration: exportDeclaration,
	    visitExportNamedDeclaration: exportDeclaration,
	    visitExportDefaultDeclaration: exportDeclaration,
	
	    visitAssignmentExpression: function visitAssignmentExpression(path) {
	      // Ignore anything that is not `exports.X = ...;` or
	      // `module.exports = ...;`
	      if (!(0, _isExportsOrModuleAssignment2.default)(path)) {
	        return false;
	      }
	      // Resolve the value of the right hand side. It should resolve to a call
	      // expression, something like React.createClass
	      path = (0, _resolveToValue2.default)(path.get('right'));
	      if (!isComponentDefinition(path)) {
	        path = (0, _resolveToValue2.default)((0, _resolveHOC2.default)(path));
	        if (!isComponentDefinition(path)) {
	          return false;
	        }
	      }
	      if (definition) {
	        // If a file exports multiple components, ... complain!
	        throw new Error(ERROR_MULTIPLE_DEFINITIONS);
	      }
	      definition = resolveDefinition(path, types);
	      return false;
	    }
	  });
	
	  return definition;
	}

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isExportsOrModuleAssignment;
	
	var _expressionTo = __webpack_require__(346);
	
	var expressionTo = _interopRequireWildcard(_expressionTo);
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var types = _recast2.default.types.namedTypes;
	
	/**
	 * Returns true if the expression is of form `exports.foo = ...;` or
	 * `modules.exports = ...;`.
	 */
	
	function isExportsOrModuleAssignment(path) {
	  if (types.ExpressionStatement.check(path.node)) {
	    path = path.get('expression');
	  }
	  if (!types.AssignmentExpression.check(path.node) || !types.MemberExpression.check(path.node.left)) {
	    return false;
	  }
	
	  var exprArr = expressionTo.Array(path.get('left'));
	  return exprArr[0] === 'module' && exprArr[1] === 'exports' || exprArr[0] === 'exports';
	}

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = resolveExportDeclaration;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var _types = _recast2.default.types.namedTypes; //eslint-disable-line no-unused-vars
	
	function resolveExportDeclaration(path) {
	  var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _types;
	
	  var definitions = [];
	  if (path.node.default) {
	    definitions.push(path.get('declaration'));
	  } else if (path.node.declaration) {
	    if (types.VariableDeclaration.check(path.node.declaration)) {
	      path.get('declaration', 'declarations').each(function (declarator) {
	        return definitions.push(declarator);
	      });
	    } else {
	      definitions.push(path.get('declaration'));
	    }
	  } else if (path.node.specifiers) {
	    path.get('specifiers').each(function (specifier) {
	      return definitions.push(specifier.node.id ? specifier.get('id') : specifier.get('local'));
	    });
	  }
	  return definitions.map(function (definition) {
	    return (0, _resolveToValue2.default)(definition);
	  });
	}

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = resolveHOC;
	
	var _recast = __webpack_require__(290);
	
	var _recast2 = _interopRequireDefault(_recast);
	
	var _isReactCreateClassCall = __webpack_require__(382);
	
	var _isReactCreateClassCall2 = _interopRequireDefault(_isReactCreateClassCall);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 *
	 */
	
	var _recast$types = _recast2.default.types;
	var NodePath = _recast$types.NodePath;
	var types = _recast$types.namedTypes;
	
	/**
	 * If the path is a call expression, it recursively resolves to the
	 * rightmost argument, stopping if it finds a React.createClass call expression
	 *
	 * Else the path itself is returned.
	 */
	
	function resolveHOC(path) {
	  var node = path.node;
	  if (types.CallExpression.check(node) && !(0, _isReactCreateClassCall2.default)(path)) {
	    if (node.arguments.length) {
	      return resolveHOC(path.get('arguments', node.arguments.length - 1));
	    }
	  }
	
	  return path;
	}

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = findExportedComponentDefinitions;
	
	var _isExportsOrModuleAssignment = __webpack_require__(458);
	
	var _isExportsOrModuleAssignment2 = _interopRequireDefault(_isExportsOrModuleAssignment);
	
	var _isReactComponentClass = __webpack_require__(364);
	
	var _isReactComponentClass2 = _interopRequireDefault(_isReactComponentClass);
	
	var _isReactCreateClassCall = __webpack_require__(382);
	
	var _isReactCreateClassCall2 = _interopRequireDefault(_isReactCreateClassCall);
	
	var _isStatelessComponent = __webpack_require__(381);
	
	var _isStatelessComponent2 = _interopRequireDefault(_isStatelessComponent);
	
	var _normalizeClassDefinition = __webpack_require__(456);
	
	var _normalizeClassDefinition2 = _interopRequireDefault(_normalizeClassDefinition);
	
	var _resolveExportDeclaration = __webpack_require__(459);
	
	var _resolveExportDeclaration2 = _interopRequireDefault(_resolveExportDeclaration);
	
	var _resolveToValue = __webpack_require__(347);
	
	var _resolveToValue2 = _interopRequireDefault(_resolveToValue);
	
	var _resolveHOC = __webpack_require__(460);
	
	var _resolveHOC2 = _interopRequireDefault(_resolveHOC);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function ignore() {
	  return false;
	}
	
	function isComponentDefinition(path) {
	  return (0, _isReactCreateClassCall2.default)(path) || (0, _isReactComponentClass2.default)(path) || (0, _isStatelessComponent2.default)(path);
	}
	
	function resolveDefinition(definition, types) {
	  if ((0, _isReactCreateClassCall2.default)(definition)) {
	    // return argument
	    var resolvedPath = (0, _resolveToValue2.default)(definition.get('arguments', 0));
	    if (types.ObjectExpression.check(resolvedPath.node)) {
	      return resolvedPath;
	    }
	  } else if ((0, _isReactComponentClass2.default)(definition)) {
	    (0, _normalizeClassDefinition2.default)(definition);
	    return definition;
	  } else if ((0, _isStatelessComponent2.default)(definition)) {
	    return definition;
	  }
	  return null;
	}
	
	/**
	 * Given an AST, this function tries to find the exported component definitions.
	 *
	 * The component definitions are either the ObjectExpression passed to
	 * `React.createClass` or a `class` definition extending `React.Component` or
	 * having a `render()` method.
	 *
	 * If a definition is part of the following statements, it is considered to be
	 * exported:
	 *
	 * modules.exports = Definition;
	 * exports.foo = Definition;
	 * export default Definition;
	 * export var Definition = ...;
	 */
	function findExportedComponentDefinitions(ast, recast) {
	  var types = recast.types.namedTypes;
	  var components = [];
	
	  function exportDeclaration(path) {
	    var definitions = (0, _resolveExportDeclaration2.default)(path, types).reduce(function (acc, definition) {
	      if (isComponentDefinition(definition)) {
	        acc.push(definition);
	      } else {
	        var resolved = (0, _resolveToValue2.default)((0, _resolveHOC2.default)(definition));
	        if (isComponentDefinition(resolved)) {
	          acc.push(resolved);
	        }
	      }
	      return acc;
	    }, []).map(function (definition) {
	      return resolveDefinition(definition, types);
	    });
	
	    if (definitions.length === 0) {
	      return false;
	    }
	    definitions.forEach(function (definition) {
	      if (definition && components.indexOf(definition) === -1) {
	        components.push(definition);
	      }
	    });
	    return false;
	  }
	
	  recast.visit(ast, {
	    visitFunctionDeclaration: ignore,
	    visitFunctionExpression: ignore,
	    visitClassDeclaration: ignore,
	    visitClassExpression: ignore,
	    visitIfStatement: ignore,
	    visitWithStatement: ignore,
	    visitSwitchStatement: ignore,
	    visitCatchCause: ignore,
	    visitWhileStatement: ignore,
	    visitDoWhileStatement: ignore,
	    visitForStatement: ignore,
	    visitForInStatement: ignore,
	
	    visitExportDeclaration: exportDeclaration,
	    visitExportNamedDeclaration: exportDeclaration,
	    visitExportDefaultDeclaration: exportDeclaration,
	
	    visitAssignmentExpression: function visitAssignmentExpression(path) {
	      // Ignore anything that is not `exports.X = ...;` or
	      // `module.exports = ...;`
	      if (!(0, _isExportsOrModuleAssignment2.default)(path)) {
	        return false;
	      }
	      // Resolve the value of the right hand side. It should resolve to a call
	      // expression, something like React.createClass
	      path = (0, _resolveToValue2.default)(path.get('right'));
	      if (!isComponentDefinition(path)) {
	        path = (0, _resolveToValue2.default)((0, _resolveHOC2.default)(path));
	        if (!isComponentDefinition(path)) {
	          return false;
	        }
	      }
	      var definition = resolveDefinition(path, types);
	      if (definition && components.indexOf(definition) === -1) {
	        components.push(definition);
	      }
	      return false;
	    }
	  });
	
	  return components;
	}

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.resolveToValue = exports.resolveToModule = exports.resolveExportDeclaration = exports.printValue = exports.normalizeClassDefiniton = exports.normalizeClassDefinition = exports.match = exports.isStatelessComponent = exports.isReactModuleName = exports.isReactCreateClassCall = exports.isReactComponentMethod = exports.isReactComponentClass = exports.isExportsOrModuleAssignment = exports.getTypeAnnotation = exports.getPropType = exports.getPropertyValuePath = exports.getPropertyName = exports.getParameterName = exports.getNameOrValue = exports.getMethodDocumentation = exports.getMemberValuePath = exports.getMembers = exports.getMemberExpressionRoot = exports.getFlowTypeFromReactComponent = exports.getFlowType = exports.getClassMemberValuePath = exports.docblock = undefined;
	
	var _getClassMemberValuePath = __webpack_require__(357);
	
	Object.defineProperty(exports, 'getClassMemberValuePath', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getClassMemberValuePath).default;
	  }
	});
	
	var _getFlowType = __webpack_require__(359);
	
	Object.defineProperty(exports, 'getFlowType', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getFlowType).default;
	  }
	});
	
	var _getFlowTypeFromReactComponent = __webpack_require__(403);
	
	Object.defineProperty(exports, 'getFlowTypeFromReactComponent', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getFlowTypeFromReactComponent).default;
	  }
	});
	
	var _getMemberExpressionRoot = __webpack_require__(348);
	
	Object.defineProperty(exports, 'getMemberExpressionRoot', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getMemberExpressionRoot).default;
	  }
	});
	
	var _getMembers = __webpack_require__(396);
	
	Object.defineProperty(exports, 'getMembers', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getMembers).default;
	  }
	});
	
	var _getMemberValuePath = __webpack_require__(342);
	
	Object.defineProperty(exports, 'getMemberValuePath', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getMemberValuePath).default;
	  }
	});
	
	var _getMethodDocumentation = __webpack_require__(358);
	
	Object.defineProperty(exports, 'getMethodDocumentation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getMethodDocumentation).default;
	  }
	});
	
	var _getNameOrValue = __webpack_require__(345);
	
	Object.defineProperty(exports, 'getNameOrValue', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getNameOrValue).default;
	  }
	});
	
	var _getParameterName = __webpack_require__(363);
	
	Object.defineProperty(exports, 'getParameterName', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getParameterName).default;
	  }
	});
	
	var _getPropertyName = __webpack_require__(350);
	
	Object.defineProperty(exports, 'getPropertyName', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getPropertyName).default;
	  }
	});
	
	var _getPropertyValuePath = __webpack_require__(349);
	
	Object.defineProperty(exports, 'getPropertyValuePath', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getPropertyValuePath).default;
	  }
	});
	
	var _getPropType = __webpack_require__(385);
	
	Object.defineProperty(exports, 'getPropType', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getPropType).default;
	  }
	});
	
	var _getTypeAnnotation = __webpack_require__(361);
	
	Object.defineProperty(exports, 'getTypeAnnotation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getTypeAnnotation).default;
	  }
	});
	
	var _isExportsOrModuleAssignment = __webpack_require__(458);
	
	Object.defineProperty(exports, 'isExportsOrModuleAssignment', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_isExportsOrModuleAssignment).default;
	  }
	});
	
	var _isReactComponentClass = __webpack_require__(364);
	
	Object.defineProperty(exports, 'isReactComponentClass', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_isReactComponentClass).default;
	  }
	});
	
	var _isReactComponentMethod = __webpack_require__(368);
	
	Object.defineProperty(exports, 'isReactComponentMethod', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_isReactComponentMethod).default;
	  }
	});
	
	var _isReactCreateClassCall = __webpack_require__(382);
	
	Object.defineProperty(exports, 'isReactCreateClassCall', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_isReactCreateClassCall).default;
	  }
	});
	
	var _isReactModuleName = __webpack_require__(365);
	
	Object.defineProperty(exports, 'isReactModuleName', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_isReactModuleName).default;
	  }
	});
	
	var _isStatelessComponent = __webpack_require__(381);
	
	Object.defineProperty(exports, 'isStatelessComponent', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_isStatelessComponent).default;
	  }
	});
	
	var _match = __webpack_require__(366);
	
	Object.defineProperty(exports, 'match', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_match).default;
	  }
	});
	
	var _normalizeClassDefinition = __webpack_require__(456);
	
	Object.defineProperty(exports, 'normalizeClassDefinition', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_normalizeClassDefinition).default;
	  }
	});
	Object.defineProperty(exports, 'normalizeClassDefiniton', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_normalizeClassDefinition).default;
	  }
	});
	
	var _printValue = __webpack_require__(360);
	
	Object.defineProperty(exports, 'printValue', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_printValue).default;
	  }
	});
	
	var _resolveExportDeclaration = __webpack_require__(459);
	
	Object.defineProperty(exports, 'resolveExportDeclaration', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_resolveExportDeclaration).default;
	  }
	});
	
	var _resolveToModule = __webpack_require__(367);
	
	Object.defineProperty(exports, 'resolveToModule', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_resolveToModule).default;
	  }
	});
	
	var _resolveToValue = __webpack_require__(347);
	
	Object.defineProperty(exports, 'resolveToValue', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_resolveToValue).default;
	  }
	});
	
	var _docblock = __webpack_require__(340);
	
	var docblock = _interopRequireWildcard(_docblock);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.docblock = docblock; /*
	                              * Copyright (c) 2015, Facebook, Inc.
	                              * All rights reserved.
	                              *
	                              * This source code is licensed under the BSD-style license found in the
	                              * LICENSE file in the root directory of this source tree. An additional grant
	                              * of patent rights can be found in the PATENTS file in the same directory.
	                              *
	                              * 
	                              *
	                              */

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(352);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _objectWithoutProperties2 = __webpack_require__(464);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	var _getPrototypeOf = __webpack_require__(5);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(31);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(32);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(36);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(83);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Affix = function (_React$Component) {
	  (0, _inherits3.default)(Affix, _React$Component);
	
	  function Affix() {
	    (0, _classCallCheck3.default)(this, Affix);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, (Affix.__proto__ || (0, _getPrototypeOf2.default)(Affix)).call(this));
	
	    _this.handleScroll = function () {
	      var affix = _this.state.affix;
	      var offset = _this.props.offset;
	      var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
	
	      if (!affix && scrollTop >= offset) {
	        _this.setState({
	          affix: true
	        });
	      }
	
	      if (affix && scrollTop < offset) {
	        _this.setState({
	          affix: false
	        });
	      }
	    };
	
	    _this.state = {
	      affix: false
	    };
	    return _this;
	  }
	
	  (0, _createClass3.default)(Affix, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      window.addEventListener('scroll', this.handleScroll);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      window.removeEventListener('scroll', this.handleScroll);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var affix = this.state.affix ? 'affix' : '';
	      var _props = this.props,
	          className = _props.className,
	          props = (0, _objectWithoutProperties3.default)(_props, ['className']);
	
	
	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, props, { className: (className || '') + ' ' + affix }),
	        this.props.children
	      );
	    }
	  }]);
	  return Affix;
	}(_react2.default.Component); // https://gist.github.com/julianocomg/296469e414db1202fc86
	
	
	Affix.propTypes = {
	  offset: _react2.default.PropTypes.number,
	  className: _react2.default.PropTypes.string,
	  children: _react2.default.PropTypes.node
	};
	Affix.defaultProps = {
	  offset: 0
	};
	exports.default = Affix;

/***/ },
/* 464 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (obj, keys) {
	  var target = {};
	
	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }
	
	  return target;
	};

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(466);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./styles.scss", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/sass-loader/index.js!./styles.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, "body {\n  height: 100%;\n  background-color: #fff;\n  position: relative; }\n\nh1 {\n  font-size: initial; }\n\n.show-case-app {\n  margin: 0; }\n\n.title {\n  color: #fff;\n  font-size: 38px;\n  padding-top: 10px;\n  padding-left: 10px;\n  background-color: #87081e;\n  height: 80px; }\n\n.navi-affix.affix {\n  top: 0; }\n\n.navigation {\n  margin-top: 20px; }\n  .navigation a {\n    color: black;\n    text-decoration: none;\n    padding-left: 10px;\n    padding-bottom: 2px; }\n  .navigation ul {\n    padding-left: 0; }\n  .navigation li {\n    list-style-type: none; }\n  .navigation ul li {\n    font-weight: 500;\n    padding-left: 5px; }\n  .navigation ul > li > ul > li {\n    font-weight: normal; }\n  .navigation > ul > li.current-nav > a {\n    border-left: 2px solid #87081e;\n    color: #87081e; }\n  .navigation ul > li.current-nav > ul > li.current-nav {\n    border-left: 2px solid #87081e; }\n    .navigation ul > li.current-nav > ul > li.current-nav a {\n      color: #87081e; }\n\n.show-case {\n  margin-left: 10px; }\n\n.required-prop {\n  color: orange; }\n", ""]);
	
	// exports


/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _FormattedValue = __webpack_require__(468);
	
	var _FormattedValue2 = _interopRequireDefault(_FormattedValue);
	
	var _example = __webpack_require__(469);
	
	var _example2 = _interopRequireDefault(_example);
	
	var _example3 = __webpack_require__(611);
	
	var _example4 = _interopRequireDefault(_example3);
	
	var _Table = __webpack_require__(612);
	
	var _Table2 = _interopRequireDefault(_Table);
	
	var _example5 = __webpack_require__(613);
	
	var _example6 = _interopRequireDefault(_example5);
	
	var _example7 = __webpack_require__(751);
	
	var _example8 = _interopRequireDefault(_example7);
	
	var _LoadMask = __webpack_require__(752);
	
	var _LoadMask2 = _interopRequireDefault(_LoadMask);
	
	var _example9 = __webpack_require__(753);
	
	var _example10 = _interopRequireDefault(_example9);
	
	var _example11 = __webpack_require__(769);
	
	var _example12 = _interopRequireDefault(_example11);
	
	var _Button = __webpack_require__(770);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	var _example13 = __webpack_require__(771);
	
	var _example14 = _interopRequireDefault(_example13);
	
	var _example15 = __webpack_require__(776);
	
	var _example16 = _interopRequireDefault(_example15);
	
	var _SearchBox = __webpack_require__(777);
	
	var _SearchBox2 = _interopRequireDefault(_SearchBox);
	
	var _example17 = __webpack_require__(778);
	
	var _example18 = _interopRequireDefault(_example17);
	
	var _example19 = __webpack_require__(786);
	
	var _example20 = _interopRequireDefault(_example19);
	
	var _ToccoLogo = __webpack_require__(787);
	
	var _ToccoLogo2 = _interopRequireDefault(_ToccoLogo);
	
	var _example21 = __webpack_require__(788);
	
	var _example22 = _interopRequireDefault(_example21);
	
	var _example23 = __webpack_require__(794);
	
	var _example24 = _interopRequireDefault(_example23);
	
	var _Pagination = __webpack_require__(795);
	
	var _Pagination2 = _interopRequireDefault(_Pagination);
	
	var _example25 = __webpack_require__(796);
	
	var _example26 = _interopRequireDefault(_example25);
	
	var _example27 = __webpack_require__(806);
	
	var _example28 = _interopRequireDefault(_example27);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var categories = {
	  CONTENT: 'Content',
	  FORMS: 'From Controls',
	  CORPORATE_IDENTITY: 'Corporate identity'
	};
	
	exports.default = [{
	  category: categories.CONTENT,
	  components: [{
	    name: 'FormattedValue',
	    raw: _FormattedValue2.default,
	    example: {
	      component: _example2.default,
	      raw: _example4.default
	    }
	  }, {
	    name: 'Table',
	    raw: _Table2.default,
	    example: {
	      component: _example6.default,
	      raw: _example8.default
	    }
	  }, {
	    name: 'Pagination',
	    raw: _Pagination2.default,
	    example: {
	      component: _example26.default,
	      raw: _example28.default
	    }
	  }, {
	    name: 'LoadMask',
	    raw: _LoadMask2.default,
	    example: {
	      component: _example10.default,
	      raw: _example12.default
	    }
	  }]
	}, {
	  category: categories.FORMS,
	  components: [{
	    name: 'Button',
	    raw: _Button2.default,
	    example: {
	      component: _example14.default,
	      raw: _example16.default
	    }
	  }, {
	    name: 'SearchBox',
	    raw: _SearchBox2.default,
	    example: {
	      component: _example18.default,
	      raw: _example20.default
	    }
	  }]
	}, {
	  category: categories.CORPORATE_IDENTITY,
	  components: [{
	    name: 'ToccoLogo',
	    raw: _ToccoLogo2.default,
	    example: {
	      component: _example22.default,
	      raw: _example24.default
	    }
	  }]
	}];

/***/ },
/* 468 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\n\nimport provider from './typeFormatterProvider'\nimport './styles.scss'\n\n/**\n *  FormattedValue component to format values with given type.\n */\nconst FormattedValue = props => {\n  return (\n    <span>\n      {provider(props.type, props.value)}\n    </span>)\n}\n\nFormattedValue.propTypes = {\n\n  /**\n   * Type of value. E.g. Phone\n   */\n  type: React.PropTypes.oneOf([\n    'string',\n    'char',\n    'text',\n    'short',\n    'integer',\n    'long',\n    'decimal',\n    'double',\n    'phone',\n    'counter',\n    'url',\n    'date',\n    'birthdate',\n    'datetime',\n    'time',\n    'duration',\n    'email',\n    'moneyamount',\n    'boolean',\n    'latitude',\n    'longitude'\n  ]).isRequired,\n  /**\n   * Value that should be formatted\n   */\n  value: React.PropTypes.any.isRequired\n}\n\nexport default FormattedValue\n\n"

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(470);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _getPrototypeOf = __webpack_require__(524);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(528);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(529);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(533);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(558);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ = __webpack_require__(566);
	
	var _2 = _interopRequireDefault(_);
	
	var _reactIntl = __webpack_require__(572);
	
	var _de = __webpack_require__(607);
	
	var _de2 = _interopRequireDefault(_de);
	
	var _en = __webpack_require__(608);
	
	var _en2 = _interopRequireDefault(_en);
	
	var _fr = __webpack_require__(609);
	
	var _fr2 = _interopRequireDefault(_fr);
	
	var _it = __webpack_require__(610);
	
	var _it2 = _interopRequireDefault(_it);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// real-import:import {FormattedValue} from 'tocco-ui'
	
	var Example = function (_React$Component) {
	  (0, _inherits3.default)(Example, _React$Component);
	
	  function Example(props) {
	    (0, _classCallCheck3.default)(this, Example);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, (Example.__proto__ || (0, _getPrototypeOf2.default)(Example)).call(this, props));
	
	    _this.timeValue = {
	      value: {
	        hourOfDay: 23,
	        minuteOfHour: 15,
	        secondOfMinute: 0,
	        millisOfSecond: 0
	      }
	    };
	
	    _this.state = {
	      locale: 'de-CH'
	    };
	
	    (0, _reactIntl.addLocaleData)([].concat((0, _toConsumableArray3.default)(_de2.default), (0, _toConsumableArray3.default)(_en2.default), (0, _toConsumableArray3.default)(_fr2.default), (0, _toConsumableArray3.default)(_it2.default)));
	    return _this;
	  }
	
	  (0, _createClass3.default)(Example, [{
	    key: 'changeLocale',
	    value: function changeLocale(locale) {
	      this.setState({ locale: locale });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var locales = ['de-CH', 'de-DE', 'en', 'it', 'fr'];
	
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          'div',
	          { style: { fontWeight: 'bold', cursor: 'pointer' } },
	          locales.map(function (locale, idx) {
	            return _react2.default.createElement(
	              'span',
	              { key: idx, style: _this2.state.locale === locale ? { textDecoration: 'underline' } : {},
	                onClick: function onClick() {
	                  return _this2.changeLocale(locale);
	                } },
	              '[',
	              locale,
	              ']'
	            );
	          })
	        ),
	        _react2.default.createElement(
	          _reactIntl.IntlProvider,
	          { locale: this.state.locale },
	          _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	              'table',
	              { className: 'table table-striped' },
	              _react2.default.createElement(
	                'tbody',
	                null,
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'String'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'string', value: 'Simple string' })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Text'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'text', value: 'Line 1\\nLine 2' })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Url'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'url', value: 'http://www.this-is-a.url' })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'DateTime'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'datetime', value: '2016-12-06T13:40:25.864Z' })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Date'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'date', value: '2016-12-06' })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Time'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'time', value: this.timeValue })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Duration'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'duration', value: 3020000 })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Money'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'moneyamount', value: 1245.6 })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Boolean'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'boolean', value: true }),
	                    _react2.default.createElement(_2.default, { type: 'boolean', value: false }),
	                    _react2.default.createElement('br', null)
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Decimal'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'decimal', value: 3333.3 })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Integer'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'integer', value: 1337 })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Long/Langitude'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'longitude', value: { value: 0.82710405122667465 } })
	                  )
	                ),
	                _react2.default.createElement(
	                  'tr',
	                  null,
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    'Login'
	                  ),
	                  _react2.default.createElement(
	                    'td',
	                    null,
	                    _react2.default.createElement(_2.default, { type: 'login', value: { username: 'dake' } })
	                  )
	                )
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);
	  return Example;
	}(_react2.default.Component);
	
	exports.default = function () {
	  return _react2.default.createElement(Example, null);
	};

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _from = __webpack_require__(471);
	
	var _from2 = _interopRequireDefault(_from);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }
	
	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(472), __esModule: true };

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(473);
	__webpack_require__(517);
	module.exports = __webpack_require__(481).Array.from;

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(474)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(477)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(475)
	  , defined   = __webpack_require__(476);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 475 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 476 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(478)
	  , $export        = __webpack_require__(479)
	  , redefine       = __webpack_require__(494)
	  , hide           = __webpack_require__(484)
	  , has            = __webpack_require__(495)
	  , Iterators      = __webpack_require__(496)
	  , $iterCreate    = __webpack_require__(497)
	  , setToStringTag = __webpack_require__(513)
	  , getPrototypeOf = __webpack_require__(515)
	  , ITERATOR       = __webpack_require__(514)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 478 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(480)
	  , core      = __webpack_require__(481)
	  , ctx       = __webpack_require__(482)
	  , hide      = __webpack_require__(484)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 480 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 481 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(483);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 483 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(485)
	  , createDesc = __webpack_require__(493);
	module.exports = __webpack_require__(489) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(486)
	  , IE8_DOM_DEFINE = __webpack_require__(488)
	  , toPrimitive    = __webpack_require__(492)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(489) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(487);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 487 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(489) && !__webpack_require__(490)(function(){
	  return Object.defineProperty(__webpack_require__(491)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(490)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 490 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(487)
	  , document = __webpack_require__(480).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(487);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 493 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(484);

/***/ },
/* 495 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 496 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(498)
	  , descriptor     = __webpack_require__(493)
	  , setToStringTag = __webpack_require__(513)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(484)(IteratorPrototype, __webpack_require__(514)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(486)
	  , dPs         = __webpack_require__(499)
	  , enumBugKeys = __webpack_require__(511)
	  , IE_PROTO    = __webpack_require__(508)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(491)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(512).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(485)
	  , anObject = __webpack_require__(486)
	  , getKeys  = __webpack_require__(500);
	
	module.exports = __webpack_require__(489) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(501)
	  , enumBugKeys = __webpack_require__(511);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(495)
	  , toIObject    = __webpack_require__(502)
	  , arrayIndexOf = __webpack_require__(505)(false)
	  , IE_PROTO     = __webpack_require__(508)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(503)
	  , defined = __webpack_require__(476);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(504);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 504 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(502)
	  , toLength  = __webpack_require__(506)
	  , toIndex   = __webpack_require__(507);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(475)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(475)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(509)('keys')
	  , uid    = __webpack_require__(510);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(480)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 510 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 511 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(480).document && document.documentElement;

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(485).f
	  , has = __webpack_require__(495)
	  , TAG = __webpack_require__(514)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(509)('wks')
	  , uid        = __webpack_require__(510)
	  , Symbol     = __webpack_require__(480).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(495)
	  , toObject    = __webpack_require__(516)
	  , IE_PROTO    = __webpack_require__(508)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(476);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(482)
	  , $export        = __webpack_require__(479)
	  , toObject       = __webpack_require__(516)
	  , call           = __webpack_require__(518)
	  , isArrayIter    = __webpack_require__(519)
	  , toLength       = __webpack_require__(506)
	  , createProperty = __webpack_require__(520)
	  , getIterFn      = __webpack_require__(521);
	
	$export($export.S + $export.F * !__webpack_require__(523)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(486);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(496)
	  , ITERATOR   = __webpack_require__(514)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(485)
	  , createDesc      = __webpack_require__(493);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(522)
	  , ITERATOR  = __webpack_require__(514)('iterator')
	  , Iterators = __webpack_require__(496);
	module.exports = __webpack_require__(481).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(504)
	  , TAG = __webpack_require__(514)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(514)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(525), __esModule: true };

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(526);
	module.exports = __webpack_require__(481).Object.getPrototypeOf;

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(516)
	  , $getPrototypeOf = __webpack_require__(515);
	
	__webpack_require__(527)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(479)
	  , core    = __webpack_require__(481)
	  , fails   = __webpack_require__(490);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 528 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(530);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(531), __esModule: true };

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(532);
	var $Object = __webpack_require__(481).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(479);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(489), 'Object', {defineProperty: __webpack_require__(485).f});

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(534);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(535);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(542);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(536), __esModule: true };

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(473);
	__webpack_require__(537);
	module.exports = __webpack_require__(541).f('iterator');

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(538);
	var global        = __webpack_require__(480)
	  , hide          = __webpack_require__(484)
	  , Iterators     = __webpack_require__(496)
	  , TO_STRING_TAG = __webpack_require__(514)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(539)
	  , step             = __webpack_require__(540)
	  , Iterators        = __webpack_require__(496)
	  , toIObject        = __webpack_require__(502);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(477)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 539 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 540 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(514);

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(543), __esModule: true };

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(544);
	__webpack_require__(555);
	__webpack_require__(556);
	__webpack_require__(557);
	module.exports = __webpack_require__(481).Symbol;

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(480)
	  , has            = __webpack_require__(495)
	  , DESCRIPTORS    = __webpack_require__(489)
	  , $export        = __webpack_require__(479)
	  , redefine       = __webpack_require__(494)
	  , META           = __webpack_require__(545).KEY
	  , $fails         = __webpack_require__(490)
	  , shared         = __webpack_require__(509)
	  , setToStringTag = __webpack_require__(513)
	  , uid            = __webpack_require__(510)
	  , wks            = __webpack_require__(514)
	  , wksExt         = __webpack_require__(541)
	  , wksDefine      = __webpack_require__(546)
	  , keyOf          = __webpack_require__(547)
	  , enumKeys       = __webpack_require__(548)
	  , isArray        = __webpack_require__(551)
	  , anObject       = __webpack_require__(486)
	  , toIObject      = __webpack_require__(502)
	  , toPrimitive    = __webpack_require__(492)
	  , createDesc     = __webpack_require__(493)
	  , _create        = __webpack_require__(498)
	  , gOPNExt        = __webpack_require__(552)
	  , $GOPD          = __webpack_require__(554)
	  , $DP            = __webpack_require__(485)
	  , $keys          = __webpack_require__(500)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(553).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(550).f  = $propertyIsEnumerable;
	  __webpack_require__(549).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(478)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(484)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(510)('meta')
	  , isObject = __webpack_require__(487)
	  , has      = __webpack_require__(495)
	  , setDesc  = __webpack_require__(485).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(490)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(480)
	  , core           = __webpack_require__(481)
	  , LIBRARY        = __webpack_require__(478)
	  , wksExt         = __webpack_require__(541)
	  , defineProperty = __webpack_require__(485).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(500)
	  , toIObject = __webpack_require__(502);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(500)
	  , gOPS    = __webpack_require__(549)
	  , pIE     = __webpack_require__(550);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 549 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 550 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(504);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(502)
	  , gOPN      = __webpack_require__(553).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(501)
	  , hiddenKeys = __webpack_require__(511).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(550)
	  , createDesc     = __webpack_require__(493)
	  , toIObject      = __webpack_require__(502)
	  , toPrimitive    = __webpack_require__(492)
	  , has            = __webpack_require__(495)
	  , IE8_DOM_DEFINE = __webpack_require__(488)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(489) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 555 */
/***/ function(module, exports) {



/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(546)('asyncIterator');

/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(546)('observable');

/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(559);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(563);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(534);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(560), __esModule: true };

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(561);
	module.exports = __webpack_require__(481).Object.setPrototypeOf;

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(479);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(562).set});

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(487)
	  , anObject = __webpack_require__(486);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(482)(Function.call, __webpack_require__(554).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(564), __esModule: true };

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(565);
	var $Object = __webpack_require__(481).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(479)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(498)});

/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _FormattedValue = __webpack_require__(567);
	
	var _FormattedValue2 = _interopRequireDefault(_FormattedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _FormattedValue2.default;

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _typeFormatterProvider = __webpack_require__(568);
	
	var _typeFormatterProvider2 = _interopRequireDefault(_typeFormatterProvider);
	
	__webpack_require__(605);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 *  FormattedValue component to format values with given type.
	 */
	var FormattedValue = function FormattedValue(props) {
	  return _react2.default.createElement(
	    'span',
	    null,
	    (0, _typeFormatterProvider2.default)(props.type, props.value)
	  );
	};
	
	FormattedValue.propTypes = {
	
	  /**
	   * Type of value. E.g. Phone
	   */
	  type: _react2.default.PropTypes.oneOf(['string', 'char', 'text', 'short', 'integer', 'long', 'decimal', 'double', 'phone', 'counter', 'url', 'date', 'birthdate', 'datetime', 'time', 'duration', 'email', 'moneyamount', 'boolean', 'latitude', 'longitude']).isRequired,
	  /**
	   * Value that should be formatted
	   */
	  value: _react2.default.PropTypes.any.isRequired
	};
	
	exports.default = FormattedValue;

/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _StringFormatter = __webpack_require__(569);
	
	var _StringFormatter2 = _interopRequireDefault(_StringFormatter);
	
	var _TextFormatter = __webpack_require__(570);
	
	var _TextFormatter2 = _interopRequireDefault(_TextFormatter);
	
	var _NumberFormatter = __webpack_require__(571);
	
	var _NumberFormatter2 = _interopRequireDefault(_NumberFormatter);
	
	var _DecimalFormatter = __webpack_require__(595);
	
	var _DecimalFormatter2 = _interopRequireDefault(_DecimalFormatter);
	
	var _UrlFormatter = __webpack_require__(596);
	
	var _UrlFormatter2 = _interopRequireDefault(_UrlFormatter);
	
	var _DateFormatter = __webpack_require__(597);
	
	var _DateFormatter2 = _interopRequireDefault(_DateFormatter);
	
	var _DateTimeFormatter = __webpack_require__(598);
	
	var _DateTimeFormatter2 = _interopRequireDefault(_DateTimeFormatter);
	
	var _TimeFormatter = __webpack_require__(599);
	
	var _TimeFormatter2 = _interopRequireDefault(_TimeFormatter);
	
	var _DurationFormatter = __webpack_require__(600);
	
	var _DurationFormatter2 = _interopRequireDefault(_DurationFormatter);
	
	var _MoneyFormatter = __webpack_require__(601);
	
	var _MoneyFormatter2 = _interopRequireDefault(_MoneyFormatter);
	
	var _BooleanFormatter = __webpack_require__(602);
	
	var _BooleanFormatter2 = _interopRequireDefault(_BooleanFormatter);
	
	var _LoginFormatter = __webpack_require__(603);
	
	var _LoginFormatter2 = _interopRequireDefault(_LoginFormatter);
	
	var _LongitudeFormatter = __webpack_require__(604);
	
	var _LongitudeFormatter2 = _interopRequireDefault(_LongitudeFormatter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (type, value) {
	  if (map[type]) {
	    return _react2.default.createElement(map[type], { value: value });
	  }
	
	  console.error('No label defined for type', type, value);
	  return _react2.default.createElement('div', null);
	};
	
	var map = {
	  'string': _StringFormatter2.default,
	  'char': _StringFormatter2.default,
	  'uuid': _StringFormatter2.default,
	
	  'text': _TextFormatter2.default,
	
	  'short': _NumberFormatter2.default,
	  'integer': _NumberFormatter2.default,
	  'long': _NumberFormatter2.default,
	
	  'decimal': _DecimalFormatter2.default,
	  'double': _DecimalFormatter2.default,
	
	  'phone': _StringFormatter2.default,
	  'counter': _StringFormatter2.default,
	
	  'url': _UrlFormatter2.default,
	
	  'date': _DateFormatter2.default,
	  'birthdate': _DateFormatter2.default,
	
	  'datetime': _DateTimeFormatter2.default,
	
	  'time': _TimeFormatter2.default,
	  'duration': _DurationFormatter2.default,
	
	  'email': _StringFormatter2.default,
	
	  'moneyamount': _MoneyFormatter2.default,
	
	  'boolean': _BooleanFormatter2.default,
	
	  'latitude': _LongitudeFormatter2.default,
	  'longitude': _LongitudeFormatter2.default,
	
	  'login': _LoginFormatter2.default
	
	};

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var StringFormatter = function StringFormatter(props) {
	  var content = props.value || '';
	
	  return _react2.default.createElement(
	    'span',
	    null,
	    content
	  );
	};
	
	StringFormatter.propTypes = {
	  value: _react2.default.PropTypes.node
	};
	
	exports.default = StringFormatter;

/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TextFormatter = function TextFormatter(props) {
	  var content = props.value || '';
	
	  return _react2.default.createElement(
	    'span',
	    null,
	    content.split('\\n').map(function (b, idx) {
	      return _react2.default.createElement(
	        'div',
	        { key: idx },
	        b
	      );
	    })
	  );
	};
	
	TextFormatter.propTypes = {
	  value: _react2.default.PropTypes.node
	};
	
	exports.default = TextFormatter;

/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(572);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var NumberFormatter = function NumberFormatter(props) {
	  return _react2.default.createElement(_reactIntl.FormattedNumber, {
	    value: props.value,
	    style: 'decimal',
	    maximumFractionDigits: 0
	  });
	};
	
	NumberFormatter.propTypes = {
	  value: _react2.default.PropTypes.number
	};
	
	exports.default = NumberFormatter;

/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	 * Copyright 2016, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var allLocaleData = _interopDefault(__webpack_require__(573));
	var IntlMessageFormat = _interopDefault(__webpack_require__(574));
	var IntlRelativeFormat = _interopDefault(__webpack_require__(584));
	var React = __webpack_require__(2);
	var React__default = _interopDefault(React);
	var invariant = _interopDefault(__webpack_require__(591));
	var memoizeIntlConstructor = _interopDefault(__webpack_require__(592));
	
	// GENERATED FILE
	var defaultLocaleData = { "locale": "en", "pluralRuleFunction": function pluralRuleFunction(n, ord) {
	    var s = String(n).split("."),
	        v0 = !s[1],
	        t0 = Number(s[0]) == n,
	        n10 = t0 && s[0].slice(-1),
	        n100 = t0 && s[0].slice(-2);if (ord) return n10 == 1 && n100 != 11 ? "one" : n10 == 2 && n100 != 12 ? "two" : n10 == 3 && n100 != 13 ? "few" : "other";return n == 1 && v0 ? "one" : "other";
	  }, "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "minute": { "displayName": "minute", "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } } } };
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	function addLocaleData() {
	    var data = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	    var locales = Array.isArray(data) ? data : [data];
	
	    locales.forEach(function (localeData) {
	        if (localeData && localeData.locale) {
	            IntlMessageFormat.__addLocaleData(localeData);
	            IntlRelativeFormat.__addLocaleData(localeData);
	        }
	    });
	}
	
	function hasLocaleData(locale) {
	    var localeParts = (locale || '').split('-');
	
	    while (localeParts.length > 0) {
	        if (hasIMFAndIRFLocaleData(localeParts.join('-'))) {
	            return true;
	        }
	
	        localeParts.pop();
	    }
	
	    return false;
	}
	
	function hasIMFAndIRFLocaleData(locale) {
	    var normalizedLocale = locale && locale.toLowerCase();
	
	    return !!(IntlMessageFormat.__localeData__[normalizedLocale] && IntlRelativeFormat.__localeData__[normalizedLocale]);
	}
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
	};
	
	var jsx = function () {
	  var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7;
	  return function createRawReactElement(type, props, key, children) {
	    var defaultProps = type && type.defaultProps;
	    var childrenLength = arguments.length - 3;
	
	    if (!props && childrenLength !== 0) {
	      props = {};
	    }
	
	    if (props && defaultProps) {
	      for (var propName in defaultProps) {
	        if (props[propName] === void 0) {
	          props[propName] = defaultProps[propName];
	        }
	      }
	    } else if (!props) {
	      props = defaultProps || {};
	    }
	
	    if (childrenLength === 1) {
	      props.children = children;
	    } else if (childrenLength > 1) {
	      var childArray = Array(childrenLength);
	
	      for (var i = 0; i < childrenLength; i++) {
	        childArray[i] = arguments[i + 3];
	      }
	
	      props.children = childArray;
	    }
	
	    return {
	      $$typeof: REACT_ELEMENT_TYPE,
	      type: type,
	      key: key === undefined ? null : '' + key,
	      ref: null,
	      props: props,
	      _owner: null
	    };
	  };
	}();
	
	var asyncToGenerator = function (fn) {
	  return function () {
	    var gen = fn.apply(this, arguments);
	    return new Promise(function (resolve, reject) {
	      function step(key, arg) {
	        try {
	          var info = gen[key](arg);
	          var value = info.value;
	        } catch (error) {
	          reject(error);
	          return;
	        }
	
	        if (info.done) {
	          resolve(value);
	        } else {
	          return Promise.resolve(value).then(function (value) {
	            return step("next", value);
	          }, function (err) {
	            return step("throw", err);
	          });
	        }
	      }
	
	      return step("next");
	    });
	  };
	};
	
	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	var defineEnumerableProperties = function (obj, descs) {
	  for (var key in descs) {
	    var desc = descs[key];
	    desc.configurable = desc.enumerable = true;
	    if ("value" in desc) desc.writable = true;
	    Object.defineProperty(obj, key, desc);
	  }
	
	  return obj;
	};
	
	var defaults = function (obj, defaults) {
	  var keys = Object.getOwnPropertyNames(defaults);
	
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var value = Object.getOwnPropertyDescriptor(defaults, key);
	
	    if (value && value.configurable && obj[key] === undefined) {
	      Object.defineProperty(obj, key, value);
	    }
	  }
	
	  return obj;
	};
	
	var defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};
	
	var get = function get(object, property, receiver) {
	  if (object === null) object = Function.prototype;
	  var desc = Object.getOwnPropertyDescriptor(object, property);
	
	  if (desc === undefined) {
	    var parent = Object.getPrototypeOf(object);
	
	    if (parent === null) {
	      return undefined;
	    } else {
	      return get(parent, property, receiver);
	    }
	  } else if ("value" in desc) {
	    return desc.value;
	  } else {
	    var getter = desc.get;
	
	    if (getter === undefined) {
	      return undefined;
	    }
	
	    return getter.call(receiver);
	  }
	};
	
	var inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }
	
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};
	
	var _instanceof = function (left, right) {
	  if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
	    return right[Symbol.hasInstance](left);
	  } else {
	    return left instanceof right;
	  }
	};
	
	var interopRequireDefault = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	};
	
	var interopRequireWildcard = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};
	
	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }
	
	    newObj.default = obj;
	    return newObj;
	  }
	};
	
	var newArrowCheck = function (innerThis, boundThis) {
	  if (innerThis !== boundThis) {
	    throw new TypeError("Cannot instantiate an arrow function");
	  }
	};
	
	var objectDestructuringEmpty = function (obj) {
	  if (obj == null) throw new TypeError("Cannot destructure undefined");
	};
	
	var objectWithoutProperties = function (obj, keys) {
	  var target = {};
	
	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }
	
	  return target;
	};
	
	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};
	
	var selfGlobal = typeof global === "undefined" ? self : global;
	
	var set = function set(object, property, value, receiver) {
	  var desc = Object.getOwnPropertyDescriptor(object, property);
	
	  if (desc === undefined) {
	    var parent = Object.getPrototypeOf(object);
	
	    if (parent !== null) {
	      set(parent, property, value, receiver);
	    }
	  } else if ("value" in desc && desc.writable) {
	    desc.value = value;
	  } else {
	    var setter = desc.set;
	
	    if (setter !== undefined) {
	      setter.call(receiver, value);
	    }
	  }
	
	  return value;
	};
	
	var slicedToArray = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;
	
	    try {
	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);
	
	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }
	
	    return _arr;
	  }
	
	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (Symbol.iterator in Object(arr)) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();
	
	var slicedToArrayLoose = function (arr, i) {
	  if (Array.isArray(arr)) {
	    return arr;
	  } else if (Symbol.iterator in Object(arr)) {
	    var _arr = [];
	
	    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
	      _arr.push(_step.value);
	
	      if (i && _arr.length === i) break;
	    }
	
	    return _arr;
	  } else {
	    throw new TypeError("Invalid attempt to destructure non-iterable instance");
	  }
	};
	
	var taggedTemplateLiteral = function (strings, raw) {
	  return Object.freeze(Object.defineProperties(strings, {
	    raw: {
	      value: Object.freeze(raw)
	    }
	  }));
	};
	
	var taggedTemplateLiteralLoose = function (strings, raw) {
	  strings.raw = raw;
	  return strings;
	};
	
	var temporalRef = function (val, name, undef) {
	  if (val === undef) {
	    throw new ReferenceError(name + " is not defined - temporal dead zone");
	  } else {
	    return val;
	  }
	};
	
	var temporalUndefined = {};
	
	var toArray = function (arr) {
	  return Array.isArray(arr) ? arr : Array.from(arr);
	};
	
	var toConsumableArray = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
	
	    return arr2;
	  } else {
	    return Array.from(arr);
	  }
	};
	
	
	
	var babelHelpers$1 = Object.freeze({
	  jsx: jsx,
	  asyncToGenerator: asyncToGenerator,
	  classCallCheck: classCallCheck,
	  createClass: createClass,
	  defineEnumerableProperties: defineEnumerableProperties,
	  defaults: defaults,
	  defineProperty: defineProperty,
	  get: get,
	  inherits: inherits,
	  interopRequireDefault: interopRequireDefault,
	  interopRequireWildcard: interopRequireWildcard,
	  newArrowCheck: newArrowCheck,
	  objectDestructuringEmpty: objectDestructuringEmpty,
	  objectWithoutProperties: objectWithoutProperties,
	  possibleConstructorReturn: possibleConstructorReturn,
	  selfGlobal: selfGlobal,
	  set: set,
	  slicedToArray: slicedToArray,
	  slicedToArrayLoose: slicedToArrayLoose,
	  taggedTemplateLiteral: taggedTemplateLiteral,
	  taggedTemplateLiteralLoose: taggedTemplateLiteralLoose,
	  temporalRef: temporalRef,
	  temporalUndefined: temporalUndefined,
	  toArray: toArray,
	  toConsumableArray: toConsumableArray,
	  typeof: _typeof,
	  extends: _extends,
	  instanceof: _instanceof
	});
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var bool = React.PropTypes.bool;
	var number = React.PropTypes.number;
	var string = React.PropTypes.string;
	var func = React.PropTypes.func;
	var object = React.PropTypes.object;
	var oneOf = React.PropTypes.oneOf;
	var shape = React.PropTypes.shape;
	
	
	var intlConfigPropTypes = {
	    locale: string,
	    formats: object,
	    messages: object,
	
	    defaultLocale: string,
	    defaultFormats: object
	};
	
	var intlFormatPropTypes = {
	    formatDate: func.isRequired,
	    formatTime: func.isRequired,
	    formatRelative: func.isRequired,
	    formatNumber: func.isRequired,
	    formatPlural: func.isRequired,
	    formatMessage: func.isRequired,
	    formatHTMLMessage: func.isRequired
	};
	
	var intlShape = shape(babelHelpers$1['extends']({}, intlConfigPropTypes, intlFormatPropTypes, {
	    formatters: object,
	    now: func.isRequired
	}));
	
	var messageDescriptorPropTypes = {
	    id: string.isRequired,
	    description: string,
	    defaultMessage: string
	};
	
	var dateTimeFormatPropTypes = {
	    localeMatcher: oneOf(['best fit', 'lookup']),
	    formatMatcher: oneOf(['basic', 'best fit']),
	
	    timeZone: string,
	    hour12: bool,
	
	    weekday: oneOf(['narrow', 'short', 'long']),
	    era: oneOf(['narrow', 'short', 'long']),
	    year: oneOf(['numeric', '2-digit']),
	    month: oneOf(['numeric', '2-digit', 'narrow', 'short', 'long']),
	    day: oneOf(['numeric', '2-digit']),
	    hour: oneOf(['numeric', '2-digit']),
	    minute: oneOf(['numeric', '2-digit']),
	    second: oneOf(['numeric', '2-digit']),
	    timeZoneName: oneOf(['short', 'long'])
	};
	
	var numberFormatPropTypes = {
	    localeMatcher: oneOf(['best fit', 'lookup']),
	
	    style: oneOf(['decimal', 'currency', 'percent']),
	    currency: string,
	    currencyDisplay: oneOf(['symbol', 'code', 'name']),
	    useGrouping: bool,
	
	    minimumIntegerDigits: number,
	    minimumFractionDigits: number,
	    maximumFractionDigits: number,
	    minimumSignificantDigits: number,
	    maximumSignificantDigits: number
	};
	
	var relativeFormatPropTypes = {
	    style: oneOf(['best fit', 'numeric']),
	    units: oneOf(['second', 'minute', 'hour', 'day', 'month', 'year'])
	};
	
	var pluralFormatPropTypes = {
	    style: oneOf(['cardinal', 'ordinal'])
	};
	
	/*
	HTML escaping and shallow-equals implementations are the same as React's
	(on purpose.) Therefore, it has the following Copyright and Licensing:
	
	Copyright 2013-2014, Facebook, Inc.
	All rights reserved.
	
	This source code is licensed under the BSD-style license found in the LICENSE
	file in the root directory of React's source tree.
	*/
	
	var intlConfigPropNames = Object.keys(intlConfigPropTypes);
	
	var ESCAPED_CHARS = {
	    '&': '&amp;',
	    '>': '&gt;',
	    '<': '&lt;',
	    '"': '&quot;',
	    '\'': '&#x27;'
	};
	
	var UNSAFE_CHARS_REGEX = /[&><"']/g;
	
	function escape(str) {
	    return ('' + str).replace(UNSAFE_CHARS_REGEX, function (match) {
	        return ESCAPED_CHARS[match];
	    });
	}
	
	function filterProps(props, whitelist) {
	    var defaults = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    return whitelist.reduce(function (filtered, name) {
	        if (props.hasOwnProperty(name)) {
	            filtered[name] = props[name];
	        } else if (defaults.hasOwnProperty(name)) {
	            filtered[name] = defaults[name];
	        }
	
	        return filtered;
	    }, {});
	}
	
	function invariantIntlContext() {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var intl = _ref.intl;
	
	    invariant(intl, '[React Intl] Could not find required `intl` object. ' + '<IntlProvider> needs to exist in the component ancestry.');
	}
	
	function shallowEquals(objA, objB) {
	    if (objA === objB) {
	        return true;
	    }
	
	    if ((typeof objA === 'undefined' ? 'undefined' : babelHelpers$1['typeof'](objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : babelHelpers$1['typeof'](objB)) !== 'object' || objB === null) {
	        return false;
	    }
	
	    var keysA = Object.keys(objA);
	    var keysB = Object.keys(objB);
	
	    if (keysA.length !== keysB.length) {
	        return false;
	    }
	
	    // Test for A's keys different from B.
	    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
	    for (var i = 0; i < keysA.length; i++) {
	        if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	            return false;
	        }
	    }
	
	    return true;
	}
	
	function shouldIntlComponentUpdate(_ref2, nextProps, nextState) {
	    var props = _ref2.props;
	    var state = _ref2.state;
	    var _ref2$context = _ref2.context;
	    var context = _ref2$context === undefined ? {} : _ref2$context;
	    var nextContext = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var _context$intl = context.intl;
	    var intl = _context$intl === undefined ? {} : _context$intl;
	    var _nextContext$intl = nextContext.intl;
	    var nextIntl = _nextContext$intl === undefined ? {} : _nextContext$intl;
	
	
	    return !shallowEquals(nextProps, props) || !shallowEquals(nextState, state) || !(nextIntl === intl || shallowEquals(filterProps(nextIntl, intlConfigPropNames), filterProps(intl, intlConfigPropNames)));
	}
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	// Inspired by react-redux's `connect()` HOC factory function implementation:
	// https://github.com/rackt/react-redux
	
	function getDisplayName(Component) {
	    return Component.displayName || Component.name || 'Component';
	}
	
	function injectIntl(WrappedComponent) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var _options$intlPropName = options.intlPropName;
	    var intlPropName = _options$intlPropName === undefined ? 'intl' : _options$intlPropName;
	    var _options$withRef = options.withRef;
	    var withRef = _options$withRef === undefined ? false : _options$withRef;
	
	    var InjectIntl = function (_Component) {
	        inherits(InjectIntl, _Component);
	
	        function InjectIntl(props, context) {
	            classCallCheck(this, InjectIntl);
	
	            var _this = possibleConstructorReturn(this, (InjectIntl.__proto__ || Object.getPrototypeOf(InjectIntl)).call(this, props, context));
	
	            invariantIntlContext(context);
	            return _this;
	        }
	
	        createClass(InjectIntl, [{
	            key: 'getWrappedInstance',
	            value: function getWrappedInstance() {
	                invariant(withRef, '[React Intl] To access the wrapped instance, ' + 'the `{withRef: true}` option must be set when calling: ' + '`injectIntl()`');
	
	                return this.refs.wrappedInstance;
	            }
	        }, {
	            key: 'render',
	            value: function render() {
	                return React__default.createElement(WrappedComponent, babelHelpers$1['extends']({}, this.props, defineProperty({}, intlPropName, this.context.intl), {
	                    ref: withRef ? 'wrappedInstance' : null
	                }));
	            }
	        }]);
	        return InjectIntl;
	    }(React.Component);
	
	    InjectIntl.displayName = 'InjectIntl(' + getDisplayName(WrappedComponent) + ')';
	
	    InjectIntl.contextTypes = {
	        intl: intlShape
	    };
	
	    InjectIntl.WrappedComponent = WrappedComponent;
	
	    return InjectIntl;
	}
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	function defineMessages(messageDescriptors) {
	  // This simply returns what's passed-in because it's meant to be a hook for
	  // babel-plugin-react-intl.
	  return messageDescriptors;
	}
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	// This is a "hack" until a proper `intl-pluralformat` package is created.
	
	function resolveLocale(locales) {
	    // IntlMessageFormat#_resolveLocale() does not depend on `this`.
	    return IntlMessageFormat.prototype._resolveLocale(locales);
	}
	
	function findPluralFunction(locale) {
	    // IntlMessageFormat#_findPluralFunction() does not depend on `this`.
	    return IntlMessageFormat.prototype._findPluralRuleFunction(locale);
	}
	
	var IntlPluralFormat = function IntlPluralFormat(locales) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    classCallCheck(this, IntlPluralFormat);
	
	    var useOrdinal = options.style === 'ordinal';
	    var pluralFn = findPluralFunction(resolveLocale(locales));
	
	    this.format = function (value) {
	        return pluralFn(value, useOrdinal);
	    };
	};
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var DATE_TIME_FORMAT_OPTIONS = Object.keys(dateTimeFormatPropTypes);
	var NUMBER_FORMAT_OPTIONS = Object.keys(numberFormatPropTypes);
	var RELATIVE_FORMAT_OPTIONS = Object.keys(relativeFormatPropTypes);
	var PLURAL_FORMAT_OPTIONS = Object.keys(pluralFormatPropTypes);
	
	var RELATIVE_FORMAT_THRESHOLDS = {
	    second: 60, // seconds to minute
	    minute: 60, // minutes to hour
	    hour: 24, // hours to day
	    day: 30, // days to month
	    month: 12 };
	
	function updateRelativeFormatThresholds(newThresholds) {
	    var thresholds = IntlRelativeFormat.thresholds;
	    thresholds.second = newThresholds.second;
	    thresholds.minute = newThresholds.minute;
	    thresholds.hour = newThresholds.hour;
	    thresholds.day = newThresholds.day;
	    thresholds.month = newThresholds.month;
	}
	
	function getNamedFormat(formats, type, name) {
	    var format = formats && formats[type] && formats[type][name];
	    if (format) {
	        return format;
	    }
	
	    if (true) {
	        console.error('[React Intl] No ' + type + ' format named: ' + name);
	    }
	}
	
	function formatDate(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var format = options.format;
	
	
	    var date = new Date(value);
	    var defaults = format && getNamedFormat(formats, 'date', format);
	    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);
	
	    try {
	        return state.getDateTimeFormat(locale, filteredOptions).format(date);
	    } catch (e) {
	        if (true) {
	            console.error('[React Intl] Error formatting date.\n' + e);
	        }
	    }
	
	    return String(date);
	}
	
	function formatTime(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var format = options.format;
	
	
	    var date = new Date(value);
	    var defaults = format && getNamedFormat(formats, 'time', format);
	    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);
	
	    if (!filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {
	        // Add default formatting options if hour, minute, or second isn't defined.
	        filteredOptions = babelHelpers$1['extends']({}, filteredOptions, { hour: 'numeric', minute: 'numeric' });
	    }
	
	    try {
	        return state.getDateTimeFormat(locale, filteredOptions).format(date);
	    } catch (e) {
	        if (true) {
	            console.error('[React Intl] Error formatting time.\n' + e);
	        }
	    }
	
	    return String(date);
	}
	
	function formatRelative(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var format = options.format;
	
	
	    var date = new Date(value);
	    var now = new Date(options.now);
	    var defaults = format && getNamedFormat(formats, 'relative', format);
	    var filteredOptions = filterProps(options, RELATIVE_FORMAT_OPTIONS, defaults);
	
	    // Capture the current threshold values, then temporarily override them with
	    // specific values just for this render.
	    var oldThresholds = babelHelpers$1['extends']({}, IntlRelativeFormat.thresholds);
	    updateRelativeFormatThresholds(RELATIVE_FORMAT_THRESHOLDS);
	
	    try {
	        return state.getRelativeFormat(locale, filteredOptions).format(date, {
	            now: isFinite(now) ? now : state.now()
	        });
	    } catch (e) {
	        if (true) {
	            console.error('[React Intl] Error formatting relative time.\n' + e);
	        }
	    } finally {
	        updateRelativeFormatThresholds(oldThresholds);
	    }
	
	    return String(date);
	}
	
	function formatNumber(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var format = options.format;
	
	
	    var defaults = format && getNamedFormat(formats, 'number', format);
	    var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);
	
	    try {
	        return state.getNumberFormat(locale, filteredOptions).format(value);
	    } catch (e) {
	        if (true) {
	            console.error('[React Intl] Error formatting number.\n' + e);
	        }
	    }
	
	    return String(value);
	}
	
	function formatPlural(config, state, value) {
	    var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	
	
	    var filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);
	
	    try {
	        return state.getPluralFormat(locale, filteredOptions).format(value);
	    } catch (e) {
	        if (true) {
	            console.error('[React Intl] Error formatting plural.\n' + e);
	        }
	    }
	
	    return 'other';
	}
	
	function formatMessage(config, state) {
	    var messageDescriptor = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	    var values = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var locale = config.locale;
	    var formats = config.formats;
	    var messages = config.messages;
	    var defaultLocale = config.defaultLocale;
	    var defaultFormats = config.defaultFormats;
	    var id = messageDescriptor.id;
	    var defaultMessage = messageDescriptor.defaultMessage;
	
	    // `id` is a required field of a Message Descriptor.
	
	    invariant(id, '[React Intl] An `id` must be provided to format a message.');
	
	    var message = messages && messages[id];
	    var hasValues = Object.keys(values).length > 0;
	
	    // Avoid expensive message formatting for simple messages without values. In
	    // development messages will always be formatted in case of missing values.
	    if (!hasValues && ("standalone") === 'production') {
	        return message || defaultMessage || id;
	    }
	
	    var formattedMessage = void 0;
	
	    if (message) {
	        try {
	            var formatter = state.getMessageFormat(message, locale, formats);
	
	            formattedMessage = formatter.format(values);
	        } catch (e) {
	            if (true) {
	                console.error('[React Intl] Error formatting message: "' + id + '" for locale: "' + locale + '"' + (defaultMessage ? ', using default message as fallback.' : '') + ('\n' + e));
	            }
	        }
	    } else {
	        if (true) {
	            // This prevents warnings from littering the console in development
	            // when no `messages` are passed into the <IntlProvider> for the
	            // default locale, and a default message is in the source.
	            if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {
	
	                console.error('[React Intl] Missing message: "' + id + '" for locale: "' + locale + '"' + (defaultMessage ? ', using default message as fallback.' : ''));
	            }
	        }
	    }
	
	    if (!formattedMessage && defaultMessage) {
	        try {
	            var _formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);
	
	            formattedMessage = _formatter.format(values);
	        } catch (e) {
	            if (true) {
	                console.error('[React Intl] Error formatting the default message for: "' + id + '"' + ('\n' + e));
	            }
	        }
	    }
	
	    if (!formattedMessage) {
	        if (true) {
	            console.error('[React Intl] Cannot format message: "' + id + '", ' + ('using message ' + (message || defaultMessage ? 'source' : 'id') + ' as fallback.'));
	        }
	    }
	
	    return formattedMessage || message || defaultMessage || id;
	}
	
	function formatHTMLMessage(config, state, messageDescriptor) {
	    var rawValues = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	
	    // Process all the values before they are used when formatting the ICU
	    // Message string. Since the formatted message might be injected via
	    // `innerHTML`, all String-based values need to be HTML-escaped.
	    var escapedValues = Object.keys(rawValues).reduce(function (escaped, name) {
	        var value = rawValues[name];
	        escaped[name] = typeof value === 'string' ? escape(value) : value;
	        return escaped;
	    }, {});
	
	    return formatMessage(config, state, messageDescriptor, escapedValues);
	}
	
	
	
	var format = Object.freeze({
	    formatDate: formatDate,
	    formatTime: formatTime,
	    formatRelative: formatRelative,
	    formatNumber: formatNumber,
	    formatPlural: formatPlural,
	    formatMessage: formatMessage,
	    formatHTMLMessage: formatHTMLMessage
	});
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var intlConfigPropNames$1 = Object.keys(intlConfigPropTypes);
	var intlFormatPropNames = Object.keys(intlFormatPropTypes);
	
	// These are not a static property on the `IntlProvider` class so the intl
	// config values can be inherited from an <IntlProvider> ancestor.
	var defaultProps = {
	    formats: {},
	    messages: {},
	
	    defaultLocale: 'en',
	    defaultFormats: {}
	};
	
	var IntlProvider = function (_Component) {
	    inherits(IntlProvider, _Component);
	
	    function IntlProvider(props, context) {
	        classCallCheck(this, IntlProvider);
	
	        var _this = possibleConstructorReturn(this, (IntlProvider.__proto__ || Object.getPrototypeOf(IntlProvider)).call(this, props, context));
	
	        invariant(typeof Intl !== 'undefined', '[React Intl] The `Intl` APIs must be available in the runtime, ' + 'and do not appear to be built-in. An `Intl` polyfill should be loaded.\n' + 'See: http://formatjs.io/guides/runtime-environments/');
	
	        var intlContext = context.intl;
	
	        // Used to stabilize time when performing an initial rendering so that
	        // all relative times use the same reference "now" time.
	
	        var initialNow = void 0;
	        if (isFinite(props.initialNow)) {
	            initialNow = Number(props.initialNow);
	        } else {
	            // When an `initialNow` isn't provided via `props`, look to see an
	            // <IntlProvider> exists in the ancestry and call its `now()`
	            // function to propagate its value for "now".
	            initialNow = intlContext ? intlContext.now() : Date.now();
	        }
	
	        // Creating `Intl*` formatters is expensive. If there's a parent
	        // `<IntlProvider>`, then its formatters will be used. Otherwise, this
	        // memoize the `Intl*` constructors and cache them for the lifecycle of
	        // this IntlProvider instance.
	
	        var _ref = intlContext || {};
	
	        var _ref$formatters = _ref.formatters;
	        var formatters = _ref$formatters === undefined ? {
	            getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat),
	            getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat),
	            getMessageFormat: memoizeIntlConstructor(IntlMessageFormat),
	            getRelativeFormat: memoizeIntlConstructor(IntlRelativeFormat),
	            getPluralFormat: memoizeIntlConstructor(IntlPluralFormat)
	        } : _ref$formatters;
	
	
	        _this.state = babelHelpers$1['extends']({}, formatters, {
	
	            // Wrapper to provide stable "now" time for initial render.
	            now: function now() {
	                return _this._didDisplay ? Date.now() : initialNow;
	            }
	        });
	        return _this;
	    }
	
	    createClass(IntlProvider, [{
	        key: 'getConfig',
	        value: function getConfig() {
	            var intlContext = this.context.intl;
	
	            // Build a whitelisted config object from `props`, defaults, and
	            // `context.intl`, if an <IntlProvider> exists in the ancestry.
	
	            var config = filterProps(this.props, intlConfigPropNames$1, intlContext);
	
	            // Apply default props. This must be applied last after the props have
	            // been resolved and inherited from any <IntlProvider> in the ancestry.
	            // This matches how React resolves `defaultProps`.
	            for (var propName in defaultProps) {
	                if (config[propName] === undefined) {
	                    config[propName] = defaultProps[propName];
	                }
	            }
	
	            if (!hasLocaleData(config.locale)) {
	                var _config = config;
	                var locale = _config.locale;
	                var defaultLocale = _config.defaultLocale;
	                var defaultFormats = _config.defaultFormats;
	
	
	                if (true) {
	                    console.error('[React Intl] Missing locale data for locale: "' + locale + '". ' + ('Using default locale: "' + defaultLocale + '" as fallback.'));
	                }
	
	                // Since there's no registered locale data for `locale`, this will
	                // fallback to the `defaultLocale` to make sure things can render.
	                // The `messages` are overridden to the `defaultProps` empty object
	                // to maintain referential equality across re-renders. It's assumed
	                // each <FormattedMessage> contains a `defaultMessage` prop.
	                config = babelHelpers$1['extends']({}, config, {
	                    locale: defaultLocale,
	                    formats: defaultFormats,
	                    messages: defaultProps.messages
	                });
	            }
	
	            return config;
	        }
	    }, {
	        key: 'getBoundFormatFns',
	        value: function getBoundFormatFns(config, state) {
	            return intlFormatPropNames.reduce(function (boundFormatFns, name) {
	                boundFormatFns[name] = format[name].bind(null, config, state);
	                return boundFormatFns;
	            }, {});
	        }
	    }, {
	        key: 'getChildContext',
	        value: function getChildContext() {
	            var config = this.getConfig();
	
	            // Bind intl factories and current config to the format functions.
	            var boundFormatFns = this.getBoundFormatFns(config, this.state);
	
	            var _state = this.state;
	            var now = _state.now;
	            var formatters = objectWithoutProperties(_state, ['now']);
	
	
	            return {
	                intl: babelHelpers$1['extends']({}, config, boundFormatFns, {
	                    formatters: formatters,
	                    now: now
	                })
	            };
	        }
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }
	
	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this._didDisplay = true;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.Children.only(this.props.children);
	        }
	    }]);
	    return IntlProvider;
	}(React.Component);
	
	IntlProvider.displayName = 'IntlProvider';
	
	IntlProvider.contextTypes = {
	    intl: intlShape
	};
	
	IntlProvider.childContextTypes = {
	    intl: intlShape.isRequired
	};
	
	IntlProvider.propTypes = babelHelpers$1['extends']({}, intlConfigPropTypes, {
	    children: React.PropTypes.element.isRequired,
	    initialNow: React.PropTypes.any
	});
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var FormattedDate = function (_Component) {
	    inherits(FormattedDate, _Component);
	
	    function FormattedDate(props, context) {
	        classCallCheck(this, FormattedDate);
	
	        var _this = possibleConstructorReturn(this, (FormattedDate.__proto__ || Object.getPrototypeOf(FormattedDate)).call(this, props, context));
	
	        invariantIntlContext(context);
	        return _this;
	    }
	
	    createClass(FormattedDate, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }
	
	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatDate = this.context.intl.formatDate;
	            var _props = this.props;
	            var value = _props.value;
	            var children = _props.children;
	
	
	            var formattedDate = formatDate(value, this.props);
	
	            if (typeof children === 'function') {
	                return children(formattedDate);
	            }
	
	            return React__default.createElement(
	                'span',
	                null,
	                formattedDate
	            );
	        }
	    }]);
	    return FormattedDate;
	}(React.Component);
	
	FormattedDate.displayName = 'FormattedDate';
	
	FormattedDate.contextTypes = {
	    intl: intlShape
	};
	
	FormattedDate.propTypes = babelHelpers$1['extends']({}, dateTimeFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	    format: React.PropTypes.string,
	    children: React.PropTypes.func
	});
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var FormattedTime = function (_Component) {
	    inherits(FormattedTime, _Component);
	
	    function FormattedTime(props, context) {
	        classCallCheck(this, FormattedTime);
	
	        var _this = possibleConstructorReturn(this, (FormattedTime.__proto__ || Object.getPrototypeOf(FormattedTime)).call(this, props, context));
	
	        invariantIntlContext(context);
	        return _this;
	    }
	
	    createClass(FormattedTime, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }
	
	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatTime = this.context.intl.formatTime;
	            var _props = this.props;
	            var value = _props.value;
	            var children = _props.children;
	
	
	            var formattedTime = formatTime(value, this.props);
	
	            if (typeof children === 'function') {
	                return children(formattedTime);
	            }
	
	            return React__default.createElement(
	                'span',
	                null,
	                formattedTime
	            );
	        }
	    }]);
	    return FormattedTime;
	}(React.Component);
	
	FormattedTime.displayName = 'FormattedTime';
	
	FormattedTime.contextTypes = {
	    intl: intlShape
	};
	
	FormattedTime.propTypes = babelHelpers$1['extends']({}, dateTimeFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	    format: React.PropTypes.string,
	    children: React.PropTypes.func
	});
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var SECOND = 1000;
	var MINUTE = 1000 * 60;
	var HOUR = 1000 * 60 * 60;
	var DAY = 1000 * 60 * 60 * 24;
	
	// The maximum timer delay value is a 32-bit signed integer.
	// See: https://mdn.io/setTimeout
	var MAX_TIMER_DELAY = 2147483647;
	
	function selectUnits(delta) {
	    var absDelta = Math.abs(delta);
	
	    if (absDelta < MINUTE) {
	        return 'second';
	    }
	
	    if (absDelta < HOUR) {
	        return 'minute';
	    }
	
	    if (absDelta < DAY) {
	        return 'hour';
	    }
	
	    // The maximum scheduled delay will be measured in days since the maximum
	    // timer delay is less than the number of milliseconds in 25 days.
	    return 'day';
	}
	
	function getUnitDelay(units) {
	    switch (units) {
	        case 'second':
	            return SECOND;
	        case 'minute':
	            return MINUTE;
	        case 'hour':
	            return HOUR;
	        case 'day':
	            return DAY;
	        default:
	            return MAX_TIMER_DELAY;
	    }
	}
	
	function isSameDate(a, b) {
	    if (a === b) {
	        return true;
	    }
	
	    var aTime = new Date(a).getTime();
	    var bTime = new Date(b).getTime();
	
	    return isFinite(aTime) && isFinite(bTime) && aTime === bTime;
	}
	
	var FormattedRelative = function (_Component) {
	    inherits(FormattedRelative, _Component);
	
	    function FormattedRelative(props, context) {
	        classCallCheck(this, FormattedRelative);
	
	        var _this = possibleConstructorReturn(this, (FormattedRelative.__proto__ || Object.getPrototypeOf(FormattedRelative)).call(this, props, context));
	
	        invariantIntlContext(context);
	
	        var now = isFinite(props.initialNow) ? Number(props.initialNow) : context.intl.now();
	
	        // `now` is stored as state so that `render()` remains a function of
	        // props + state, instead of accessing `Date.now()` inside `render()`.
	        _this.state = { now: now };
	        return _this;
	    }
	
	    createClass(FormattedRelative, [{
	        key: 'scheduleNextUpdate',
	        value: function scheduleNextUpdate(props, state) {
	            var _this2 = this;
	
	            var updateInterval = props.updateInterval;
	
	            // If the `updateInterval` is falsy, including `0`, then auto updates
	            // have been turned off, so we bail and skip scheduling an update.
	
	            if (!updateInterval) {
	                return;
	            }
	
	            var time = new Date(props.value).getTime();
	            var delta = time - state.now;
	            var units = props.units || selectUnits(delta);
	
	            var unitDelay = getUnitDelay(units);
	            var unitRemainder = Math.abs(delta % unitDelay);
	
	            // We want the largest possible timer delay which will still display
	            // accurate information while reducing unnecessary re-renders. The delay
	            // should be until the next "interesting" moment, like a tick from
	            // "1 minute ago" to "2 minutes ago" when the delta is 120,000ms.
	            var delay = delta < 0 ? Math.max(updateInterval, unitDelay - unitRemainder) : Math.max(updateInterval, unitRemainder);
	
	            clearTimeout(this._timer);
	
	            this._timer = setTimeout(function () {
	                _this2.setState({ now: _this2.context.intl.now() });
	            }, delay);
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.scheduleNextUpdate(this.props, this.state);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(_ref) {
	            var nextValue = _ref.value;
	
	            // When the `props.value` date changes, `state.now` needs to be updated,
	            // and the next update can be rescheduled.
	            if (!isSameDate(nextValue, this.props.value)) {
	                this.setState({ now: this.context.intl.now() });
	            }
	        }
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }
	
	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'componentWillUpdate',
	        value: function componentWillUpdate(nextProps, nextState) {
	            this.scheduleNextUpdate(nextProps, nextState);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            clearTimeout(this._timer);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatRelative = this.context.intl.formatRelative;
	            var _props = this.props;
	            var value = _props.value;
	            var children = _props.children;
	
	
	            var formattedRelative = formatRelative(value, babelHelpers$1['extends']({}, this.props, this.state));
	
	            if (typeof children === 'function') {
	                return children(formattedRelative);
	            }
	
	            return React__default.createElement(
	                'span',
	                null,
	                formattedRelative
	            );
	        }
	    }]);
	    return FormattedRelative;
	}(React.Component);
	
	FormattedRelative.displayName = 'FormattedRelative';
	
	FormattedRelative.contextTypes = {
	    intl: intlShape
	};
	
	FormattedRelative.propTypes = babelHelpers$1['extends']({}, relativeFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	    format: React.PropTypes.string,
	    updateInterval: React.PropTypes.number,
	    initialNow: React.PropTypes.any,
	    children: React.PropTypes.func
	});
	
	FormattedRelative.defaultProps = {
	    updateInterval: 1000 * 10
	};
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var FormattedNumber = function (_Component) {
	    inherits(FormattedNumber, _Component);
	
	    function FormattedNumber(props, context) {
	        classCallCheck(this, FormattedNumber);
	
	        var _this = possibleConstructorReturn(this, (FormattedNumber.__proto__ || Object.getPrototypeOf(FormattedNumber)).call(this, props, context));
	
	        invariantIntlContext(context);
	        return _this;
	    }
	
	    createClass(FormattedNumber, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }
	
	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatNumber = this.context.intl.formatNumber;
	            var _props = this.props;
	            var value = _props.value;
	            var children = _props.children;
	
	
	            var formattedNumber = formatNumber(value, this.props);
	
	            if (typeof children === 'function') {
	                return children(formattedNumber);
	            }
	
	            return React__default.createElement(
	                'span',
	                null,
	                formattedNumber
	            );
	        }
	    }]);
	    return FormattedNumber;
	}(React.Component);
	
	FormattedNumber.displayName = 'FormattedNumber';
	
	FormattedNumber.contextTypes = {
	    intl: intlShape
	};
	
	FormattedNumber.propTypes = babelHelpers$1['extends']({}, numberFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	    format: React.PropTypes.string,
	    children: React.PropTypes.func
	});
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var FormattedPlural = function (_Component) {
	    inherits(FormattedPlural, _Component);
	
	    function FormattedPlural(props, context) {
	        classCallCheck(this, FormattedPlural);
	
	        var _this = possibleConstructorReturn(this, (FormattedPlural.__proto__ || Object.getPrototypeOf(FormattedPlural)).call(this, props, context));
	
	        invariantIntlContext(context);
	        return _this;
	    }
	
	    createClass(FormattedPlural, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate() {
	            for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	                next[_key] = arguments[_key];
	            }
	
	            return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatPlural = this.context.intl.formatPlural;
	            var _props = this.props;
	            var value = _props.value;
	            var other = _props.other;
	            var children = _props.children;
	
	
	            var pluralCategory = formatPlural(value, this.props);
	            var formattedPlural = this.props[pluralCategory] || other;
	
	            if (typeof children === 'function') {
	                return children(formattedPlural);
	            }
	
	            return React__default.createElement(
	                'span',
	                null,
	                formattedPlural
	            );
	        }
	    }]);
	    return FormattedPlural;
	}(React.Component);
	
	FormattedPlural.displayName = 'FormattedPlural';
	
	FormattedPlural.contextTypes = {
	    intl: intlShape
	};
	
	FormattedPlural.propTypes = babelHelpers$1['extends']({}, pluralFormatPropTypes, {
	    value: React.PropTypes.any.isRequired,
	
	    other: React.PropTypes.node.isRequired,
	    zero: React.PropTypes.node,
	    one: React.PropTypes.node,
	    two: React.PropTypes.node,
	    few: React.PropTypes.node,
	    many: React.PropTypes.node,
	
	    children: React.PropTypes.func
	});
	
	FormattedPlural.defaultProps = {
	    style: 'cardinal'
	};
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var FormattedMessage = function (_Component) {
	    inherits(FormattedMessage, _Component);
	
	    function FormattedMessage(props, context) {
	        classCallCheck(this, FormattedMessage);
	
	        var _this = possibleConstructorReturn(this, (FormattedMessage.__proto__ || Object.getPrototypeOf(FormattedMessage)).call(this, props, context));
	
	        invariantIntlContext(context);
	        return _this;
	    }
	
	    createClass(FormattedMessage, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps) {
	            var values = this.props.values;
	            var nextValues = nextProps.values;
	
	
	            if (!shallowEquals(nextValues, values)) {
	                return true;
	            }
	
	            // Since `values` has already been checked, we know they're not
	            // different, so the current `values` are carried over so the shallow
	            // equals comparison on the other props isn't affected by the `values`.
	            var nextPropsToCheck = babelHelpers$1['extends']({}, nextProps, {
	                values: values
	            });
	
	            for (var _len = arguments.length, next = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                next[_key - 1] = arguments[_key];
	            }
	
	            return shouldIntlComponentUpdate.apply(undefined, [this, nextPropsToCheck].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatMessage = this.context.intl.formatMessage;
	            var _props = this.props;
	            var id = _props.id;
	            var description = _props.description;
	            var defaultMessage = _props.defaultMessage;
	            var values = _props.values;
	            var tagName = _props.tagName;
	            var children = _props.children;
	
	
	            var tokenDelimiter = void 0;
	            var tokenizedValues = void 0;
	            var elements = void 0;
	
	            var hasValues = values && Object.keys(values).length > 0;
	            if (hasValues) {
	                (function () {
	                    // Creates a token with a random UID that should not be guessable or
	                    // conflict with other parts of the `message` string.
	                    var uid = Math.floor(Math.random() * 0x10000000000).toString(16);
	
	                    var generateToken = function () {
	                        var counter = 0;
	                        return function () {
	                            return 'ELEMENT-' + uid + '-' + (counter += 1);
	                        };
	                    }();
	
	                    // Splitting with a delimiter to support IE8. When using a regex
	                    // with a capture group IE8 does not include the capture group in
	                    // the resulting array.
	                    tokenDelimiter = '@__' + uid + '__@';
	                    tokenizedValues = {};
	                    elements = {};
	
	                    // Iterates over the `props` to keep track of any React Element
	                    // values so they can be represented by the `token` as a placeholder
	                    // when the `message` is formatted. This allows the formatted
	                    // message to then be broken-up into parts with references to the
	                    // React Elements inserted back in.
	                    Object.keys(values).forEach(function (name) {
	                        var value = values[name];
	
	                        if (React.isValidElement(value)) {
	                            var token = generateToken();
	                            tokenizedValues[name] = tokenDelimiter + token + tokenDelimiter;
	                            elements[token] = value;
	                        } else {
	                            tokenizedValues[name] = value;
	                        }
	                    });
	                })();
	            }
	
	            var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
	            var formattedMessage = formatMessage(descriptor, tokenizedValues || values);
	
	            var nodes = void 0;
	
	            var hasElements = elements && Object.keys(elements).length > 0;
	            if (hasElements) {
	                // Split the message into parts so the React Element values captured
	                // above can be inserted back into the rendered message. This
	                // approach allows messages to render with React Elements while
	                // keeping React's virtual diffing working properly.
	                nodes = formattedMessage.split(tokenDelimiter).filter(function (part) {
	                    return !!part;
	                }).map(function (part) {
	                    return elements[part] || part;
	                });
	            } else {
	                nodes = [formattedMessage];
	            }
	
	            if (typeof children === 'function') {
	                return children.apply(undefined, toConsumableArray(nodes));
	            }
	
	            return React.createElement.apply(undefined, [tagName, null].concat(toConsumableArray(nodes)));
	        }
	    }]);
	    return FormattedMessage;
	}(React.Component);
	
	FormattedMessage.displayName = 'FormattedMessage';
	
	FormattedMessage.contextTypes = {
	    intl: intlShape
	};
	
	FormattedMessage.propTypes = babelHelpers$1['extends']({}, messageDescriptorPropTypes, {
	    values: React.PropTypes.object,
	    tagName: React.PropTypes.string,
	    children: React.PropTypes.func
	});
	
	FormattedMessage.defaultProps = {
	    values: {},
	    tagName: 'span'
	};
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	var FormattedHTMLMessage = function (_Component) {
	    inherits(FormattedHTMLMessage, _Component);
	
	    function FormattedHTMLMessage(props, context) {
	        classCallCheck(this, FormattedHTMLMessage);
	
	        var _this = possibleConstructorReturn(this, (FormattedHTMLMessage.__proto__ || Object.getPrototypeOf(FormattedHTMLMessage)).call(this, props, context));
	
	        invariantIntlContext(context);
	        return _this;
	    }
	
	    createClass(FormattedHTMLMessage, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps) {
	            var values = this.props.values;
	            var nextValues = nextProps.values;
	
	
	            if (!shallowEquals(nextValues, values)) {
	                return true;
	            }
	
	            // Since `values` has already been checked, we know they're not
	            // different, so the current `values` are carried over so the shallow
	            // equals comparison on the other props isn't affected by the `values`.
	            var nextPropsToCheck = babelHelpers$1['extends']({}, nextProps, {
	                values: values
	            });
	
	            for (var _len = arguments.length, next = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                next[_key - 1] = arguments[_key];
	            }
	
	            return shouldIntlComponentUpdate.apply(undefined, [this, nextPropsToCheck].concat(next));
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var formatHTMLMessage = this.context.intl.formatHTMLMessage;
	            var _props = this.props;
	            var id = _props.id;
	            var description = _props.description;
	            var defaultMessage = _props.defaultMessage;
	            var rawValues = _props.values;
	            var tagName = _props.tagName;
	            var children = _props.children;
	
	
	            var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
	            var formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);
	
	            if (typeof children === 'function') {
	                return children(formattedHTMLMessage);
	            }
	
	            // Since the message presumably has HTML in it, we need to set
	            // `innerHTML` in order for it to be rendered and not escaped by React.
	            // To be safe, all string prop values were escaped when formatting the
	            // message. It is assumed that the message is not UGC, and came from the
	            // developer making it more like a template.
	            //
	            // Note: There's a perf impact of using this component since there's no
	            // way for React to do its virtual DOM diffing.
	            return React.createElement(tagName, {
	                dangerouslySetInnerHTML: {
	                    __html: formattedHTMLMessage
	                }
	            });
	        }
	    }]);
	    return FormattedHTMLMessage;
	}(React.Component);
	
	FormattedHTMLMessage.displayName = 'FormattedHTMLMessage';
	
	FormattedHTMLMessage.contextTypes = {
	    intl: intlShape
	};
	
	FormattedHTMLMessage.propTypes = babelHelpers$1['extends']({}, messageDescriptorPropTypes, {
	    values: React.PropTypes.object,
	    tagName: React.PropTypes.string,
	    children: React.PropTypes.func
	});
	
	FormattedHTMLMessage.defaultProps = {
	    values: {},
	    tagName: 'span'
	};
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	addLocaleData(defaultLocaleData);
	
	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */
	
	addLocaleData(allLocaleData);
	
	exports.addLocaleData = addLocaleData;
	exports.intlShape = intlShape;
	exports.injectIntl = injectIntl;
	exports.defineMessages = defineMessages;
	exports.IntlProvider = IntlProvider;
	exports.FormattedDate = FormattedDate;
	exports.FormattedTime = FormattedTime;
	exports.FormattedRelative = FormattedRelative;
	exports.FormattedNumber = FormattedNumber;
	exports.FormattedPlural = FormattedPlural;
	exports.FormattedMessage = FormattedMessage;
	exports.FormattedHTMLMessage = FormattedHTMLMessage;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 573 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint node:true */
	
	'use strict';
	
	var IntlMessageFormat = __webpack_require__(575)['default'];
	
	// Add all locale data to `IntlMessageFormat`. This module will be ignored when
	// bundling for the browser with Browserify/Webpack.
	__webpack_require__(583);
	
	// Re-export `IntlMessageFormat` as the CommonJS default exports with all the
	// locale data registered, and with English set as the default locale. Define
	// the `default` prop for use with other compiled ES6 Modules.
	exports = module.exports = IntlMessageFormat;
	exports['default'] = exports;


/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint esnext: true */
	
	"use strict";
	var src$core$$ = __webpack_require__(576), src$en$$ = __webpack_require__(582);
	
	src$core$$["default"].__addLocaleData(src$en$$["default"]);
	src$core$$["default"].defaultLocale = 'en';
	
	exports["default"] = src$core$$["default"];
	
	//# sourceMappingURL=main.js.map

/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/
	
	/* jslint esnext: true */
	
	"use strict";
	var src$utils$$ = __webpack_require__(577), src$es5$$ = __webpack_require__(578), src$compiler$$ = __webpack_require__(579), intl$messageformat$parser$$ = __webpack_require__(580);
	exports["default"] = MessageFormat;
	
	// -- MessageFormat --------------------------------------------------------
	
	function MessageFormat(message, locales, formats) {
	    // Parse string messages into an AST.
	    var ast = typeof message === 'string' ?
	            MessageFormat.__parse(message) : message;
	
	    if (!(ast && ast.type === 'messageFormatPattern')) {
	        throw new TypeError('A message must be provided as a String or AST.');
	    }
	
	    // Creates a new object with the specified `formats` merged with the default
	    // formats.
	    formats = this._mergeFormats(MessageFormat.formats, formats);
	
	    // Defined first because it's used to build the format pattern.
	    src$es5$$.defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});
	
	    // Compile the `ast` to a pattern that is highly optimized for repeated
	    // `format()` invocations. **Note:** This passes the `locales` set provided
	    // to the constructor instead of just the resolved locale.
	    var pluralFn = this._findPluralRuleFunction(this._locale);
	    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);
	
	    // "Bind" `format()` method to `this` so it can be passed by reference like
	    // the other `Intl` APIs.
	    var messageFormat = this;
	    this.format = function (values) {
	        return messageFormat._format(pattern, values);
	    };
	}
	
	// Default format options used as the prototype of the `formats` provided to the
	// constructor. These are used when constructing the internal Intl.NumberFormat
	// and Intl.DateTimeFormat instances.
	src$es5$$.defineProperty(MessageFormat, 'formats', {
	    enumerable: true,
	
	    value: {
	        number: {
	            'currency': {
	                style: 'currency'
	            },
	
	            'percent': {
	                style: 'percent'
	            }
	        },
	
	        date: {
	            'short': {
	                month: 'numeric',
	                day  : 'numeric',
	                year : '2-digit'
	            },
	
	            'medium': {
	                month: 'short',
	                day  : 'numeric',
	                year : 'numeric'
	            },
	
	            'long': {
	                month: 'long',
	                day  : 'numeric',
	                year : 'numeric'
	            },
	
	            'full': {
	                weekday: 'long',
	                month  : 'long',
	                day    : 'numeric',
	                year   : 'numeric'
	            }
	        },
	
	        time: {
	            'short': {
	                hour  : 'numeric',
	                minute: 'numeric'
	            },
	
	            'medium':  {
	                hour  : 'numeric',
	                minute: 'numeric',
	                second: 'numeric'
	            },
	
	            'long': {
	                hour        : 'numeric',
	                minute      : 'numeric',
	                second      : 'numeric',
	                timeZoneName: 'short'
	            },
	
	            'full': {
	                hour        : 'numeric',
	                minute      : 'numeric',
	                second      : 'numeric',
	                timeZoneName: 'short'
	            }
	        }
	    }
	});
	
	// Define internal private properties for dealing with locale data.
	src$es5$$.defineProperty(MessageFormat, '__localeData__', {value: src$es5$$.objCreate(null)});
	src$es5$$.defineProperty(MessageFormat, '__addLocaleData', {value: function (data) {
	    if (!(data && data.locale)) {
	        throw new Error(
	            'Locale data provided to IntlMessageFormat is missing a ' +
	            '`locale` property'
	        );
	    }
	
	    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;
	}});
	
	// Defines `__parse()` static method as an exposed private.
	src$es5$$.defineProperty(MessageFormat, '__parse', {value: intl$messageformat$parser$$["default"].parse});
	
	// Define public `defaultLocale` property which defaults to English, but can be
	// set by the developer.
	src$es5$$.defineProperty(MessageFormat, 'defaultLocale', {
	    enumerable: true,
	    writable  : true,
	    value     : undefined
	});
	
	MessageFormat.prototype.resolvedOptions = function () {
	    // TODO: Provide anything else?
	    return {
	        locale: this._locale
	    };
	};
	
	MessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {
	    var compiler = new src$compiler$$["default"](locales, formats, pluralFn);
	    return compiler.compile(ast);
	};
	
	MessageFormat.prototype._findPluralRuleFunction = function (locale) {
	    var localeData = MessageFormat.__localeData__;
	    var data       = localeData[locale.toLowerCase()];
	
	    // The locale data is de-duplicated, so we have to traverse the locale's
	    // hierarchy until we find a `pluralRuleFunction` to return.
	    while (data) {
	        if (data.pluralRuleFunction) {
	            return data.pluralRuleFunction;
	        }
	
	        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];
	    }
	
	    throw new Error(
	        'Locale data added to IntlMessageFormat is missing a ' +
	        '`pluralRuleFunction` for :' + locale
	    );
	};
	
	MessageFormat.prototype._format = function (pattern, values) {
	    var result = '',
	        i, len, part, id, value;
	
	    for (i = 0, len = pattern.length; i < len; i += 1) {
	        part = pattern[i];
	
	        // Exist early for string parts.
	        if (typeof part === 'string') {
	            result += part;
	            continue;
	        }
	
	        id = part.id;
	
	        // Enforce that all required values are provided by the caller.
	        if (!(values && src$utils$$.hop.call(values, id))) {
	            throw new Error('A value must be provided for: ' + id);
	        }
	
	        value = values[id];
	
	        // Recursively format plural and select parts' option — which can be a
	        // nested pattern structure. The choosing of the option to use is
	        // abstracted-by and delegated-to the part helper object.
	        if (part.options) {
	            result += this._format(part.getOption(value), values);
	        } else {
	            result += part.format(value);
	        }
	    }
	
	    return result;
	};
	
	MessageFormat.prototype._mergeFormats = function (defaults, formats) {
	    var mergedFormats = {},
	        type, mergedType;
	
	    for (type in defaults) {
	        if (!src$utils$$.hop.call(defaults, type)) { continue; }
	
	        mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);
	
	        if (formats && src$utils$$.hop.call(formats, type)) {
	            src$utils$$.extend(mergedType, formats[type]);
	        }
	    }
	
	    return mergedFormats;
	};
	
	MessageFormat.prototype._resolveLocale = function (locales) {
	    if (typeof locales === 'string') {
	        locales = [locales];
	    }
	
	    // Create a copy of the array so we can push on the default locale.
	    locales = (locales || []).concat(MessageFormat.defaultLocale);
	
	    var localeData = MessageFormat.__localeData__;
	    var i, len, localeParts, data;
	
	    // Using the set of locales + the default locale, we look for the first one
	    // which that has been registered. When data does not exist for a locale, we
	    // traverse its ancestors to find something that's been registered within
	    // its hierarchy of locales. Since we lack the proper `parentLocale` data
	    // here, we must take a naive approach to traversal.
	    for (i = 0, len = locales.length; i < len; i += 1) {
	        localeParts = locales[i].toLowerCase().split('-');
	
	        while (localeParts.length) {
	            data = localeData[localeParts.join('-')];
	            if (data) {
	                // Return the normalized locale string; e.g., we return "en-US",
	                // instead of "en-us".
	                return data.locale;
	            }
	
	            localeParts.pop();
	        }
	    }
	
	    var defaultLocale = locales.pop();
	    throw new Error(
	        'No locale data has been added to IntlMessageFormat for: ' +
	        locales.join(', ') + ', or the default locale: ' + defaultLocale
	    );
	};
	
	//# sourceMappingURL=core.js.map

/***/ },
/* 577 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/
	
	/* jslint esnext: true */
	
	"use strict";
	exports.extend = extend;
	var hop = Object.prototype.hasOwnProperty;
	
	function extend(obj) {
	    var sources = Array.prototype.slice.call(arguments, 1),
	        i, len, source, key;
	
	    for (i = 0, len = sources.length; i < len; i += 1) {
	        source = sources[i];
	        if (!source) { continue; }
	
	        for (key in source) {
	            if (hop.call(source, key)) {
	                obj[key] = source[key];
	            }
	        }
	    }
	
	    return obj;
	}
	exports.hop = hop;
	
	//# sourceMappingURL=utils.js.map

/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/
	
	/* jslint esnext: true */
	
	"use strict";
	var src$utils$$ = __webpack_require__(577);
	
	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License
	
	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();
	
	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;
	
	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {
	
	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!src$utils$$.hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};
	
	var objCreate = Object.create || function (proto, props) {
	    var obj, k;
	
	    function F() {}
	    F.prototype = proto;
	    obj = new F();
	
	    for (k in props) {
	        if (src$utils$$.hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }
	
	    return obj;
	};
	exports.defineProperty = defineProperty, exports.objCreate = objCreate;
	
	//# sourceMappingURL=es5.js.map

/***/ },
/* 579 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/
	
	/* jslint esnext: true */
	
	"use strict";
	exports["default"] = Compiler;
	
	function Compiler(locales, formats, pluralFn) {
	    this.locales  = locales;
	    this.formats  = formats;
	    this.pluralFn = pluralFn;
	}
	
	Compiler.prototype.compile = function (ast) {
	    this.pluralStack        = [];
	    this.currentPlural      = null;
	    this.pluralNumberFormat = null;
	
	    return this.compileMessage(ast);
	};
	
	Compiler.prototype.compileMessage = function (ast) {
	    if (!(ast && ast.type === 'messageFormatPattern')) {
	        throw new Error('Message AST is not of type: "messageFormatPattern"');
	    }
	
	    var elements = ast.elements,
	        pattern  = [];
	
	    var i, len, element;
	
	    for (i = 0, len = elements.length; i < len; i += 1) {
	        element = elements[i];
	
	        switch (element.type) {
	            case 'messageTextElement':
	                pattern.push(this.compileMessageText(element));
	                break;
	
	            case 'argumentElement':
	                pattern.push(this.compileArgument(element));
	                break;
	
	            default:
	                throw new Error('Message element does not have a valid type');
	        }
	    }
	
	    return pattern;
	};
	
	Compiler.prototype.compileMessageText = function (element) {
	    // When this `element` is part of plural sub-pattern and its value contains
	    // an unescaped '#', use a `PluralOffsetString` helper to properly output
	    // the number with the correct offset in the string.
	    if (this.currentPlural && /(^|[^\\])#/g.test(element.value)) {
	        // Create a cache a NumberFormat instance that can be reused for any
	        // PluralOffsetString instance in this message.
	        if (!this.pluralNumberFormat) {
	            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);
	        }
	
	        return new PluralOffsetString(
	                this.currentPlural.id,
	                this.currentPlural.format.offset,
	                this.pluralNumberFormat,
	                element.value);
	    }
	
	    // Unescape the escaped '#'s in the message text.
	    return element.value.replace(/\\#/g, '#');
	};
	
	Compiler.prototype.compileArgument = function (element) {
	    var format = element.format;
	
	    if (!format) {
	        return new StringFormat(element.id);
	    }
	
	    var formats  = this.formats,
	        locales  = this.locales,
	        pluralFn = this.pluralFn,
	        options;
	
	    switch (format.type) {
	        case 'numberFormat':
	            options = formats.number[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.NumberFormat(locales, options).format
	            };
	
	        case 'dateFormat':
	            options = formats.date[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.DateTimeFormat(locales, options).format
	            };
	
	        case 'timeFormat':
	            options = formats.time[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.DateTimeFormat(locales, options).format
	            };
	
	        case 'pluralFormat':
	            options = this.compileOptions(element);
	            return new PluralFormat(
	                element.id, format.ordinal, format.offset, options, pluralFn
	            );
	
	        case 'selectFormat':
	            options = this.compileOptions(element);
	            return new SelectFormat(element.id, options);
	
	        default:
	            throw new Error('Message element does not have a valid format type');
	    }
	};
	
	Compiler.prototype.compileOptions = function (element) {
	    var format      = element.format,
	        options     = format.options,
	        optionsHash = {};
	
	    // Save the current plural element, if any, then set it to a new value when
	    // compiling the options sub-patterns. This conforms the spec's algorithm
	    // for handling `"#"` syntax in message text.
	    this.pluralStack.push(this.currentPlural);
	    this.currentPlural = format.type === 'pluralFormat' ? element : null;
	
	    var i, len, option;
	
	    for (i = 0, len = options.length; i < len; i += 1) {
	        option = options[i];
	
	        // Compile the sub-pattern and save it under the options's selector.
	        optionsHash[option.selector] = this.compileMessage(option.value);
	    }
	
	    // Pop the plural stack to put back the original current plural value.
	    this.currentPlural = this.pluralStack.pop();
	
	    return optionsHash;
	};
	
	// -- Compiler Helper Classes --------------------------------------------------
	
	function StringFormat(id) {
	    this.id = id;
	}
	
	StringFormat.prototype.format = function (value) {
	    if (!value) {
	        return '';
	    }
	
	    return typeof value === 'string' ? value : String(value);
	};
	
	function PluralFormat(id, useOrdinal, offset, options, pluralFn) {
	    this.id         = id;
	    this.useOrdinal = useOrdinal;
	    this.offset     = offset;
	    this.options    = options;
	    this.pluralFn   = pluralFn;
	}
	
	PluralFormat.prototype.getOption = function (value) {
	    var options = this.options;
	
	    var option = options['=' + value] ||
	            options[this.pluralFn(value - this.offset, this.useOrdinal)];
	
	    return option || options.other;
	};
	
	function PluralOffsetString(id, offset, numberFormat, string) {
	    this.id           = id;
	    this.offset       = offset;
	    this.numberFormat = numberFormat;
	    this.string       = string;
	}
	
	PluralOffsetString.prototype.format = function (value) {
	    var number = this.numberFormat.format(value - this.offset);
	
	    return this.string
	            .replace(/(^|[^\\])#/g, '$1' + number)
	            .replace(/\\#/g, '#');
	};
	
	function SelectFormat(id, options) {
	    this.id      = id;
	    this.options = options;
	}
	
	SelectFormat.prototype.getOption = function (value) {
	    var options = this.options;
	    return options[value] || options.other;
	};
	
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports = module.exports = __webpack_require__(581)['default'];
	exports['default'] = exports;


/***/ },
/* 581 */
/***/ function(module, exports) {

	"use strict";
	
	exports["default"] = (function() {
	  /*
	   * Generated by PEG.js 0.8.0.
	   *
	   * http://pegjs.majda.cz/
	   */
	
	  function peg$subclass(child, parent) {
	    function ctor() { this.constructor = child; }
	    ctor.prototype = parent.prototype;
	    child.prototype = new ctor();
	  }
	
	  function SyntaxError(message, expected, found, offset, line, column) {
	    this.message  = message;
	    this.expected = expected;
	    this.found    = found;
	    this.offset   = offset;
	    this.line     = line;
	    this.column   = column;
	
	    this.name     = "SyntaxError";
	  }
	
	  peg$subclass(SyntaxError, Error);
	
	  function parse(input) {
	    var options = arguments.length > 1 ? arguments[1] : {},
	
	        peg$FAILED = {},
	
	        peg$startRuleFunctions = { start: peg$parsestart },
	        peg$startRuleFunction  = peg$parsestart,
	
	        peg$c0 = [],
	        peg$c1 = function(elements) {
	                return {
	                    type    : 'messageFormatPattern',
	                    elements: elements
	                };
	            },
	        peg$c2 = peg$FAILED,
	        peg$c3 = function(text) {
	                var string = '',
	                    i, j, outerLen, inner, innerLen;
	
	                for (i = 0, outerLen = text.length; i < outerLen; i += 1) {
	                    inner = text[i];
	
	                    for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {
	                        string += inner[j];
	                    }
	                }
	
	                return string;
	            },
	        peg$c4 = function(messageText) {
	                return {
	                    type : 'messageTextElement',
	                    value: messageText
	                };
	            },
	        peg$c5 = /^[^ \t\n\r,.+={}#]/,
	        peg$c6 = { type: "class", value: "[^ \\t\\n\\r,.+={}#]", description: "[^ \\t\\n\\r,.+={}#]" },
	        peg$c7 = "{",
	        peg$c8 = { type: "literal", value: "{", description: "\"{\"" },
	        peg$c9 = null,
	        peg$c10 = ",",
	        peg$c11 = { type: "literal", value: ",", description: "\",\"" },
	        peg$c12 = "}",
	        peg$c13 = { type: "literal", value: "}", description: "\"}\"" },
	        peg$c14 = function(id, format) {
	                return {
	                    type  : 'argumentElement',
	                    id    : id,
	                    format: format && format[2]
	                };
	            },
	        peg$c15 = "number",
	        peg$c16 = { type: "literal", value: "number", description: "\"number\"" },
	        peg$c17 = "date",
	        peg$c18 = { type: "literal", value: "date", description: "\"date\"" },
	        peg$c19 = "time",
	        peg$c20 = { type: "literal", value: "time", description: "\"time\"" },
	        peg$c21 = function(type, style) {
	                return {
	                    type : type + 'Format',
	                    style: style && style[2]
	                };
	            },
	        peg$c22 = "plural",
	        peg$c23 = { type: "literal", value: "plural", description: "\"plural\"" },
	        peg$c24 = function(pluralStyle) {
	                return {
	                    type   : pluralStyle.type,
	                    ordinal: false,
	                    offset : pluralStyle.offset || 0,
	                    options: pluralStyle.options
	                };
	            },
	        peg$c25 = "selectordinal",
	        peg$c26 = { type: "literal", value: "selectordinal", description: "\"selectordinal\"" },
	        peg$c27 = function(pluralStyle) {
	                return {
	                    type   : pluralStyle.type,
	                    ordinal: true,
	                    offset : pluralStyle.offset || 0,
	                    options: pluralStyle.options
	                }
	            },
	        peg$c28 = "select",
	        peg$c29 = { type: "literal", value: "select", description: "\"select\"" },
	        peg$c30 = function(options) {
	                return {
	                    type   : 'selectFormat',
	                    options: options
	                };
	            },
	        peg$c31 = "=",
	        peg$c32 = { type: "literal", value: "=", description: "\"=\"" },
	        peg$c33 = function(selector, pattern) {
	                return {
	                    type    : 'optionalFormatPattern',
	                    selector: selector,
	                    value   : pattern
	                };
	            },
	        peg$c34 = "offset:",
	        peg$c35 = { type: "literal", value: "offset:", description: "\"offset:\"" },
	        peg$c36 = function(number) {
	                return number;
	            },
	        peg$c37 = function(offset, options) {
	                return {
	                    type   : 'pluralFormat',
	                    offset : offset,
	                    options: options
	                };
	            },
	        peg$c38 = { type: "other", description: "whitespace" },
	        peg$c39 = /^[ \t\n\r]/,
	        peg$c40 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
	        peg$c41 = { type: "other", description: "optionalWhitespace" },
	        peg$c42 = /^[0-9]/,
	        peg$c43 = { type: "class", value: "[0-9]", description: "[0-9]" },
	        peg$c44 = /^[0-9a-f]/i,
	        peg$c45 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
	        peg$c46 = "0",
	        peg$c47 = { type: "literal", value: "0", description: "\"0\"" },
	        peg$c48 = /^[1-9]/,
	        peg$c49 = { type: "class", value: "[1-9]", description: "[1-9]" },
	        peg$c50 = function(digits) {
	            return parseInt(digits, 10);
	        },
	        peg$c51 = /^[^{}\\\0-\x1F \t\n\r]/,
	        peg$c52 = { type: "class", value: "[^{}\\\\\\0-\\x1F \\t\\n\\r]", description: "[^{}\\\\\\0-\\x1F \\t\\n\\r]" },
	        peg$c53 = "\\\\",
	        peg$c54 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
	        peg$c55 = function() { return '\\'; },
	        peg$c56 = "\\#",
	        peg$c57 = { type: "literal", value: "\\#", description: "\"\\\\#\"" },
	        peg$c58 = function() { return '\\#'; },
	        peg$c59 = "\\{",
	        peg$c60 = { type: "literal", value: "\\{", description: "\"\\\\{\"" },
	        peg$c61 = function() { return '\u007B'; },
	        peg$c62 = "\\}",
	        peg$c63 = { type: "literal", value: "\\}", description: "\"\\\\}\"" },
	        peg$c64 = function() { return '\u007D'; },
	        peg$c65 = "\\u",
	        peg$c66 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
	        peg$c67 = function(digits) {
	                return String.fromCharCode(parseInt(digits, 16));
	            },
	        peg$c68 = function(chars) { return chars.join(''); },
	
	        peg$currPos          = 0,
	        peg$reportedPos      = 0,
	        peg$cachedPos        = 0,
	        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
	        peg$maxFailPos       = 0,
	        peg$maxFailExpected  = [],
	        peg$silentFails      = 0,
	
	        peg$result;
	
	    if ("startRule" in options) {
	      if (!(options.startRule in peg$startRuleFunctions)) {
	        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	      }
	
	      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	    }
	
	    function text() {
	      return input.substring(peg$reportedPos, peg$currPos);
	    }
	
	    function offset() {
	      return peg$reportedPos;
	    }
	
	    function line() {
	      return peg$computePosDetails(peg$reportedPos).line;
	    }
	
	    function column() {
	      return peg$computePosDetails(peg$reportedPos).column;
	    }
	
	    function expected(description) {
	      throw peg$buildException(
	        null,
	        [{ type: "other", description: description }],
	        peg$reportedPos
	      );
	    }
	
	    function error(message) {
	      throw peg$buildException(message, null, peg$reportedPos);
	    }
	
	    function peg$computePosDetails(pos) {
	      function advance(details, startPos, endPos) {
	        var p, ch;
	
	        for (p = startPos; p < endPos; p++) {
	          ch = input.charAt(p);
	          if (ch === "\n") {
	            if (!details.seenCR) { details.line++; }
	            details.column = 1;
	            details.seenCR = false;
	          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
	            details.line++;
	            details.column = 1;
	            details.seenCR = true;
	          } else {
	            details.column++;
	            details.seenCR = false;
	          }
	        }
	      }
	
	      if (peg$cachedPos !== pos) {
	        if (peg$cachedPos > pos) {
	          peg$cachedPos = 0;
	          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
	        }
	        advance(peg$cachedPosDetails, peg$cachedPos, pos);
	        peg$cachedPos = pos;
	      }
	
	      return peg$cachedPosDetails;
	    }
	
	    function peg$fail(expected) {
	      if (peg$currPos < peg$maxFailPos) { return; }
	
	      if (peg$currPos > peg$maxFailPos) {
	        peg$maxFailPos = peg$currPos;
	        peg$maxFailExpected = [];
	      }
	
	      peg$maxFailExpected.push(expected);
	    }
	
	    function peg$buildException(message, expected, pos) {
	      function cleanupExpected(expected) {
	        var i = 1;
	
	        expected.sort(function(a, b) {
	          if (a.description < b.description) {
	            return -1;
	          } else if (a.description > b.description) {
	            return 1;
	          } else {
	            return 0;
	          }
	        });
	
	        while (i < expected.length) {
	          if (expected[i - 1] === expected[i]) {
	            expected.splice(i, 1);
	          } else {
	            i++;
	          }
	        }
	      }
	
	      function buildMessage(expected, found) {
	        function stringEscape(s) {
	          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }
	
	          return s
	            .replace(/\\/g,   '\\\\')
	            .replace(/"/g,    '\\"')
	            .replace(/\x08/g, '\\b')
	            .replace(/\t/g,   '\\t')
	            .replace(/\n/g,   '\\n')
	            .replace(/\f/g,   '\\f')
	            .replace(/\r/g,   '\\r')
	            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
	            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
	            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
	            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
	        }
	
	        var expectedDescs = new Array(expected.length),
	            expectedDesc, foundDesc, i;
	
	        for (i = 0; i < expected.length; i++) {
	          expectedDescs[i] = expected[i].description;
	        }
	
	        expectedDesc = expected.length > 1
	          ? expectedDescs.slice(0, -1).join(", ")
	              + " or "
	              + expectedDescs[expected.length - 1]
	          : expectedDescs[0];
	
	        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
	
	        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
	      }
	
	      var posDetails = peg$computePosDetails(pos),
	          found      = pos < input.length ? input.charAt(pos) : null;
	
	      if (expected !== null) {
	        cleanupExpected(expected);
	      }
	
	      return new SyntaxError(
	        message !== null ? message : buildMessage(expected, found),
	        expected,
	        found,
	        pos,
	        posDetails.line,
	        posDetails.column
	      );
	    }
	
	    function peg$parsestart() {
	      var s0;
	
	      s0 = peg$parsemessageFormatPattern();
	
	      return s0;
	    }
	
	    function peg$parsemessageFormatPattern() {
	      var s0, s1, s2;
	
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsemessageFormatElement();
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parsemessageFormatElement();
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c1(s1);
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    function peg$parsemessageFormatElement() {
	      var s0;
	
	      s0 = peg$parsemessageTextElement();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseargumentElement();
	      }
	
	      return s0;
	    }
	
	    function peg$parsemessageText() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$currPos;
	      s3 = peg$parse_();
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parsechars();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parse_();
	          if (s5 !== peg$FAILED) {
	            s3 = [s3, s4, s5];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$c2;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$c2;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$c2;
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$currPos;
	          s3 = peg$parse_();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsechars();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s3 = [s3, s4, s5];
	                s2 = s3;
	              } else {
	                peg$currPos = s2;
	                s2 = peg$c2;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$c2;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$c2;
	          }
	        }
	      } else {
	        s1 = peg$c2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c3(s1);
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsews();
	        if (s1 !== peg$FAILED) {
	          s1 = input.substring(s0, peg$currPos);
	        }
	        s0 = s1;
	      }
	
	      return s0;
	    }
	
	    function peg$parsemessageTextElement() {
	      var s0, s1;
	
	      s0 = peg$currPos;
	      s1 = peg$parsemessageText();
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c4(s1);
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    function peg$parseargument() {
	      var s0, s1, s2;
	
	      s0 = peg$parsenumber();
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = [];
	        if (peg$c5.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c6); }
	        }
	        if (s2 !== peg$FAILED) {
	          while (s2 !== peg$FAILED) {
	            s1.push(s2);
	            if (peg$c5.test(input.charAt(peg$currPos))) {
	              s2 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c6); }
	            }
	          }
	        } else {
	          s1 = peg$c2;
	        }
	        if (s1 !== peg$FAILED) {
	          s1 = input.substring(s0, peg$currPos);
	        }
	        s0 = s1;
	      }
	
	      return s0;
	    }
	
	    function peg$parseargumentElement() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 123) {
	        s1 = peg$c7;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c8); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseargument();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$currPos;
	              if (input.charCodeAt(peg$currPos) === 44) {
	                s6 = peg$c10;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c11); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parse_();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parseelementFormat();
	                  if (s8 !== peg$FAILED) {
	                    s6 = [s6, s7, s8];
	                    s5 = s6;
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$c2;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$c2;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$c2;
	              }
	              if (s5 === peg$FAILED) {
	                s5 = peg$c9;
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parse_();
	                if (s6 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 125) {
	                    s7 = peg$c12;
	                    peg$currPos++;
	                  } else {
	                    s7 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
	                  }
	                  if (s7 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c14(s3, s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$c2;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$c2;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }
	
	      return s0;
	    }
	
	    function peg$parseelementFormat() {
	      var s0;
	
	      s0 = peg$parsesimpleFormat();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsepluralFormat();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseselectOrdinalFormat();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parseselectFormat();
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parsesimpleFormat() {
	      var s0, s1, s2, s3, s4, s5, s6;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c15) {
	        s1 = peg$c15;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c16); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c17) {
	          s1 = peg$c17;
	          peg$currPos += 4;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c18); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.substr(peg$currPos, 4) === peg$c19) {
	            s1 = peg$c19;
	            peg$currPos += 4;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c20); }
	          }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s4 = peg$c10;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c11); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsechars();
	              if (s6 !== peg$FAILED) {
	                s4 = [s4, s5, s6];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$c2;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$c2;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$c2;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = peg$c9;
	          }
	          if (s3 !== peg$FAILED) {
	            peg$reportedPos = s0;
	            s1 = peg$c21(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }
	
	      return s0;
	    }
	
	    function peg$parsepluralFormat() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c22) {
	        s1 = peg$c22;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c23); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c10;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c11); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsepluralStyle();
	              if (s5 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c24(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }
	
	      return s0;
	    }
	
	    function peg$parseselectOrdinalFormat() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 13) === peg$c25) {
	        s1 = peg$c25;
	        peg$currPos += 13;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c26); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c10;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c11); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsepluralStyle();
	              if (s5 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c27(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }
	
	      return s0;
	    }
	
	    function peg$parseselectFormat() {
	      var s0, s1, s2, s3, s4, s5, s6;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c28) {
	        s1 = peg$c28;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c29); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c10;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c11); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = [];
	              s6 = peg$parseoptionalFormatPattern();
	              if (s6 !== peg$FAILED) {
	                while (s6 !== peg$FAILED) {
	                  s5.push(s6);
	                  s6 = peg$parseoptionalFormatPattern();
	                }
	              } else {
	                s5 = peg$c2;
	              }
	              if (s5 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c30(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }
	
	      return s0;
	    }
	
	    function peg$parseselector() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 61) {
	        s2 = peg$c31;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c32); }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parsenumber();
	        if (s3 !== peg$FAILED) {
	          s2 = [s2, s3];
	          s1 = s2;
	        } else {
	          peg$currPos = s1;
	          s1 = peg$c2;
	        }
	      } else {
	        peg$currPos = s1;
	        s1 = peg$c2;
	      }
	      if (s1 !== peg$FAILED) {
	        s1 = input.substring(s0, peg$currPos);
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsechars();
	      }
	
	      return s0;
	    }
	
	    function peg$parseoptionalFormatPattern() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;
	
	      s0 = peg$currPos;
	      s1 = peg$parse_();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseselector();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parse_();
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 123) {
	              s4 = peg$c7;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c8); }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parsemessageFormatPattern();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parse_();
	                  if (s7 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 125) {
	                      s8 = peg$c12;
	                      peg$currPos++;
	                    } else {
	                      s8 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c13); }
	                    }
	                    if (s8 !== peg$FAILED) {
	                      peg$reportedPos = s0;
	                      s1 = peg$c33(s2, s6);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$c2;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$c2;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$c2;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$c2;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$c2;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }
	
	      return s0;
	    }
	
	    function peg$parseoffset() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 7) === peg$c34) {
	        s1 = peg$c34;
	        peg$currPos += 7;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c35); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsenumber();
	          if (s3 !== peg$FAILED) {
	            peg$reportedPos = s0;
	            s1 = peg$c36(s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }
	
	      return s0;
	    }
	
	    function peg$parsepluralStyle() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      s1 = peg$parseoffset();
	      if (s1 === peg$FAILED) {
	        s1 = peg$c9;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$parseoptionalFormatPattern();
	          if (s4 !== peg$FAILED) {
	            while (s4 !== peg$FAILED) {
	              s3.push(s4);
	              s4 = peg$parseoptionalFormatPattern();
	            }
	          } else {
	            s3 = peg$c2;
	          }
	          if (s3 !== peg$FAILED) {
	            peg$reportedPos = s0;
	            s1 = peg$c37(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c2;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c2;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c2;
	      }
	
	      return s0;
	    }
	
	    function peg$parsews() {
	      var s0, s1;
	
	      peg$silentFails++;
	      s0 = [];
	      if (peg$c39.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c40); }
	      }
	      if (s1 !== peg$FAILED) {
	        while (s1 !== peg$FAILED) {
	          s0.push(s1);
	          if (peg$c39.test(input.charAt(peg$currPos))) {
	            s1 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c40); }
	          }
	        }
	      } else {
	        s0 = peg$c2;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c38); }
	      }
	
	      return s0;
	    }
	
	    function peg$parse_() {
	      var s0, s1, s2;
	
	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsews();
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parsews();
	      }
	      if (s1 !== peg$FAILED) {
	        s1 = input.substring(s0, peg$currPos);
	      }
	      s0 = s1;
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c41); }
	      }
	
	      return s0;
	    }
	
	    function peg$parsedigit() {
	      var s0;
	
	      if (peg$c42.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c43); }
	      }
	
	      return s0;
	    }
	
	    function peg$parsehexDigit() {
	      var s0;
	
	      if (peg$c44.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c45); }
	      }
	
	      return s0;
	    }
	
	    function peg$parsenumber() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 48) {
	        s1 = peg$c46;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c47); }
	      }
	      if (s1 === peg$FAILED) {
	        s1 = peg$currPos;
	        s2 = peg$currPos;
	        if (peg$c48.test(input.charAt(peg$currPos))) {
	          s3 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c49); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = [];
	          s5 = peg$parsedigit();
	          while (s5 !== peg$FAILED) {
	            s4.push(s5);
	            s5 = peg$parsedigit();
	          }
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$c2;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$c2;
	        }
	        if (s2 !== peg$FAILED) {
	          s2 = input.substring(s1, peg$currPos);
	        }
	        s1 = s2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c50(s1);
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    function peg$parsechar() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;
	
	      if (peg$c51.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c52); }
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 2) === peg$c53) {
	          s1 = peg$c53;
	          peg$currPos += 2;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c54); }
	        }
	        if (s1 !== peg$FAILED) {
	          peg$reportedPos = s0;
	          s1 = peg$c55();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 2) === peg$c56) {
	            s1 = peg$c56;
	            peg$currPos += 2;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c57); }
	          }
	          if (s1 !== peg$FAILED) {
	            peg$reportedPos = s0;
	            s1 = peg$c58();
	          }
	          s0 = s1;
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 2) === peg$c59) {
	              s1 = peg$c59;
	              peg$currPos += 2;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c60); }
	            }
	            if (s1 !== peg$FAILED) {
	              peg$reportedPos = s0;
	              s1 = peg$c61();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              if (input.substr(peg$currPos, 2) === peg$c62) {
	                s1 = peg$c62;
	                peg$currPos += 2;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c63); }
	              }
	              if (s1 !== peg$FAILED) {
	                peg$reportedPos = s0;
	                s1 = peg$c64();
	              }
	              s0 = s1;
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 2) === peg$c65) {
	                  s1 = peg$c65;
	                  peg$currPos += 2;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c66); }
	                }
	                if (s1 !== peg$FAILED) {
	                  s2 = peg$currPos;
	                  s3 = peg$currPos;
	                  s4 = peg$parsehexDigit();
	                  if (s4 !== peg$FAILED) {
	                    s5 = peg$parsehexDigit();
	                    if (s5 !== peg$FAILED) {
	                      s6 = peg$parsehexDigit();
	                      if (s6 !== peg$FAILED) {
	                        s7 = peg$parsehexDigit();
	                        if (s7 !== peg$FAILED) {
	                          s4 = [s4, s5, s6, s7];
	                          s3 = s4;
	                        } else {
	                          peg$currPos = s3;
	                          s3 = peg$c2;
	                        }
	                      } else {
	                        peg$currPos = s3;
	                        s3 = peg$c2;
	                      }
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$c2;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$c2;
	                  }
	                  if (s3 !== peg$FAILED) {
	                    s3 = input.substring(s2, peg$currPos);
	                  }
	                  s2 = s3;
	                  if (s2 !== peg$FAILED) {
	                    peg$reportedPos = s0;
	                    s1 = peg$c67(s2);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$c2;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$c2;
	                }
	              }
	            }
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parsechars() {
	      var s0, s1, s2;
	
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsechar();
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parsechar();
	        }
	      } else {
	        s1 = peg$c2;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$reportedPos = s0;
	        s1 = peg$c68(s1);
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    peg$result = peg$startRuleFunction();
	
	    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	      return peg$result;
	    } else {
	      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	        peg$fail({ type: "end", description: "end of input" });
	      }
	
	      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
	    }
	  }
	
	  return {
	    SyntaxError: SyntaxError,
	    parse:       parse
	  };
	})();
	
	//# sourceMappingURL=parser.js.map

/***/ },
/* 582 */
/***/ function(module, exports) {

	// GENERATED FILE
	"use strict";
	exports["default"] = {"locale":"en","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other"}};
	
	//# sourceMappingURL=en.js.map

/***/ },
/* 583 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint node:true */
	
	'use strict';
	
	var IntlRelativeFormat = __webpack_require__(585)['default'];
	
	// Add all locale data to `IntlRelativeFormat`. This module will be ignored when
	// bundling for the browser with Browserify/Webpack.
	__webpack_require__(590);
	
	// Re-export `IntlRelativeFormat` as the CommonJS default exports with all the
	// locale data registered, and with English set as the default locale. Define
	// the `default` prop for use with other compiled ES6 Modules.
	exports = module.exports = IntlRelativeFormat;
	exports['default'] = exports;


/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	/* jslint esnext: true */
	
	"use strict";
	var src$core$$ = __webpack_require__(586), src$en$$ = __webpack_require__(589);
	
	src$core$$["default"].__addLocaleData(src$en$$["default"]);
	src$core$$["default"].defaultLocale = 'en';
	
	exports["default"] = src$core$$["default"];
	
	//# sourceMappingURL=main.js.map

/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/
	
	/* jslint esnext: true */
	
	"use strict";
	var intl$messageformat$$ = __webpack_require__(574), src$diff$$ = __webpack_require__(587), src$es5$$ = __webpack_require__(588);
	exports["default"] = RelativeFormat;
	
	// -----------------------------------------------------------------------------
	
	var FIELDS = ['second', 'minute', 'hour', 'day', 'month', 'year'];
	var STYLES = ['best fit', 'numeric'];
	
	// -- RelativeFormat -----------------------------------------------------------
	
	function RelativeFormat(locales, options) {
	    options = options || {};
	
	    // Make a copy of `locales` if it's an array, so that it doesn't change
	    // since it's used lazily.
	    if (src$es5$$.isArray(locales)) {
	        locales = locales.concat();
	    }
	
	    src$es5$$.defineProperty(this, '_locale', {value: this._resolveLocale(locales)});
	    src$es5$$.defineProperty(this, '_options', {value: {
	        style: this._resolveStyle(options.style),
	        units: this._isValidUnits(options.units) && options.units
	    }});
	
	    src$es5$$.defineProperty(this, '_locales', {value: locales});
	    src$es5$$.defineProperty(this, '_fields', {value: this._findFields(this._locale)});
	    src$es5$$.defineProperty(this, '_messages', {value: src$es5$$.objCreate(null)});
	
	    // "Bind" `format()` method to `this` so it can be passed by reference like
	    // the other `Intl` APIs.
	    var relativeFormat = this;
	    this.format = function format(date, options) {
	        return relativeFormat._format(date, options);
	    };
	}
	
	// Define internal private properties for dealing with locale data.
	src$es5$$.defineProperty(RelativeFormat, '__localeData__', {value: src$es5$$.objCreate(null)});
	src$es5$$.defineProperty(RelativeFormat, '__addLocaleData', {value: function (data) {
	    if (!(data && data.locale)) {
	        throw new Error(
	            'Locale data provided to IntlRelativeFormat is missing a ' +
	            '`locale` property value'
	        );
	    }
	
	    RelativeFormat.__localeData__[data.locale.toLowerCase()] = data;
	
	    // Add data to IntlMessageFormat.
	    intl$messageformat$$["default"].__addLocaleData(data);
	}});
	
	// Define public `defaultLocale` property which can be set by the developer, or
	// it will be set when the first RelativeFormat instance is created by
	// leveraging the resolved locale from `Intl`.
	src$es5$$.defineProperty(RelativeFormat, 'defaultLocale', {
	    enumerable: true,
	    writable  : true,
	    value     : undefined
	});
	
	// Define public `thresholds` property which can be set by the developer, and
	// defaults to relative time thresholds from moment.js.
	src$es5$$.defineProperty(RelativeFormat, 'thresholds', {
	    enumerable: true,
	
	    value: {
	        second: 45,  // seconds to minute
	        minute: 45,  // minutes to hour
	        hour  : 22,  // hours to day
	        day   : 26,  // days to month
	        month : 11   // months to year
	    }
	});
	
	RelativeFormat.prototype.resolvedOptions = function () {
	    return {
	        locale: this._locale,
	        style : this._options.style,
	        units : this._options.units
	    };
	};
	
	RelativeFormat.prototype._compileMessage = function (units) {
	    // `this._locales` is the original set of locales the user specified to the
	    // constructor, while `this._locale` is the resolved root locale.
	    var locales        = this._locales;
	    var resolvedLocale = this._locale;
	
	    var field        = this._fields[units];
	    var relativeTime = field.relativeTime;
	    var future       = '';
	    var past         = '';
	    var i;
	
	    for (i in relativeTime.future) {
	        if (relativeTime.future.hasOwnProperty(i)) {
	            future += ' ' + i + ' {' +
	                relativeTime.future[i].replace('{0}', '#') + '}';
	        }
	    }
	
	    for (i in relativeTime.past) {
	        if (relativeTime.past.hasOwnProperty(i)) {
	            past += ' ' + i + ' {' +
	                relativeTime.past[i].replace('{0}', '#') + '}';
	        }
	    }
	
	    var message = '{when, select, future {{0, plural, ' + future + '}}' +
	                                 'past {{0, plural, ' + past + '}}}';
	
	    // Create the synthetic IntlMessageFormat instance using the original
	    // locales value specified by the user when constructing the the parent
	    // IntlRelativeFormat instance.
	    return new intl$messageformat$$["default"](message, locales);
	};
	
	RelativeFormat.prototype._getMessage = function (units) {
	    var messages = this._messages;
	
	    // Create a new synthetic message based on the locale data from CLDR.
	    if (!messages[units]) {
	        messages[units] = this._compileMessage(units);
	    }
	
	    return messages[units];
	};
	
	RelativeFormat.prototype._getRelativeUnits = function (diff, units) {
	    var field = this._fields[units];
	
	    if (field.relative) {
	        return field.relative[diff];
	    }
	};
	
	RelativeFormat.prototype._findFields = function (locale) {
	    var localeData = RelativeFormat.__localeData__;
	    var data       = localeData[locale.toLowerCase()];
	
	    // The locale data is de-duplicated, so we have to traverse the locale's
	    // hierarchy until we find `fields` to return.
	    while (data) {
	        if (data.fields) {
	            return data.fields;
	        }
	
	        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];
	    }
	
	    throw new Error(
	        'Locale data added to IntlRelativeFormat is missing `fields` for :' +
	        locale
	    );
	};
	
	RelativeFormat.prototype._format = function (date, options) {
	    var now = options && options.now !== undefined ? options.now : src$es5$$.dateNow();
	
	    if (date === undefined) {
	        date = now;
	    }
	
	    // Determine if the `date` and optional `now` values are valid, and throw a
	    // similar error to what `Intl.DateTimeFormat#format()` would throw.
	    if (!isFinite(now)) {
	        throw new RangeError(
	            'The `now` option provided to IntlRelativeFormat#format() is not ' +
	            'in valid range.'
	        );
	    }
	
	    if (!isFinite(date)) {
	        throw new RangeError(
	            'The date value provided to IntlRelativeFormat#format() is not ' +
	            'in valid range.'
	        );
	    }
	
	    var diffReport  = src$diff$$["default"](now, date);
	    var units       = this._options.units || this._selectUnits(diffReport);
	    var diffInUnits = diffReport[units];
	
	    if (this._options.style !== 'numeric') {
	        var relativeUnits = this._getRelativeUnits(diffInUnits, units);
	        if (relativeUnits) {
	            return relativeUnits;
	        }
	    }
	
	    return this._getMessage(units).format({
	        '0' : Math.abs(diffInUnits),
	        when: diffInUnits < 0 ? 'past' : 'future'
	    });
	};
	
	RelativeFormat.prototype._isValidUnits = function (units) {
	    if (!units || src$es5$$.arrIndexOf.call(FIELDS, units) >= 0) {
	        return true;
	    }
	
	    if (typeof units === 'string') {
	        var suggestion = /s$/.test(units) && units.substr(0, units.length - 1);
	        if (suggestion && src$es5$$.arrIndexOf.call(FIELDS, suggestion) >= 0) {
	            throw new Error(
	                '"' + units + '" is not a valid IntlRelativeFormat `units` ' +
	                'value, did you mean: ' + suggestion
	            );
	        }
	    }
	
	    throw new Error(
	        '"' + units + '" is not a valid IntlRelativeFormat `units` value, it ' +
	        'must be one of: "' + FIELDS.join('", "') + '"'
	    );
	};
	
	RelativeFormat.prototype._resolveLocale = function (locales) {
	    if (typeof locales === 'string') {
	        locales = [locales];
	    }
	
	    // Create a copy of the array so we can push on the default locale.
	    locales = (locales || []).concat(RelativeFormat.defaultLocale);
	
	    var localeData = RelativeFormat.__localeData__;
	    var i, len, localeParts, data;
	
	    // Using the set of locales + the default locale, we look for the first one
	    // which that has been registered. When data does not exist for a locale, we
	    // traverse its ancestors to find something that's been registered within
	    // its hierarchy of locales. Since we lack the proper `parentLocale` data
	    // here, we must take a naive approach to traversal.
	    for (i = 0, len = locales.length; i < len; i += 1) {
	        localeParts = locales[i].toLowerCase().split('-');
	
	        while (localeParts.length) {
	            data = localeData[localeParts.join('-')];
	            if (data) {
	                // Return the normalized locale string; e.g., we return "en-US",
	                // instead of "en-us".
	                return data.locale;
	            }
	
	            localeParts.pop();
	        }
	    }
	
	    var defaultLocale = locales.pop();
	    throw new Error(
	        'No locale data has been added to IntlRelativeFormat for: ' +
	        locales.join(', ') + ', or the default locale: ' + defaultLocale
	    );
	};
	
	RelativeFormat.prototype._resolveStyle = function (style) {
	    // Default to "best fit" style.
	    if (!style) {
	        return STYLES[0];
	    }
	
	    if (src$es5$$.arrIndexOf.call(STYLES, style) >= 0) {
	        return style;
	    }
	
	    throw new Error(
	        '"' + style + '" is not a valid IntlRelativeFormat `style` value, it ' +
	        'must be one of: "' + STYLES.join('", "') + '"'
	    );
	};
	
	RelativeFormat.prototype._selectUnits = function (diffReport) {
	    var i, l, units;
	
	    for (i = 0, l = FIELDS.length; i < l; i += 1) {
	        units = FIELDS[i];
	
	        if (Math.abs(diffReport[units]) < RelativeFormat.thresholds[units]) {
	            break;
	        }
	    }
	
	    return units;
	};
	
	//# sourceMappingURL=core.js.map

/***/ },
/* 587 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/
	
	/* jslint esnext: true */
	
	"use strict";
	
	var round = Math.round;
	
	function daysToYears(days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    return days * 400 / 146097;
	}
	
	exports["default"] = function (from, to) {
	    // Convert to ms timestamps.
	    from = +from;
	    to   = +to;
	
	    var millisecond = round(to - from),
	        second      = round(millisecond / 1000),
	        minute      = round(second / 60),
	        hour        = round(minute / 60),
	        day         = round(hour / 24),
	        week        = round(day / 7);
	
	    var rawYears = daysToYears(day),
	        month    = round(rawYears * 12),
	        year     = round(rawYears);
	
	    return {
	        millisecond: millisecond,
	        second     : second,
	        minute     : minute,
	        hour       : hour,
	        day        : day,
	        week       : week,
	        month      : month,
	        year       : year
	    };
	};
	
	//# sourceMappingURL=diff.js.map

/***/ },
/* 588 */
/***/ function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/
	
	/* jslint esnext: true */
	
	"use strict";
	
	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License
	
	var hop = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;
	
	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();
	
	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;
	
	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {
	
	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};
	
	var objCreate = Object.create || function (proto, props) {
	    var obj, k;
	
	    function F() {}
	    F.prototype = proto;
	    obj = new F();
	
	    for (k in props) {
	        if (hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }
	
	    return obj;
	};
	
	var arrIndexOf = Array.prototype.indexOf || function (search, fromIndex) {
	    /*jshint validthis:true */
	    var arr = this;
	    if (!arr.length) {
	        return -1;
	    }
	
	    for (var i = fromIndex || 0, max = arr.length; i < max; i++) {
	        if (arr[i] === search) {
	            return i;
	        }
	    }
	
	    return -1;
	};
	
	var isArray = Array.isArray || function (obj) {
	    return toString.call(obj) === '[object Array]';
	};
	
	var dateNow = Date.now || function () {
	    return new Date().getTime();
	};
	exports.defineProperty = defineProperty, exports.objCreate = objCreate, exports.arrIndexOf = arrIndexOf, exports.isArray = isArray, exports.dateNow = dateNow;
	
	//# sourceMappingURL=es5.js.map

/***/ },
/* 589 */
/***/ function(module, exports) {

	// GENERATED FILE
	"use strict";
	exports["default"] = {"locale":"en","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other"},"fields":{"year":{"displayName":"year","relative":{"0":"this year","1":"next year","-1":"last year"},"relativeTime":{"future":{"one":"in {0} year","other":"in {0} years"},"past":{"one":"{0} year ago","other":"{0} years ago"}}},"month":{"displayName":"month","relative":{"0":"this month","1":"next month","-1":"last month"},"relativeTime":{"future":{"one":"in {0} month","other":"in {0} months"},"past":{"one":"{0} month ago","other":"{0} months ago"}}},"day":{"displayName":"day","relative":{"0":"today","1":"tomorrow","-1":"yesterday"},"relativeTime":{"future":{"one":"in {0} day","other":"in {0} days"},"past":{"one":"{0} day ago","other":"{0} days ago"}}},"hour":{"displayName":"hour","relativeTime":{"future":{"one":"in {0} hour","other":"in {0} hours"},"past":{"one":"{0} hour ago","other":"{0} hours ago"}}},"minute":{"displayName":"minute","relativeTime":{"future":{"one":"in {0} minute","other":"in {0} minutes"},"past":{"one":"{0} minute ago","other":"{0} minutes ago"}}},"second":{"displayName":"second","relative":{"0":"now"},"relativeTime":{"future":{"one":"in {0} second","other":"in {0} seconds"},"past":{"one":"{0} second ago","other":"{0} seconds ago"}}}}};
	
	//# sourceMappingURL=en.js.map

/***/ },
/* 590 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;


/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports = module.exports = __webpack_require__(593)['default'];
	exports['default'] = exports;


/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var src$es5$$ = __webpack_require__(594);
	exports["default"] = createFormatCache;
	
	// -----------------------------------------------------------------------------
	
	function createFormatCache(FormatConstructor) {
	    var cache = src$es5$$.objCreate(null);
	
	    return function () {
	        var args    = Array.prototype.slice.call(arguments);
	        var cacheId = getCacheId(args);
	        var format  = cacheId && cache[cacheId];
	
	        if (!format) {
	            format = new (src$es5$$.bind.apply(FormatConstructor, [null].concat(args)))();
	
	            if (cacheId) {
	                cache[cacheId] = format;
	            }
	        }
	
	        return format;
	    };
	}
	
	// -- Utilities ----------------------------------------------------------------
	
	function getCacheId(inputs) {
	    // When JSON is not available in the runtime, we will not create a cache id.
	    if (typeof JSON === 'undefined') { return; }
	
	    var cacheId = [];
	
	    var i, len, input;
	
	    for (i = 0, len = inputs.length; i < len; i += 1) {
	        input = inputs[i];
	
	        if (input && typeof input === 'object') {
	            cacheId.push(orderedProps(input));
	        } else {
	            cacheId.push(input);
	        }
	    }
	
	    return JSON.stringify(cacheId);
	}
	
	function orderedProps(obj) {
	    var props = [],
	        keys  = [];
	
	    var key, i, len, prop;
	
	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            keys.push(key);
	        }
	    }
	
	    var orderedKeys = keys.sort();
	
	    for (i = 0, len = orderedKeys.length; i < len; i += 1) {
	        key  = orderedKeys[i];
	        prop = {};
	
	        prop[key] = obj[key];
	        props[i]  = prop;
	    }
	
	    return props;
	}
	
	//# sourceMappingURL=memoizer.js.map

/***/ },
/* 594 */
/***/ function(module, exports) {

	"use strict";
	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/
	
	/* jslint esnext: true */
	
	// Function.prototype.bind implementation from Mozilla Developer Network:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill
	
	var bind = Function.prototype.bind || function (oThis) {
	    if (typeof this !== 'function') {
	      // closest thing possible to the ECMAScript 5
	      // internal IsCallable function
	      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
	    }
	
	    var aArgs   = Array.prototype.slice.call(arguments, 1),
	        fToBind = this,
	        fNOP    = function() {},
	        fBound  = function() {
	          return fToBind.apply(this instanceof fNOP
	                 ? this
	                 : oThis,
	                 aArgs.concat(Array.prototype.slice.call(arguments)));
	        };
	
	    if (this.prototype) {
	      // native functions don't have a prototype
	      fNOP.prototype = this.prototype;
	    }
	    fBound.prototype = new fNOP();
	
	    return fBound;
	};
	
	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License
	
	var hop = Object.prototype.hasOwnProperty;
	
	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();
	
	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;
	
	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {
	
	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};
	
	var objCreate = Object.create || function (proto, props) {
	    var obj, k;
	
	    function F() {}
	    F.prototype = proto;
	    obj = new F();
	
	    for (k in props) {
	        if (hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }
	
	    return obj;
	};
	
	exports.bind = bind, exports.defineProperty = defineProperty, exports.objCreate = objCreate;
	
	//# sourceMappingURL=es5.js.map

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(572);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DecimalFormatter = function DecimalFormatter(props) {
	  return _react2.default.createElement(_reactIntl.FormattedNumber, {
	    value: props.value,
	    style: 'decimal',
	    minimumFractionDigits: 2
	  });
	};
	
	DecimalFormatter.propTypes = {
	  value: _react2.default.PropTypes.number.isRequired
	};
	
	exports.default = DecimalFormatter;

/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var UrlFormatter = function UrlFormatter(props) {
	  if (typeof props.value === 'undefined' || props.value === '') {
	    return _react2.default.createElement('span', null);
	  }
	
	  return _react2.default.createElement(
	    'span',
	    null,
	    _react2.default.createElement(
	      'a',
	      { href: props.value },
	      props.value
	    )
	  );
	};
	
	UrlFormatter.propTypes = {
	  value: _react2.default.PropTypes.string
	};
	
	exports.default = UrlFormatter;

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(572);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DateFormatter = function DateFormatter(props) {
	  var timestamp = Date.parse(props.value);
	  if (isNaN(timestamp)) {
	    console.error('DateFormatter: Invalid date', props.value);
	    return _react2.default.createElement('span', null);
	  }
	
	  var date = new Date(timestamp);
	
	  return _react2.default.createElement(_reactIntl.FormattedDate, {
	    value: date,
	    year: 'numeric',
	    month: 'short',
	    day: '2-digit'
	  });
	};
	
	DateFormatter.propTypes = {
	  value: _react2.default.PropTypes.string.isRequired
	};
	
	exports.default = DateFormatter;

/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(572);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DateTimeFormatter = function DateTimeFormatter(props) {
	  var timestamp = Date.parse(props.value);
	  if (isNaN(timestamp)) {
	    console.error('DateTimeFormatter: Invalid date', props.value);
	    return _react2.default.createElement('span', null);
	  }
	
	  var date = new Date(timestamp);
	
	  return _react2.default.createElement(
	    'span',
	    null,
	    _react2.default.createElement(_reactIntl.FormattedDate, {
	      value: date,
	      year: 'numeric',
	      month: 'numeric',
	      day: '2-digit'
	    }),
	    ',\xA0',
	    _react2.default.createElement(_reactIntl.FormattedTime, {
	      value: date
	    })
	  );
	};
	
	DateTimeFormatter.propTypes = {
	  value: _react2.default.PropTypes.string.isRequired
	};
	
	exports.default = DateTimeFormatter;

/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(572);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TimeFormatter = function TimeFormatter(props) {
	  var hours = parseInt(props.value.value.hourOfDay) || 0;
	  var minutes = parseInt(props.value.value.minuteOfHour) || 0;
	  var seconds = parseInt(props.value.value.secondOfMinute) || 0;
	  var milliSeconds = parseInt(props.value.value.millisOfSecond) || 0;
	
	  var date = new Date(2000, 1, 1, hours, minutes, seconds, milliSeconds);
	
	  return _react2.default.createElement(_reactIntl.FormattedTime, {
	    value: date
	  });
	};
	
	TimeFormatter.propTypes = {
	  value: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = TimeFormatter;

/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(572);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DurationFormatter = function DurationFormatter(props) {
	  var milliSeconds = parseInt(props.value) || 0;
	
	  var date = new Date(2000, 1, 1, 0, 0, 0, milliSeconds);
	
	  return _react2.default.createElement(_reactIntl.FormattedDate, {
	    value: date,
	    hour: '2-digit',
	    minute: '2-digit',
	    second: '2-digit'
	  });
	};
	
	DurationFormatter.propTypes = {
	  value: _react2.default.PropTypes.number
	};
	
	exports.default = DurationFormatter;

/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(572);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var MoneyFormatter = function MoneyFormatter(props) {
	  return _react2.default.createElement(_reactIntl.FormattedNumber, {
	    value: props.value,
	    style: 'decimal',
	    minimumFractionDigits: 2
	  });
	};
	
	MoneyFormatter.propTypes = {
	  value: _react2.default.PropTypes.number
	};
	
	exports.default = MoneyFormatter;

/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BooleanFormatter = function BooleanFormatter(props) {
	  if (typeof props.value === 'undefined') {
	    return _react2.default.createElement('span', null);
	  }
	
	  var icon = props.value ? 'glyphicon-ok' : 'glyphicon-remove';
	
	  return _react2.default.createElement('span', { className: 'glyphicon ' + icon, 'aria-hidden': 'true' });
	};
	
	BooleanFormatter.propTypes = {
	  value: _react2.default.PropTypes.bool
	};
	
	exports.default = BooleanFormatter;

/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LoginFormatter = function LoginFormatter(props) {
	  return _react2.default.createElement(
	    'span',
	    null,
	    props.value.username
	  );
	};
	
	LoginFormatter.propTypes = {
	  value: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = LoginFormatter;

/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactIntl = __webpack_require__(572);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LongitudeFormatter = function LongitudeFormatter(props) {
	  var number = props.value.value;
	
	  return _react2.default.createElement(_reactIntl.FormattedNumber, {
	    value: number,
	    style: 'decimal',
	    maximumFractionDigits: 17
	  });
	};
	
	LongitudeFormatter.propTypes = {
	  value: _react2.default.PropTypes.object
	};
	
	exports.default = LongitudeFormatter;

/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(606);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, "", ""]);
	
	// exports


/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define(t):(e.ReactIntlLocaleData=e.ReactIntlLocaleData||{},e.ReactIntlLocaleData.de=t())}(this,function(){"use strict";var e=[{locale:"de",pluralRuleFunction:function(e,t){var n=String(e).split("."),a=!n[1];return t?"other":1==e&&a?"one":"other"},fields:{year:{displayName:"Jahr",relative:{0:"dieses Jahr",1:"nächstes Jahr","-1":"letztes Jahr"},relativeTime:{future:{one:"in {0} Jahr",other:"in {0} Jahren"},past:{one:"vor {0} Jahr",other:"vor {0} Jahren"}}},month:{displayName:"Monat",relative:{0:"diesen Monat",1:"nächsten Monat","-1":"letzten Monat"},relativeTime:{future:{one:"in {0} Monat",other:"in {0} Monaten"},past:{one:"vor {0} Monat",other:"vor {0} Monaten"}}},day:{displayName:"Tag",relative:{0:"heute",1:"morgen",2:"übermorgen","-2":"vorgestern","-1":"gestern"},relativeTime:{future:{one:"in {0} Tag",other:"in {0} Tagen"},past:{one:"vor {0} Tag",other:"vor {0} Tagen"}}},hour:{displayName:"Stunde",relativeTime:{future:{one:"in {0} Stunde",other:"in {0} Stunden"},past:{one:"vor {0} Stunde",other:"vor {0} Stunden"}}},minute:{displayName:"Minute",relativeTime:{future:{one:"in {0} Minute",other:"in {0} Minuten"},past:{one:"vor {0} Minute",other:"vor {0} Minuten"}}},second:{displayName:"Sekunde",relative:{0:"jetzt"},relativeTime:{future:{one:"in {0} Sekunde",other:"in {0} Sekunden"},past:{one:"vor {0} Sekunde",other:"vor {0} Sekunden"}}}}},{locale:"de-AT",parentLocale:"de"},{locale:"de-BE",parentLocale:"de"},{locale:"de-CH",parentLocale:"de"},{locale:"de-LI",parentLocale:"de"},{locale:"de-LU",parentLocale:"de"}];return e});

/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	!function(e,a){ true?module.exports=a():"function"==typeof define&&define.amd?define(a):(e.ReactIntlLocaleData=e.ReactIntlLocaleData||{},e.ReactIntlLocaleData.en=a())}(this,function(){"use strict";var e=[{locale:"en",pluralRuleFunction:function(e,a){var n=String(e).split("."),l=!n[1],o=Number(n[0])==e,t=o&&n[0].slice(-1),r=o&&n[0].slice(-2);return a?1==t&&11!=r?"one":2==t&&12!=r?"two":3==t&&13!=r?"few":"other":1==e&&l?"one":"other"},fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},minute:{displayName:"minute",relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}}}},{locale:"en-001",parentLocale:"en"},{locale:"en-150",parentLocale:"en-001"},{locale:"en-AG",parentLocale:"en-001"},{locale:"en-AI",parentLocale:"en-001"},{locale:"en-AS",parentLocale:"en"},{locale:"en-AT",parentLocale:"en-150"},{locale:"en-AU",parentLocale:"en-001"},{locale:"en-BB",parentLocale:"en-001"},{locale:"en-BE",parentLocale:"en-001"},{locale:"en-BI",parentLocale:"en"},{locale:"en-BM",parentLocale:"en-001"},{locale:"en-BS",parentLocale:"en-001"},{locale:"en-BW",parentLocale:"en-001"},{locale:"en-BZ",parentLocale:"en-001"},{locale:"en-CA",parentLocale:"en-001"},{locale:"en-CC",parentLocale:"en-001"},{locale:"en-CH",parentLocale:"en-150"},{locale:"en-CK",parentLocale:"en-001"},{locale:"en-CM",parentLocale:"en-001"},{locale:"en-CX",parentLocale:"en-001"},{locale:"en-CY",parentLocale:"en-001"},{locale:"en-DE",parentLocale:"en-150"},{locale:"en-DG",parentLocale:"en-001"},{locale:"en-DK",parentLocale:"en-150"},{locale:"en-DM",parentLocale:"en-001"},{locale:"en-Dsrt",pluralRuleFunction:function(e,a){return"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"en-ER",parentLocale:"en-001"},{locale:"en-FI",parentLocale:"en-150"},{locale:"en-FJ",parentLocale:"en-001"},{locale:"en-FK",parentLocale:"en-001"},{locale:"en-FM",parentLocale:"en-001"},{locale:"en-GB",parentLocale:"en-001"},{locale:"en-GD",parentLocale:"en-001"},{locale:"en-GG",parentLocale:"en-001"},{locale:"en-GH",parentLocale:"en-001"},{locale:"en-GI",parentLocale:"en-001"},{locale:"en-GM",parentLocale:"en-001"},{locale:"en-GU",parentLocale:"en"},{locale:"en-GY",parentLocale:"en-001"},{locale:"en-HK",parentLocale:"en-001"},{locale:"en-IE",parentLocale:"en-001"},{locale:"en-IL",parentLocale:"en-001"},{locale:"en-IM",parentLocale:"en-001"},{locale:"en-IN",parentLocale:"en-001"},{locale:"en-IO",parentLocale:"en-001"},{locale:"en-JE",parentLocale:"en-001"},{locale:"en-JM",parentLocale:"en-001"},{locale:"en-KE",parentLocale:"en-001"},{locale:"en-KI",parentLocale:"en-001"},{locale:"en-KN",parentLocale:"en-001"},{locale:"en-KY",parentLocale:"en-001"},{locale:"en-LC",parentLocale:"en-001"},{locale:"en-LR",parentLocale:"en-001"},{locale:"en-LS",parentLocale:"en-001"},{locale:"en-MG",parentLocale:"en-001"},{locale:"en-MH",parentLocale:"en"},{locale:"en-MO",parentLocale:"en-001"},{locale:"en-MP",parentLocale:"en"},{locale:"en-MS",parentLocale:"en-001"},{locale:"en-MT",parentLocale:"en-001"},{locale:"en-MU",parentLocale:"en-001"},{locale:"en-MW",parentLocale:"en-001"},{locale:"en-MY",parentLocale:"en-001"},{locale:"en-NA",parentLocale:"en-001"},{locale:"en-NF",parentLocale:"en-001"},{locale:"en-NG",parentLocale:"en-001"},{locale:"en-NL",parentLocale:"en-150"},{locale:"en-NR",parentLocale:"en-001"},{locale:"en-NU",parentLocale:"en-001"},{locale:"en-NZ",parentLocale:"en-001"},{locale:"en-PG",parentLocale:"en-001"},{locale:"en-PH",parentLocale:"en-001"},{locale:"en-PK",parentLocale:"en-001"},{locale:"en-PN",parentLocale:"en-001"},{locale:"en-PR",parentLocale:"en"},{locale:"en-PW",parentLocale:"en-001"},{locale:"en-RW",parentLocale:"en-001"},{locale:"en-SB",parentLocale:"en-001"},{locale:"en-SC",parentLocale:"en-001"},{locale:"en-SD",parentLocale:"en-001"},{locale:"en-SE",parentLocale:"en-150"},{locale:"en-SG",parentLocale:"en-001"},{locale:"en-SH",parentLocale:"en-001"},{locale:"en-SI",parentLocale:"en-150"},{locale:"en-SL",parentLocale:"en-001"},{locale:"en-SS",parentLocale:"en-001"},{locale:"en-SX",parentLocale:"en-001"},{locale:"en-SZ",parentLocale:"en-001"},{locale:"en-Shaw",pluralRuleFunction:function(e,a){return"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"en-TC",parentLocale:"en-001"},{locale:"en-TK",parentLocale:"en-001"},{locale:"en-TO",parentLocale:"en-001"},{locale:"en-TT",parentLocale:"en-001"},{locale:"en-TV",parentLocale:"en-001"},{locale:"en-TZ",parentLocale:"en-001"},{locale:"en-UG",parentLocale:"en-001"},{locale:"en-UM",parentLocale:"en"},{locale:"en-US",parentLocale:"en"},{locale:"en-VC",parentLocale:"en-001"},{locale:"en-VG",parentLocale:"en-001"},{locale:"en-VI",parentLocale:"en"},{locale:"en-VU",parentLocale:"en-001"},{locale:"en-WS",parentLocale:"en-001"},{locale:"en-ZA",parentLocale:"en-001"},{locale:"en-ZM",parentLocale:"en-001"},{locale:"en-ZW",parentLocale:"en-001"}];return e});

/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	!function(e,a){ true?module.exports=a():"function"==typeof define&&define.amd?define(a):(e.ReactIntlLocaleData=e.ReactIntlLocaleData||{},e.ReactIntlLocaleData.fr=a())}(this,function(){"use strict";var e=[{locale:"fr",pluralRuleFunction:function(e,a){return a?1==e?"one":"other":e>=0&&e<2?"one":"other"},fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"dans {0} an",other:"dans {0} ans"},past:{one:"il y a {0} an",other:"il y a {0} ans"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},hour:{displayName:"heure",relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},minute:{displayName:"minute",relativeTime:{future:{one:"dans {0} minute",other:"dans {0} minutes"},past:{one:"il y a {0} minute",other:"il y a {0} minutes"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}}}},{locale:"fr-BE",parentLocale:"fr"},{locale:"fr-BF",parentLocale:"fr"},{locale:"fr-BI",parentLocale:"fr"},{locale:"fr-BJ",parentLocale:"fr"},{locale:"fr-BL",parentLocale:"fr"},{locale:"fr-CA",parentLocale:"fr",fields:{year:{displayName:"année",relative:{0:"cette année",1:"l’année prochaine","-1":"l’année dernière"},relativeTime:{future:{one:"Dans {0} an",other:"Dans {0} ans"},past:{one:"Il y a {0} an",other:"Il y a {0} ans"}}},month:{displayName:"mois",relative:{0:"ce mois-ci",1:"le mois prochain","-1":"le mois dernier"},relativeTime:{future:{one:"dans {0} mois",other:"dans {0} mois"},past:{one:"il y a {0} mois",other:"il y a {0} mois"}}},day:{displayName:"jour",relative:{0:"aujourd’hui",1:"demain",2:"après-demain","-2":"avant-hier","-1":"hier"},relativeTime:{future:{one:"dans {0} jour",other:"dans {0} jours"},past:{one:"il y a {0} jour",other:"il y a {0} jours"}}},hour:{displayName:"heure",relativeTime:{future:{one:"dans {0} heure",other:"dans {0} heures"},past:{one:"il y a {0} heure",other:"il y a {0} heures"}}},minute:{displayName:"minute",relativeTime:{future:{one:"Dans {0} minute",other:"Dans {0} minutes"},past:{one:"Il y a {0} minute",other:"Il y a {0} minutes"}}},second:{displayName:"seconde",relative:{0:"maintenant"},relativeTime:{future:{one:"dans {0} seconde",other:"dans {0} secondes"},past:{one:"il y a {0} seconde",other:"il y a {0} secondes"}}}}},{locale:"fr-CD",parentLocale:"fr"},{locale:"fr-CF",parentLocale:"fr"},{locale:"fr-CG",parentLocale:"fr"},{locale:"fr-CH",parentLocale:"fr"},{locale:"fr-CI",parentLocale:"fr"},{locale:"fr-CM",parentLocale:"fr"},{locale:"fr-DJ",parentLocale:"fr"},{locale:"fr-DZ",parentLocale:"fr"},{locale:"fr-GA",parentLocale:"fr"},{locale:"fr-GF",parentLocale:"fr"},{locale:"fr-GN",parentLocale:"fr"},{locale:"fr-GP",parentLocale:"fr"},{locale:"fr-GQ",parentLocale:"fr"},{locale:"fr-HT",parentLocale:"fr"},{locale:"fr-KM",parentLocale:"fr"},{locale:"fr-LU",parentLocale:"fr"},{locale:"fr-MA",parentLocale:"fr"},{locale:"fr-MC",parentLocale:"fr"},{locale:"fr-MF",parentLocale:"fr"},{locale:"fr-MG",parentLocale:"fr"},{locale:"fr-ML",parentLocale:"fr"},{locale:"fr-MQ",parentLocale:"fr"},{locale:"fr-MR",parentLocale:"fr"},{locale:"fr-MU",parentLocale:"fr"},{locale:"fr-NC",parentLocale:"fr"},{locale:"fr-NE",parentLocale:"fr"},{locale:"fr-PF",parentLocale:"fr"},{locale:"fr-PM",parentLocale:"fr"},{locale:"fr-RE",parentLocale:"fr"},{locale:"fr-RW",parentLocale:"fr"},{locale:"fr-SC",parentLocale:"fr"},{locale:"fr-SN",parentLocale:"fr"},{locale:"fr-SY",parentLocale:"fr"},{locale:"fr-TD",parentLocale:"fr"},{locale:"fr-TG",parentLocale:"fr"},{locale:"fr-TN",parentLocale:"fr"},{locale:"fr-VU",parentLocale:"fr"},{locale:"fr-WF",parentLocale:"fr"},{locale:"fr-YT",parentLocale:"fr"}];return e});

/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	!function(e,o){ true?module.exports=o():"function"==typeof define&&define.amd?define(o):(e.ReactIntlLocaleData=e.ReactIntlLocaleData||{},e.ReactIntlLocaleData.it=o())}(this,function(){"use strict";var e=[{locale:"it",pluralRuleFunction:function(e,o){var a=String(e).split("."),t=!a[1];return o?11==e||8==e||80==e||800==e?"many":"other":1==e&&t?"one":"other"},fields:{year:{displayName:"anno",relative:{0:"quest’anno",1:"anno prossimo","-1":"anno scorso"},relativeTime:{future:{one:"tra {0} anno",other:"tra {0} anni"},past:{one:"{0} anno fa",other:"{0} anni fa"}}},month:{displayName:"mese",relative:{0:"questo mese",1:"mese prossimo","-1":"mese scorso"},relativeTime:{future:{one:"tra {0} mese",other:"tra {0} mesi"},past:{one:"{0} mese fa",other:"{0} mesi fa"}}},day:{displayName:"giorno",relative:{0:"oggi",1:"domani",2:"dopodomani","-2":"l’altro ieri","-1":"ieri"},relativeTime:{future:{one:"tra {0} giorno",other:"tra {0} giorni"},past:{one:"{0} giorno fa",other:"{0} giorni fa"}}},hour:{displayName:"ora",relativeTime:{future:{one:"tra {0} ora",other:"tra {0} ore"},past:{one:"{0} ora fa",other:"{0} ore fa"}}},minute:{displayName:"minuto",relativeTime:{future:{one:"tra {0} minuto",other:"tra {0} minuti"},past:{one:"{0} minuto fa",other:"{0} minuti fa"}}},second:{displayName:"Secondo",relative:{0:"ora"},relativeTime:{future:{one:"tra {0} secondo",other:"tra {0} secondi"},past:{one:"{0} secondo fa",other:"{0} secondi fa"}}}}},{locale:"it-CH",parentLocale:"it"},{locale:"it-SM",parentLocale:"it"}];return e});

/***/ },
/* 611 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport FormattedValue from './'\nimport {addLocaleData, IntlProvider} from 'react-intl'\n// real-import:import {FormattedValue} from 'tocco-ui'\n\nimport de from 'react-intl/locale-data/de'\nimport en from 'react-intl/locale-data/en'\nimport fr from 'react-intl/locale-data/fr'\nimport it from 'react-intl/locale-data/it'\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      locale: 'de-CH'\n    }\n\n    addLocaleData([...de, ...en, ...fr, ...it])\n  }\n\n  timeValue = {\n    value: {\n      hourOfDay: 23,\n      minuteOfHour: 15,\n      secondOfMinute: 0,\n      millisOfSecond: 0\n    }\n  }\n\n  changeLocale(locale) {\n    this.setState({locale})\n  }\n\n  render() {\n    const locales = ['de-CH', 'de-DE', 'en', 'it', 'fr']\n\n    return (\n      <div>\n\n        <div style={{fontWeight: 'bold', cursor: 'pointer'}}>\n          {\n            locales.map((locale, idx) => {\n              return (\n                <span key={idx} style={this.state.locale === locale ? {textDecoration: 'underline'} : {}}\n                  onClick={() => this.changeLocale(locale)}>[{locale}]</span>\n              )\n            })\n          }\n        </div>\n        {/* start example */}\n        <IntlProvider locale={this.state.locale}>\n          <div>\n            <table className=\"table table-striped\">\n              <tbody>\n                <tr>\n                  <td>String</td>\n                  <td><FormattedValue type=\"string\" value=\"Simple string\"/></td>\n                </tr>\n                <tr>\n                  <td>Text</td>\n                  <td><FormattedValue type=\"text\" value=\"Line 1\\nLine 2\"/></td>\n                </tr>\n                <tr>\n                  <td>Url</td>\n                  <td><FormattedValue type=\"url\" value=\"http://www.this-is-a.url\"/></td>\n                </tr>\n                <tr>\n                  <td>DateTime</td>\n                  <td><FormattedValue type=\"datetime\" value=\"2016-12-06T13:40:25.864Z\"/></td>\n                </tr>\n                <tr>\n                  <td>Date</td>\n                  <td><FormattedValue type=\"date\" value=\"2016-12-06\"/></td>\n                </tr>\n                <tr>\n                  <td>Time</td>\n                  <td><FormattedValue type=\"time\" value={this.timeValue}/></td>\n                </tr>\n                <tr>\n                  <td>Duration</td>\n                  <td><FormattedValue type=\"duration\" value={3020000}/></td>\n                </tr>\n                <tr>\n                  <td>Money</td>\n                  <td><FormattedValue type=\"moneyamount\" value={1245.6}/></td>\n                </tr>\n                <tr>\n                  <td>Boolean</td>\n                  <td>\n                    <FormattedValue type=\"boolean\" value/>\n                    <FormattedValue type=\"boolean\" value={false}/><br/>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Decimal</td>\n                  <td><FormattedValue type=\"decimal\" value={3333.3}/></td>\n                </tr>\n                <tr>\n                  <td>Integer</td>\n                  <td><FormattedValue type=\"integer\" value={1337}/></td>\n                </tr>\n                <tr>\n                  <td>Long/Langitude</td>\n                  <td>\n                    <FormattedValue type=\"longitude\" value={{value: 0.82710405122667465}}/>\n                  </td>\n                </tr>\n                <tr>\n                  <td>Login</td>\n                  <td>\n                    <FormattedValue type=\"login\" value={{username: 'dake'}}/>\n                  </td>\n                </tr>\n              </tbody>\n\n            </table>\n          </div>\n        </IntlProvider>\n        {/* end example */}\n      </div>\n    )\n  }\n}\n\nexport default () => <Example/>\n"

/***/ },
/* 612 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport sortBy from 'lodash/sortBy'\nimport classNames from 'classnames'\n\nimport './styles.scss'\n\n/**\n * Table to list records easily.\n */\nclass Table extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {orderBy: props.orderBy}\n  }\n\n  render() {\n    const columnDefinitions = sortBy(this.props.columnDefinitions, v => v.order)\n\n    const renderValue = (fields, record) => {\n      if (this.props.cellRenderer) {\n        return this.props.cellRenderer(fields, record)\n      } else {\n        return (\n          <span>{fields.map(field => field.value).join(', ')}</span>\n        )\n      }\n    }\n\n    const getLabel = c => (c.label || c.value)\n\n    const handleOnClick = record => {\n      if (this.props.onRowClick) {\n        this.props.onRowClick(record)\n      }\n    }\n\n    const handleOrderByClick = columnName => {\n      const newState = {\n        orderBy: {\n          name: columnName\n        }\n      }\n      if (this.state.orderBy && this.state.orderBy.name === columnName && this.state.orderBy.direction === 'desc') {\n        newState.orderBy.direction = 'asc'\n      } else {\n        newState.orderBy.direction = 'desc'\n      }\n      this.setState(newState)\n\n      if (this.props.onOrderByChange) {\n        this.props.onOrderByChange(newState.orderBy)\n      }\n    }\n\n    const tableClasses = classNames(\n      'table',\n      this.props.className,\n      {\n        'loading': this.props.loading\n      }\n    )\n\n    const orderSymbol = c => {\n      if (this.state.orderBy && this.state.orderBy.name === c.value) {\n        if (this.state.orderBy.direction === 'desc') {\n          return <span>&nbsp;▲</span>\n        } else if (this.state.orderBy.direction === 'asc') {\n          return <span>&nbsp;▼</span>\n        }\n      }\n    }\n\n    return (\n      <div className=\"tocco-table\">\n        <table className={tableClasses}>\n          <thead>\n            <tr>\n              {\n                columnDefinitions.map((c, idx) => {\n                  return (\n                    <th\n                      key={idx}\n                      onClick={() => handleOrderByClick(c.value)}\n                    >\n                      {getLabel(c)}\n                      {orderSymbol(c)}\n                    </th>\n                  )\n                })\n              }\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.props.records.map((r, ridx) => {\n                return (\n                  <tr key={ridx} onClick={() => handleOnClick(r)}>\n                    {\n                      columnDefinitions.map((c, cidx) => {\n                        const id = `${ridx}-${cidx}`\n                        const valueNames = Array.isArray(c.value) ? c.value : [c.value]\n                        const fields = valueNames.map(value => r[value])\n                          .filter(field => field !== undefined && field !== null)\n                        return (\n                          <td key={id}>\n                            {\n                              renderValue(fields, r)\n                            }\n                          </td>\n                        )\n                      })\n                    }\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nTable.propTypes = {\n  /**\n   * Specifies the columns that are displayed. An array of objects containing an optional label, the value which\n   * will be referenced (single string or array of strings) on each record as well as an optional order number.\n   * Lower numbers are getting displayed first.\n   */\n  columnDefinitions: React.PropTypes.arrayOf(\n    React.PropTypes.shape(\n      {\n        value: React.PropTypes.oneOfType([\n          React.PropTypes.string,\n          React.PropTypes.arrayOf(React.PropTypes.string)\n        ]).isRequired,\n        label: React.PropTypes.string,\n        order: React.PropTypes.int\n      }\n    )\n  ).isRequired,\n  /**\n   * Records that get listed in the table.\n   * A record should consist of attributes that contain a value and a type attribute.\n   */\n  records: React.PropTypes.arrayOf(\n    React.PropTypes.shape\n  ).isRequired,\n  /**\n   * A cell-renderer allows to render each cell content separately. Given the field values as first argument\n   * and the whole record as second, the cell renderer function can return any kind of valid component.\n   */\n  cellRenderer: React.PropTypes.func,\n  /**\n   * Callback of a row click. Gets clicked record as first argument.\n   */\n  onRowClick: React.PropTypes.func,\n\n  /**\n   * Initial ordering.\n   */\n  orderBy: React.PropTypes.shape({\n    name: React.PropTypes.string.isRequired,\n    direction: React.PropTypes.string.isRequired\n  }),\n  /**\n   * Callback on header click. Order-object consisting of properties 'name' and 'direction'\n   * is passed as argument ({name: 'firstname', direction: 'asc'}).\n   */\n  onOrderByChange: React.PropTypes.func,\n  /**\n   * Extend the table with any css classes separated by a space.\n   */\n  className: React.PropTypes.string,\n  /**\n   * If true, a transparent layer is shown on tbody\n   */\n  loading: React.PropTypes.bool\n\n}\n\nexport default Table\n"

/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ = __webpack_require__(614);
	
	var _2 = _interopRequireDefault(_);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// real-import:import {Table} from 'tocco-ui'
	
	exports.default = function () {
	  var columnDefinitions = [{
	    label: 'Firstname',
	    value: 'firstname',
	    order: 2
	  }, {
	    label: 'Lastname',
	    value: 'lastname',
	    order: 1
	  }, {
	    label: '#',
	    value: 'user_nr',
	    order: 0
	  }, {
	    label: 'Full name',
	    value: ['lastname', 'firstname']
	  }];
	
	  var records = [{
	    firstname: {
	      value: 'Homer',
	      type: 'string'
	    },
	    lastname: {
	      value: 'Simpson',
	      type: 'string'
	    },
	    user_nr: {
	      value: 1,
	      type: 'counter'
	    }
	  }, {
	    firstname: {
	      value: 'Peter',
	      type: 'string'
	    },
	    lastname: {
	      value: 'Griffin',
	      type: 'string'
	    },
	    user_nr: {
	      value: 33,
	      type: 'counter'
	    }
	  }];
	
	  var orderBy = {
	    name: 'user_nr',
	    direction: 'desc'
	  };
	
	  var cellRenderer = function cellRenderer(fields) {
	    var valueElements = fields.map(function (field, index) {
	      return field.type === 'counter' ? _react2.default.createElement(
	        'div',
	        { key: index, style: { fontWeight: 'bold' } },
	        field.value
	      ) : _react2.default.createElement(
	        'div',
	        { key: index },
	        field.value
	      );
	    });
	    return _react2.default.createElement(
	      'div',
	      null,
	      valueElements
	    );
	  };
	
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(_2.default, {
	      columnDefinitions: columnDefinitions,
	      cellRenderer: cellRenderer,
	      records: records,
	      className: 'table-striped',
	      orderBy: orderBy,
	      onOrderByChange: function onOrderByChange(r) {
	        return console.log('order-by change', r);
	      },
	      onRowClick: function onRowClick(r) {
	        return console.log('row clicked', r);
	      }
	    })
	  );
	};

/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Table = __webpack_require__(615);
	
	var _Table2 = _interopRequireDefault(_Table);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Table2.default;

/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(524);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(528);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(529);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(533);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(558);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _sortBy = __webpack_require__(616);
	
	var _sortBy2 = _interopRequireDefault(_sortBy);
	
	var _classnames = __webpack_require__(748);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	__webpack_require__(749);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Table to list records easily.
	 */
	var Table = function (_React$Component) {
	  (0, _inherits3.default)(Table, _React$Component);
	
	  function Table(props) {
	    (0, _classCallCheck3.default)(this, Table);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, (Table.__proto__ || (0, _getPrototypeOf2.default)(Table)).call(this, props));
	
	    _this.state = { orderBy: props.orderBy };
	    return _this;
	  }
	
	  (0, _createClass3.default)(Table, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var columnDefinitions = (0, _sortBy2.default)(this.props.columnDefinitions, function (v) {
	        return v.order;
	      });
	
	      var renderValue = function renderValue(fields, record) {
	        if (_this2.props.cellRenderer) {
	          return _this2.props.cellRenderer(fields, record);
	        } else {
	          return _react2.default.createElement(
	            'span',
	            null,
	            fields.map(function (field) {
	              return field.value;
	            }).join(', ')
	          );
	        }
	      };
	
	      var getLabel = function getLabel(c) {
	        return c.label || c.value;
	      };
	
	      var handleOnClick = function handleOnClick(record) {
	        if (_this2.props.onRowClick) {
	          _this2.props.onRowClick(record);
	        }
	      };
	
	      var handleOrderByClick = function handleOrderByClick(columnName) {
	        var newState = {
	          orderBy: {
	            name: columnName
	          }
	        };
	        if (_this2.state.orderBy && _this2.state.orderBy.name === columnName && _this2.state.orderBy.direction === 'desc') {
	          newState.orderBy.direction = 'asc';
	        } else {
	          newState.orderBy.direction = 'desc';
	        }
	        _this2.setState(newState);
	
	        if (_this2.props.onOrderByChange) {
	          _this2.props.onOrderByChange(newState.orderBy);
	        }
	      };
	
	      var tableClasses = (0, _classnames2.default)('table', this.props.className, {
	        'loading': this.props.loading
	      });
	
	      var orderSymbol = function orderSymbol(c) {
	        if (_this2.state.orderBy && _this2.state.orderBy.name === c.value) {
	          if (_this2.state.orderBy.direction === 'desc') {
	            return _react2.default.createElement(
	              'span',
	              null,
	              '\xA0\u25B2'
	            );
	          } else if (_this2.state.orderBy.direction === 'asc') {
	            return _react2.default.createElement(
	              'span',
	              null,
	              '\xA0\u25BC'
	            );
	          }
	        }
	      };
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'tocco-table' },
	        _react2.default.createElement(
	          'table',
	          { className: tableClasses },
	          _react2.default.createElement(
	            'thead',
	            null,
	            _react2.default.createElement(
	              'tr',
	              null,
	              columnDefinitions.map(function (c, idx) {
	                return _react2.default.createElement(
	                  'th',
	                  {
	                    key: idx,
	                    onClick: function onClick() {
	                      return handleOrderByClick(c.value);
	                    }
	                  },
	                  getLabel(c),
	                  orderSymbol(c)
	                );
	              })
	            )
	          ),
	          _react2.default.createElement(
	            'tbody',
	            null,
	            this.props.records.map(function (r, ridx) {
	              return _react2.default.createElement(
	                'tr',
	                { key: ridx, onClick: function onClick() {
	                    return handleOnClick(r);
	                  } },
	                columnDefinitions.map(function (c, cidx) {
	                  var id = ridx + '-' + cidx;
	                  var valueNames = Array.isArray(c.value) ? c.value : [c.value];
	                  var fields = valueNames.map(function (value) {
	                    return r[value];
	                  }).filter(function (field) {
	                    return field !== undefined && field !== null;
	                  });
	                  return _react2.default.createElement(
	                    'td',
	                    { key: id },
	                    renderValue(fields, r)
	                  );
	                })
	              );
	            })
	          )
	        )
	      );
	    }
	  }]);
	  return Table;
	}(_react2.default.Component);
	
	Table.propTypes = {
	  /**
	   * Specifies the columns that are displayed. An array of objects containing an optional label, the value which
	   * will be referenced (single string or array of strings) on each record as well as an optional order number.
	   * Lower numbers are getting displayed first.
	   */
	  columnDefinitions: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
	    value: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.string)]).isRequired,
	    label: _react2.default.PropTypes.string,
	    order: _react2.default.PropTypes.int
	  })).isRequired,
	  /**
	   * Records that get listed in the table.
	   * A record should consist of attributes that contain a value and a type attribute.
	   */
	  records: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape).isRequired,
	  /**
	   * A cell-renderer allows to render each cell content separately. Given the field values as first argument
	   * and the whole record as second, the cell renderer function can return any kind of valid component.
	   */
	  cellRenderer: _react2.default.PropTypes.func,
	  /**
	   * Callback of a row click. Gets clicked record as first argument.
	   */
	  onRowClick: _react2.default.PropTypes.func,
	
	  /**
	   * Initial ordering.
	   */
	  orderBy: _react2.default.PropTypes.shape({
	    name: _react2.default.PropTypes.string.isRequired,
	    direction: _react2.default.PropTypes.string.isRequired
	  }),
	  /**
	   * Callback on header click. Order-object consisting of properties 'name' and 'direction'
	   * is passed as argument ({name: 'firstname', direction: 'asc'}).
	   */
	  onOrderByChange: _react2.default.PropTypes.func,
	  /**
	   * Extend the table with any css classes separated by a space.
	   */
	  className: _react2.default.PropTypes.string,
	  /**
	   * If true, a transparent layer is shown on tbody
	   */
	  loading: _react2.default.PropTypes.bool
	
	};
	
	exports.default = Table;

/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(617),
	    baseOrderBy = __webpack_require__(630),
	    baseRest = __webpack_require__(739),
	    isIterateeCall = __webpack_require__(747);
	
	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection thru each iteratee. This method
	 * performs a stable sort, that is, it preserves the original sort order of
	 * equal elements. The iteratees are invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.sortBy(users, [function(o) { return o.user; }]);
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 *
	 * _.sortBy(users, ['user', 'age']);
	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	 */
	var sortBy = baseRest(function(collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }
	  var length = iteratees.length;
	  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	    iteratees = [];
	  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	    iteratees = [iteratees[0]];
	  }
	  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	});
	
	module.exports = sortBy;


/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(618),
	    isFlattenable = __webpack_require__(619);
	
	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;
	
	  predicate || (predicate = isFlattenable);
	  result || (result = []);
	
	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}
	
	module.exports = baseFlatten;


/***/ },
/* 618 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;
	
	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}
	
	module.exports = arrayPush;


/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(620),
	    isArguments = __webpack_require__(623),
	    isArray = __webpack_require__(629);
	
	/** Built-in value references. */
	var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
	
	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}
	
	module.exports = isFlattenable;


/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(621);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(622);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ },
/* 622 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(624),
	    isObjectLike = __webpack_require__(628);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};
	
	module.exports = isArguments;


/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(625),
	    isObjectLike = __webpack_require__(628);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';
	
	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}
	
	module.exports = baseIsArguments;


/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(620),
	    getRawTag = __webpack_require__(626),
	    objectToString = __webpack_require__(627);
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  value = Object(value);
	  return (symToStringTag && symToStringTag in value)
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	module.exports = baseGetTag;


/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(620);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	module.exports = getRawTag;


/***/ },
/* 627 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	module.exports = objectToString;


/***/ },
/* 628 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 629 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	module.exports = isArray;


/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(631),
	    baseIteratee = __webpack_require__(632),
	    baseMap = __webpack_require__(730),
	    baseSortBy = __webpack_require__(736),
	    baseUnary = __webpack_require__(696),
	    compareMultiple = __webpack_require__(737),
	    identity = __webpack_require__(726);
	
	/**
	 * The base implementation of `_.orderBy` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {string[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */
	function baseOrderBy(collection, iteratees, orders) {
	  var index = -1;
	  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));
	
	  var result = baseMap(collection, function(value, key, collection) {
	    var criteria = arrayMap(iteratees, function(iteratee) {
	      return iteratee(value);
	    });
	    return { 'criteria': criteria, 'index': ++index, 'value': value };
	  });
	
	  return baseSortBy(result, function(object, other) {
	    return compareMultiple(object, other, orders);
	  });
	}
	
	module.exports = baseOrderBy;


/***/ },
/* 631 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);
	
	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}
	
	module.exports = arrayMap;


/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(633),
	    baseMatchesProperty = __webpack_require__(711),
	    identity = __webpack_require__(726),
	    isArray = __webpack_require__(629),
	    property = __webpack_require__(727);
	
	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}
	
	module.exports = baseIteratee;


/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(634),
	    getMatchData = __webpack_require__(708),
	    matchesStrictComparable = __webpack_require__(710);
	
	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}
	
	module.exports = baseMatches;


/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(635),
	    baseIsEqual = __webpack_require__(673);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;
	
	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];
	
	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	
	module.exports = baseIsMatch;


/***/ },
/* 635 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(636),
	    stackClear = __webpack_require__(644),
	    stackDelete = __webpack_require__(645),
	    stackGet = __webpack_require__(646),
	    stackHas = __webpack_require__(647),
	    stackSet = __webpack_require__(648);
	
	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}
	
	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;
	
	module.exports = Stack;


/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(637),
	    listCacheDelete = __webpack_require__(638),
	    listCacheGet = __webpack_require__(641),
	    listCacheHas = __webpack_require__(642),
	    listCacheSet = __webpack_require__(643);
	
	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;
	
	module.exports = ListCache;


/***/ },
/* 637 */
/***/ function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}
	
	module.exports = listCacheClear;


/***/ },
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(639);
	
	/** Used for built-in method references. */
	var arrayProto = Array.prototype;
	
	/** Built-in value references. */
	var splice = arrayProto.splice;
	
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}
	
	module.exports = listCacheDelete;


/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(640);
	
	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	
	module.exports = assocIndexOf;


/***/ },
/* 640 */
/***/ function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	module.exports = eq;


/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(639);
	
	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  return index < 0 ? undefined : data[index][1];
	}
	
	module.exports = listCacheGet;


/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(639);
	
	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}
	
	module.exports = listCacheHas;


/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(639);
	
	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	
	module.exports = listCacheSet;


/***/ },
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(636);
	
	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}
	
	module.exports = stackClear;


/***/ },
/* 645 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);
	
	  this.size = data.size;
	  return result;
	}
	
	module.exports = stackDelete;


/***/ },
/* 646 */
/***/ function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}
	
	module.exports = stackGet;


/***/ },
/* 647 */
/***/ function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}
	
	module.exports = stackHas;


/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(636),
	    Map = __webpack_require__(649),
	    MapCache = __webpack_require__(658);
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}
	
	module.exports = stackSet;


/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(650),
	    root = __webpack_require__(621);
	
	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');
	
	module.exports = Map;


/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(651),
	    getValue = __webpack_require__(657);
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	
	module.exports = getNative;


/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(652),
	    isMasked = __webpack_require__(654),
	    isObject = __webpack_require__(653),
	    toSource = __webpack_require__(656);
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	
	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}
	
	module.exports = baseIsNative;


/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(625),
	    isObject = __webpack_require__(653);
	
	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}
	
	module.exports = isFunction;


/***/ },
/* 653 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;


/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(655);
	
	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());
	
	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}
	
	module.exports = isMasked;


/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(621);
	
	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];
	
	module.exports = coreJsData;


/***/ },
/* 656 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}
	
	module.exports = toSource;


/***/ },
/* 657 */
/***/ function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}
	
	module.exports = getValue;


/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(659),
	    mapCacheDelete = __webpack_require__(667),
	    mapCacheGet = __webpack_require__(670),
	    mapCacheHas = __webpack_require__(671),
	    mapCacheSet = __webpack_require__(672);
	
	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;
	
	module.exports = MapCache;


/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(660),
	    ListCache = __webpack_require__(636),
	    Map = __webpack_require__(649);
	
	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}
	
	module.exports = mapCacheClear;


/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(661),
	    hashDelete = __webpack_require__(663),
	    hashGet = __webpack_require__(664),
	    hashHas = __webpack_require__(665),
	    hashSet = __webpack_require__(666);
	
	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;
	
	module.exports = Hash;


/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(662);
	
	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}
	
	module.exports = hashClear;


/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(650);
	
	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');
	
	module.exports = nativeCreate;


/***/ },
/* 663 */
/***/ function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	module.exports = hashDelete;


/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(662);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}
	
	module.exports = hashGet;


/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(662);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}
	
	module.exports = hashHas;


/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(662);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}
	
	module.exports = hashSet;


/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(668);
	
	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	module.exports = mapCacheDelete;


/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(669);
	
	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}
	
	module.exports = getMapData;


/***/ },
/* 669 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}
	
	module.exports = isKeyable;


/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(668);
	
	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}
	
	module.exports = mapCacheGet;


/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(668);
	
	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}
	
	module.exports = mapCacheHas;


/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(668);
	
	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;
	
	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}
	
	module.exports = mapCacheSet;


/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(674),
	    isObject = __webpack_require__(653),
	    isObjectLike = __webpack_require__(628);
	
	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}
	
	module.exports = baseIsEqual;


/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(635),
	    equalArrays = __webpack_require__(675),
	    equalByTag = __webpack_require__(681),
	    equalObjects = __webpack_require__(685),
	    getTag = __webpack_require__(703),
	    isArray = __webpack_require__(629),
	    isBuffer = __webpack_require__(689),
	    isTypedArray = __webpack_require__(693);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;
	
	  if (!objIsArr) {
	    objTag = getTag(object);
	    objTag = objTag == argsTag ? objectTag : objTag;
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    othTag = othTag == argsTag ? objectTag : othTag;
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;
	
	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;
	
	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}
	
	module.exports = baseIsEqualDeep;


/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(676),
	    arraySome = __webpack_require__(679),
	    cacheHas = __webpack_require__(680);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;
	
	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;
	
	  stack.set(array, other);
	  stack.set(other, array);
	
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];
	
	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}
	
	module.exports = equalArrays;


/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(658),
	    setCacheAdd = __webpack_require__(677),
	    setCacheHas = __webpack_require__(678);
	
	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;
	
	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}
	
	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;
	
	module.exports = SetCache;


/***/ },
/* 677 */
/***/ function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}
	
	module.exports = setCacheAdd;


/***/ },
/* 678 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}
	
	module.exports = setCacheHas;


/***/ },
/* 679 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;
	
	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	module.exports = arraySome;


/***/ },
/* 680 */
/***/ function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}
	
	module.exports = cacheHas;


/***/ },
/* 681 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(620),
	    Uint8Array = __webpack_require__(682),
	    eq = __webpack_require__(640),
	    equalArrays = __webpack_require__(675),
	    mapToArray = __webpack_require__(683),
	    setToArray = __webpack_require__(684);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;
	
	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;
	
	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);
	
	    case errorTag:
	      return object.name == other.name && object.message == other.message;
	
	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');
	
	    case mapTag:
	      var convert = mapToArray;
	
	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);
	
	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;
	
	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;
	
	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}
	
	module.exports = equalByTag;


/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(621);
	
	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;
	
	module.exports = Uint8Array;


/***/ },
/* 683 */
/***/ function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);
	
	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}
	
	module.exports = mapToArray;


/***/ },
/* 684 */
/***/ function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);
	
	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}
	
	module.exports = setToArray;


/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(686);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;
	
	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);
	
	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];
	
	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;
	
	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}
	
	module.exports = equalObjects;


/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(687),
	    baseKeys = __webpack_require__(698),
	    isArrayLike = __webpack_require__(702);
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	
	module.exports = keys;


/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(688),
	    isArguments = __webpack_require__(623),
	    isArray = __webpack_require__(629),
	    isBuffer = __webpack_require__(689),
	    isIndex = __webpack_require__(692),
	    isTypedArray = __webpack_require__(693);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;
	
	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = arrayLikeKeys;


/***/ },
/* 688 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);
	
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	
	module.exports = baseTimes;


/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(621),
	    stubFalse = __webpack_require__(691);
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
	
	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;
	
	module.exports = isBuffer;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(690)(module)))

/***/ },
/* 690 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 691 */
/***/ function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}
	
	module.exports = stubFalse;


/***/ },
/* 692 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}
	
	module.exports = isIndex;


/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(694),
	    baseUnary = __webpack_require__(696),
	    nodeUtil = __webpack_require__(697);
	
	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	module.exports = isTypedArray;


/***/ },
/* 694 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(625),
	    isLength = __webpack_require__(695),
	    isObjectLike = __webpack_require__(628);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;
	
	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}
	
	module.exports = baseIsTypedArray;


/***/ },
/* 695 */
/***/ function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	module.exports = isLength;


/***/ },
/* 696 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}
	
	module.exports = baseUnary;


/***/ },
/* 697 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(622);
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;
	
	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());
	
	module.exports = nodeUtil;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(690)(module)))

/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(699),
	    nativeKeys = __webpack_require__(700);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = baseKeys;


/***/ },
/* 699 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	  return value === proto;
	}
	
	module.exports = isPrototype;


/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(701);
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);
	
	module.exports = nativeKeys;


/***/ },
/* 701 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	module.exports = overArg;


/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(652),
	    isLength = __webpack_require__(695);
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	module.exports = isArrayLike;


/***/ },
/* 703 */
/***/ function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(704),
	    Map = __webpack_require__(649),
	    Promise = __webpack_require__(705),
	    Set = __webpack_require__(706),
	    WeakMap = __webpack_require__(707),
	    baseGetTag = __webpack_require__(625),
	    toSource = __webpack_require__(656);
	
	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';
	
	var dataViewTag = '[object DataView]';
	
	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);
	
	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;
	
	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';
	
	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}
	
	module.exports = getTag;


/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(650),
	    root = __webpack_require__(621);
	
	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');
	
	module.exports = DataView;


/***/ },
/* 705 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(650),
	    root = __webpack_require__(621);
	
	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');
	
	module.exports = Promise;


/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(650),
	    root = __webpack_require__(621);
	
	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');
	
	module.exports = Set;


/***/ },
/* 707 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(650),
	    root = __webpack_require__(621);
	
	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');
	
	module.exports = WeakMap;


/***/ },
/* 708 */
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(709),
	    keys = __webpack_require__(686);
	
	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;
	
	  while (length--) {
	    var key = result[length],
	        value = object[key];
	
	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}
	
	module.exports = getMatchData;


/***/ },
/* 709 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(653);
	
	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}
	
	module.exports = isStrictComparable;


/***/ },
/* 710 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}
	
	module.exports = matchesStrictComparable;


/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(673),
	    get = __webpack_require__(712),
	    hasIn = __webpack_require__(723),
	    isKey = __webpack_require__(715),
	    isStrictComparable = __webpack_require__(709),
	    matchesStrictComparable = __webpack_require__(710),
	    toKey = __webpack_require__(722);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}
	
	module.exports = baseMatchesProperty;


/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(713);
	
	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}
	
	module.exports = get;


/***/ },
/* 713 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(714),
	    toKey = __webpack_require__(722);
	
	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);
	
	  var index = 0,
	      length = path.length;
	
	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}
	
	module.exports = baseGet;


/***/ },
/* 714 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(629),
	    isKey = __webpack_require__(715),
	    stringToPath = __webpack_require__(717),
	    toString = __webpack_require__(720);
	
	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}
	
	module.exports = castPath;


/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(629),
	    isSymbol = __webpack_require__(716);
	
	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;
	
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}
	
	module.exports = isKey;


/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(625),
	    isObjectLike = __webpack_require__(628);
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}
	
	module.exports = isSymbol;


/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(718);
	
	/** Used to match property names within property paths. */
	var reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	
	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;
	
	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function(string) {
	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});
	
	module.exports = stringToPath;


/***/ },
/* 718 */
/***/ function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(719);
	
	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;
	
	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });
	
	  var cache = result.cache;
	  return result;
	}
	
	module.exports = memoizeCapped;


/***/ },
/* 719 */
/***/ function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(658);
	
	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;
	
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}
	
	// Expose `MapCache`.
	memoize.Cache = MapCache;
	
	module.exports = memoize;


/***/ },
/* 720 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(721);
	
	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}
	
	module.exports = toString;


/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(620),
	    arrayMap = __webpack_require__(631),
	    isArray = __webpack_require__(629),
	    isSymbol = __webpack_require__(716);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = baseToString;


/***/ },
/* 722 */
/***/ function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(716);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = toKey;


/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(724),
	    hasPath = __webpack_require__(725);
	
	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}
	
	module.exports = hasIn;


/***/ },
/* 724 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}
	
	module.exports = baseHasIn;


/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(714),
	    isArguments = __webpack_require__(623),
	    isArray = __webpack_require__(629),
	    isIndex = __webpack_require__(692),
	    isLength = __webpack_require__(695),
	    toKey = __webpack_require__(722);
	
	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);
	
	  var index = -1,
	      length = path.length,
	      result = false;
	
	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}
	
	module.exports = hasPath;


/***/ },
/* 726 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}
	
	module.exports = identity;


/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(728),
	    basePropertyDeep = __webpack_require__(729),
	    isKey = __webpack_require__(715),
	    toKey = __webpack_require__(722);
	
	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}
	
	module.exports = property;


/***/ },
/* 728 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}
	
	module.exports = baseProperty;


/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(713);
	
	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}
	
	module.exports = basePropertyDeep;


/***/ },
/* 730 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(731),
	    isArrayLike = __webpack_require__(702);
	
	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];
	
	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}
	
	module.exports = baseMap;


/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(732),
	    createBaseEach = __webpack_require__(735);
	
	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);
	
	module.exports = baseEach;


/***/ },
/* 732 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(733),
	    keys = __webpack_require__(686);
	
	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}
	
	module.exports = baseForOwn;


/***/ },
/* 733 */
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(734);
	
	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();
	
	module.exports = baseFor;


/***/ },
/* 734 */
/***/ function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;
	
	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	
	module.exports = createBaseFor;


/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(702);
	
	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}
	
	module.exports = createBaseEach;


/***/ },
/* 736 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define the
	 * sort order of `array` and replaces criteria objects with their corresponding
	 * values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;
	
	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}
	
	module.exports = baseSortBy;


/***/ },
/* 737 */
/***/ function(module, exports, __webpack_require__) {

	var compareAscending = __webpack_require__(738);
	
	/**
	 * Used by `_.orderBy` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	 * specify an order of "desc" for descending or "asc" for ascending sort order
	 * of corresponding values.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]|string[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;
	
	  while (++index < length) {
	    var result = compareAscending(objCriteria[index], othCriteria[index]);
	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }
	      var order = orders[index];
	      return result * (order == 'desc' ? -1 : 1);
	    }
	  }
	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	  return object.index - other.index;
	}
	
	module.exports = compareMultiple;


/***/ },
/* 738 */
/***/ function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(716);
	
	/**
	 * Compares values to sort them in ascending order.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function compareAscending(value, other) {
	  if (value !== other) {
	    var valIsDefined = value !== undefined,
	        valIsNull = value === null,
	        valIsReflexive = value === value,
	        valIsSymbol = isSymbol(value);
	
	    var othIsDefined = other !== undefined,
	        othIsNull = other === null,
	        othIsReflexive = other === other,
	        othIsSymbol = isSymbol(other);
	
	    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	        (valIsNull && othIsDefined && othIsReflexive) ||
	        (!valIsDefined && othIsReflexive) ||
	        !valIsReflexive) {
	      return 1;
	    }
	    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	        (othIsNull && valIsDefined && valIsReflexive) ||
	        (!othIsDefined && valIsReflexive) ||
	        !othIsReflexive) {
	      return -1;
	    }
	  }
	  return 0;
	}
	
	module.exports = compareAscending;


/***/ },
/* 739 */
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(726),
	    overRest = __webpack_require__(740),
	    setToString = __webpack_require__(742);
	
	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}
	
	module.exports = baseRest;


/***/ },
/* 740 */
/***/ function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(741);
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);
	
	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}
	
	module.exports = overRest;


/***/ },
/* 741 */
/***/ function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}
	
	module.exports = apply;


/***/ },
/* 742 */
/***/ function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(743),
	    shortOut = __webpack_require__(746);
	
	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);
	
	module.exports = setToString;


/***/ },
/* 743 */
/***/ function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(744),
	    defineProperty = __webpack_require__(745),
	    identity = __webpack_require__(726);
	
	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};
	
	module.exports = baseSetToString;


/***/ },
/* 744 */
/***/ function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}
	
	module.exports = constant;


/***/ },
/* 745 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(650);
	
	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());
	
	module.exports = defineProperty;


/***/ },
/* 746 */
/***/ function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;
	
	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;
	
	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);
	
	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}
	
	module.exports = shortOut;


/***/ },
/* 747 */
/***/ function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(640),
	    isArrayLike = __webpack_require__(702),
	    isIndex = __webpack_require__(692),
	    isObject = __webpack_require__(653);
	
	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}
	
	module.exports = isIterateeCall;


/***/ },
/* 748 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */
	
	(function () {
		'use strict';
	
		var hasOwn = {}.hasOwnProperty;
	
		function classNames () {
			var classes = [];
	
			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;
	
				var argType = typeof arg;
	
				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}
	
			return classes.join(' ');
		}
	
		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 749 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(750);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 750 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, ".tocco-table table {\n  width: 100%; }\n\n.tocco-table table.loading {\n  position: relative; }\n\n.tocco-table table.loading:after {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.5);\n  background-size: 50px 50px;\n  content: \"\"; }\n", ""]);
	
	// exports


/***/ },
/* 751 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport Table from './'\n\n// real-import:import {Table} from 'tocco-ui'\n\nexport default () => {\n  const columnDefinitions = [\n    {\n      label: 'Firstname',\n      value: 'firstname',\n      order: 2\n    },\n    {\n      label: 'Lastname',\n      value: 'lastname',\n      order: 1\n    },\n    {\n      label: '#',\n      value: 'user_nr',\n      order: 0\n    },\n    {\n      label: 'Full name',\n      value: ['lastname', 'firstname']\n    }\n  ]\n\n  const records = [\n    {\n      firstname: {\n        value: 'Homer',\n        type: 'string'\n      },\n      lastname: {\n        value: 'Simpson',\n        type: 'string'\n      },\n      user_nr: {\n        value: 1,\n        type: 'counter'\n      }\n    },\n    {\n      firstname: {\n        value: 'Peter',\n        type: 'string'\n      },\n      lastname: {\n        value: 'Griffin',\n        type: 'string'\n      },\n      user_nr: {\n        value: 33,\n        type: 'counter'\n      }\n    }\n  ]\n\n  const orderBy = {\n    name: 'user_nr',\n    direction: 'desc'\n  }\n\n  const cellRenderer = fields => {\n    const valueElements = fields.map((field, index) =>\n      field.type === 'counter'\n       ? <div key={index} style={{fontWeight: 'bold'}}>{field.value}</div>\n       : <div key={index}>{field.value}</div>)\n    return <div>{valueElements}</div>\n  }\n\n  return (\n    <div>\n      {/* start example */}\n      <Table\n        columnDefinitions={columnDefinitions}\n        cellRenderer={cellRenderer}\n        records={records}\n        className=\"table-striped\"\n        orderBy={orderBy}\n        onOrderByChange={r => console.log('order-by change', r)}\n        onRowClick={r => console.log('row clicked', r)}\n      />\n      {/* end example */}\n    </div>\n  )\n}\n"

/***/ },
/* 752 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport classNames from 'classnames'\n\nimport './styles.scss'\n\n/**\n * A loadmask that can hide elements as long as promises are not resolved\n */\nclass LoadMask extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      initialized: false\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.promises) {\n      Promise.all(this.props.promises).then(() => {\n        this.setState({initialized: true})\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className={classNames('load-mask', this.props.className)}\n      >\n        {this.state.initialized\n          ? this.props.children\n          : <span className={'spinner glyphicon glyphicon-refresh glyphicon-spin'}/>}\n      </div>\n    )\n  }\n}\n\nLoadMask.propTypes = {\n  /**\n   * Extend the the mask with any css classes separated by a space\n   */\n  className: React.PropTypes.string,\n  /**\n   * An array of promises.\n   */\n  promises: React.PropTypes.array,\n  /**\n   * Will be shown once promises are resolved\n   */\n  children: React.PropTypes.node\n}\n\nexport default LoadMask\n"

/***/ },
/* 753 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(754);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ = __webpack_require__(765);
	
	var _2 = _interopRequireDefault(_);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// real-import:import {LoadMask} from 'tocco-ui'
	
	exports.default = function () {
	  var promise = new _promise2.default(function (resolve) {});
	  return _react2.default.createElement(
	    'div',
	    { style: { height: '50px' } },
	    _react2.default.createElement(
	      _2.default,
	      {
	        promises: [promise]
	      },
	      _react2.default.createElement(
	        'div',
	        null,
	        'LOADED'
	      )
	    )
	  );
	};

/***/ },
/* 754 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(755), __esModule: true };

/***/ },
/* 755 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(555);
	__webpack_require__(473);
	__webpack_require__(537);
	__webpack_require__(756);
	module.exports = __webpack_require__(481).Promise;

/***/ },
/* 756 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(478)
	  , global             = __webpack_require__(480)
	  , ctx                = __webpack_require__(482)
	  , classof            = __webpack_require__(522)
	  , $export            = __webpack_require__(479)
	  , isObject           = __webpack_require__(487)
	  , aFunction          = __webpack_require__(483)
	  , anInstance         = __webpack_require__(757)
	  , forOf              = __webpack_require__(758)
	  , speciesConstructor = __webpack_require__(759)
	  , task               = __webpack_require__(760).set
	  , microtask          = __webpack_require__(762)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(514)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(763)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(513)($Promise, PROMISE);
	__webpack_require__(764)(PROMISE);
	Wrapper = __webpack_require__(481)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(523)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 757 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 758 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(482)
	  , call        = __webpack_require__(518)
	  , isArrayIter = __webpack_require__(519)
	  , anObject    = __webpack_require__(486)
	  , toLength    = __webpack_require__(506)
	  , getIterFn   = __webpack_require__(521)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 759 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(486)
	  , aFunction = __webpack_require__(483)
	  , SPECIES   = __webpack_require__(514)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 760 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(482)
	  , invoke             = __webpack_require__(761)
	  , html               = __webpack_require__(512)
	  , cel                = __webpack_require__(491)
	  , global             = __webpack_require__(480)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(504)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 761 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 762 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(480)
	  , macrotask = __webpack_require__(760).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(504)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 763 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(484);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },
/* 764 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(480)
	  , core        = __webpack_require__(481)
	  , dP          = __webpack_require__(485)
	  , DESCRIPTORS = __webpack_require__(489)
	  , SPECIES     = __webpack_require__(514)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 765 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _LoadMask = __webpack_require__(766);
	
	var _LoadMask2 = _interopRequireDefault(_LoadMask);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _LoadMask2.default;

/***/ },
/* 766 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(754);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _getPrototypeOf = __webpack_require__(524);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(528);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(529);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(533);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(558);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(748);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	__webpack_require__(767);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A loadmask that can hide elements as long as promises are not resolved
	 */
	var LoadMask = function (_React$Component) {
	  (0, _inherits3.default)(LoadMask, _React$Component);
	
	  function LoadMask(props) {
	    (0, _classCallCheck3.default)(this, LoadMask);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, (LoadMask.__proto__ || (0, _getPrototypeOf2.default)(LoadMask)).call(this, props));
	
	    _this.state = {
	      initialized: false
	    };
	    return _this;
	  }
	
	  (0, _createClass3.default)(LoadMask, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;
	
	      if (this.props.promises) {
	        _promise2.default.all(this.props.promises).then(function () {
	          _this2.setState({ initialized: true });
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        {
	          className: (0, _classnames2.default)('load-mask', this.props.className)
	        },
	        this.state.initialized ? this.props.children : _react2.default.createElement('span', { className: 'spinner glyphicon glyphicon-refresh glyphicon-spin' })
	      );
	    }
	  }]);
	  return LoadMask;
	}(_react2.default.Component);
	
	LoadMask.propTypes = {
	  /**
	   * Extend the the mask with any css classes separated by a space
	   */
	  className: _react2.default.PropTypes.string,
	  /**
	   * An array of promises.
	   */
	  promises: _react2.default.PropTypes.array,
	  /**
	   * Will be shown once promises are resolved
	   */
	  children: _react2.default.PropTypes.node
	};
	
	exports.default = LoadMask;

/***/ },
/* 767 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(768);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 768 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, ".load-mask > .spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%); }\n\n.load-mask .glyphicon-spin {\n  -webkit-animation: spin 1000ms infinite linear;\n  animation: spin 1000ms infinite linear; }\n\n@-webkit-keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg); } }\n\n@keyframes spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg); } }\n", ""]);
	
	// exports


/***/ },
/* 769 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport LoadMask from './'\n// real-import:import {LoadMask} from 'tocco-ui'\n\nexport default () => {\n  const promise = new Promise(resolve => {\n  })\n  return (\n    <div style={{height: '50px'}}>\n      {/* start example */}\n      <LoadMask\n        promises={[promise]}\n      >\n        <div>LOADED</div>\n      </LoadMask>\n      {/* end example */}\n    </div>\n  )\n}\n\n"

/***/ },
/* 770 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport classNames from 'classnames'\nimport './styles.scss'\n\n/**\n * Styled Button\n */\nconst Button = props => {\n  const classes = classNames(\n    'btn',\n    'btn-default',\n    props.className,\n    {\n      'pending': props.pending,\n      'btn-primary': props.primary\n    }\n  )\n\n  return (\n    <button\n      name={props.name}\n      onClick={props.onClick}\n      className={classes}\n      disabled={props.disabled}\n      type={props.type ? props.type : 'button'}\n    >\n      <i className={classNames('glyphicon', props.icon)}/> {props.label || ''}\n    </button>)\n}\n\nButton.propTypes = {\n  /**\n   * Will be displayed on button, default is an empty string\n   */\n  label: React.PropTypes.string,\n  /**\n   * Function that will be triggered on click event\n   */\n  onClick: React.PropTypes.func,\n  /**\n   * Set the name of the button\n   */\n  name: React.PropTypes.string,\n  /**\n   * If true, the button will be disabled\n   */\n  disabled: React.PropTypes.bool,\n /**\n  * If true, a spinner will be shown on the button\n  */\n  pending: React.PropTypes.bool,\n  /**\n   * Extend the button with any css classes separated by a space\n   */\n  className: React.PropTypes.string,\n  /**\n   * If true, button will be shown as primary button\n   */\n  primary: React.PropTypes.bool,\n  /**\n   * Add an icon to the button. Possible icons are defined here: http://glyphicons.bootstrapcheatsheets.com/\n   */\n  icon: React.PropTypes.string,\n  /**\n   * HTML Button type. Default is 'button'. Possible values: button|submit|reset\n   */\n  type: React.PropTypes.oneOf(['button', 'submit', 'reset'])\n}\n\nexport default Button\n"

/***/ },
/* 771 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ = __webpack_require__(772);
	
	var _2 = _interopRequireDefault(_);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// real-import:import {Button} from 'tocco-ui'
	
	exports.default = function () {
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(_2.default, {
	      label: 'Save',
	      primary: true,
	      icon: 'glyphicon-floppy-save',
	      type: 'submit'
	    }),
	    _react2.default.createElement(_2.default, {
	      label: 'Pending',
	      pending: true,
	      onClick: function onClick() {
	        return alert('do something');
	      }
	    }),
	    _react2.default.createElement(_2.default, {
	      label: 'Disabled',
	      disabled: true,
	      onClick: function onClick() {
	        return alert('do something');
	      }
	    })
	  );
	};

/***/ },
/* 772 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Button = __webpack_require__(773);
	
	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Button2.default;

/***/ },
/* 773 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(748);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	__webpack_require__(774);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Styled Button
	 */
	var Button = function Button(props) {
	  var classes = (0, _classnames2.default)('btn', 'btn-default', props.className, {
	    'pending': props.pending,
	    'btn-primary': props.primary
	  });
	
	  return _react2.default.createElement(
	    'button',
	    {
	      name: props.name,
	      onClick: props.onClick,
	      className: classes,
	      disabled: props.disabled,
	      type: props.type ? props.type : 'button'
	    },
	    _react2.default.createElement('i', { className: (0, _classnames2.default)('glyphicon', props.icon) }),
	    ' ',
	    props.label || ''
	  );
	};
	
	Button.propTypes = {
	  /**
	   * Will be displayed on button, default is an empty string
	   */
	  label: _react2.default.PropTypes.string,
	  /**
	   * Function that will be triggered on click event
	   */
	  onClick: _react2.default.PropTypes.func,
	  /**
	   * Set the name of the button
	   */
	  name: _react2.default.PropTypes.string,
	  /**
	   * If true, the button will be disabled
	   */
	  disabled: _react2.default.PropTypes.bool,
	  /**
	   * If true, a spinner will be shown on the button
	   */
	  pending: _react2.default.PropTypes.bool,
	  /**
	   * Extend the button with any css classes separated by a space
	   */
	  className: _react2.default.PropTypes.string,
	  /**
	   * If true, button will be shown as primary button
	   */
	  primary: _react2.default.PropTypes.bool,
	  /**
	   * Add an icon to the button. Possible icons are defined here: http://glyphicons.bootstrapcheatsheets.com/
	   */
	  icon: _react2.default.PropTypes.string,
	  /**
	   * HTML Button type. Default is 'button'. Possible values: button|submit|reset
	   */
	  type: _react2.default.PropTypes.oneOf(['button', 'submit', 'reset'])
	};
	
	exports.default = Button;

/***/ },
/* 774 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(775);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 775 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, "button.pending i.glyphicon {\n  animation: spin 2s infinite linear; }\n\nbutton.pending i.glyphicon:before {\n  content: \"\\E031\"; }\n", ""]);
	
	// exports


/***/ },
/* 776 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport Button from './'\n// real-import:import {Button} from 'tocco-ui'\n\nexport default () => {\n  return (\n    <div>\n      {/* start example */}\n      <Button\n        label=\"Save\"\n        primary\n        icon=\"glyphicon-floppy-save\"\n        type=\"submit\"\n      />\n\n      <Button\n        label=\"Pending\"\n        pending\n        onClick={() => alert('do something')}\n      />\n\n      <Button\n        label=\"Disabled\"\n        disabled\n        onClick={() => alert('do something')}\n      />\n      {/* end example */}\n    </div>\n  )\n}\n"

/***/ },
/* 777 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport Button from '../Button'\nimport './styles.scss'\nimport _debounce from 'lodash/debounce'\n\n/**\n * SearchBox\n */\nclass SearchBox extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      inputValue: ''\n    }\n\n    this.liveSearch = _debounce(this.onSearch, props.debounce)\n  }\n\n  onChange = evt => {\n    const inputValue = evt.target.value\n    this.setState({inputValue})\n\n    if (this.props.liveSearch) {\n      if ((inputValue.length === 0 || inputValue.length >= this.props.minInputLength)) {\n        this.liveSearch()\n      }\n    }\n  }\n\n  lastSearched = ''\n  onSearch = () => {\n    const inputValue = this.state.inputValue\n    if (inputValue !== this.lastSearched) {\n      this.props.onSearch(inputValue)\n      this.lastSearched = inputValue\n    }\n  }\n\n  handleSubmit = e => {\n    e.preventDefault()\n    this.onSearch()\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"tocco-searchbox\">\n        <div className=\"input-group\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder={this.props.placeholder}\n            value={this.state.inputValue}\n            onChange={this.onChange}\n          />\n          <span className=\"input-group-btn\">\n            <Button\n              type=\"submit\"\n              icon=\"glyphicon-search\"\n            />\n          </span>\n        </div>\n      </form>\n    )\n  }\n}\n\nSearchBox.defaultProps = {\n  debounce: 200,\n  minInputLength: 3\n}\n\nSearchBox.propTypes = {\n  /**\n   * Function that will be triggered. The input value will be passed as argument.\n   */\n  onSearch: React.PropTypes.func.isRequired,\n  /**\n   * Placeholder of the input field.\n   */\n  placeholder: React.PropTypes.string,\n  /**\n   * If true, the `onSearch` function will be triggered on the fly.\n   */\n  liveSearch: React.PropTypes.bool,\n  /**\n   * Amount of milli seconds before the next search will be invoked. The default is set to `200`.\n   * Can be used to reduce the amount of search requests in the live search.\n   * This property is only considered if the `liveSearch` property is set to true.\n   */\n  debounce: React.PropTypes.number,\n  /**\n   * Amount of minimum characters before the search starts. The default is set to `3`.\n   * This property is only considered if the `liveSearch` property is set to true.\n   */\n  minInputLength: React.PropTypes.number\n}\n\nexport default SearchBox\n"

/***/ },
/* 778 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ = __webpack_require__(779);
	
	var _2 = _interopRequireDefault(_);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// real-import:import {SearchBox} from 'tocco-ui'
	
	exports.default = function () {
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(_2.default, {
	      placeholder: 'Live search...',
	      onSearch: function onSearch(value) {
	        return console.log('Searching: ' + value);
	      },
	      liveSearch: true,
	      debounce: 300,
	      minInputLength: 2
	    }),
	    _react2.default.createElement(_2.default, {
	      placeholder: 'Search...',
	      onSearch: function onSearch(value) {
	        return console.log('Searching: ' + value);
	      }
	    })
	  );
	};

/***/ },
/* 779 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _SearchBox = __webpack_require__(780);
	
	var _SearchBox2 = _interopRequireDefault(_SearchBox);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _SearchBox2.default;

/***/ },
/* 780 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(524);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(528);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(529);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(533);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(558);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Button = __webpack_require__(772);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	__webpack_require__(781);
	
	var _debounce2 = __webpack_require__(783);
	
	var _debounce3 = _interopRequireDefault(_debounce2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * SearchBox
	 */
	var SearchBox = function (_React$Component) {
	  (0, _inherits3.default)(SearchBox, _React$Component);
	
	  function SearchBox(props) {
	    (0, _classCallCheck3.default)(this, SearchBox);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, (SearchBox.__proto__ || (0, _getPrototypeOf2.default)(SearchBox)).call(this, props));
	
	    _this.onChange = function (evt) {
	      var inputValue = evt.target.value;
	      _this.setState({ inputValue: inputValue });
	
	      if (_this.props.liveSearch) {
	        if (inputValue.length === 0 || inputValue.length >= _this.props.minInputLength) {
	          _this.liveSearch();
	        }
	      }
	    };
	
	    _this.lastSearched = '';
	
	    _this.onSearch = function () {
	      var inputValue = _this.state.inputValue;
	      if (inputValue !== _this.lastSearched) {
	        _this.props.onSearch(inputValue);
	        _this.lastSearched = inputValue;
	      }
	    };
	
	    _this.handleSubmit = function (e) {
	      e.preventDefault();
	      _this.onSearch();
	    };
	
	    _this.state = {
	      inputValue: ''
	    };
	
	    _this.liveSearch = (0, _debounce3.default)(_this.onSearch, props.debounce);
	    return _this;
	  }
	
	  (0, _createClass3.default)(SearchBox, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'form',
	        { onSubmit: this.handleSubmit, className: 'tocco-searchbox' },
	        _react2.default.createElement(
	          'div',
	          { className: 'input-group' },
	          _react2.default.createElement('input', {
	            type: 'text',
	            className: 'form-control',
	            placeholder: this.props.placeholder,
	            value: this.state.inputValue,
	            onChange: this.onChange
	          }),
	          _react2.default.createElement(
	            'span',
	            { className: 'input-group-btn' },
	            _react2.default.createElement(_Button2.default, {
	              type: 'submit',
	              icon: 'glyphicon-search'
	            })
	          )
	        )
	      );
	    }
	  }]);
	  return SearchBox;
	}(_react2.default.Component);
	
	SearchBox.defaultProps = {
	  debounce: 200,
	  minInputLength: 3
	};
	
	SearchBox.propTypes = {
	  /**
	   * Function that will be triggered. The input value will be passed as argument.
	   */
	  onSearch: _react2.default.PropTypes.func.isRequired,
	  /**
	   * Placeholder of the input field.
	   */
	  placeholder: _react2.default.PropTypes.string,
	  /**
	   * If true, the `onSearch` function will be triggered on the fly.
	   */
	  liveSearch: _react2.default.PropTypes.bool,
	  /**
	   * Amount of milli seconds before the next search will be invoked. The default is set to `200`.
	   * Can be used to reduce the amount of search requests in the live search.
	   * This property is only considered if the `liveSearch` property is set to true.
	   */
	  debounce: _react2.default.PropTypes.number,
	  /**
	   * Amount of minimum characters before the search starts. The default is set to `3`.
	   * This property is only considered if the `liveSearch` property is set to true.
	   */
	  minInputLength: _react2.default.PropTypes.number
	};
	
	exports.default = SearchBox;

/***/ },
/* 781 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(782);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 782 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, "", ""]);
	
	// exports


/***/ },
/* 783 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(653),
	    now = __webpack_require__(784),
	    toNumber = __webpack_require__(785);
	
	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;
	
	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;
	
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	
	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;
	
	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }
	
	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }
	
	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        result = wait - timeSinceLastCall;
	
	    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	  }
	
	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;
	
	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }
	
	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }
	
	  function trailingEdge(time) {
	    timerId = undefined;
	
	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }
	
	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }
	
	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }
	
	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);
	
	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;
	
	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}
	
	module.exports = debounce;


/***/ },
/* 784 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(621);
	
	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};
	
	module.exports = now;


/***/ },
/* 785 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(653),
	    isSymbol = __webpack_require__(716);
	
	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;
	
	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;
	
	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	
	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;
	
	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;
	
	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;
	
	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}
	
	module.exports = toNumber;


/***/ },
/* 786 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport SearchBox from './'\n// real-import:import {SearchBox} from 'tocco-ui'\n\nexport default () => {\n  return (\n    <div>\n      {/* start example */}\n      <SearchBox\n        placeholder=\"Live search...\"\n        onSearch={value => console.log('Searching: ' + value)}\n        liveSearch\n        debounce={300}\n        minInputLength={2}\n      />\n      <SearchBox\n        placeholder=\"Search...\"\n        onSearch={value => console.log('Searching: ' + value)}\n      />\n      {/* end example */}\n    </div>\n  )\n}\n"

/***/ },
/* 787 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport './ToccoLogo.scss'\nimport classNames from 'classnames'\n\n/**\n * Shows the red circle (tocco logo) with a link to the homepage. More of an example but feel free to use.\n */\nconst ToccoLogo = props => {\n  const logo = require('./tocco.png')\n  return (\n    <a\n      className={classNames('tocco-logo ', props.className)}\n      href=\"http://www.tocco.ch\"\n      target=\"_blank\"\n      title=\"Tocco AG\"\n    >\n      <img src={logo}/>\n    </a>\n  )\n}\n\nToccoLogo.propTypes = {\n  /**\n   * Extend the logo with any css classes separated by a space\n   */\n  className: React.PropTypes.string\n}\n\nexport default ToccoLogo\n"

/***/ },
/* 788 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ = __webpack_require__(789);
	
	var _2 = _interopRequireDefault(_);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// real-import:import {ToccoLogo} from 'tocco-ui'
	
	exports.default = function () {
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(_2.default, null)
	  );
	};

/***/ },
/* 789 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _ToccoLogo = __webpack_require__(790);
	
	var _ToccoLogo2 = _interopRequireDefault(_ToccoLogo);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _ToccoLogo2.default;

/***/ },
/* 790 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	__webpack_require__(791);
	
	var _classnames = __webpack_require__(748);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Shows the red circle (tocco logo) with a link to the homepage. More of an example but feel free to use.
	 */
	var ToccoLogo = function ToccoLogo(props) {
	  var logo = __webpack_require__(793);
	  return _react2.default.createElement(
	    'a',
	    {
	      className: (0, _classnames2.default)('tocco-logo ', props.className),
	      href: 'http://www.tocco.ch',
	      target: '_blank',
	      title: 'Tocco AG'
	    },
	    _react2.default.createElement('img', { src: logo })
	  );
	};
	
	ToccoLogo.propTypes = {
	  /**
	   * Extend the logo with any css classes separated by a space
	   */
	  className: _react2.default.PropTypes.string
	};
	
	exports.default = ToccoLogo;

/***/ },
/* 791 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(792);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./ToccoLogo.scss", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./ToccoLogo.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 792 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, ".tocco-logo img {\n  cursor: pointer;\n  width: 30px;\n  height: 30px; }\n", ""]);
	
	// exports


/***/ },
/* 793 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "6aebe1d2ea92b8d44588031be8d611cd.png";

/***/ },
/* 794 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport ToccoLogo from './'\n// real-import:import {ToccoLogo} from 'tocco-ui'\n\nexport default () => {\n  return (\n    <div>\n      {/* start example */}\n      <ToccoLogo/>\n      {/* end example */}\n    </div>\n  )\n}\n"

/***/ },
/* 795 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport _debounce from 'lodash/debounce'\n\nimport Button from '../Button'\nimport './styles.scss'\n\n/**\n *  Pagination component\n */\nclass Pagination extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentPage: props.currentPage || 1,\n      totalPages: Math.ceil(props.totalRecords / props.recordsPerPage)\n    }\n\n    this.callOnPageChanged = _debounce(this.callOnPageChanged, 200)\n  }\n\n  componentWillReceiveProps = nextProps => {\n    if (this.props.totalRecords !== nextProps.totalRecords\n      || this.props.recordsPerPage !== nextProps.recordsPerPage) {\n      this.setState({\n        ...this.state,\n        totalPages: Math.ceil(nextProps.totalRecords / nextProps.recordsPerPage)\n      })\n    }\n\n    if (this.props.currentPage !== nextProps.currentPage) {\n      this.setState({\n        ...this.state,\n        currentPage: nextProps.currentPage\n      })\n    }\n  }\n\n  isOnLastPage = () => this.state.currentPage >= this.state.totalPages\n  isOnFirstPage = () => this.state.currentPage <= 1\n\n  updateCurrentPage = (val, notify = true) => {\n    this.setState({...this.state, 'currentPage': val})\n\n    if (notify) {\n      this.callOnPageChanged()\n    }\n  }\n\n  handleOneForwardClick = () => {\n    if (!this.isOnLastPage()) {\n      this.updateCurrentPage(this.state.currentPage + 1)\n    }\n  }\n\n  handleOneBackClick = () => {\n    if (!this.isOnFirstPage()) {\n      this.updateCurrentPage(this.state.currentPage - 1)\n    }\n  }\n\n  handleToLastClick = () => {\n    if (!this.isOnLastPage()) {\n      this.updateCurrentPage(this.state.totalPages)\n    }\n  }\n\n  handleToFirstClick = () => {\n    if (!this.isOnFirstPage()) {\n      this.updateCurrentPage(1)\n    }\n  }\n\n  handleInputUpdate = event => {\n    let value = parseInt(event.target.value)\n\n    if (value < 1) {\n      value = 1\n    }\n    if (value > this.state.totalPages) {\n      value = this.state.totalPages\n    }\n\n    this.updateCurrentPage(value, false)\n  }\n\n  handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      this.callOnPageChanged()\n    }\n  }\n\n  handleOnInputBlur = () => {\n    this.callOnPageChanged()\n  }\n\n  callOnPageChanged = () => {\n    if (this.props.onPageChange && !isNaN(this.state.currentPage)) {\n      this.props.onPageChange(this.state.currentPage)\n    }\n  }\n\n  render() {\n    const approximateWidth = this.state.totalPages.toString().length * 8 + 10\n    return (\n      <span className=\"tocco-pagination\">\n        <Button\n          id=\"toFirstButton\"\n          type=\"button\"\n          className=\"btn\"\n          onClick={this.handleToFirstClick}\n          disabled={this.isOnFirstPage()}\n          icon=\"glyphicon-fast-backward\"\n        />\n        <Button\n          id=\"backButton\"\n          type=\"button\"\n          className=\"btn\"\n          onClick={this.handleOneBackClick}\n          disabled={this.isOnFirstPage()}\n          icon=\"glyphicon-triangle-left\"\n        />\n        {\n          this.props.noInput\n          && <span id=\"currentPage\">{this.state.currentPage}</span>\n        }\n        {\n          !this.props.noInput\n          && <input\n            id=\"currentPage\"\n            type=\"number\"\n            min=\"1\"\n            max={this.state.totalPages}\n            onChange={this.handleInputUpdate}\n            style={{width: `${approximateWidth}px`}}\n            value={this.state.currentPage}\n            onKeyPress={this.handleKeyPress}\n            onBlur={this.handleOnInputBlur}\n\n          />\n        }\n        <span> / </span><span id=\"total\">{this.state.totalPages}</span>\n        <Button\n          id=\"forwardButton\"\n          type=\"button\"\n          onClick={this.handleOneForwardClick}\n          disabled={this.isOnLastPage()}\n          icon=\"glyphicon-triangle-right\"\n        />\n        <Button\n          id=\"toLastButton\"\n          type=\"button\"\n          onClick={this.handleToLastClick}\n          disabled={this.isOnLastPage()}\n          icon=\"glyphicon-fast-forward\"\n        />\n      </span>\n    )\n  }\n}\n\nPagination.propTypes = {\n  /**\n   * Total amount of records (is used to calculate numbers of pages)\n   */\n  totalRecords: React.PropTypes.number.isRequired,\n  /**\n   * Amount of records that are shown on one page (is used to calculate numbers of pages)\n   */\n  recordsPerPage: React.PropTypes.number.isRequired,\n  /**\n   * Get called everytime the current page changes. Given the current number as first argument.\n   */\n  onPageChange: React.PropTypes.func,\n  /**\n   * If set to false (default true) a label, instead of an input field to enter page, is displayed.\n   */\n  currentPage: React.PropTypes.number,\n  /**\n   * If set to false (default true) a label, instead of an input field to enter page, is displayed.\n   */\n  noInput: React.PropTypes.bool\n}\n\nexport default Pagination\n"

/***/ },
/* 796 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _ = __webpack_require__(797);
	
	var _2 = _interopRequireDefault(_);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// real-import:import {Pagination} from 'tocco-ui'
	
	exports.default = function () {
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(_2.default, {
	      totalRecords: 999,
	      recordsPerPage: 25,
	      noInput: false,
	      onPageChange: function onPageChange(page) {
	        console.log('Page Changed:', page);
	      }
	    })
	  );
	};

/***/ },
/* 797 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Pagination = __webpack_require__(798);
	
	var _Pagination2 = _interopRequireDefault(_Pagination);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Pagination2.default;

/***/ },
/* 798 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(799);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _getPrototypeOf = __webpack_require__(524);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(528);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(529);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(533);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(558);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _debounce2 = __webpack_require__(783);
	
	var _debounce3 = _interopRequireDefault(_debounce2);
	
	var _Button = __webpack_require__(772);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	__webpack_require__(804);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 *  Pagination component
	 */
	var Pagination = function (_React$Component) {
	  (0, _inherits3.default)(Pagination, _React$Component);
	
	  function Pagination(props) {
	    (0, _classCallCheck3.default)(this, Pagination);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, (Pagination.__proto__ || (0, _getPrototypeOf2.default)(Pagination)).call(this, props));
	
	    _this.componentWillReceiveProps = function (nextProps) {
	      if (_this.props.totalRecords !== nextProps.totalRecords || _this.props.recordsPerPage !== nextProps.recordsPerPage) {
	        _this.setState((0, _extends3.default)({}, _this.state, {
	          totalPages: Math.ceil(nextProps.totalRecords / nextProps.recordsPerPage)
	        }));
	      }
	
	      if (_this.props.currentPage !== nextProps.currentPage) {
	        _this.setState((0, _extends3.default)({}, _this.state, {
	          currentPage: nextProps.currentPage
	        }));
	      }
	    };
	
	    _this.isOnLastPage = function () {
	      return _this.state.currentPage >= _this.state.totalPages;
	    };
	
	    _this.isOnFirstPage = function () {
	      return _this.state.currentPage <= 1;
	    };
	
	    _this.updateCurrentPage = function (val) {
	      var notify = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	      _this.setState((0, _extends3.default)({}, _this.state, { 'currentPage': val }));
	
	      if (notify) {
	        _this.callOnPageChanged();
	      }
	    };
	
	    _this.handleOneForwardClick = function () {
	      if (!_this.isOnLastPage()) {
	        _this.updateCurrentPage(_this.state.currentPage + 1);
	      }
	    };
	
	    _this.handleOneBackClick = function () {
	      if (!_this.isOnFirstPage()) {
	        _this.updateCurrentPage(_this.state.currentPage - 1);
	      }
	    };
	
	    _this.handleToLastClick = function () {
	      if (!_this.isOnLastPage()) {
	        _this.updateCurrentPage(_this.state.totalPages);
	      }
	    };
	
	    _this.handleToFirstClick = function () {
	      if (!_this.isOnFirstPage()) {
	        _this.updateCurrentPage(1);
	      }
	    };
	
	    _this.handleInputUpdate = function (event) {
	      var value = parseInt(event.target.value);
	
	      if (value < 1) {
	        value = 1;
	      }
	      if (value > _this.state.totalPages) {
	        value = _this.state.totalPages;
	      }
	
	      _this.updateCurrentPage(value, false);
	    };
	
	    _this.handleKeyPress = function (e) {
	      if (e.key === 'Enter') {
	        _this.callOnPageChanged();
	      }
	    };
	
	    _this.handleOnInputBlur = function () {
	      _this.callOnPageChanged();
	    };
	
	    _this.callOnPageChanged = function () {
	      if (_this.props.onPageChange && !isNaN(_this.state.currentPage)) {
	        _this.props.onPageChange(_this.state.currentPage);
	      }
	    };
	
	    _this.state = {
	      currentPage: props.currentPage || 1,
	      totalPages: Math.ceil(props.totalRecords / props.recordsPerPage)
	    };
	
	    _this.callOnPageChanged = (0, _debounce3.default)(_this.callOnPageChanged, 200);
	    return _this;
	  }
	
	  (0, _createClass3.default)(Pagination, [{
	    key: 'render',
	    value: function render() {
	      var approximateWidth = this.state.totalPages.toString().length * 8 + 10;
	      return _react2.default.createElement(
	        'span',
	        { className: 'tocco-pagination' },
	        _react2.default.createElement(_Button2.default, {
	          id: 'toFirstButton',
	          type: 'button',
	          className: 'btn',
	          onClick: this.handleToFirstClick,
	          disabled: this.isOnFirstPage(),
	          icon: 'glyphicon-fast-backward'
	        }),
	        _react2.default.createElement(_Button2.default, {
	          id: 'backButton',
	          type: 'button',
	          className: 'btn',
	          onClick: this.handleOneBackClick,
	          disabled: this.isOnFirstPage(),
	          icon: 'glyphicon-triangle-left'
	        }),
	        this.props.noInput && _react2.default.createElement(
	          'span',
	          { id: 'currentPage' },
	          this.state.currentPage
	        ),
	        !this.props.noInput && _react2.default.createElement('input', {
	          id: 'currentPage',
	          type: 'number',
	          min: '1',
	          max: this.state.totalPages,
	          onChange: this.handleInputUpdate,
	          style: { width: approximateWidth + 'px' },
	          value: this.state.currentPage,
	          onKeyPress: this.handleKeyPress,
	          onBlur: this.handleOnInputBlur
	
	        }),
	        _react2.default.createElement(
	          'span',
	          null,
	          ' / '
	        ),
	        _react2.default.createElement(
	          'span',
	          { id: 'total' },
	          this.state.totalPages
	        ),
	        _react2.default.createElement(_Button2.default, {
	          id: 'forwardButton',
	          type: 'button',
	          onClick: this.handleOneForwardClick,
	          disabled: this.isOnLastPage(),
	          icon: 'glyphicon-triangle-right'
	        }),
	        _react2.default.createElement(_Button2.default, {
	          id: 'toLastButton',
	          type: 'button',
	          onClick: this.handleToLastClick,
	          disabled: this.isOnLastPage(),
	          icon: 'glyphicon-fast-forward'
	        })
	      );
	    }
	  }]);
	  return Pagination;
	}(_react2.default.Component);
	
	Pagination.propTypes = {
	  /**
	   * Total amount of records (is used to calculate numbers of pages)
	   */
	  totalRecords: _react2.default.PropTypes.number.isRequired,
	  /**
	   * Amount of records that are shown on one page (is used to calculate numbers of pages)
	   */
	  recordsPerPage: _react2.default.PropTypes.number.isRequired,
	  /**
	   * Get called everytime the current page changes. Given the current number as first argument.
	   */
	  onPageChange: _react2.default.PropTypes.func,
	  /**
	   * If set to false (default true) a label, instead of an input field to enter page, is displayed.
	   */
	  currentPage: _react2.default.PropTypes.number,
	  /**
	   * If set to false (default true) a label, instead of an input field to enter page, is displayed.
	   */
	  noInput: _react2.default.PropTypes.bool
	};
	
	exports.default = Pagination;

/***/ },
/* 799 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _assign = __webpack_require__(800);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};

/***/ },
/* 800 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(801), __esModule: true };

/***/ },
/* 801 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(802);
	module.exports = __webpack_require__(481).Object.assign;

/***/ },
/* 802 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(479);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(803)});

/***/ },
/* 803 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(500)
	  , gOPS     = __webpack_require__(549)
	  , pIE      = __webpack_require__(550)
	  , toObject = __webpack_require__(516)
	  , IObject  = __webpack_require__(503)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(490)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 804 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(805);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(272)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss", function() {
				var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js!./styles.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 805 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(271)();
	// imports
	
	
	// module
	exports.push([module.id, ".tocco-pagination .total {\n  font-style: italic;\n  padding-right: 8px; }\n\n.tocco-pagination button {\n  background-color: white;\n  border-color: grey;\n  margin-left: 2px; }\n\n.tocco-pagination #currentPage {\n  margin-left: 4px; }\n\n.tocco-pagination input[type='number'] {\n  -moz-appearance: textfield; }\n\n.tocco-pagination input::-webkit-outer-spin-button,\n.tocco-pagination input::-webkit-inner-spin-button {\n  -webkit-appearance: none; }\n", ""]);
	
	// exports


/***/ },
/* 806 */
/***/ function(module, exports) {

	module.exports = "import React from 'react'\nimport Pagination from './'\n// real-import:import {Pagination} from 'tocco-ui'\n\nexport default () => {\n  return (\n    <div>\n      {/* start example */}\n      <Pagination\n        totalRecords={999}\n        recordsPerPage={25}\n        noInput={false}\n        onPageChange={page => { console.log('Page Changed:', page) }}\n        />\n      {/* end example */}\n    </div>\n  )\n}\n"

/***/ }
/******/ ])
});
;
//# sourceMappingURL=index.js.map